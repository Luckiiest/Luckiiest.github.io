<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haodex Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="https://github.com/haodex/haodex.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/haodex/haodex.github.io.git/"/>
  <updated>2021-12-26T10:56:50.464Z</updated>
  <id>https://github.com/haodex/haodex.github.io.git/</id>
  
  <author>
    <name>Haodex</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/12/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/12/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-12-25T06:04:10.000Z</published>
    <updated>2021-12-26T10:56:50.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><ul><li>什么是设计模式，原则</li><li>设计模式详解</li><li><code>UML</code>，贪吃蛇</li></ul><h2 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h2><ul><li><p>设计模式（Design Pattern）是一套被反复使用、多数人只晓得、经过分类的、代码设计经验的总结</p></li><li><p><strong>模式是什么？</strong></p><ul><li>模式-模式是指从生产经验和生活经验中经过抽象和升华提炼出来的核心知识体系。模式（Pattern）其实就是解决某一类问题的方法论</li></ul></li><li><p><strong>设计模式的目的</strong></p><ul><li>使用设计模式的目的：为了代码的可重用性、让代码更容易被他人理解、保证代码可靠性。设计模式使代码编写真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样</li></ul></li><li><p>没有套路做事情没效率，很笨拙，重用性太小，情况再复杂的时候难度就很大，有了套路更容易地解决一些复杂的问题，让开发变得更加的高效</p></li></ul><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><h3 id="创建型-研究搞高效的创建对象"><a href="#创建型-研究搞高效的创建对象" class="headerlink" title="创建型-研究搞高效的创建对象"></a>创建型-研究搞高效的创建对象</h3><ul><li>单例模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>工厂模式</li><li>原型模式</li></ul><h3 id="结构型模式-设计对象的结构和关系"><a href="#结构型模式-设计对象的结构和关系" class="headerlink" title="结构型模式-设计对象的结构和关系"></a>结构型模式-设计对象的结构和关系</h3><ul><li>适配器模式</li><li>桥接模式</li><li>装饰模式</li><li>组合模式</li><li>外观模式</li><li>亨元模式</li><li>代理模式</li></ul><h3 id="行为型模式-设计对象的行为"><a href="#行为型模式-设计对象的行为" class="headerlink" title="行为型模式-设计对象的行为"></a>行为型模式-设计对象的行为</h3><ul><li>模板方式模式</li><li>命令模式</li><li>迭代器模式</li><li>观察者模式</li><li>中介者模式</li><li>备忘录模式</li><li>解释器模式</li><li>状态模式</li><li>策略模式</li><li>职责链模式</li><li>访问者模式</li></ul><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><ul><li><p>减少耦合，增强复用性，降低代码的开发维护拓展成本</p></li><li><p>耦合关系是指某两个事物之间如果存在一种相互作用、相互影响的关系，那么这种关系就称“耦合关系”。</p></li><li><p>耦合度和复杂度的危害：</p><ul><li>复杂度：高，代码质量不高，可维护性差，复用性差，不宜拓展。</li><li>耦合度：无 不可能，低 合理，过高不容易维护，单复用性和拓展性是好的</li></ul></li><li><p>开发时的流程</p><ul><li>优先降低复杂度</li><li>1、利用单一职责原则，开闭原则，里氏代换原则降低复杂度</li><li>2、通过迪米特法则减少耦合</li><li>3、通过依赖倒置原则消除可以没有的耦合</li></ul></li></ul><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><ul><li>单一职责原则（<strong>single Responsibility principle</strong>）<ul><li>一个方法只做一件事情，请求数据的函数你就不要渲染数据了，吃饭上厕所不要用同一个地方</li></ul></li></ul><p>没有使用单一原则：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没有使用设计模式单一原则时：多种功能混杂在一起，阅读起来非常困难，复杂度很高，代码重复度很高</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">View</span>(<span class="params">url, data, dom</span>) </span>&#123;</span><br><span class="line"><span class="comment">//如果缓存中有数，那么渲染缓存中的数据</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;list&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;list&#x27;</span>));</span><br><span class="line">        <span class="keyword">var</span> htmlStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele, index</span>) </span>&#123;</span><br><span class="line">            htmlStr += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + ele.name + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        dom.innerhTML = htmlStr;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//获取数据功能</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">data</span>: data,</span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> arr = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line">                <span class="comment">// 缓存数据功能</span></span><br><span class="line">                <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;list&quot;</span>,json);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 渲染数据功能</span></span><br><span class="line">                <span class="keyword">var</span> htmlStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele, index</span>) </span>&#123;</span><br><span class="line">                    htmlStr += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + ele.name + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">                dom.innerhTML = htmlStr;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">View(<span class="string">&quot;xxx&quot;</span>,<span class="string">&#x27;page=1&#x27;</span>,ul)</span><br></pre></td></tr></table></figure><p>使用了单一职责原则：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用了设计模式单一原则时：复杂度降低了，耦合度稍微提高了，函数可重复使用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetData</span>(<span class="params">callbackArr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.getData = <span class="function"><span class="keyword">function</span> (<span class="params">url, param</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">data</span>: param,</span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123;</span><br><span class="line">                callbackArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele, index</span>) </span>&#123;</span><br><span class="line">                    ele.do(json);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> oG = <span class="keyword">new</span> GetData([oR, oC]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据渲染</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Render</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.do = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> htmlStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele, index</span>) </span>&#123;</span><br><span class="line">            htmlStr += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + ele.name + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        dom.innerHTML = htmlStr;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> oR = <span class="keyword">new</span> Render(ul);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CacheData</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.do = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 缓存数据</span></span><br><span class="line">        <span class="built_in">localStorage</span>.setItem(type, data);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取缓存中的数据</span></span><br><span class="line">    <span class="built_in">this</span>.returnCacheData = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">localStorage</span>.getItem(type);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> oC = <span class="keyword">new</span> CacheData(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 离线缓存，如果是离线的情况下，直接取缓存数据，并且点击按钮也不通过网络获取数据</span></span><br><span class="line"><span class="comment">// 不离线，通过缓存获取数据，点击按钮通过网络获取</span></span><br><span class="line"><span class="keyword">if</span> (oC.returnCacheData()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!navigator.onLine) &#123;</span><br><span class="line">        oG.getData();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        oR.do(oC.returnCacheData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    oG.getData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    oG.getData(<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;page=2&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="开闭原则-OCP"><a href="#开闭原则-OCP" class="headerlink" title="开闭原则 OCP"></a>开闭原则 OCP</h3><ul><li>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭</li><li>面向拓展开放，面向修改关闭 <code>jquery extend</code>，同时增强代码复用性</li></ul><h3 id="里氏代换原则-L-substitution-Principle"><a href="#里氏代换原则-L-substitution-Principle" class="headerlink" title="里氏代换原则 L substitution Principle"></a>里氏代换原则 L substitution Principle</h3><ul><li>任何基类可以出现的地方，子类一定可以出现。通俗的来讲就是：子类可以拓展父类的功能，但不能改变父类原有的功能。</li><li>一个宴会邀请父亲去，父亲去不了儿子去</li><li>一个父类可以访问的接口，父类忙着其他事情，子类可以去访问。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类Rectangle</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.width = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setWidth = <span class="function"><span class="keyword">function</span> (<span class="params">width</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.setHeight = <span class="function"><span class="keyword">function</span> (<span class="params">height</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.getWidth  = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.getHeight  = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类Square</span></span><br><span class="line">Square.prototype = <span class="keyword">new</span> Rectangle();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setWidth = <span class="function"><span class="keyword">function</span> (<span class="params">width</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.setHeight = <span class="function"><span class="keyword">function</span> (<span class="params">height</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setWidth(height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oR = <span class="keyword">new</span> Rectangle();</span><br><span class="line">oR.setWidth(<span class="number">200</span>);</span><br><span class="line">oR.setHeight(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oS = <span class="keyword">new</span> Square();</span><br><span class="line">oS.setWidth(<span class="number">200</span>);</span><br><span class="line">oS.setHeight(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Resize</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(o.getHeight() &lt;= o.getWidth())&#123;</span><br><span class="line">        o.setHeight(o.getWidth() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;over&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Resize(oR);</span><br><span class="line"><span class="comment">// Resize(oS); 死循环,当oS改变高或高时时，都会调用了this.SetWidth()或this.SetHeight()方法，然而就会将宽高值给设置成一样的，循环永远跳不出来，所以大部分情况下要遵循里氏代换原则，不可以私自更改父类的方法</span></span><br></pre></td></tr></table></figure><h3 id="迪米特法则（最小知道原则）-LD"><a href="#迪米特法则（最小知道原则）-LD" class="headerlink" title="迪米特法则（最小知道原则） LD"></a>迪米特法则（最小知道原则） LD</h3><ul><li>一个接口和一个方法，传入的参数越少越好。降低耦合度的同时也会让复杂程度降低</li><li>谍战片中间谍，两个同一伙间谍互相不知道，为什么要这样呢？</li><li>为了最大程度较少伤害，死只死一条线上的人</li><li>形成的关联越少越好，依赖最少</li></ul><h3 id="依赖倒置原则-DIP"><a href="#依赖倒置原则-DIP" class="headerlink" title="依赖倒置原则 DIP"></a>依赖倒置原则 DIP</h3><ul><li>最常见的原则，依赖接口，不依赖方法，底层的东西不用了解，我们只需知道表现就可以，降低耦合度</li><li>前端应用中可以理解成多者之间依赖状态，而不依赖彼此</li><li><code>Js</code>中没有接口的概念</li></ul><h3 id="接口分离原则-ISP"><a href="#接口分离原则-ISP" class="headerlink" title="接口分离原则 ISP"></a>接口分离原则 ISP</h3><ul><li>把大接口拆分小接口，不能一个接口全部实现增删改查</li><li>比如写作业，要细分成，写数学、英语、语文等作业，同时降低耦合度</li></ul><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><ul><li>代码是一团乱码，先靠单一、开闭、里氏给他分成很多块，最小知道让他们变得弱化，最后需要依赖倒置把没有必要的耦合给它消除了</li><li>代码质量的高低是素质，学会权衡才是高价值的开发经验</li><li>先原则，在模式<ul><li>原则是理论，模式是在理论上的具体方式，希望并建议考试100分，但都是理论具体还需要落实再实际方式方法上，但不可以追求，其中有时间成本，用更多的时间去玩还能保证不低的分数也是可以的</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;什么是设计模式，原则&lt;/li&gt;
&lt;li&gt;设计模式详解&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UML&lt;/code&gt;，贪吃蛇</summary>
      
    
    
    
    <category term="设计模式" scheme="https://github.com/haodex/haodex.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://github.com/haodex/haodex.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>HTML &amp; CSS</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/11/11/HTML%20&amp;%20CSS/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/11/11/HTML%20&amp;%20CSS/</id>
    <published>2021-11-11T10:35:05.000Z</published>
    <updated>2021-11-11T10:37:33.315Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一部分-HTML"><a href="#第一部分-HTML" class="headerlink" title="第一部分 HTML"></a>第一部分 HTML</h3><hr><h4 id="第一章-职业规划和前景"><a href="#第一章-职业规划和前景" class="headerlink" title="第一章 职业规划和前景"></a>第一章 职业规划和前景</h4><hr><ul><li><p><strong>职业方向规划定位：</strong></p></li><li><p><code>web</code>前端开发工程师</p><ul><li><code>web</code>网站架构师</li><li>自己创业</li><li>转岗管理或其他<span id="more"></span></li></ul></li><li><p><strong><code>web</code>前端开发的前景展望：</strong></p><ul><li>未来<code>IT</code>行业企业需求最多的人才</li><li>结合最新的<code>html5</code>抢占移动端的市场</li><li>自己创业做老板</li><li>随着互联网的普及<code>web</code>开发成为企业的宠儿和核心</li></ul></li><li><p> <strong><code>web</code>职业发展目标：</strong></p></li><li><p>第一、梳理知识架构</p><ul><li>负责内容的<code>HTML</code></li><li>负责外观的<code>css</code>（层叠样式表）</li><li>负责行为的<code>js</code></li><li><code>ps</code>切图</li></ul></li><li><p>第二、分解目标（起步阶段、提升阶段、成型阶段）</p><ul><li><p>起步阶段：</p><ul><li>基本知识的掌握</li><li>常用工具的掌握</li><li>沟通技巧的掌握（围绕客户的需求）</li><li>良好的开发习惯（加注释、对齐方式）</li></ul></li><li><p>提升阶段：</p><ul><li>熟悉掌握<code>HTML</code>基本标签和属性</li><li>熟练掌握<code>css</code>的基本语法和使用</li><li>浏览器兼容和w3c标准的掌握</li><li>结合<code>html</code>+<code>css</code>+<code>js</code>开始系统项目的开发</li></ul></li><li><p>成型阶段：</p><ul><li>精通<code>DIV</code>+<code>CCS</code>布局</li><li>精通<code>css</code>样式表控制<code>html</code>标签</li><li>熟悉运用<code>js</code>制作动态网站的效果</li><li>能独立开发完成网站</li></ul></li></ul></li></ul><hr><h4 id="第二章-html基本结构"><a href="#第二章-html基本结构" class="headerlink" title="第二章 html基本结构"></a>第二章 html基本结构</h4><hr><ul><li><p>认识HTML：</p><ul><li><code>html</code>不是一种编程语言，是一种标志语言</li><li>标记语言是由一套标识标签组成的</li><li><code>html</code>使用标签来描述网页</li></ul></li><li><p><code>html</code>结构：</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/main.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 逻辑代码 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 逻辑代码底部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery/jquery-2.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;head&gt;</code>中添加信息</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;smile@kang.cool&quot;</span>&gt;</span>------作者</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>------网页描述</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;a,b,c&quot;</span>&gt;</span>------关键字,“，”分隔</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Wed, 26 Feb 1997 08：21：57 GMT&quot;</span>&gt;</span>------设定网页的到期时间。一旦网页过期，必须到服务器上重新调阅</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Pragma&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span>------禁止浏览器从本地机的缓存中调阅页面内容</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Window-target&quot;</span> <span class="attr">content</span>=<span class="string">&quot;_top&quot;</span>&gt;</span>------用来防止别人在框架里调用你的页面</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5;URL=http://kahn1990.com/&quot;</span>&gt;</span>------跳转页面，5指时间停留5秒 网页搜索机器人向导。用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;none&quot;</span>&gt;</span>------content的参数有all,none,index,noindex,follow,nofollow，默认是all</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;Shortcut Icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span>&gt;</span>------收藏图标</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache, must-revalidate&quot;</span>&gt;</span>------网页不会被缓存</span><br></pre></td></tr></table></figure><ul><li><p>不成对出现的标签<br><code>&lt;br&gt;</code> <code>&lt;hr&gt;</code>  <code>&lt;meta&gt;</code> <code>&lt;img&gt;</code>  <code>&lt;input..&gt;</code>  <code>&lt;option..&gt;</code>  <code>&lt;link&gt;</code></p></li><li><p>特殊符号：</p><ul><li><code>&amp;nbsp</code>; —-&gt;空格</li><li><code>&amp;gt</code>; —&gt;大于号</li><li><code>&amp;lt</code>；—&lt;小于号</li><li><code>&amp;quot</code>；—&gt;引号</li><li><code>&amp;copy</code>;–&gt;版权号</li></ul></li></ul><hr><h4 id="第三章-html基本标签"><a href="#第三章-html基本标签" class="headerlink" title="第三章 html基本标签"></a>第三章 html基本标签</h4><hr><ul><li><p><code>&lt;html&gt;</code> <code>&lt;head&gt;</code> <code>&lt;body&gt;</code>标签</p></li><li><p><code>&lt;h1&gt;&lt;/h1</code>—-<code>&lt;h6&gt;&lt;/h6&gt;</code>标题，<em>不要为了产生粗体文本使用它们</em></p></li><li><p><code>&lt;p&gt;</code>标签  段落标签</p></li><li><p><code>&lt;strong&gt;&lt;b&gt;</code>标签</p><ul><li>都会让文字产生加粗效果<ul><li><code>&lt;strong&gt;</code>用于强调文本，强度更深，表示重要文本—&gt;用于<code>SEO</code>优化</li></ul></li><li><code>&lt;b&gt;</code>只是视觉加粗效果—&gt;单纯为了产生加粗</li></ul></li><li><p><code>&lt;em&gt;</code> <code>&lt;i&gt;</code>标签</p><ul><li><code>em</code>用于强调文本</li><li><code>i</code>只是视觉斜体效果</li></ul></li><li><p><code>&lt;strong&gt;</code>比<code>&lt;em&gt;</code>强调更强</p></li><li><p><code>span</code>标签</p><ul><li>对被用来组合文档中的行内元素</li><li>注意：span没有固定的格式表现，当对它应用样式时，才会产生视觉上的变化</li></ul></li><li><p><code>&lt;pre&gt;</code>标签</p></li><li><p>文字的格式按源码的排版来显示，我们称之为预处理格式</p></li><li><p><code>&lt;a&gt;</code>标签—&gt;他有一个必不可少的属性 href</p><ul><li><code>target</code>属性：</li><li><code>_self</code>(在原来页面打开)</li><li><code> _blank</code>（新窗口打开）</li><li><code>_top</code>（打开时忽略所有的框架）</li><li> <code>_parent</code>（在父窗口中打开）</li></ul></li><li><p>创建锚点和锚链接</p><ul><li>锚点也是一种超链接，是页面内进行跳转的超链接<pre><code>- 第一步：创建锚点 `&lt;a name=&quot;锚点名称&quot;&gt;&lt;/a&gt;`- 第二步：使用创建好的锚点名称 `&lt;a href=&quot;#锚点名称&quot;&gt;内容&lt;/a&gt;`</code></pre></li></ul></li><li><p><code>marquee</code>标签</p><ul><li>可以创建一个内容滚动效果<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">direction</span>=<span class="string">&quot;down&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;4&quot;</span> <span class="attr">onmouseover</span>=<span class="string">this.stop()</span> <span class="attr">onmouseout</span>=<span class="string">this.start()</span>&gt;</span><span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>direction</code> 表示滚动方向，取值有（left,right,up,down,默认left）</li><li><code>loop </code>表示滚动循环的次数，默认为无限循环</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onmouseover=<span class="built_in">this</span>.stop()  onmouseover=<span class="built_in">this</span>.start()  scrollamout=<span class="string">&quot;1&quot;</span>(滚动速度)</span><br></pre></td></tr></table></figure></li><li><p>表示当鼠标移上区域的时候停止滚动，鼠标移开继续滚动</p></li></ul><hr><h4 id="第四章-img图片标签与路径"><a href="#第四章-img图片标签与路径" class="headerlink" title="第四章 img图片标签与路径"></a>第四章 img图片标签与路径</h4><hr><ul><li><p>图片标签与路径：</p><ul><li>常见图片格式 <code>jpg</code> <code>png</code> <code>gif</code></li><li><code>Gif</code>     （只支持全透明）</li><li><code>Jpeg</code> /<code>jpg</code></li><li><code>Png</code> 半/全透明都支持</li></ul></li><li><p>图片标签写法 ：</p><ul><li><code>&lt;img src=&quot;&quot; alt=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;</code></li></ul></li><li><p>图片四要素：</p><ul><li><code>src=&quot;&quot;</code>        图片路径</li><li><code>alt=&quot;&quot; </code>       图片含义</li><li><code>width=&quot;&quot;</code>     图片宽度 和图片大小保持一致</li><li><code> height=&quot;&quot;</code>     图片高度 和图片大小保持一致</li><li><code>title=&quot;&quot;</code></li></ul></li><li><p>路径知识：</p><ul><li><p>相对路径、绝对路径：</p><ul><li>相对路径：(Relative Path) 相对于该文件的路径；</li><li>绝对路径：(Absolute Path) 从磁盘出发的路径；</li></ul></li><li><p><code>&lt;img src=&quot;&quot; …… align=&quot;&quot; /&gt;</code> <code>align</code>属性–设置图片与后面文字的位置关系<br>值–<code>top</code>、<code>bottom</code>、<code>middle</code>、<code>absmiddle</code>、<code>left</code>、<code>right</code></p></li></ul></li><li><p>在静态页面中：</p><ul><li><p><code>/</code>开头表示根目录；</p></li><li><p><code>./</code>表示当前目录；（斜画线前面一个点）</p></li><li><p><code>../</code>上级目录；（斜画线前面两个点）</p></li><li><p>直接用文件名不带/也表示同一目录</p></li><li><p>这些都是相对于当前文件的位置来说的，如果用绝对路径的话就是写全了。</p></li></ul></li></ul><hr><h4 id="第五章-三种列表的讲解"><a href="#第五章-三种列表的讲解" class="headerlink" title="第五章 三种列表的讲解"></a>第五章 三种列表的讲解</h4><hr><ul><li>三种列表的知识讲解：<ul><li><code>&lt;ul&gt;</code>无序列表<ul><li>无序列表是一个没有顺序项目的列表，此列表项默认粗体圆点进行标识</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">   &lt;li&gt;&lt;/li&gt;</span><br><span class="line">   &lt;li&gt;&lt;/li&gt;</span><br><span class="line">   &lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul><li><ol>有序列表  - 有序列表也是一列项目，只是列表项目使用的是数字进行标记。 有序列表始于 `<ol>` 标签。每个列表项始于 `<li> `标签。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">   &lt;li&gt;内容一&lt;/li&gt;</span><br><span class="line">   &lt;li&gt;内容二&lt;/li&gt;</span><br><span class="line">   &lt;li&gt;内容三&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><ul><li><p>列表符号</p><ul><li><p>无序列表-列表符号:</p><ul><li><code>type=&quot;circle&quot;</code>  空心圆 <code>type=“disc” </code> 实心圆  默认值 <code>type=&quot;square&quot; </code> 方块符</li></ul></li><li><p>有序列表-列表符号</p><ul><li><code>type=&quot;A&quot;</code>    A B C D</li><li><code>type=&quot;a&quot;</code>    a b c d</li><li><code>type=&quot;1&quot;</code>    1 2 3 4  默认值type=”I”    I II III type=”i”     i ii iii</li></ul></li><li><p>列表嵌套</p></li><li><p>无序列表-嵌套</p></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line"> &lt;li&gt;柚子</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">   &lt;li&gt;沙田柚&lt;/li&gt;</span><br><span class="line">   &lt;li&gt;蜜柚&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line"> &lt;/li&gt;</span><br><span class="line"> &lt;li&gt;荔枝&lt;/li&gt;</span><br><span class="line"> &lt;li&gt;苹果&lt;/li&gt;&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul><li>有序列表-嵌套</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line"> &lt;li&gt;茶</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">   &lt;li&gt;红茶&lt;/li&gt;</span><br><span class="line">   &lt;li&gt;绿茶&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line"> &lt;/li&gt;</span><br><span class="line"> &lt;li&gt;果汁&lt;/li&gt;</span><br><span class="line"> &lt;li&gt;牛奶&lt;/li&gt;&lt;/ol&gt;</span><br></pre></td></tr></table></figure><ul><li>定义列表<ul><li>定义列表不仅仅是一列项目，而是项目及其注释的组合。定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个定义列表项以 <code>&lt;dt&gt; </code>开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">     &lt;dt&gt;pc网页制作&lt;/dt&gt;</span><br><span class="line">     &lt;dd&gt;学习DIV+CSS JS JQ 项目实战&lt;/dd&gt;</span><br><span class="line">     &lt;dt&gt;手机网页制作&lt;/dt&gt;</span><br><span class="line">     &lt;dd&gt;手机网页制作实战&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>dd</code>是对<code>dt</code>的解释</p><ul><li><code>&lt; dl&gt;&lt; /dl&gt;</code>用来创建一个普通的列表,</li><li><code>&lt; dt&gt;&lt; /dt&gt;</code>用来创建列表中的上层项目，</li><li><code>&lt; dd&gt;&lt; /dd&gt;</code>用来创建列表中最下层项目，</li><li><code>&lt; dt&gt;&lt; /dt&gt;</code>和<code>&lt; dd&gt;&lt; /dd&gt;</code>都必须放在<code>&lt; dl&gt;&lt; /dl&gt;</code>标志对之间。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;中国城市&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;北京 &lt;/dd&gt;</span><br><span class="line">    &lt;dd&gt;上海 &lt;/dd&gt;</span><br><span class="line">    &lt;dd&gt;广州 &lt;/dd&gt;</span><br><span class="line">    &lt;dt&gt;美国城市&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;华盛顿 &lt;/dd&gt;</span><br><span class="line">    &lt;dd&gt;芝加哥 &lt;/dd&gt;</span><br><span class="line">    &lt;dd&gt;纽约 &lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><ul><li><code>dl</code>是d<code>efinition list</code>的缩写</li><li><code>dt</code>是<code>definition title</code>的缩写</li><li><code>dd</code>是d<code>efinition description</code>的缩写</li></ul><ul><li><code>list-style</code>属性具有三个属性分量：</li><li><code>list-style-position</code> ：设置列表项图标的位置，位于文本内或者文本外</li><li><code>list-style-type</code>： 设置列表项图标的类型</li><li><code>list-style-image </code>：使用图像设置列表项图标</li></ul><hr><h4 id="第六章-表单元素-上"><a href="#第六章-表单元素-上" class="headerlink" title="第六章 表单元素(上)"></a>第六章 表单元素(上)</h4><hr><ul><li><p>表单标签:</p><ul><li><p><code>&lt;form&gt;</code>表单标签</p><ul><li><code>&lt;form&gt;</code>表单是一个包含表单元素的区域，包括起来的都是表单的内容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line"> &lt;input type=&quot;text&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>HTML标签 - <code>Action</code>和确认按钮：</p><ul><li>当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;html.do&quot; method=&quot;get&quot;&gt;</span><br><span class="line">        username:  &lt;input type=&quot;text&quot; name=&quot;user&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提  交&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>HTML</code>标签 - 隐藏域隐藏标签：</p></li><li><p>隐藏域在页面中对于用户是不可见的，在表单中插入隐藏域的目的在于收集或发送信息，以利于被处理表单的程序所使用。浏览者单击发送按钮发送表单的时候，隐藏域的信息也被一起发送到服务器</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">     &lt;input type=&quot;hidden&quot; name=&quot;hid&quot; value=&quot;value&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;input&gt;</code>标签的掌握</p><ul><li><p>常用<code>type</code>类型：</p><ul><li><code>&lt;input type=&quot;&quot; name=&quot;&quot; value=&quot;&quot; /&gt;</code></li><li><code>type=&quot;text&quot; </code>       单行文本输入框</li><li><code>type=&quot;password&quot;</code>    密码（<code>maxlength=&quot;&quot;</code>）</li><li><code>type=&quot;radio&quot;  </code>     单项选择（<code>checked=&quot;checked&quot;</code>）</li><li><code>type=&quot;checkbox&quot; </code>   多项选择</li><li><code>type=&quot;button&quot;  </code>    按钮</li><li><code>type=&quot;submit&quot;</code>    提交 <code>type=&quot;image&quot;</code>图片提交</li><li><code>type=&quot;file&quot;</code>    上传文件</li><li><code>type=&quot;reset&quot;    </code>重置</li><li><code>type=&quot;hidden&quot;</code>    隐藏</li></ul></li></ul></li><li><p>关于表单中的设置默认值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; name=&quot;&quot; value=&quot;今天心情不错&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;&quot; value=&quot;&quot; checked=&quot;checked&quot;&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;&quot; value=&quot;&quot; checked=&quot;checked&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select name=&quot;&quot; &gt;</span><br><span class="line"> &lt;option  value=&quot;&quot;&gt;&lt;/option&gt;</span><br><span class="line"> &lt;option  value=&quot;&quot; selected=&quot;selected&quot;&gt;&lt;/option&gt;</span><br><span class="line">&lt;select&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>textarea</code>没有默认值</p></li><li><p><code>&lt;label&gt;</code>标签的使用</p><ul><li><p><code>&lt;label&gt;&lt;/label&gt;</code></p><ul><li><code>label</code> 元素不会向用户呈现任何特殊效果。</li><li>不过，它为鼠标用户改进了可用性。</li><li>如果您在 <code>label</code> 元素内点击文本，就会触发此控件。</li><li>就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</li></ul></li><li><p><code>&lt;label&gt;</code> 标签的<code> for</code> 属性应当与相关元素的 <code>id </code>属性相同。</p></li><li><p>例子：（重要—注册表单–用户体验–必做）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;单向选择&lt;/p&gt;</span><br><span class="line">&lt;label for=&quot;male&quot;&gt;男：&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;male&quot;/&gt;</span><br><span class="line">&lt;label for=&quot;nv&quot;&gt;女：&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot;checked=&quot;check&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="第七章-表单和表格-下"><a href="#第七章-表单和表格-下" class="headerlink" title="第七章 表单和表格(下)"></a>第七章 表单和表格(下)</h4><hr><ul><li><p>表单和表格标签：</p><ul><li><code>&lt;textarea&gt;</code>文本域标签</li><li><code>&lt;textarea&gt;</code>标签：</li><li><code>&lt;textarea&gt;&lt;/textarea&gt;</code>是文本域标签，可以在其中插入一段文字内容，它有两个常用属性<code>rows</code>和<code>cols</code></li></ul></li><li><p>注意：</p><ul><li><code>rows</code>表示这个文本域有多少行</li><li><code>cols</code>表示这个文本域有多少列</li></ul></li><li><p>除了这两个属性它还有<code>readonly</code>（只读，文本域的内容无法改变，相当于协议）和<code>title</code>（鼠标放上提示）</p></li><li><p><code>&lt;select&gt;</code>标签的掌握</p><ul><li>注：当提交表单时，浏览器会提交选定的项目，或者收集用逗号分隔的多个选项，将其合成一个单独的参数列表，并且在将 <code>&lt;select&gt;</code> 表单数据提交给服务器时包括 <code>name </code>属性<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;select name=&quot;&quot;  id=&quot;&quot;&gt;</span><br><span class="line">         &lt;option value=&quot;1&quot;&gt;1月&lt;/option&gt;</span><br><span class="line">          &lt;option value=&quot;2&quot;&gt;2月&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>常用到的属性：<code>disabled=“disabled”  name=&quot;sel&quot;  size=&quot;2&quot;</code></p></li></ul><ul><li><p><code>&lt;table&gt;</code>表格标签</p></li><li><p><code> &lt;table&gt;</code>表格标签：<code>&lt;table&gt;</code>是表格标签，可以用它定义一个表格。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></li><li><p>注意：<code>&lt;table&gt;</code>的<code>border</code>属性不能少</p></li></ul><ul><li><p><code>&lt;tr&gt;</code> <code>&lt;td&gt;</code>标签的使用</p><ul><li><p><code>&lt;tr&gt;</code>行标签：</p><ul><li><code>&lt;tr&gt;</code>可以定义表格中的一行，一个&lt;<code>tr&gt;&lt;/tr&gt;</code>表示一行。</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line"> &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line"> &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;td&gt;</code>单元格标签:</p><ul><li><code>&lt;td&gt;</code>可以定义表格中的一个单元格，<code>&lt;td&gt;&lt;/td&gt;</code>表示一个单元格。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td &gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">&lt;td&gt;爱好&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></li><li><code>border-collapse</code> 属性设置是否将表格边框折叠为单一边框：</li><li><code>border-collapse:collapse</code>;</li><li><code>colspan</code>左右合并</li><li><code>rowspan</code>上下合并</li></ul></li></ul><p><strong>第一部分总结</strong>：</p><ul><li><p>非可视化标签：<code>head</code>  <code>meta</code>  <code>style</code>  <code>scrpit.</code>..</p></li><li><p>可视化标签：<code>img</code>  <code>div</code> <code>span</code> <code>a</code> <code>ul</code> <code>li</code>…</p></li><li><p>只有可视化标签，才能用<code>css</code>改变它</p></li><li><p>单标签：<code>meta</code>  <code>link</code>  <code>base</code>  <code>img</code>  <code>input</code> <code>br</code> <code>hr</code></p></li><li><p>双标签：<code>html</code> <code>head</code> <code>body</code>  <code>div</code>  <code>a</code>  <code>p</code>  <code>span</code> ..<code>ul</code> <code>li</code> <code>ol</code> <code> dl</code> ….</p></li><li><p><strong>常用可视化标签</strong></p></li><li><p>** <code>div</code>**</p><pre><code>  - 一般用它来布局</code></pre><ul><li><strong>a</strong>  超链接标签<ul><li><code>href</code>*属性：设置跳转的网页地址</li><li><code>target</code>属性：设置跳转的目标</li><li>结论：凡事页面可以点击跳转或者表单提交的文字，都用<code>a</code>标签</li></ul></li><li><strong><code>img</code></strong><ul><li><code>src</code>*属性用来设置图片的url数据</li><li><code>alt</code>提供给搜索引擎搜索的</li><li><code>width</code></li><li><code>height</code></li><li>结论 ：显示图片</li></ul></li><li><strong>ul li</strong><ul><li>列表</li><li>结论：只要将来设计页面中有固定样式的列表，就用ul和li</li></ul></li><li><strong><code>table</code> <code>caption</code> <code>tr</code> <code>td (th)</code></strong><ul><li>慢慢已经被淘汰了 被ul li代替</li><li>如果是合并竖排的就是合并行（<code>rowspan</code>）</li><li>如果是合并横排的就是合并列（<code>colspan</code>）</li></ul></li></ul></li></ul><hr><p><strong>HTML部分导图总结</strong></p><hr><ul><li><a href="http://www.html5star.com/manual/html5label-meaning/">HTML5标签集合</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111641350.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111641731.png"></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111641888.jpeg"></p><hr><h3 id="第二部分-CSS"><a href="#第二部分-CSS" class="headerlink" title="第二部分 CSS"></a>第二部分 CSS</h3><hr><h4 id="第八章-css基础知识"><a href="#第八章-css基础知识" class="headerlink" title="第八章 css基础知识"></a>第八章 css基础知识</h4><hr><ul><li><p><code>css</code>基础知识：</p><ul><li><code>css</code>样式表的定义</li><li><code>css</code>：（Cascading Style Sheets）层叠样式表；</li></ul></li><li><p>分类及位置：内部样式<code>-head</code>区域<code>style</code>标签里面</p><ul><li>外部样式-<code>link</code>调用</li><li>内联样式-标签元素里面</li></ul></li><li><p><code>css</code>内的注释：/<code>*</code>注释内容<code>*</code>/</p></li><li><p><code>css</code>样式表的语法</p><ul><li><p><code>CSS</code>规则由两个主要的部分构成：要添加样式的盒子名或者标签名、和要添加的样式。</p></li><li><p>盒子名或者标签名{属性:值;}</p></li><li><p><strong>CSS中几种颜色的表示方法</strong></p><ul><li><strong>用颜色名表示</strong><ul><li>有17个预先确定的颜色，它们是<ul><li><code>aqua</code>, <code>black</code>, <code>blue</code>, <code>fuchsia</code>, <code>gray</code>, <code>green</code>, <code>lime</code>, <code>maroon</code>, <code>navy</code>,<br>　　<code>olive</code>, <code>orange,</code> <code>purple</code>, <code>red</code>, <code>silver</code>, <code>teal</code>, <code>white</code>, and <code>yellow</code></li></ul></li></ul></li></ul></li><li><p><strong>用十六进制的颜色值表示(红、绿、蓝)</strong></p><ul><li><code>#FF0000</code>或者<code>#F00 </code></li></ul></li><li><p><strong>用rgb(r,g,b)函数表示</strong></p><ul><li>如：<code>rgb(255,255,0)</code></li></ul></li><li><p><strong>用hsl(Hue,Saturation,Lightness)函数表示（色调、饱和度、亮度)</strong></p><ul><li>如：<code>hsl(120,100%,100%)</code>,色调0代表红色，<code>120</code>代表绿色，<code>240</code>代表<br>蓝色</li></ul></li><li><p>**用<code>rgba(r,g,b,a)</code>函数表示 **</p><ul><li>其中<code>a</code>表示的是改颜色的透明度，取值范围是<code>0~1</code>，其中<code>0</code>代表完全透明</li></ul></li><li><p><strong>用hsla(Hue,Saturation,Lightness,alpha)函数表示</strong></p><ul><li>色调、饱和度、亮度、透明度</li></ul></li><li><p>例子</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute;top:0px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:gray;&quot;</span>&gt;</span>background-color:gray<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#F00;&quot;</span>&gt;</span>background-color:#F00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#ffff00;&quot;</span>&gt;</span>background-color:#ffff00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:rgb(255,0,255);&quot;</span>&gt;</span>background-color:rgb(255,0,255)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:hsl(120,80%,50%);&quot;</span>&gt;</span>background-color:hsl(120,80%,50%)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:rgba(255,0,255,0.5);&quot;</span>&gt;</span>background-color:rgba(255,0,255,0.5)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:hsla(120,80%,50%,0.5);&quot;</span>&gt;</span>background-color:hsla(120,80%,50%,0.5)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111642323.png"></p><ul><li>内部样式表<ul><li>当单个页面需要设置样式时，就应该使用内部样式表。</li><li>使用 <code>&lt;style&gt;&lt;/style&gt;</code>标签在文档<code>&lt;head&gt;&lt;/head&gt;</code>里面定义内部样式表</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line"> &lt;style type=&quot;text/css&quot; &gt;</span><br><span class="line">  p&#123;color:red;&#125;</span><br><span class="line"> &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><ul><li><p>从外部引入到样式分为两种：（注意写在<code>head</code>标签里面）</p></li><li><p>当样式需要应用于很多页面时，就需要用到外部样式表，首先需要创建一个<code>css</code>文件，然后引用到我们的页面中。</p></li><li><p><code>Link</code>样式表式：  <code>&lt;link rel=”stylesheet” type=”text/css” href=”my.css”(href表示路径)&gt;  </code></p></li><li><p><code>Html</code>式：  <code>&lt;style type=&quot;text/css&quot;&gt;@import url(&quot;css.css&quot;);&gt;&lt;/style&gt; </code></p></li></ul><ul><li><p>内联样式表（优先级高）</p><ul><li><p>写在标签里面的样式</p></li><li><p>如：<code>&lt;p style=&quot;color:red;&quot;&gt;&lt;/p&gt;</code></p></li></ul></li><li><p>表示给<code>p</code>标签里面的文字颜色设置为红色</p></li><li><p>区别：外链样式与导入样式</p><ul><li><p><code>link</code>标签是属于<code>xhtml</code>范畴，而<code>@import</code>则是<code>css2.1</code>中特有的。<code>link</code>标签除了可以加载<code>CSS</code>外，还可以做很多其它的事情，比如定义<code>RSS</code>，定义<code>rel</code>连接属性等，<code>@import</code>就只能加载<code>CSS</code>了。</p></li><li><p>加载的顺序的区别，<code>link</code>加载的<code>css</code>时，是一种并行(没有尝试是否是这样)加载<code>CSS</code>方式，而<code>@impor</code>则在整个页面加载完成后才加载。</p></li><li><p>兼容性的区别，因<code>@import``CSS2.1</code>才特有的，所以对于不兼容<code>CSS2.1</code>的浏览器来说，无效。</p></li><li><p>在样式控制上(比如动态改变网页的布局时,使用<code>javascript</code>操作<code>DOM</code>)的区别，此时<code>@import</code>就无能为力了。</p></li></ul></li></ul><hr><ul><li><p><strong>样式的优先级补充</strong></p><ul><li>相同权值情况下，<code>CSS</code>样式的优先级总结来说，就是——就近原则（离被设置元素越近优先级别越高）：<ul><li><code>内联样式表（标签内部）</code> &gt; <code>嵌入样式表（当前文件中）</code>&gt; <code>外部样式表（外部文件中）</code></li></ul></li></ul></li><li><p>权值不同时，浏览器是根据权值来判断使用哪种<code>css</code>样式的，哪种样式权值高就使用哪种样式</p></li><li><p>层叠优先级是:</p></li><li><p> <code>浏览器缺省</code>&lt; <code>外部样式表</code> &lt; <code>内部样式表</code> &lt; <code>内联样式</code></p></li><li><p>其中样式表又有:<code>类选择器</code> &lt; <code>类派生选择器 </code>&lt;<code> ID选择器</code> &lt; <code>ID派生选择器</code></p></li><li><p>派生选择器以前叫上下文选择器，所以完整的层叠优先级是:</p></li><li><p><code>浏览器缺省</code> &lt;<code> 外部样式表</code> &lt; <code>外部样式表类选择器</code> &lt; <code>外部样式表类派生选择器 </code>&lt; <code>外部样式表ID选择器</code> &lt; <code>外部样式表ID派生选择器 </code>&lt; <code>内部样式表</code> &lt; <code>内部样式表类选择器</code> &lt; <code>内部样式表类派生选择器</code> &lt; <code>内部样式表ID选择器</code> &lt; <code>内部样式表ID派生选择器</code> &lt; <code>内联样式</code>…共<code>12</code>个优先级</p></li><li><p>另外，如果同一个元素在没有其他样式的作用影响下，其<code>Class</code>定义了多个并以空格分开，其优先级顺序为：</p></li><li><p>一个元素同时应用多个<code>class</code>，后定义的优先（即近者优先），加上<code>!important</code>者最优先！</p></li><li><p>选择器权重</p><table><thead><tr><th>选择器</th><th>权重值</th></tr></thead><tbody><tr><td>!important</td><td>infinity（正无穷）</td></tr><tr><td>行间样式</td><td>1000</td></tr><tr><td>id选择器</td><td>100</td></tr><tr><td>class、属性、伪类选择器</td><td>10</td></tr><tr><td>标签选择器、伪元素选择器</td><td>1</td></tr><tr><td>通配符选择器</td><td>0</td></tr></tbody></table></li></ul><hr><h4 id="第九章-css选择器-上"><a href="#第九章-css选择器-上" class="headerlink" title="第九章 css选择器(上)"></a>第九章 css选择器(上)</h4><p><strong>什么是选择器：css选择器就是要改变样式的对象</strong></p><ul><li><p><code>class</code>选择器：</p><ul><li><code>class</code>类选择器可以重复利用</li><li>选择<code>class</code>命名的元素 以 <code>.</code> 开头   <code>.p1&#123;color:#0f0;&#125;</code> <code>id</code>选择器唯一</li></ul></li><li><p>属性选择器</p><ul><li><code>&#123;属性:值;属性:值;&#125;</code></li><li>例：<code>[name=&#39;value&#39;]&#123;color:red&#125;</code></li></ul></li><li><p>标签选择器</p><ul><li>页面中所有的标签都是一个选择器  如：<code>p&#123;color:red;&#125;</code></li></ul></li><li><p>通配符选择器 <code>*</code></p><ul><li>选择全部的元素 以 <code>*</code> 开头，如: <code>*&#123;color:#0f0;&#125;</code></li></ul></li><li><p><code>ID</code>选择器</p><ul><li>选择<code>id</code>命名的元素 以 <code>#</code> 开头   <code>#p1&#123;color:#0f0;&#125;</code></li></ul></li><li><p>类选择器</p><ul><li><code>class</code>选择器，选择<code>clas</code>命名的元素 以<code>.</code>开头  <code>.first&#123;color:#00f;&#125;</code></li></ul></li><li><p>群组选择器</p><ul><li>选择多个元素,以逗号隔开 <code>#main,.first,span,a,h1&#123;color:red;&#125;</code></li></ul></li><li><p>包含选择器</p><ul><li>选择某元素的后代元素，也称后代选择器，父类与子类间以空格隔开<code>p</code><ul><li><code>span&#123;color:red;&#125;</code></li></ul></li></ul></li><li><p>属性选择器</p><ul><li>选择包含某一属性的元素</li><li><code>a[title]&#123;color:red;&#125;</code>  选择包含<code>title</code>的<code>a</code>标签</li><li><code>a[title][href]&#123;color:red;&#125;</code> 选择包含<code>title</code>和<code>href</code>的<code>a</code>标签</li></ul></li><li><p><code>&gt; </code> <code>+</code> 选择器子类选择器：只选择子元素（只选择儿子）（相当于包含元素）</p><ul><li><code>p &gt; span&#123;color:red;&#125;</code></li></ul></li><li><p>相邻兄弟选择器：只选择后面的相邻兄弟元素</p><ul><li><code>p + span&#123;color:red;&#125;</code></li></ul></li><li><p><code>css</code>代码写完后上线前要经过压缩处理</p></li><li><p>本地和服务器分两个<code>css</code>版本（备份）</p></li><li><p>压缩后注释都清除，空间体积减少</p></li></ul><hr><h4 id="第十章-css选择器-下"><a href="#第十章-css选择器-下" class="headerlink" title="第十章 css选择器(下)"></a>第十章 css选择器(下)</h4><hr><ul><li><p><code>&lt;a&gt;</code>伪类选择器</p><ul><li><p><code>a:link &#123;color:#FF0000;&#125;</code>    /* 超链接未访问时的状态 */ （只用于a标签）</p></li><li><p><code>a:visited &#123;color:#00FF00;&#125;</code>    /* 超链接访问过后的状态 */ （只用于a标签）</p></li><li><p><code>a:hover &#123;color:#FF00FF;&#125;    </code>/* 鼠标悬停状态</p></li><li><p><code>*/</code>（可和其他标签结合一起用）</p></li><li><p><code>a:active &#123;color:#0000FF;&#125;</code>    /* 激活状态，鼠标按下状态 */</p></li><li><p><strong>注意</strong></p><ul><li>伪类选择器的排序很重要，<code>a:link</code> <code>a:visited</code> <code>a:hover</code> <code>a:active</code>，记作<code>lvha</code></li></ul></li></ul></li><li><p>输入伪类选择器（针对表单）</p><ul><li><code>input:focus&#123;color:red;&#125; </code>      /* 键盘输入焦点 */</li></ul></li><li><p>位置伪类选择器（针对表单）</p><ul><li><code>p:first-child&#123;color:red;&#125;</code>     /<code>* 第一个p *</code>/</li><li><code>p:last-child&#123;color:red;&#125;</code>     /<code>* 最后一个p *</code>/</li></ul></li><li><p>伪元素选择器</p><ul><li><code>:before</code> 在元素之前添加内容。</li><li><code>:after</code> 在元素之后添加内容。</li></ul></li><li><p><code>css</code>优先规则</p><ul><li>内联样式表-&gt; <code>ID</code> 选择器—&gt; <code>Class</code> 类选择器-&gt;标签选择器</li></ul></li></ul><hr><h4 id="第十一章-背景属性"><a href="#第十一章-背景属性" class="headerlink" title="第十一章 背景属性"></a>第十一章 背景属性</h4><hr><ul><li><p>背景属性：</p><ul><li><p>背景的添加 ：</p></li><li><p>背景颜色的添加:</p><ul><li><code>background:red;</code></li><li><code>backgronnd-color:red;</code></li></ul></li><li><p>背景图片的添加：</p><ul><li><code>background:url(“images/1.jpg”);</code></li><li><code>backgronnd-image:url(“images/1.jpg”);</code></li></ul></li><li><p>背景的平铺</p></li><li><p>什么是平铺？平铺就是图片是否重复出现</p><ul><li>不平铺：<code>background-repeat:no-repeat;</code></li><li>水平方向平铺：<code>background-repeat:repeat-x;</code></li><li>垂直方向平铺：<code>background-repeat:repeat-y;</code></li><li>完全平铺：默认为完全平铺</li></ul></li><li><p>背景图片的定位</p><ul><li>背景图片的定位就是可以设置显示背景图片的位置，通过属性<code>background-position</code>来实现</li><li><code>background-position</code>的取值可为英文单词或者数值和百分值。</li><li><code>background-positon</code>的英文单词取值</li><li><code>top left </code></li><li><code>top  center  </code></li><li><code>top  right</code></li><li><code>center left  </code></li><li><code>center  center </code></li><li><code>center right</code></li><li><code>bottom left  </code></li><li><code>bottom  center </code></li><li><code>bottom right</code></li><li><code>background-position</code>的数值取值<ul><li><code>background-position:x  y;</code></li></ul></li><li><code>positon</code>的百分值取值<ul><li><code>background-position:x%  y%; </code></li></ul></li></ul></li><li><p>背景图片的大小</p><ul><li><p>背景图片的大小可以通过属性<code>background-size</code>来设置<code>background-size</code>的取值可为数值和百分值。</p></li><li><p><code>background-size</code>的数值取值</p><ul><li><code>background-size:x  y;</code></li></ul></li><li><p><code>background-size</code>的数值取值</p><ul><li><code>background-size:x%  y%;</code></li></ul></li></ul></li><li><p>背景图片的滚动</p><ul><li><p>背景图片是否随着内容的滚动而滚动由<code>background-attachment</code>设置</p></li><li><p><code>background-attachment:fixed; </code>  固定，不随内容的滚动而滚动</p></li><li><p><code>background-attachment:scroll; </code> 滚动，随内容的滚动而滚动</p></li></ul></li></ul></li></ul><hr><h4 id="第十二章-文字文本属性"><a href="#第十二章-文字文本属性" class="headerlink" title="第十二章 文字文本属性"></a>第十二章 文字文本属性</h4><hr><ul><li><code>css</code>文字文本属性：</li><li><strong>文字属性</strong></li><li><code>color:red;</code>    文字颜色<ul><li><code>font-size:12px</code>;    文字大小</li><li><code>font-weight:“bold”</code>    文字粗细(<code>bold/normal</code>)</li><li><code>font-family:“宋体”</code>    文字类别</li><li><code>font-variant:small-caps </code>小写字母以大写字母显示</li></ul></li></ul><ul><li><p><strong>文本属性</strong></p><ul><li><code>text-align:center;</code>   文本对齐(<code>right</code>/<code>left</code>/<code>center</code>)</li><li><code>line-height:10px; </code> 行间距(可通过它实现文本的垂直居中)</li><li><code>text-indent:20px;</code>  首行缩进</li><li><code>text-decoration:none; </code><ul><li>文本线(<code>none</code>/<code>underline</code>/<code>overline</code>/<code>line-through</code>)</li></ul></li><li><code>letter-spacing</code>:   字间距</li></ul></li></ul><hr><h4 id="第十三章-盒子模型"><a href="#第十三章-盒子模型" class="headerlink" title="第十三章 盒子模型"></a>第十三章 盒子模型</h4><hr><ul><li><p><strong>盒子模型</strong></p><ul><li>盒子模型就是一个有高度和宽度的矩形区域</li><li>所有<code>html</code>标签都是盒子模型</li><li><code>div</code>标签自定义盒子模型</li></ul></li><li><p>所有的标签都是盒子模型</p><ul><li><code>class</code>和<code>id</code>的主要差别是：<code>class</code>用于元素组（类似的元素，或者可以理解为某一类元素），而<code>id</code>用于标识单独的唯一的元素。</li></ul></li><li><p><strong>盒子模型的组成</strong></p><ul><li>盒子模型组成部分：<ul><li>自身内容：<code> width</code>、h<code>eight</code> 宽高</li><li>内边距：   <code>padding</code></li><li>盒子边框： <code>border</code> 边框线</li><li>与其他盒子距离：  <code>margin </code>外边距</li><li>内容+内边距+边框+外边距=面积</li></ul></li></ul></li><li><p><code>border</code> 边框</p><ul><li>常见写法  <code>border:1px solid #f00;</code></li></ul></li><li><p>单独属性：</p></li><li><p><code>border-width</code>:</p></li><li><p><code>border-style:</code></p><ul><li><code>dotted </code> 点状虚线</li><li><code>dashed</code>（虚线）</li><li><code>solid</code>（实线）</li><li><code>double</code>（双实线）</li></ul></li><li><p><code>border-color</code> (颜色)</p></li><li><p><code>padding</code> 内边距</p><ul><li><p>值：<code>像素</code>/<code>厘米</code>等长度单位、百分比</p><ul><li><code>padding:10px; </code>                      上下左右</li><li><code>padding:10px 10px; </code>                 上下  左右</li><li><code>padding:10px 10px 10px; </code>         上 左右 下</li><li><code>padding:10px 10px 10px 10px; </code> 上 右 下 左（设置4个点–&gt;顺时针方向）</li></ul></li></ul></li><li><p>单独属性：</p><ul><li><code>padding-top:</code></li><li><code>padding-right:</code></li><li><code>padding-bottom:</code></li><li><code> padding-left:</code></li></ul></li><li><p>当设置内边距的时候会把盒子撑大，为了保持盒子原来的大小，应该高度和宽度进行减小，根据<code>width</code>和<code>height</code>减小</p></li><li><p>margin 外边距</p><ul><li><p>值：与<code>padding</code>相同</p></li><li><p>单独属性：与<code>padding</code>相同</p></li></ul></li><li><p>外边距合并：两个盒子同时设置了外边距，会进行一个外边距合并</p></li></ul><hr><p><strong>补充盒子模型内容</strong></p><hr><ul><li><p><strong>标准盒子模型</strong></p></li><li><p>盒子模型是<code>css</code>中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 <code>ie </code>盒子模型和标准 <code>w3c</code> 盒子模型。他们对盒子模型的解释各不相同，先来看看我们熟知的标准盒子模型</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111642126.jpeg"></p><ul><li><p>从上图可以看到标准 <code>w3c</code> 盒子模型的范围包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code>，并且 <code>content </code>部分不包含其他部分</p></li><li><p>** IE盒子模型**</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111642885.jpeg"></p><ul><li><p>从上图可以看到 <code>ie </code>盒子模型的范围也包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code></p></li><li><p>和标准 <code>w3c</code> 盒子模型不同的是：<code>ie</code> 盒子模型的 <code>content</code> 部分包含了 <code>border </code>和 <code>padding</code></p></li><li><p><code>IE</code>盒子模型<code>width</code> = <code>padding</code>+<code>border</code>+<code>内容</code></p></li><li><p>标准盒子模型 = 内容的宽度（不包含<code>border</code>+<code>padding</code>）</p></li><li><p>例：</p></li><li><p>一个盒子的   <code>margin</code>为 20px，<code>border</code> 为 1px，<code>padding </code>为 10px，<code>content</code> 的宽为 200px、高为 50px，假如用标准 <code>w3c</code> 盒子模型解释，那么这个盒子需要占据的位置为：宽 <code>20*2+1*2+10*2+200=262px</code>、高 <code>20*2+1*2*10*2+50=112px</code>，盒子的实际大小为：宽 <code>1*2+10*2+200=222px</code>、高 <code>1*2+10*2+50=72px</code>；假如用ie 盒子模型，那么这个盒子需要占据的位置为：宽 <code>20*2+200=240px</code>、高 <code>20*2+50=70px</code>，盒子的实际大小为：宽 <code>200px</code>、高 <code>50px</code></p></li><li><p>那应该选择哪中盒子模型呢？当然是“标准 <code>w3c</code> 盒子模型”了。怎么样才算是选择了“标准 <code>w3c </code>盒子模型”呢？很简单，就是在网页的顶部加上 <code>doctype</code> 声明。</p></li><li><p>假如不加<code> doctype</code> 声明，那么各个浏览器会根据自己的行为去理解网页，即 <code>ie </code>浏览器会采用 <code>ie</code> 盒子模型去解释你的盒子，而 <code>ff </code>会采用标准<code> w3c</code> 盒子模型解释你的盒子，所以网页在不同的浏览器中就显示的不一样了。</p></li><li><p>反之，假如加上了 <code>doctype</code> 声明，那么所有浏览器都会采用标准 <code>w3c </code>盒子模型去解释你的盒子，网页就能在各个浏览器中显示一致了。</p></li></ul><hr><ul><li>用 <code>jquery</code> 做的例子来证实一下</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;你用的盒子模型是？&lt;/title&gt;</span><br><span class="line">&lt;script language=&quot;javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script language=&quot;javascript&quot;&gt;</span><br><span class="line">var sbox = $.boxmodel ? &quot;标准w3c&quot;:&quot;ie&quot;;</span><br><span class="line">document.write(&quot;您的页面目前支持：&quot;+sbox+&quot;盒子模型&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>　上面的代码没有加上 <code>doctype</code> 声明，在 <code>ie</code> 浏览器中显示  <code>ie</code>盒子模型，在 ff 浏览器中显示“标准<code>w3c</code> 盒子模型”。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html public &quot;-//w3c//dtd xhtml 1.0 transitional//en&quot; &quot;http://www.w3.org/tr/xhtml1/dtd/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;你用的盒子模型是标准w3c盒子模型&lt;/title&gt;</span><br><span class="line">&lt;script language=&quot;javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script language=&quot;javascript&quot;&gt;</span><br><span class="line">var sbox = $.boxmodel ? &quot;标准w3c&quot;:&quot;ie&quot;;</span><br><span class="line">document.write(&quot;您的页面目前支持：&quot;+sbox+&quot;盒子模型&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>　代码2 与代码1 唯一的不同的就是顶部加了 <code>doctype </code>声明。在所有浏览器中都显示“标准 <code>w3c </code>盒子模型”</li></ul><ul><li><p> 所以为了让网页能兼容各个浏览器，让我们用标准 <code>w3c</code> 盒子模型</p></li><li><p>扩展</p><ul><li><a href="http://www.jianshu.com/p/e2eb0d8c9de6">学会使用box-sizing布局</a></li></ul></li></ul><hr><h4 id="第十四章-块元素、行元素与溢出"><a href="#第十四章-块元素、行元素与溢出" class="headerlink" title="第十四章 块元素、行元素与溢出"></a>第十四章 块元素、行元素与溢出</h4><hr><ul><li><p>基本概念</p><ul><li>块级元素：默认情况下独占一行的元素，可控制宽高、上下边距；</li><li>行内元素：默认情况下一行可以摆放多个的元素，不可控制宽高和上下边距</li></ul></li><li><p>行块转换</p><ul><li><code>display:none</code>;  不显示</li><li><code>display:block</code>; 变成块级元素</li><li><code>display:inline</code>; 变成行级元素</li><li><code>display:inline-block</code>; 以块级元素样式展示，以行级元素样式排列，称行级块元素</li></ul></li><li><p>溢出</p><ul><li><code>overflow:hidden</code>;   溢出隐藏</li><li><code>overflow:scroll</code>;   内容会被修剪，浏览器会显示滚动条</li><li><code>overflow:auto</code>;   如果内容被修剪，则产生滚动条</li></ul></li><li><p>文本不换行：<code>white-space:nowrap</code>;</p></li><li><p>长单词换行：<code>word-wrap:break-word</code>;</p></li></ul><ul><li>行内元素和快级元素小结</li></ul><ul><li><p>一、<strong>块级元素</strong>：block element</p><ul><li>每个块级元素默认占一行高度，一行内添加一个块级元素后无法一般无法添加其他元素（<code>float</code>浮动后除外）。两个块级元素连续编辑时，会在页面自动换行显示。块级元素一般可嵌套块级元素或行内元素；</li><li>块级元素一般作为容器出现，用来组织结构，但并不全是如此。有些块级元素，如只能包含块级元素。</li></ul></li><li><p><code>DIV</code> 是最常用的块级元素，元素样式的<code>display:block</code>都是块级元素。它们总是以一个块的形式表现出来，并且跟同级的兄弟块依次竖直排列，左右撑满。</p></li><li><p>二、<strong>行内元素</strong>：inline element</p><ul><li>也叫内联元素、内嵌元素等；行内元素一般都是基于语义级(semantic)的基本元素，只能容纳文本或其他内联元素，常见内联元素 “a”。比如 <code>SPAN </code>元素，<code>IFRAME</code>元素和元素样式的<code>display : inline</code>的都是行内元素。例如文字这类元素，各个字母 之间横向排列，到最右端自动折行。</li></ul></li><li><p>三、<strong>行级块元素</strong>：inline-block</p><ul><li>也叫行级块元素，常见的元素有img，它是随着内容的宽高改变</li></ul></li><li><p>四、<strong>block（块）元素的特点:</strong></p><ul><li>①、总是在新行上开始；</li><li>②、高度，行高以及外边距和内边距都可控制；</li><li>③、宽度缺省是它的容器的100%，除非设定一个宽度。</li><li>④、它可以容纳内联元素和其他块元素</li></ul></li><li><p>五、<strong>inline元素的特点</strong></p><ul><li>①、和其他元素都在一行上；</li><li>②、高，行高及外边距和内边距不可改变；</li><li>③、宽度就是它的文字或图片的宽度，不可改变</li><li>④、内联元素只能容纳文本或者其他内联元素（行元素）</li></ul></li><li><p>六、inline-block元素的特点</p><ul><li>①、和其它元素都在一行</li><li>宽高行高等等可以改变</li><li>宽高是内容的宽高，但是可以改变</li><li>可以容纳行级元素和块级元素</li></ul></li><li><p><strong>对行内元素，需要注意如下</strong>:</p><ul><li>设置宽度<code>width</code> 无效。 设置高度<code>height </code>无效，可以通过<code>line-height</code>来设置。 设置<code>margin</code></li><li>只有左右<code>margin</code>有效，上下无效。</li><li>设置<code>padding</code>只有左右<code>padding</code>有效，上下则无效。注意元素范围是增大了，但是对元素周围的内容是没影响的。</li></ul></li><li><p>七、<strong>常见的块状元素</strong></p><ul><li><code>address</code> – 地址</li><li><code>blockquote</code> – 块引用</li><li><code>center</code> – 举中对齐块</li><li><code>dir</code> – 目录列表</li><li><code>div</code> – 常用块级容易，也是<code>CSS layout</code>的主要标签</li><li><code>dl</code> – 定义列表</li><li><code>fieldset</code> – <code>form</code>控制组</li><li><code>form</code> – 交互表单</li><li><code>h1</code> – 大标题</li><li><code>h2</code> – 副标题</li><li><code>h3</code> – 3级标题</li><li><code>h4</code> – 4级标题</li><li><code>h5</code> – 5级标题</li><li><code>h6</code> – 6级标题</li><li><code>hr</code> – 水平分隔线</li><li><code>isindex</code> – <code>input prompt</code></li><li><code>menu</code> – 菜单列表</li><li><code>noframes</code> – <code>frames</code>可选内容，（对于不支持frame的浏览器显示此区块内容</li><li><code>noscript</code> – 可选脚本内容（对于不支持<code>script</code>的浏览器显示此内容）</li><li><code>ol</code> – 有序表单</li><li><code>p</code> – 段落</li><li><code>pre</code> – 格式化文本</li><li><code>table</code> – 表格</li><li><code>ul</code> – 无序列表</li></ul></li><li><p>八、<strong>常见的内联元素</strong></p><ul><li><code>a</code> – 锚点</li><li><code>abbr</code> – 缩写</li><li><code>acronym</code> – 首字</li><li><code>b</code> – 粗体(不推荐)</li><li><code>bdo</code> – <code>bidi override</code></li><li><code>big</code> – 大字体</li><li><code>br</code> – 换行</li><li><code>cite</code> – 引用</li><li><code>code</code> – 计算机代码(在引用源码的时候需要)</li><li><code>dfn</code> – 定义字段</li><li><code>em</code> – 强调</li><li><code>font</code> – 字体设定(不推荐)</li><li><code>i</code> – 斜体</li><li><code>img</code> – 图片</li><li><code>input</code> – 输入框</li><li><code>kbd</code> – 定义键盘文本</li><li><code>label</code> – 表格标签</li><li><code>q</code> – 短引用</li><li><code>s</code> – 中划线(不推荐)</li><li><code>samp</code> – 定义范例计算机代码</li><li><code>select</code> – 项目选择</li><li><code>small</code> – 小字体文本</li><li><code>span</code> – 常用内联容器，定义文本内区块</li><li><code>strike</code> – 中划线</li><li><code>strong</code> – 粗体强调</li><li><code>sub</code> – 下标</li><li><code>sup</code> – 上标</li><li><code>textarea</code> – 多行文本输入框</li><li><code>tt</code> – 电传文本</li><li><code>u</code> – 下划线</li></ul></li><li><p>九，<strong>可变元素</strong></p><ul><li>可变元素为根据上下文语境决定该元素为块元素或者内联元素。</li><li><code>applet</code> - <code>java applet</code></li><li><code>button</code> - 按钮</li><li><code>del </code>- 删除文本</li><li><code>iframe</code> - <code>inline frame</code></li><li><code>ins</code> - 插入的文本</li><li><code>map</code> - 图片区块(<code>map</code>)</li><li><code>object</code> - <code>object</code>对象</li><li><code>script</code> - 客户端脚本</li></ul></li><li><p>十、<strong>行内元素与块级元素有什么不同</strong></p><ul><li><p>区别一：</p><ul><li>块级：块级元素会独占一行，默认情况下宽度自动填满其父元素宽度</li><li>行内：行内元素不会独占一行，相邻的行内元素会排在同一行。其宽度随内容的变化而变化。</li></ul></li><li><p>区别二：</p><ul><li>块级：块级元素可以设置宽高</li><li>行内：行内元素不可以设置宽高</li></ul></li><li><p>区别三：</p><ul><li>块级：块级元素可以设置<code>margin</code>，<code>padding</code></li><li>行内：行内元素水平方向的<code>margin-left;</code> <code>margin-right;</code></li></ul></li><li><p><code>padding-left;</code> <code>padding-right</code>;可以生效。但是竖直方向的<code>margin-bottom</code>; <code>margin-top</code>; <code>padding-top</code>; <code>padding-bottom</code>;却不能生效。</p></li><li><p>区别四：</p></li><li><p>块级：<code>display:block</code>;</p></li><li><p>行内：<code>display:inline</code>;</p></li><li><p>替换元素有如下：（和<code>img</code>一样的设置方法）</p></li><li><p><code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code></p></li><li><p><code>&lt;object&gt;</code>都是替换元素，这些元素都没有实际的内容</p></li></ul></li><li><p>可以通过修改<code>display</code>属性来切换块级元素和行内元素</p></li></ul><hr><h4 id="第十五章-定位"><a href="#第十五章-定位" class="headerlink" title="第十五章 定位"></a>第十五章 定位</h4><hr><ul><li><strong>position 属性</strong><ul><li>值：</li><li>**static **静态定位（不对它的位置进行改变，在哪里就在那里）<ul><li> 默认值。没有定位，元素出现在正常的流中（忽略 <code>top</code>,<code> bottom,</code>  <code>left, right</code> 或者 <code>z-index</code> 声明）。</li></ul></li><li><strong>fixed</strong> 固定定位（参照物–浏览器窗口）—做 弹窗广告用到<ul><li>生成固定定位的元素，相对于浏览器窗口进行定位。 元素的位置通过 <code>&quot;left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot; </code>以及 <code>&quot;bottom&quot; </code>属性进行规定。</li></ul></li><li><strong>relative</strong>（相对定位 ）（参照物以他本身）<ul><li>生成相对定位的元素，相对于其正常位置进行定位。</li></ul></li><li><strong>absolute</strong>（绝对定位）(除了<code>static</code>都可以，找到参照物–&gt;与它最近的已经有定位的父元素进行定位)</li><li>生成绝对定位的元素，相对于 <code>static</code> 定位以外的第一个父元素进行定位。</li><li>元素的位置通过 “<code>left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot;</code> 以及 <code>&quot;bottom&quot;</code> 属性进行规定</li><li><strong>z-index</strong><ul><li><code>z-index</code> 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</li><li>定位的基本思想: 它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。</li></ul></li><li>一切皆为框<ul><li>块级元素: <code>div</code>、<code>h1</code>或<code>p</code>元素 即：显示为一块内容称之为 “块框“ ;</li><li>行内元素: <code>span</code>,<code>strong</code>,<code>a</code>等元素 即：内容显示在行中称 “行内框”;</li><li>使用display属性改变成框的类型 即：<code>display:block</code>; 让行内元素设置为块级元素，<code>display:none;</code> 没有框</li></ul></li><li>相对定位：<ul><li>如果对一个元素进行相对定位，它将出现在它所在的位置上。</li><li>通过设置垂直或水平位置，让这个元素“相对于”它的起点进行移动</li><li><code>.adv_relative &#123;  position: relative;  left: 30px;  top: 20px; &#125;</code></li></ul></li><li>绝对定位：<ul><li>元素的位置相对于最近的已定位祖先元素，如果元素没有已定位 的祖先元素，它的位置相对于最初的包含块。 <code>.adv_absolute &#123;  position: absolute;  left: 30px;  top: 20px; &#125;</code></li></ul></li></ul></li></ul><hr><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111643217.png"><br><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111642515.png"></p><hr><h4 id="第十六章-框架"><a href="#第十六章-框架" class="headerlink" title="第十六章 框架"></a>第十六章 框架</h4><hr><ul><li><p><code>frameset</code>框架：</p><ul><li><code>&lt;frameset&gt; </code> —-  用来定义一个框架；双标签<br>不能和  <code>&lt;body&gt;</code>  一起使用</li></ul></li><li><p><code>rows</code>、<code>cols</code>属性</p><ul><li><code>rows </code> 定义行表示框架有多少行（取值 <code>px </code>/<code>%</code>/ <code>*</code> ）</li><li><code>cols</code>   定义列表示框架有多少列（取值<code>px</code>/ <code>% </code>/ <code>*</code> ）</li></ul></li><li><p>frame子框架</p><ul><li>&lt;<code>frame</code>&gt;  —-  表示框架中的某一个部分；单标签，要跟结束标志<ul><li><code>src</code> 显示的网页的路径</li><li><code>name</code> 框架名</li><li><code>frameborder</code>  边框线（取值 0 / 1）</li></ul></li></ul></li><li><p>&lt;<code>noframes</code>&gt;属性</p></li><li><p>&lt;<code>noframes</code>&gt; 提供不支持框架的浏览器显示<code>body</code>的内容；双标签</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;frameset&gt;</span><br><span class="line">     &lt;frame  src=“”  /&gt;</span><br><span class="line">     &lt;frame  src=“” /&gt;</span><br><span class="line">     &lt;frame  src=“” /&gt;</span><br><span class="line">     &lt;noframes&gt;</span><br><span class="line">      &lt;body&gt;内容&lt;/body&gt;</span><br><span class="line">     &lt;/noframes&gt;</span><br><span class="line">&lt;/frameset&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;iframe&gt;</code>内联框架<ul><li><code>iframe </code>元素会创建包含另外一个文档的内联框架（即行内框架）</li><li>允许和 <code>body</code> 一起使用</li><li><code>width</code> 宽（取值 px / %）</li><li><code>height</code> 高（取值 px / %）</li><li><code>name</code> 框架名</li><li><code>frameborder </code> 边框线（取值 0 / 1）</li><li><code>src</code> 显示的网页的路径</li></ul></li></ul><hr><h4 id="第十七章-css高级属性"><a href="#第十七章-css高级属性" class="headerlink" title="第十七章 css高级属性"></a>第十七章 css高级属性</h4><hr><ul><li><code>opacity</code>透明属性</li><li><code>opacity</code><ul><li>对于<code>IE6/7/</code>，使用<code>filter:alpha(opacity:值;</code>)  值为<code>0-100</code></li><li>对于<code>Webkit</code>，<code>Opera</code>，<code>Firefox</code>，<code>IE9+</code>，使用<code>opacity</code>:值; 值为<code>0-1</code></li><li>对于早期火狐，使用<code>-moz-opacity</code>:值; 值为<code>0-1</code></li><li>所以写透明属性时，一般写法是</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    opacity:0.5;</span><br><span class="line">   filter:alpha(opacity：50);/*0-100*/</span><br><span class="line">   -moz-opacity:0.5;/*取值0-1*/--&gt;针对早起版本的火狐兼容问题的解决</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>border-radius</code>圆角边框属性</p><ul><li>向 <code>div</code> 元素添加圆角边框<ul><li><code>border-radius:10px</code>;</li></ul></li></ul></li><li><p><code>box-shadow</code>阴影属性</p><ul><li><p><code>box-shadow </code>属性向框添加阴影效果,后面跟4个参数。</p></li><li><p><code>box-shadow:0px   0px   10px   #000;</code></p></li></ul></li><li><p><code>&lt;embed&gt;</code>属性</p><ul><li><p>是<code>HTML5</code>中新增的标签,媒体嵌入插件标签，可以通过<code>&lt;embed&gt;</code>插入音频或视频</p></li><li><p><code>&lt;embed src=“media/music.mp3” /&gt;</code></p></li><li><p>格式<code>.mid </code> <code>.wav</code> <code>.mp3</code>等</p></li></ul></li></ul><hr><hr><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111643657.png"></p><hr><ul><li><a href="https://yunpan.cn/cM9va2bHD4wwu">原文件下载地址</a>   访问密码 342a</li></ul><hr><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111644068.png"></p><hr><ul><li><code>css</code>常见简写</li></ul><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111644519.png" alt="css简写速查"></p><hr><h3 id="第三部分-附录"><a href="#第三部分-附录" class="headerlink" title="第三部分 附录"></a>第三部分 附录</h3><hr><h4 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h4><blockquote><p>为了欺骗W3C的验证工具,可将代码分为两个文件，一个是针对所有浏览器,一个只针对IE。即将所有符合W3C的代码写到一个文件中,而一些IE中必须而又不能通过W3C验证的代码（如:cursor:hand;）放到另一个文件中，再用下面的方法导入</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 放置所有浏览器样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只放置IE必须，而不能通过w3c的--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE]</span></span><br><span class="line"><span class="comment">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>CSS样式新建或修改尽量遵循以下原则</p><p>根据新建样式的适用范围分为三级：全站级、产品级、页面级。 尽量通过继承和层叠重用已有样式。 不要轻易改动全站级CSS。改动后，要经过全面测试。</p><hr><ul><li><p>属性显示顺序（规范写法）</p><ul><li>显示属性</li><li>元素位置</li><li>元素属性</li><li>元素内容属性</li></ul></li><li><p>CSS书写顺序</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  <span class="selector-class">.header</span> &#123;</span><br><span class="line"><span class="comment">/* 显示属性 */</span></span><br><span class="line">    <span class="attribute">display</span> || <span class="attribute">visibility</span></span><br><span class="line">    <span class="attribute">list-style</span></span><br><span class="line">    <span class="attribute">position</span> <span class="attribute">top</span> || <span class="attribute">right</span> || <span class="attribute">bottom</span> || <span class="attribute">left</span></span><br><span class="line">    <span class="attribute">z-index</span></span><br><span class="line">    <span class="attribute">clear</span></span><br><span class="line">    <span class="attribute">float</span></span><br><span class="line"><span class="comment">/* 自身属性 */</span></span><br><span class="line">    <span class="attribute">width</span> <span class="attribute">max-width</span> || <span class="attribute">min-width</span></span><br><span class="line">    <span class="attribute">height</span> <span class="attribute">max-height</span> || <span class="attribute">min-height</span></span><br><span class="line">    <span class="attribute">overflow</span> || <span class="attribute">clip</span></span><br><span class="line">    <span class="attribute">margin</span></span><br><span class="line">    <span class="attribute">padding</span></span><br><span class="line">    <span class="attribute">outline</span></span><br><span class="line">    <span class="attribute">border</span></span><br><span class="line">    <span class="attribute">background</span></span><br><span class="line"><span class="comment">/* 文本属性 */</span></span><br><span class="line">    <span class="attribute">color</span></span><br><span class="line">    <span class="attribute">font</span></span><br><span class="line">    <span class="attribute">text-overflow</span></span><br><span class="line">    <span class="attribute">text-align</span></span><br><span class="line">    <span class="attribute">text-indent</span></span><br><span class="line">    <span class="attribute">line-height</span></span><br><span class="line">    <span class="attribute">white-space</span></span><br><span class="line">    <span class="attribute">vertical-align</span></span><br><span class="line">    <span class="attribute">cursor</span></span><br><span class="line">    <span class="attribute">content</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></li><li><p>兼容多个浏览器时，将标准属性写在底部</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-moz-border-radius: 15px; /* Firefox */</span><br><span class="line">-webkit-border-radius: 15px; /* Safari和Chrome */</span><br><span class="line">border-radius: 15px; /* Opera 10.5+, 以及使用了IE-CSS3的IE浏览器 *//标准属性</span><br></pre></td></tr></table></figure><ul><li>使用选择器时，命名比较短的词汇或者缩写的不允许直接定义样式</li></ul><p><code>.hd,.bd,.td&#123;&#125;;//如这些命名</code></p><ul><li>可用上级节点进行限定</li></ul><p><code>.recommend-mod .hd</code></p><ul><li>多选择器规则之间换行，即当样式针对多个选择器时每个选择器占一行。</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-class">.btn</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-class">.btn</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;button&quot;</span>]</span> &#123;…&#125;;</span><br></pre></td></tr></table></figure><ul><li>优化CSS选择器</li></ul><p><code>#header a &#123; color: #444; &#125;;/*CSS选择器是从右边到左边进行匹配*/</code></p><p>浏览器将检查整个文档中的所有链接和每个链接的父元素，并遍历文档树去查找ID为header的祖先元素，如果找不到header将追溯到文档的根节点，解决方法如下</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">避免使用通配规则和相邻兄弟选择符、子选择符,、后代选择符、属性选择符等选择器</span><br><span class="line">不要限定id选择符，如<span class="selector-tag">div</span><span class="selector-id">#header</span>（提权的除外）</span><br><span class="line">不要限定类选择器，如<span class="selector-tag">ul</span><span class="selector-class">.recommend</span>（提权的除外）</span><br><span class="line">不要使用 <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> 这样长的选择符</span><br><span class="line">避免使用标签子选择符，如<span class="selector-id">#header</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span></span><br></pre></td></tr></table></figure><p>使用z-index属性尽量z-index的值不要超过150（通用组的除外），页面中的元素内容的z-index不能超过10（提示框等模块除外但维持在150以下），不允许直接使用（999~9999）之间大值。 尽量避免使用CSS Hack</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">property:value; <span class="comment">/* 所有浏览器 */</span></span><br><span class="line">+property:value; <span class="comment">/* IE7 */</span></span><br><span class="line">_property:value; <span class="comment">/* IE6 */</span></span><br><span class="line">*property:value; <span class="comment">/* IE6/7 */</span></span><br><span class="line">property:value\<span class="number">9</span>; <span class="comment">/* IE6/7/8/9，即所有IE浏览器 */</span></span><br><span class="line"></span><br><span class="line">\* <span class="selector-tag">html</span> selector &#123; … &#125;; <span class="comment">/* IE6 */</span></span><br><span class="line">\*<span class="selector-pseudo">:first</span>-child+<span class="selector-tag">html</span> selector &#123; … &#125;; <span class="comment">/* IE7 */</span></span><br><span class="line"><span class="selector-tag">html</span>&gt;<span class="selector-tag">body</span> selector &#123; … &#125;; <span class="comment">/* 非IE6 */</span></span><br><span class="line"><span class="keyword">@-moz-document</span> url-prefix() &#123; … &#125;; <span class="comment">/* firefox */</span></span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>:<span class="number">0</span>) &#123; … &#125;; <span class="comment">/* saf3+/chrome1+ */</span></span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>:<span class="number">10000</span>),<span class="keyword">not</span> all <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>:<span class="number">0</span>) &#123; … &#125;; <span class="comment">/* opera */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-device-width</span>: <span class="number">480px</span>) &#123; … &#125;; <span class="comment">/* iPhone/mobile webkit */</span></span><br></pre></td></tr></table></figure><p>避免使用低效的选择器</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &gt; * &#123;…&#125;;</span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span> &#123;…&#125;;</span><br><span class="line"><span class="selector-id">#footer</span> &gt; <span class="selector-tag">h3</span> &#123;…&#125;;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-id">#top_blue_nav</span> &#123;…&#125;;</span><br><span class="line"><span class="selector-id">#searbar</span> <span class="selector-tag">span</span><span class="selector-class">.submit</span> <span class="selector-tag">a</span> &#123; … &#125;; <span class="comment">/* 反面示例 */</span></span><br></pre></td></tr></table></figure><p>六个不要三个避免一个使用</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">不要在标签上直接写样式</span><br><span class="line">不要在CSS中使用expression</span><br><span class="line">不要在CSS中使用<span class="keyword">@import</span></span><br><span class="line">不要在CSS中使用!important</span><br><span class="line">不要在CSS中使用“*”选择符</span><br><span class="line">不要将CSS样式写为单行</span><br><span class="line">避免使用filter</span><br><span class="line">避免使用行内（inline）样式</span><br><span class="line">避免使用“*”设置&#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span><br><span class="line">使用after或<span class="attribute">overflow</span>的方式清浮动</span><br></pre></td></tr></table></figure><p>减少使用影响性能的属性</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">position:absolute;</span><br><span class="line">float:left;//如这些定位或浮动属性</span><br></pre></td></tr></table></figure><p>减少在CSS中使用滤镜表达式和图片repeat,尤其在body当中,渲染性能极差, 如果需要用repeat的话,图片的宽或高不能少于8px</p><hr><h4 id="DIV命名规范"><a href="#DIV命名规范" class="headerlink" title="DIV命名规范"></a>DIV命名规范</h4><hr><ul><li><p>企业<code>DIV</code>使用频率高的命名方法</p></li><li><p><strong>网页内容类</strong></p><ul><li><p>标题: <code>title</code></p><ul><li>摘要: <code>summary</code></li><li>箭头： <code>arrow</code></li><li>商标： <code>label</code></li><li>网站标志： <code>logo</code></li><li>转角/圆角：<code> corner</code></li><li>横幅广告： <code>banner</code></li><li>子菜单： <code>subMenu</code></li><li>搜索： <code>search</code></li><li>搜索框： <code>searchBox</code></li><li>登录： <code>login</code></li><li>登录条：<code>loginbar</code></li><li>工具条： <code>toolbar</code></li><li>下拉： <code>drop</code></li><li>标签页： <code>tab</code></li><li>当前的： <code>current</code></li><li>列表： <code>list</code></li><li>滚动： <code>scroll</code></li><li>服务： <code>service</code></li><li>提示信息： <code>msg</code></li><li>热点：<code>hot</code></li><li>新闻： <code>news</code></li><li>小技巧： <code>tips</code></li><li>下载： <code>download</code></li><li>栏目标题： <code>title</code></li><li>热点： <code>hot</code></li><li>加入：<code> joinus</code></li><li>注册： <code>regsiter</code></li><li>指南： <code>guide</code></li><li>友情链接： <code>friendlink</code></li><li>状态： <code>status</code></li><li>版权： <code>copyright</code></li><li>按钮： <code>btn</code></li><li>合作伙伴： <code>partner</code></li><li>投票： <code>vote</code></li><li>左右中：<code>left</code>  <code>right</code>  <code>center</code></li></ul><hr></li><li><p>注释的写法: <code>/* Footer */ </code> 内容区<code>/* End Footer */</code></p></li></ul></li><li><p><strong>id的命名:</strong></p><ul><li><p>页面结构</p><ul><li>容器: <code>container</code></li><li>页头：<code>header</code></li><li>内容：<code>content</code>/<code>container</code></li><li>页面主体：<code>main</code></li><li>页尾：<code>footer</code></li><li>导航：<code>nav</code></li><li>侧栏：<code>sidebar</code></li><li>栏目：<code>column</code></li><li>页面外围控制整体布局宽度：<code>wrapper</code></li><li>左右中：<code>left</code> <code>right</code> <code>center</code></li></ul></li></ul><hr><ul><li><p>导航</p><ul><li>导航：<code>nav</code></li><li>主导航：<code>mainbav</code></li><li>子导航：<code>subnav</code></li><li>顶导航：<code>topnav</code></li><li>边导航：<code>sidebar</code></li><li>左导航：<code>leftsidebar</code></li><li>右导航：<code>rightsidebar</code></li><li>菜单：<code>menu</code></li><li>子菜单：<code>submenu</code></li><li>标题: <code>title</code></li><li>摘要: <code>summary</code></li></ul></li></ul><hr><ul><li><p>功能</p><ul><li>标志：<code>logo</code></li><li>广告：<code>banner</code></li><li>登陆：<code>login</code></li><li>登录条：<code>loginbar</code></li><li>注册：<code>regsiter</code></li><li>搜索：<code>search</code></li><li>功能区：<code>shop</code></li><li>标题：<code>title</code></li><li>加入：<code>joinus</code></li><li>状态：<code>status</code></li><li>按钮：<code>btn</code></li><li>滚动：<code>scroll</code></li><li>标签页：<code>tab</code></li><li>文章列表：<code>list</code></li><li>提示信息：<code>msg</code></li><li>当前的:<code> current</code></li><li>小技巧：<code>tips</code></li><li>图标: <code>icon</code></li><li>注释：<code>note</code></li><li>指南：<code>guild</code></li><li>服务：<code>service</code></li><li>热点：<code>hot</code></li><li>新闻：<code>news</code></li><li>下载：<code>download</code></li><li>投票：<code>vote</code></li><li>合作伙伴：<code>partner</code></li><li>友情链接：<code>link</code></li><li>版权：<code>copyright</code></li></ul></li></ul><hr><ul><li><p><strong><code>class</code>的命名:</strong></p></li><li><p>颜色:使用颜色的名称或者16进制代码,如</p><ul><li><code>.red &#123; color: red; &#125;</code></li><li><code>.f60 &#123; color: #f60; &#125;</code></li><li><code>.ff8600 &#123; color: #ff8600; &#125;</code></li></ul></li><li><p>字体大小,直接使用”font+字体大小”作为名称,如</p><ul><li><code>.font12px &#123; font-size: 12px; &#125;</code></li><li><code>.font9px &#123;font-size: 9pt; &#125;</code></li></ul></li><li><p>对齐样式,使用对齐目标的英文名称,如</p><ul><li><code>.left &#123; float:left; &#125;</code></li><li><code>.bottom &#123; float:bottom; &#125;</code></li></ul></li><li><p>标题栏样式,使用”类别+功能”的方式命名,如</p><ul><li><code> .barnews &#123; &#125;</code></li><li><code>.barproduct &#123; &#125;</code></li></ul></li></ul><hr><ul><li><p><strong>注意事项::</strong></p><ul><li>一律小写;</li><li>尽量用英文;</li><li>不加中杠和下划线;</li><li>尽量不缩写，除非一看就明白的单词.</li></ul></li><li><p>–</p></li></ul></li><li><p><strong>推荐的 <code>CSS</code> 书写顺序：</strong></p><ul><li><p>显示属性</p><ul><li><code>display</code></li><li><code>list-style</code></li><li><code>position</code></li><li><code>float</code></li><li><code>clear</code></li></ul></li><li><p>自身属性</p><ul><li><code> width</code></li><li><code>height</code></li><li><code>margin</code></li><li><code>padding</code></li><li><code>border</code></li><li><code>background</code></li></ul></li><li><p>文本属性</p><ul><li><code>color</code></li><li><code> font</code></li><li><code>text-decoration</code></li><li><code>text-align</code></li><li><code>vertical-align</code></li><li><code>white-space</code></li><li><code>other text</code></li><li><code>content </code></li></ul></li></ul></li></ul><hr><h4 id="什么是BFC？"><a href="#什么是BFC？" class="headerlink" title="什么是BFC？"></a>什么是BFC？</h4><ul><li><p>独立渲染区域</p></li><li><p>创建BFC都有哪些方式</p><ul><li><code>float</code>属性不为<code>none</code></li><li><code>position</code>为<code>absolute</code>或者<code>fixed</code></li><li><code>display</code>为<code>inline-block</code>，<code>table-cell</code>，<code>flex</code></li><li><code>overflow</code>为<code>hidden</code>，<code>auto</code>，<code>scroll</code></li></ul></li><li><p>BFC能解决什么问题</p><ul><li>边距重叠问题</li><li>盒子塌陷问题</li><li>清除浮动</li><li>浮动环绕文字</li></ul></li></ul><h4 id="附录三-CSS精灵"><a href="#附录三-CSS精灵" class="headerlink" title="附录三 CSS精灵"></a>附录三 CSS精灵</h4><hr><ul><li><strong>CSS精灵原理以及应用</strong><ul><li><code>CSS</code>雪碧的基本原理是把你的网站上用到的一些图片整合到一张单独的图片中，从而减少你的网站的HTTP请求数量。<ul><li>该图片使用<code>CSS</code>   <code>background和background-position</code>属性渲染，这也就意味着你的标签变得更加复杂了，图片是在<code>CSS</code>中定义，而非<code>&lt;img&gt;</code>标签。</li></ul></li></ul></li><li><strong>一个简单的例子</strong>：<ul><li>一张图片作出一个按钮的三个状态</li><li>一个链接用<code>CSS</code>做成按钮的样式，我们可以使用同一张图片，完成按钮的三个状态，<code>a:link</code>，<code>a:hover</code>，<code>a:active</code> <code>&lt;a class=&quot;button&quot; href=&quot;#&quot;&gt;链接&lt;/a&gt;</code></li><li>加入右侧的图片为：<code>200px 65px</code>的三个按钮图拼合而成的图片<code>button.png</code>，从上到下一次为按钮的普通、鼠标滑过、鼠标点击的状态。则可以使用<code>CSS</code>进行定义。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">    display:block;</span><br><span class="line">    width:200px;</span><br><span class="line">    height:65px;</span><br><span class="line">    line-height:65px; /*定义状态*/</span><br><span class="line">    text-indent:-2015px; /*隐藏文字*/</span><br><span class="line">    background-image:url(button.png); /*定义背景图片*/</span><br><span class="line">    background-position:0 0;</span><br><span class="line">    /*定义链接的普通状态，此时图像显示的是顶上的部分*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:hover &#123;</span><br><span class="line">    background-position:0 -66px;</span><br><span class="line">    /*定义链接的滑过状态，此时显示的为中间部分，向下取负值*/</span><br><span class="line">&#125;</span><br><span class="line">a:active &#123;</span><br><span class="line">    background-position:0 -132px;</span><br><span class="line">    /*定 义链接的普通状态，此时显示的是底部的部分，向下取负值*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更多的<code>CSS</code>雪碧，图片更复杂，背景定位更精确。可能会用到大量的数值<ul><li>如：<code>background:url(nav.png) -180px 24pxno-repeat</code>; 来达到更精确的定位</li></ul></li><li><strong>优点：</strong><ul><li>减少加载网页图片时对服务器的请求次数</li><li>可以合并多数背景图片和小图标，方便在任何位置使用，这样不同位置的请求只需要调用一个图片，从而减少对服务器的请求次数，降低服务器压力，同时提高了页面的加载速度，节约服务器的流量。</li><li>提高页面的加载速度</li><li><code>sprite </code>技术的其中一个好处是图片的加载时间(在有许多 <code>sprite</code> 时，单张图片的加载时间)。由所需图片拼成的一张 <code>GIF</code>图片的尺寸会明显小于所有图片拼合前的大小。单张的 <code>GIF</code>只有相关的一个色表，而单独分割的每一张 <code>GIF</code> 都有自己的一个色表，这就增加了总体的大小。因此，单独的一张 <code>JPEG</code> 或者 <code>PNG</code> <code>sprite</code> 在大小上非常可能比把一张图分成多张得来的图片总尺寸小。</li><li>减少鼠标滑过的一些<code>bug</code></li><li><code>IE6</code>不会主动预加载鼠标滑过即<code>a:hover</code>中的背景图片，所以，如果使用多张图片，鼠标滑过会出现闪白的现象。使用<code>CSS</code>雪碧，由于一张图片即可，所以不会出现这种现象。</li></ul></li><li><strong>不足：</strong><ul><li><code>CSS</code>雪碧的最大问题是内存使用</li><li>影响浏览器的缩放功能</li><li>拼图维护比较麻烦</li><li>使<code>CSS</code>的编写变得困难</li><li><code>CSS</code> 雪碧调用的图片不能被打印</li><li>错误得使用 <code>Sprites</code> 影响可访问性</li></ul></li></ul><h4 id="一些tips解决方案"><a href="#一些tips解决方案" class="headerlink" title="一些tips解决方案"></a>一些tips解决方案</h4><hr><h5 id="页面优化实践"><a href="#页面优化实践" class="headerlink" title="页面优化实践"></a>页面优化实践</h5><hr><ul><li><p>从下面的几个方面可以进行页面的优化：</p><ul><li>减少请求数</li><li>图片合并</li><li><code>CSS </code>文件合并</li><li>减少内联样式</li><li>避免在 <code>CSS </code>中使用 <code>import</code></li><li>减少文件大小</li><li>选择适合的图片格式</li><li>图片压缩</li><li><code>CSS</code> 值缩写（<code>Shorthand Property</code>)</li><li>文件压缩</li><li>页面性能</li><li>调整文件加载顺序</li><li>减少标签数量</li><li>调整选择器长度</li><li>尽量使用<code> CSS</code> 制作显示表现</li><li>增强代码可读性与可维护性</li><li>规范化</li><li>语义化</li><li>模块化</li></ul></li></ul><h5 id="写DIV-CSS-的一些常识"><a href="#写DIV-CSS-的一些常识" class="headerlink" title="写DIV+CSS 的一些常识"></a>写DIV+CSS 的一些常识</h5><hr><ul><li><p>不要使用过小的图片做背景平铺</p><ul><li>这就是为何很多人都不用 <code>1px</code> 的原因，这才知晓。宽高 <code>1px</code> 的图片平铺出一个宽高 <code>200px</code> 的区域，需要 <code>200200=40, 000</code> 次，占用资源</li></ul></li><li><p>无边框</p><ul><li>推荐的写法是 <code>border:none</code>;，哈哈，我一直在用这个。 <code>border:0;</code> 只是定义边框宽度为零，但边框样式、颜色还是会被浏览器解析，占用资源</li></ul></li><li><p>慎用 通配符</p><ul><li>所谓通配符，就是将<code> CSS</code> 中的所有标签均初始化，不管用的不用的，过时的先进的，一视同仁，这样，大大的占用资源。要有选择的初始化标签。</li></ul></li><li><p><code>CSS </code>的十六进制颜色代码缩写</p><ul><li>习惯了缩写及小写，这才知道，原来不是推荐的写法，为的是减少解析所占用的资源。但同时会增加文件体积。孰优孰劣，有待仔细考证。</li></ul></li><li><p> 样式放头上，脚本放脚下。不内嵌，只外链</p></li><li><p> 坚决不用 <code>CSS </code>表达式</p></li><li><p>使用 引用样式表，而不是通过<code> @import</code> 导入。</p></li><li><p> 一般来说，<code>PNG </code>比 <code>GIF</code> 要小，小得多。再者，<code>GIF</code> 中有多少颜色是被浪费的，很值得优化。</p></li><li><p>千万不要在 <code>HTML </code>中缩放图片，一者不好看，二者占资源。</p></li><li><p>正文字体最好用偶数</p><ul><li><code>12px</code>、<code>14px</code>、<code>16px</code>，效果非常好。特例，<code>15px</code>。</li></ul></li><li><p><code>block</code>、<code>ul</code>、<code>ol </code>等上下留出至少一倍行距，左侧至少两倍行距，右侧随意。</p></li><li><p>段落之间，至少要有一倍行距</p></li><li><p>强行指定某些元素的 <code>line-height</code>，正文 <code>1.6 </code>倍于文字大小，标题<code>1.3 </code>倍。</p></li><li><p>中文标点用全角</p><ul><li>英文夹杂在中文中，左右空格，半角。</li></ul></li><li><p>中文字体的粗体和斜体，远离较好</p></li></ul><h5 id="常用代码片段"><a href="#常用代码片段" class="headerlink" title="常用代码片段"></a>常用代码片段</h5><hr><ul><li>雅虎工程师提供的<code>CSS</code>初始化示例代码【仅供参考】<ul><li>可以在<code>html</code>头文件中直接引用，从而避免浏览器的不兼容带来的错误。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">dl</span>,</span><br><span class="line"><span class="selector-tag">dt</span>,</span><br><span class="line"><span class="selector-tag">dd</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line">pre,</span><br><span class="line"><span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">form</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>,</span><br><span class="line"><span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Verdana, Arial, Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">caption</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>:normal;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">address</span>,</span><br><span class="line"><span class="selector-tag">caption</span>,</span><br><span class="line"><span class="selector-tag">cite</span>,</span><br><span class="line"><span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">dfn</span>,</span><br><span class="line"><span class="selector-tag">em</span>,</span><br><span class="line"><span class="selector-tag">strong</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">var</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>:normal;</span><br><span class="line">    <span class="attribute">font-weight</span>:normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line">select,</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>:<span class="number">14px</span> Verdana,Helvetica,Arial,sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>:collapse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">    content: <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>mobile meta </code>标签</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”width</span>=<span class="string">320,target-densitydpi</span>=<span class="string">dpi_value,initial-scale</span>=<span class="string">1,</span> <span class="attr">user-scalable</span>=<span class="string">no”/</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>表格不被撑开</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">table-layout</span>: fixed;</span><br><span class="line"><span class="attribute">word-break</span>: break-all;</span><br><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure><ul><li>不设宽高居中</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">”abc”</span> <span class="attr">style</span>=<span class="string">”display:table;text-align:center;width:100%;height:100%;”</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">”background:#f00;</span> <span class="attr">display:table-cell</span>; <span class="attr">vertical-align:middle</span>;”&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”button”</span> <span class="attr">value</span>=<span class="string">”item1″</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>透明度的兼容代码</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>:<span class="built_in">alpha</span>(opacity=<span class="number">50</span>); <span class="comment">/*1-100*/</span></span><br><span class="line">-moz-<span class="attribute">opacity</span>:<span class="number">0.5</span>; <span class="comment">/*0-1.0*/</span></span><br><span class="line">-khtml-<span class="attribute">opacity</span>:<span class="number">0.5</span>; <span class="comment">/*0-1.0*/</span></span><br><span class="line"><span class="attribute">opacity</span>:<span class="number">0.5</span>; <span class="comment">/*0-1.0*/</span></span><br></pre></td></tr></table></figure><ul><li>文字溢出点点省略</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line"><span class="attribute">overflow</span>:hidden;</span><br></pre></td></tr></table></figure><ul><li><p>清除浮动的几种方法</p><ul><li>方法一：<code>投机取巧法</code> – 不推荐</li><li>直接一个放到当作最后一个子标签放到父标签那儿，此方法屡试不爽，兼容性强</li></ul></li><li><p>方法二：<code>overflow + zoom</code>方法  –不推荐<br>  <code>.fix&#123;overflow:hidden; zoom:1;&#125;</code></p><ul><li>此方法优点在于代码简洁，涵盖所有浏览器</li></ul></li><li><p>方法三：<code>after + zoom</code>方法 -推荐–此方法可以说是综合起来最好的方法了</p><ul><li><code>clearfix</code>只应用在包含浮动子元素的父级元素上</li></ul></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fix</span>&#123;zoom:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-class">.fix</span>:after&#123;</span><br><span class="line">     display:block;</span><br><span class="line">     <span class="attribute">content</span>:<span class="string">&#x27;clear&#x27;</span>;</span><br><span class="line">     <span class="attribute">clear</span>:both;</span><br><span class="line">     <span class="attribute">line-height</span>:<span class="number">0</span>;</span><br><span class="line">     <span class="attribute">visibility</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更多代码片段详情<ul><li><a href="http://www.jianshu.com/p/e878122a92a3">实用的60个CSS代码片段</a></li></ul></li></ul><h5 id="一些总结"><a href="#一些总结" class="headerlink" title="一些总结"></a>一些总结</h5><hr><ul><li><p>自动继承属性：</p><ul><li><code>color</code></li><li><code>font</code></li><li><code>text-align</code></li><li><code>list-style</code><br>…</li></ul></li><li><p>非继承属性：</p><ul><li><code>background</code></li><li><code>border</code></li><li><code>position</code><br>…</li></ul></li><li><p>具有破坏性的元素：</p><ul><li><code>float</code></li><li><code>display:none;</code></li><li><code>position:absoblute/fixed/sticky;</code></li></ul></li><li><p>具有包裹性的元素：</p><ul><li><p><code>display:inline-block/table-cell</code></p></li><li><p><code>position:absolute/fixed/sticky</code></p></li><li><p><code>overflow:hidden/scroll</code></p></li></ul></li><li><p>消除图片底部间隙的方法</p><ul><li><p>图片块状化-无基线对齐<br><code>img&#123;display:block;&#125;</code></p></li><li><p>图片底线对齐<br><code>img&#123;vertical-align:bottom;&#125;</code></p></li><li><p>行高足够小 - 基线位置上移<br><code>.box&#123;line-height:0;&#125;</code></p></li></ul></li></ul><h5 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h5><hr><ul><li><p>BFC</p><ul><li><p>BFC全称<code>”Block Formatting Context”</code> 中文为“块级格式化上下文”</p></li><li><p>记住这么一句话：<code>BFC</code>元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素</p></li><li><p><code>BFC</code>就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此</p></li></ul></li><li><p>扩展阅读</p><ul><li><a href="https://github.com/dwqs/blog/issues/22">CSS中的BFC</a></li></ul></li><li><p>优雅降级(<code>graceful degradation</code>)</p><ul><li>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</li></ul></li><li><p>渐进增强 <code>progressive enhancement</code>：</p><ul><li>是在浏览器开启<code>JavaScript</code>功能后，如果浏览器版本不支持某些  <code>JavaScript</code>  能力，我们解决这种问题的方式</li></ul></li><li><p>平稳退化</p><ul><li>是在浏览器没有<code>JavaScript</code>功能，或没有开启<code>JavaScript</code>功能情况下，我们解决这种问题的方式；</li></ul></li></ul><h5 id="方案荟萃扩展阅读"><a href="#方案荟萃扩展阅读" class="headerlink" title="方案荟萃扩展阅读"></a>方案荟萃扩展阅读</h5><hr><ul><li><p><strong>关于布局</strong></p></li><li><p><a href="http://www.qianduan.net/css-to-achieve-the-vertical-center-of-the-five-kinds-of-methods/">垂直居中</a></p></li><li><p><a href="http://codepen.io/shshaw/full/gEiDt">css完全居中</a></p></li><li><p><a href="http://www.w3cplus.com/collective-5.html">居中之美</a></p></li><li><p><a href="http://www.zhihu.com/question/35290742#answer-20340542">网页中的底部foot定位</a></p></li><li><p><a href="http://www.webhek.com/css-100-percent-height">页面高度100%</a></p></li><li><p><a href="https://github.com/phoetry/textareaAutoHeight">textarea高度自适应</a></p></li><li><p><a href="http://dotdotdot.frebsite.nl/">多行溢出省略</a></p></li><li><p><a href="http://jinlong.github.io/2015/05/24/css-retina-hairlines/">Retina屏1px线</a></p></li><li><p><a href="https://github.com/philipwalton/flexbugs">Flexbugs</a></p></li><li><p><strong>其他</strong></p></li><li><p><a href="http://www.stepday.com/topic/?690">IF IE ENDIF条件判断之IE10</a></p></li><li><p><a href="http://www.zhihu.com/question/20158063">Chrome 翻译插件</a></p></li><li><p><a href="http://blog.netsh.org/posts/website-retina_1779.netsh.html">网页retina优化</a></p></li><li><p><a href="http://segmentfault.com/a/1190000002407912">常用meta</a></p></li><li><p><a href="http://www.cnblogs.com/mq0036/p/3531848.html">树状菜单</a></p></li><li><p><a href="http://www.w3ctrain.com/2015/07/24/comprehensive-guide-when-to-use-em-vs-rem/">em vs rem</a></p></li><li><p><a href="https://github.com/classicemi/blog/issues/3#issuecomment-113861251">css vs js</a></p></li><li><p><a href="http://www.w3cplus.com/solution/index/index.html">css解决方案（w3cplus）</a></p></li><li><p><a href="http://riccardoscalco.github.io/textures/">Textures生成纹理</a></p></li><li><p><a href="http://una.im/CSSgram/">CSSgram</a></p></li><li><p><a href="http://zmoazeni.github.io/csscss/">Csscss（检查重复声明等）</a></p></li></ul><h4 id="部分工具资源"><a href="#部分工具资源" class="headerlink" title="部分工具资源"></a>部分工具资源</h4><hr><ul><li><a href="http://blog.poetries.top/2016/03/14/Emmet%EF%BC%9AHTML-CSS%E4%BB%A3%E7%A0%81%E5%BF%AB%E9%80%9F%E7%BC%96%E5%86%99%E7%A5%9E%E5%99%A8/">学会使用Emmet插件快速编码</a></li><li><a href="http://blog.poetries.top/2016/09/09/Emmet%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/#more">Emmet常用快捷键</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/sublime-text.md">Sublime专题</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Sublime%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93.md">Sublime常用插件总结</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Front-End%20-Develop%20-Tools.md">Front-End -Develop -Tools</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Tools.md">ToolsBox-自己整理的一份工具列表</a></li></ul><h4 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h4><hr><ul><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md">编码规范</a></li><li><a href="http://front-end-standards.com/">前端规范</a></li><li><a href="https://github.com/poetries/mywiki/wiki/web-develop-standard">web develop standard</a></li><li><a href="http://codecloud.net/5622.html">Web 前端开发规范文档</a></li><li><a href="http://zhibimo.com/read/Ashu/front-end-style-guide/index.html">前端开发规范手册</a></li></ul><h4 id="进阶学习"><a href="#进阶学习" class="headerlink" title="进阶学习"></a>进阶学习</h4><hr><ul><li><a href="http://www.jianshu.com/p/1e638b7da640">DOM编程之API学习</a></li><li><a href="http://www.jianshu.com/p/1f2314552e23">JavaScript基础学习</a></li></ul><h4 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h4><hr><ul><li><a href="https://github.com/poetries/mywiki">Github上前端学习资源汇总</a></li><li><a href="https://github.com/poetries/mywiki/tree/master/front-end">WEB 前端开发学习笔记</a></li><li><a href="https://github.com/poetries/mywiki/wiki/%E6%94%B6%E9%9B%86%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7">前端开发工具箱</a></li><li><a href="https://segmentfault.com/a/1190000006689923">148个资源让你成为CSS专家</a></li><li><a href="http://zh.learnlayout.com/">学习CSS布局-经典必看</a></li></ul><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><hr><ul><li><p>前端指路</p></li><li><p><a href="http://www.w3cplus.com/css/write-to-front-end-developer-interview.html">写给前端面试者（w3cplus）</a></p></li><li><p><a href="http://jiongks.name/blog/how-to-become-a-great-front-end-engineer/">如何成为一名卓越的前端工程师（勾三股四博客）</a></p></li><li><p><a href="http://www.epubit.com.cn/article/144">什么是全栈工程师</a></p></li><li><p><a href="https://uptodate.frontendrescue.org/zh/">如何跟上前端开发的最新前沿</a></p></li><li><p><a href="http://blog.jobbole.com/12749/">浏览器的工作原理</a></p></li><li><p><a href="http://www.zhihu.com/question/20269059#answer-19718763">移动前端开发和 Web 前端开发的区别</a></p></li><li><p><a href="http://segmentfault.com/q/1010000003723038?utm_source=weekly&utm_medium=email&utm_campaign=email_weekly">大型网站CSS编写与维护</a></p></li><li><p><a href="http://segmentfault.com/q/1010000003059724">CSS核心技术关键字</a></p></li><li><p>性能/规范/实践</p></li><li><p><a href="http://www.chinaw3c.org/how-to-read-spec-wxx.html">如何阅读W3c规范(王晓轩)</a></p></li><li><p><a href="http://www.chinaw3c.org/how-to-read-spec-gb.html">如何阅读W3c规范(高博)</a></p></li><li><p><a href="https://developer.yahoo.com/performance/rules.html">雅虎web性能优化军规</a></p></li><li><p><a href="http://browserdiet.com/zh/">权威前端性能指南</a></p></li><li><p><a href="http://www.html-js.com/article/Front-end-home-best-practice-in-front-of-the-web-high-performance-CSS">高性能css</a></p></li><li><p>一些问答社区</p></li><li><p><a href="https://www.quora.com/">quora</a></p></li><li><p><a href="http://stackoverflow.com/">stackoverflow</a></p></li><li><p><a href="http://www.zhihu.com/">知乎</a></p></li><li><p><a href="http://www.html-js.com/qa">前端乱炖问答区</a></p></li><li><p><a href="http://segmentfault.com/questions/newest">segmentfault问答区</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第一部分-HTML&quot;&gt;&lt;a href=&quot;#第一部分-HTML&quot; class=&quot;headerlink&quot; title=&quot;第一部分 HTML&quot;&gt;&lt;/a&gt;第一部分 HTML&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;第一章-职业规划和前景&quot;&gt;&lt;a href=&quot;#第一章-职业规划和前景&quot; class=&quot;headerlink&quot; title=&quot;第一章 职业规划和前景&quot;&gt;&lt;/a&gt;第一章 职业规划和前景&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;职业方向规划定位：&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;web&lt;/code&gt;前端开发工程师&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;web&lt;/code&gt;网站架构师&lt;/li&gt;
&lt;li&gt;自己创业&lt;/li&gt;
&lt;li&gt;转岗管理或其他</summary>
    
    
    
    <category term="HTML and CSS" scheme="https://github.com/haodex/haodex.github.io.git/categories/HTML-and-CSS/"/>
    
    
    <category term="HTML and CSS" scheme="https://github.com/haodex/haodex.github.io.git/tags/HTML-and-CSS/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序简单了解</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/11/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/11/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-11-11T10:35:05.000Z</published>
    <updated>2021-11-16T09:34:15.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><p>历程</p><ul><li>2016年1月，首次被提出 <ul><li>越来越多的产品通过公众号来做，因为这里的开发、获取用户和传播成本更低，拆分出来的服务号并没有提供更好的服务，所以微信内部正在研究新的形态，叫做【微信小程序</li></ul></li><li>2016年9月21号，开启内测<ul><li>微信小程序正式开启内测，在微信生态下，微信小程序引起了广泛关注</li></ul></li><li>2017年1月9日，正式上线<ul><li>万众瞩目的第一批微信小程序低调上线，用户可以体验到各种各样小程序提供的服务</li></ul></li></ul></li><li><p><strong>App</strong></p><ul><li><strong>Native App（原生App）</strong><ul><li>基于不同操作系统来选择不同的开发语言</li><li>缺点：占用容量很大</li><li>优点：流畅，交互性好</li></ul></li><li><strong>HybridApp</strong><ul><li>混合App，原生App和Web app结合的产物</li><li>为了可以让用户可以感受到更新之后的页面，不需要自己手动更新App</li><li>虽然解决了原生App的问题，但是依然很大，像天猫、淘宝</li><li>因此，诞生了微信小程序</li></ul></li><li><strong>web App</strong><ul><li>手机里面的一个<code>web</code>页面</li><li>优点：占用容量很小，可以随时更新App</li><li>缺点：缓慢，每次重新点击都要加载一遍</li></ul></li><li><strong>微信小程序 applicaton</strong><ul><li>什么是微信小程序，小程序是一种不需要安装即可使用的应用，它实现了应用 “触手可及” 的梦想，用户扫一扫或搜一下即可打开应用。也体现了 “用完即走” 的理念，用户不用关心是否安装太多应用的问题，应用将无处不在 </li><li>优点：占用很小，2M以内</li><li> 使用频次较低，使用时间不长的适合微信小程序</li></ul></li></ul></li></ul><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><ul><li>在微信公众平台上注册账号</li><li>下载微信开发者工具</li><li>在微信开发者工具中创建小程序，具体参照<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信开放文档 (qq.com)</a></li></ul><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li><p>一个小程序包含一个整体程序和给自页面的page</p></li><li><p>一个整体小程序由三个文件组成，必须放在项目根目录</p><table><thead><tr><th>文件</th><th>必需</th><th>作用</th></tr></thead><tbody><tr><td><code>app.js</code></td><td>是</td><td>小程序逻辑</td></tr><tr><td><code>app.json</code></td><td>是</td><td>小程序公共配置</td></tr><tr><td><code>app.wxss</code></td><td>否</td><td>小程序公共样式</td></tr></tbody></table></li><li><p>一个小程序页面由四个文件组成，分别是：</p><table><thead><tr><th align="left">文件类型</th><th align="left">必需</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>page.js</code></td><td align="left">是</td><td align="left">页面逻辑</td></tr><tr><td align="left"><code>page.wxml</code></td><td align="left">是</td><td align="left">页面结构</td></tr><tr><td align="left"><code>page.json</code></td><td align="left">否</td><td align="left">页面配置</td></tr><tr><td align="left"><code>page.wxss</code></td><td align="left">否</td><td align="left">页面样式表</td></tr></tbody></table></li><li><p>小程序的具体文件配置见<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信开放文档 (qq.com)</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;历程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2016年1月，首次被提出 &lt;ul&gt;
&lt;li&gt;越来越多的产品通过公众号来做，因为这里的开发</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://github.com/haodex/haodex.github.io.git/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>包管理器</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/11/08/PackageManager/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/11/08/PackageManager/</id>
    <published>2021-11-08T07:35:53.000Z</published>
    <updated>2021-11-11T10:38:33.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h1><h2 id="包管理工具概述"><a href="#包管理工具概述" class="headerlink" title="包管理工具概述"></a>包管理工具概述</h2><blockquote><p>本门课程的前置知识：JavaScript、ES6、模块化、git<br>本门课程的所有代码均书写在 nodejs 环境中，不涉及浏览器环境</p></blockquote><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>模块（module）</strong></p><p>通常以单个文件形式存在的功能片段，入口文件通常称之为<strong>入口模块</strong>或<strong>主模块</strong></p><p><strong>库（library，简称lib）</strong></p><p>以一个或多个模块组成的完整功能块，为开发中某一方面的问题提供完整的解决方案</p><p><strong>包（package）</strong></p><p>包含元数据的库，这些元数据包括：名称、描述、git主页、许可证协议、作者、依赖等等</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111717653.png"></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><code>CommonJS</code> 的出现，使 <code>node</code> 环境下的 <code>JS</code> 代码可以用模块更加细粒度的划分。一个类、一个函数、一个对象、一个配置等等均可以作为模块，这种细粒度的划分，是开发大型应用的基石。</p><p>为了解决在开发过程中遇到的常见问题，比如加密、提供常见的工具方法、模拟数据等等，一时间，在前端社区涌现了大量的第三方库。这些库使用 <code>CommonJS</code> 标准书写而成，非常容易使用。</p><p>然而，在下载使用这些第三方库的时候，遇到难以处理的问题：</p><ul><li><strong>下载过程繁琐</strong><ul><li>进入官网或 <code>github</code> 主页</li><li>找到并下载相应的版本</li><li>拷贝到工程的目录中</li><li>如果遇到有同名的库，需要更改名称</li></ul></li><li><strong>如果该库需要依赖其他库，还需要按照要求先下载其他库</strong></li><li><strong>开发环境中安装的大量的库如何在生产环境中还原，又如何区分</strong></li><li><strong>更新一个库极度麻烦</strong></li><li><strong>自己开发的库，如何在下一次开发使用</strong></li></ul><p><strong>以上问题，就是包管理工具要解决的问题</strong></p><span id="more"></span><h3 id="前端包管理器"><a href="#前端包管理器" class="headerlink" title="前端包管理器"></a>前端包管理器</h3><blockquote><p>本门课程讲解的包管理器<br>npm：重点<br>yarn：次重点<br>其他：了解</p></blockquote><p>几乎可以这样认为，前端所有的包管理器都是基于 <code>npm</code> 的，目前，<code>npm</code> 即是一个包管理器，也是其他包管理的基石</p><p><code>npm</code> 全称为 <code>node package manager</code>，即 <code>node</code> 包管理器，它运行在 <code>node</code> 环境中，让开发者可以用简单的方式完成包的查找、安装、更新、卸载、上传等操作</p><blockquote><p>npm 之所以要运行在 node 环境，而不是浏览器环境，根本原因是因为浏览器环境无法提供下载、删除、读取本地文件的功能。而 node 属于服务器环境，没有浏览器的种种限制，理论上可以完全掌控运行 node 的计算机。</p></blockquote><p><code>npm</code> 的出现，弥补了 <code>node</code> 没有包管理器的缺陷，于是很快，<code>node</code> 在安装文件中内置了 <code>npm</code>，当开发者安装好 <code>node</code> 之后，就自动安装了 <code>npm</code>，不仅如此，<code>node</code> 环境还专门为 <code>npm</code> 提供了良好的支持，使用 <code>npm</code> 下载的包更加方便了。</p><p><code>npm</code> 由三部分组成：</p><ul><li><strong>registry</strong>：入口<ul><li>可以把它想象成一个庞大的数据库</li><li>第三方库的开发者，将自己的库按照 npm 的规范，打包上传到数据库中</li><li>使用者通过统一的地址下载第三方包</li></ul></li><li>官网：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a><ul><li>查询包</li><li>注册、登录、管理个人信息</li></ul></li><li><strong>CLI</strong>：<code>command-line interface</code> 命令行接口<ul><li>这一部分是本门课讲解的重点</li><li>安装好 <code>npm</code> 后，通过 CLI 来使用 <code>npm</code> 的各种功能</li></ul></li></ul><blockquote><p>node 和 npm 是互相成就的，node 的出现让 npm 火了，npm 的火爆带动了大量的第三方库的发展，很多优秀的第三方库打包上传到了 npm，这些第三方库又为 node 带来了大量的用户</p></blockquote><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h3 id="包的安装"><a href="#包的安装" class="headerlink" title="包的安装"></a>包的安装</h3><blockquote><p>安装（install）即下载包<br>由于 npm 的官方 registry 服务器位于国外，可能受网速影响导致下载缓慢或失败。因此，安装好 npm 之后，需要重新设置 registry 的地址为国内地址。目前，淘宝 <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> 提供了国内的 registry 地址，先设置到该地址。设置方式为<code>npm config set registry https://registry.npm.taobao.org</code>。设置好后，通过命令<code>npm config get registry</code>进行检查<br><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111719794.png"></p></blockquote><p><code>npm</code> 安装一个包，分为两种安装方式：</p><ol><li>本地安装</li><li>全局安装</li></ol><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><p>使用命令<code>npm install 包名</code>或<code>npm i 包名</code>即可完成本地安装</p><p>本地安装的包出现在当前目录下的<code>node_modules</code>目录中</p><blockquote><p>随着开发的进展，<code>node_modules</code>目录会变得异常庞大，目录下的内容不适合直接传输到生产环境，因此通常使用<code>.gitignore</code>文件忽略该目录中的内容<br>本地安装适用于绝大部分的包，它会在当前目录及其子目录中发挥作用<br>通常在项目的根目录中使用本地安装<br>安装一个包的时候，<code>npm</code> 会自动管理依赖，它会下载该包的依赖包到<code>node_modules</code>目录中<br>如果本地安装的包带有 <code>CLI</code>，<code>npm</code> 会将它的 <code>CLI</code> 脚本文件放置到<code>node_modules/.bin</code>下，使用命令<code>npx 命令名</code>即可调用</p></blockquote><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p>全局安装的包放置在一个特殊的全局目录，该目录可以通过命令<code>npm config get prefix</code>查看</p><p>使用命令<code>npm install --global 包名</code> 或 <code>npm i -g 包名</code></p><p>重要：<strong>全局安装的包并非所有工程可用，它仅提供全局的 CLI 工具</strong></p><p>大部分情况下，都不需要全局安装包，除非：</p><ol><li>包的版本非常稳定，很少有大的更新</li><li>提供的 <code>CLI</code> 工具在各个工程中使用的非常频繁</li><li><code>CLI</code> 工具仅为开发环境提供支持，而非部署环境</li></ol><h3 id="包配置"><a href="#包配置" class="headerlink" title="包配置"></a>包配置</h3><p>目前遇到的问题：</p><ol><li>拷贝工程后如何还原？</li><li>如何区分开发依赖和生产依赖？</li><li>如果自身的项目也是一个包，如何描述包的信息</li></ol><p>以上这些问题都需要通过包的<strong>配置文件</strong>解决</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><code>npm</code> 将每个使用 <code>npm</code> 的工程本身都看作是一个包，包的信息需要通过一个名称固定的配置文件来描述</p><p><strong>配置文件的名称固定为：package.json</strong></p><p>可以手动创建该文件，而更多的时候，是通过命令<code>npm init</code>创建的</p><p>配置文件中可以描述大量的信息，包括：</p><ul><li><strong>name</strong>：包的名称，该名称必须是<strong>英文单词字符</strong>，支持连接符</li><li><strong>version</strong>：版本<ul><li>版本规范：主版本号.次版本号.补丁版本号</li><li>主版本号：仅当程序发生了重大变化时才会增长，如新增了重要功能、新增了大量的<code>API</code>、技术架构发生了重大变化</li><li>次版本号：仅当程序发生了一些小变化时才会增长，如新增了一些小功能、新增了一些辅助型的<code>API</code></li><li>补丁版本号：仅当解决了一些 <code>bug</code> 或 进行了一些局部优化时更新，如修复了某个函数的 <code>bug</code>、提升了某个函数的运行效率</li></ul></li><li><strong>description</strong>：包的描述</li><li><strong>homepage</strong>：官网地址</li><li><strong>author</strong>：包的作者，必须是有效的 <code>npm</code> 账户名，书写规范是 <code>account &lt;mail&gt;</code>，例如：<code>zhangsan &lt;zhangsan@gmail.com&gt;</code>，不正确的账号和邮箱可能导致发布包时失败</li><li>repository：包的仓储地址，通常指 <code>git</code> 或 <code>svn</code> 的地址，它是一个对象<ul><li><strong>type</strong>：仓储类型，<code>git</code> 或 <code>svn</code></li><li><strong>url</strong>：地址</li></ul></li><li><strong>main</strong>：包的入口文件，使用包的人默认从该入口文件导入包的内容</li><li><strong>keywords</strong>: 搜索关键字，发布包后，可以通过该数组中的关键字搜索到包</li></ul><p>使用<code>npm init --yes</code>或<code>npm init -y</code>可以在生成配置文件时自动填充默认配置</p><h4 id="保存依赖关系"><a href="#保存依赖关系" class="headerlink" title="保存依赖关系"></a>保存依赖关系</h4><p>大部分时候，我们仅仅是开发项目，并不会把它打包发布出去，尽管如此，我们仍然需要<code>package.json</code>文件</p><p><strong>package.json文件最重要的作用，是记录当前工程的依赖</strong></p><ul><li><strong>dependencies</strong>：生产环境的依赖包</li><li><strong>devDependencies</strong>：仅开发环境的依赖包</li></ul><p>配置好依赖后，使用下面的命令即可安装依赖</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 本地安装所有依赖 dependencies + devDependencies</span></span></span><br><span class="line">npm install</span><br><span class="line">npm i</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 仅安装生产环境的依赖 dependencies</span></span></span><br><span class="line">npm install --production</span><br></pre></td></tr></table></figure><p>这样一来，代码移植就不是问题了，只需要移植源代码和<code>package.json</code>文件，不用移植<code>node_modules</code>目录，然后在移植之后通过命令即可重新恢复安装</p><p>为了更加方便的添加依赖，<code>npm</code>支持在使用<code>install</code>命令时，加入一些额外的参数，用于将安装的依赖包保存到<code>package.json</code>文件中</p><p>涉及的命令如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装依赖到生产环境</span></span></span><br><span class="line">npm i 包名</span><br><span class="line">npm i --save 包名</span><br><span class="line">npm i -S 包名</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装依赖到开发环境</span></span></span><br><span class="line">npm i --save-dev 包名</span><br><span class="line">npm i -D 包名</span><br></pre></td></tr></table></figure><blockquote><p>自动保存的依赖版本，例如<code>^15.1.3</code>，这种书写方式叫做语义版本号（semver version），具体规则后续讲解</p></blockquote><h3 id="包的使用"><a href="#包的使用" class="headerlink" title="包的使用"></a>包的使用</h3><p><code>nodejs</code> 对 <code>npm</code> 支持非常良好</p><p>当使用 <code>nodejs</code> 导入模块时，如果模块路径不是以 <code>./</code> 或 <code>../</code> 开头，则 <code>node</code> 会认为导入的模块来自于 <code>node_modules</code> 目录，例如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&quot;lodash&quot;</span>);</span><br></pre></td></tr></table></figure><p>它首先会从当前目录的以下位置寻找文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node_modules/lodash.js</span><br><span class="line">node_modules/lodash/入口文件</span><br></pre></td></tr></table></figure><p>若当前目录没有这样的文件，则会回溯到上级目录按照同样的方式查找</p><p>如果到顶级目录都无法找到文件，则抛出错误</p><p>上面提到的入口文件按照以下规则确定</p><ol><li>查看导入包的<code>package.json</code>文件，读取<code>main</code>字段作为入口文件</li><li>若不包含<code>main</code>字段，则使用<code>index.js</code>作为入口文件</li></ol><blockquote><p>入口文件的规则同样适用于自己工程中的模块<br>在 node 中，还可以手动指定路径来导入相应的文件，这种情况比较少见</p></blockquote><h3 id="练习-简易数据爬虫"><a href="#练习-简易数据爬虫" class="headerlink" title="[练习] 简易数据爬虫"></a>[练习] 简易数据爬虫</h3><ul><li>结构</li></ul><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">getMovies.js</span><br><span class="line">index.js</span><br><span class="line">movie.json //没有数据</span><br><span class="line">package-lock.json</span><br><span class="line">package.json</span><br></pre></td></tr></table></figure><ul><li><p>需要用到的包：</p><ol><li><code>axios</code>：专门用于在各种环境中发送网络请求，并获取到服务器响应结果</li><li><code>cheerio</code>：<code>jquery</code>的核心逻辑包，支持所有环境，可用于讲一个<code>html</code>字符串转换成为<code>jquery</code>对象，并通过<code>jquery</code>对象完成后续操作</li><li><code>fs</code>：<code>node</code>核心模块，专门用于文件处理<ul><li><code>fs.writeFile</code>(文件名, 数据)</li></ul></li></ol></li><li><p>内容</p><ul><li><p><strong>index.js</strong></p><ul><li>```js<br>var getMovies = require(“./getMovies”)<br>var fs = require(“fs”);getMovies().then(movies =&gt; {<pre><code>var json = JSON.stringify(movies);fs.writeFile(&quot;movie.json&quot;, json, function () &#123;    console.log(&quot;成功！&quot;)&#125;);</code></pre>})<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **getMovie.js**</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    const axios = require(&quot;axios&quot;);</span><br><span class="line">    const cheerio = require(&quot;cheerio&quot;);</span><br><span class="line">    /**</span><br><span class="line">     * 得到所有电影的html字符串</span><br><span class="line">     */</span><br><span class="line">    async function getMoviesHtml() &#123;</span><br><span class="line">        const resp = await axios.get(&quot;https://movie.douban.com/chart&quot;)</span><br><span class="line">        return resp.data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 获取所有电影数据</span><br><span class="line">     */</span><br><span class="line">    async function getMoviesData() &#123;</span><br><span class="line">        const html = await getMoviesHtml();</span><br><span class="line">        const $ = cheerio.load(html);</span><br><span class="line">        var trs = $(&quot;tr.item&quot;)</span><br><span class="line">        var movies = [];</span><br><span class="line">        for (let i = 0; i &lt; trs.length; i++) &#123;</span><br><span class="line">            var tr = trs[i];</span><br><span class="line">            //分析每个tr的数据，得到一部电影对象</span><br><span class="line">            var m = getMovie($(tr));</span><br><span class="line">            movies.push(m);</span><br><span class="line">        &#125;</span><br><span class="line">        return movies;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 分析tr，得到一部电影对象</span><br><span class="line">     * @param &#123;*&#125; tr </span><br><span class="line">     */</span><br><span class="line">    function getMovie(tr) &#123;</span><br><span class="line">        var name = tr.find(&quot;div.pl2 a&quot;).text();</span><br><span class="line">        name = name.replace(/\s/g, &quot;&quot;);//去掉空白字符</span><br><span class="line">        name = name.split(&quot;/&quot;)[0];</span><br><span class="line">    </span><br><span class="line">        var imgSrc = tr.find(&quot;a.nbg img&quot;).attr(&quot;src&quot;);</span><br><span class="line">        var detail = tr.find(&quot;div.pl2 p.pl&quot;).text();</span><br><span class="line">        return &#123;</span><br><span class="line">            name,</span><br><span class="line">            imgSrc,</span><br><span class="line">            detail</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    module.exports = getMoviesData;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="语义版本"><a href="#语义版本" class="headerlink" title="语义版本"></a>语义版本</h3><p>思考：如果你编写了一个包<code>A</code>，依赖另外一个包<code>B</code>，你在编写代码时，包<code>B</code>的版本是<code>2.4.1</code>，你是希望使用你包的人一定要安装包<code>B</code>，并且是<code>2.4.1</code>版本，还是希望他可以安装更高的版本，如果你希望它安装更高的版本，高的什么程度呢？</p><p>回顾：版本号规则</p><p>版本规范：主版本号.次版本号.补丁版本号</p><ul><li>主版本号：仅当程序发生了重大变化时才会增长，如新增了重要功能、新增了大量的<code>API</code>、技术架构发生了重大变化</li><li>次版本号：仅当程序发生了一些小变化时才会增长，如新增了一些小功能、新增了一些辅助型的<code>API</code></li><li>补丁版本号：仅当解决了一些 <code>bug</code> 或 进行了一些局部优化时更新，如修复了某个函数的 <code>bug</code>、提升了某个函数的运行效率</li></ul><p>有的时候，我们希望：安装我的依赖包的时候，次版本号和补丁版本号是可以有提升的，但是主版本号不能变化</p><p>有的时候，我们又希望：安装我的依赖包的时候，只有补丁版本号可以提升，其他都不能提升</p><p>甚至我们希望依赖包保持固定的版本，尽管这比较少见</p><p>这样一来，就需要在配置文件中描述清楚具体的依赖规则，而不是直接写上版本号那么简单。</p><p>这种规则的描述，即<strong>语义版本</strong></p><p>语义版本的书写规则非常丰富，下面列出了一些常见的书写方式</p><table><thead><tr><th align="center">符号</th><th align="center">描述</th><th align="center">示例</th><th align="center">示例描述</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于某个版本</td><td align="center">&gt;1.2.1</td><td align="center">大于1.2.1版本</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于某个版本</td><td align="center">&gt;=1.2.1</td><td align="center">大于等于1.2.1版本</td></tr><tr><td align="center">&lt;</td><td align="center">小于某个版本</td><td align="center">&lt;1.2.1</td><td align="center">小于1.2.1版本</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于某个版本</td><td align="center">&lt;=1.2.1</td><td align="center">小于等于1.2.1版本</td></tr><tr><td align="center">-</td><td align="center">介于两个版本之间</td><td align="center">1.2.1 - 1.4.5</td><td align="center">介于1.2.1和1.4.5之间</td></tr><tr><td align="center">x</td><td align="center">不固定的版本号</td><td align="center">1.3.x</td><td align="center">只要保证主版本号是1，次版本号是3即可</td></tr><tr><td align="center">~</td><td align="center">补丁版本号可增</td><td align="center">~1.3.4</td><td align="center">保证主版本号是1，次版本号是3，补丁版本号大于等于4</td></tr><tr><td align="center">^</td><td align="center">此版本和补丁版本可增</td><td align="center">^1.3.4</td><td align="center">保证主版本号是1，次版本号可以大于等于3，补丁版本号可以大于等于4</td></tr><tr><td align="center">*</td><td align="center">最新版本</td><td align="center">*</td><td align="center">始终安装最新版本</td></tr></tbody></table><h4 id="避免还原的差异"><a href="#避免还原的差异" class="headerlink" title="避免还原的差异"></a>避免还原的差异</h4><p>版本依赖控制始终是一个两难的问题</p><p>如果允许版本增加，可以让依赖包的<code>bug</code>得以修复（补丁版本号），可以带来一些意外的惊喜（次版本号），但同样可能带来不确定的风险（新的<code>bug</code>）</p><p>如果不允许版本增加，可以获得最好的稳定性，但失去了依赖包自我优化的能力</p><p>而有的时候情况更加复杂，如果依赖包升级后，依赖也发生了变化，会有更多不确定的情况出现</p><p>基于此，<code>npm</code> 在安装包的时候，会自动生成一个 <code>package-lock.json</code> 文件，该文件记录了安装包时的确切依赖关系</p><p>当移植工程时，如果移植了 <code>package-lock.json</code> 文件，恢复安装时，会按照 <code>package-lock.json</code> 文件中的确切依赖进行安装，最大限度的避免了差异</p><h4 id="扩展-npm的差异版本处理"><a href="#扩展-npm的差异版本处理" class="headerlink" title="[扩展]npm的差异版本处理"></a>[扩展]npm的差异版本处理</h4><p>如果两个包依赖同一个包的不同版本，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111720309.png"></p><p>面对这种情况，在 <code>node_modules</code> 目录中，不会使用扁平的目录结构，而会形成嵌套的目录，如下图：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── node_modules</span><br><span class="line">│   ├── a </span><br><span class="line">│   │   ├── node_modules</span><br><span class="line">│   │   │   ├── c</span><br><span class="line">│   │   │   |   |—— c包的文件</span><br><span class="line">│   │   │── a包的文件     </span><br><span class="line">│   ├── b </span><br><span class="line">│   │   ├── node_modules</span><br><span class="line">│   │   │   ├── c</span><br><span class="line">│   │   │   |   |—— c包的文件</span><br><span class="line">│   │   │── b包的文件           </span><br></pre></td></tr></table></figure><h3 id="npm-脚本-（npm-scripts）"><a href="#npm-脚本-（npm-scripts）" class="headerlink" title="npm 脚本 （npm scripts）"></a>npm 脚本 （npm scripts）</h3><p>在开发的过程中，我们可能会反复使用很多的 <code>CLI</code> 命令，例如：</p><ul><li>启动工程命令（<code>node</code> 或 一些第三方包提供的CLI<code>命令</code>）</li><li>部署工程命令（一些第三方包提供的<code>CLI</code>命令）</li><li>测试工程命令（一些第三方包提供的<code>CLI</code>命令）</li></ul><p>这些命令纷繁复杂，根据第三方包的不同命令也会不一样，非常难以记忆</p><p>于是，<code>npm</code> 非常贴心的支持了脚本，只需要在 <code>package.json</code> 中配置 <code>scripts</code> 字段，即可配置各种脚本名称</p><p>之后，我们就可以运行简单的指令来完成各种操作了</p><p>运行方式是 <code>npm run 脚本名称</code></p><p>不仅如此，npm 还对某些常用的脚本名称进行了简化，下面的脚本名称是不需要使用<code>run</code>的：</p><ul><li><code>start</code></li><li><code>stop</code></li><li><code>test</code></li></ul><p>一些细节：</p><ul><li>脚本中可以省略<code>npx</code></li><li><code>start</code>脚本有默认值：<code>node server.js</code></li></ul><h3 id="运行环境配置"><a href="#运行环境配置" class="headerlink" title="运行环境配置"></a>运行环境配置</h3><p>我们书写的代码一般有三种运行环境：</p><ol><li>开发环境</li><li>生产环境</li><li>测试环境</li></ol><p>有的时候，我们可能需要在 <code>node</code> 代码中根据不同的环境做出不同的处理</p><p>如何优雅的让 <code>node</code> 知道处于什么环境，是极其重要的</p><p>通常我们使用如下的处理方式：</p><p><code>node</code>中有一个全局变量 <code>global</code> (可以类比浏览器环境的<code>window</code>)，该变量是一个对象，对象中的所有属性均可以直接使用</p><p><code>global</code>有一个属性是<code>process</code>，该属性是一个对象，包含了当前运行<code>node</code>程序的计算机的很多信息，其中有一个信息是<code>env</code>，是一个对象，包含了计算机中所有的系统变量</p><p>通常，我们通过系统变量 <code>NODE_ENV</code> 的值，来判定node程序处于何种环境</p><p>有两种方式设置 <code>NODE_ENV</code> 的值</p><ol><li>永久设置</li><li>临时设置</li></ol><p>我们一般使用临时设置</p><p>因此，我们可以配置 <code>scripts</code> 脚本，在设置好了 <code>NODE_ENV</code> 后启动程序</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;没有环境变量&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(process.env.NODE_ENV)</span><br><span class="line"><span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">&quot;development&quot;</span>)&#123;</span><br><span class="line">    a = <span class="string">&quot;开发环境&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">&quot;production&quot;</span>)&#123;</span><br><span class="line">    a = <span class="string">&quot;生产环境&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">&quot;test&quot;</span>)&#123;</span><br><span class="line">    a = <span class="string">&quot;测试环境&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><blockquote><p>为了避免不同系统的设置方式的差异，可以使用第三方库 <code>cross-env</code> 对环境变量进行设置</p></blockquote><h4 id="在node中读取package-json"><a href="#在node中读取package-json" class="headerlink" title="在node中读取package.json"></a>在node中读取package.json</h4><p>有的时候，我们可能在 <code>package.json</code> 中配置一些自定义的字段，这些字段需要在<code>node</code>中读取</p><p>在<code>node</code> 中，可以直接导入一个<code>json</code>格式的文件，它会自动将其转换为<code>js</code>对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development node index.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production node index.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=test node index.js&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="其他npm命令-ignore"><a href="#其他npm命令-ignore" class="headerlink" title="其他npm命令 {ignore}"></a>其他npm命令 {ignore}</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li>精确安装最新版本</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-exact 包名 </span><br><span class="line">npm install -E 包名</span><br></pre></td></tr></table></figure><ol start="2"><li>安装指定版本</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install 包名@版本号</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ol><li>查询包安装路径</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm root [-g]</span><br></pre></td></tr></table></figure><ol start="2"><li>查看包信息</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm view 包名 [子信息]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># view aliases：v info show</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>查询安装包</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm list [-g] [--depth=依赖深度]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># list aliases: ls  la  ll</span></span></span><br></pre></td></tr></table></figure><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><ol><li>检查有哪些包需要更新</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm outdated</span><br></pre></td></tr></table></figure><ol start="2"><li>更新包</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm update [-g] [包名]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># update 别名（aliases）：up、upgrade</span></span></span><br></pre></td></tr></table></figure><h4 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall [-g] 包名</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># uninstall aliases: remove, rm, r, un, unlink</span></span></span><br></pre></td></tr></table></figure><h4 id="npm-配置"><a href="#npm-配置" class="headerlink" title="npm 配置"></a>npm 配置</h4><p><code>npm</code>的配置会对其他命令产生或多或少的影响</p><p>安装好<code>npm</code>之后，最终会产生两个配置文件，一个是用户配置，一个是系统配置，当两个文件的配置项有冲突的时候，用户配置会覆盖系统配置</p><p>通常，我们不关心具体的配置文件，而只关心最终生效的配置</p><p>通过下面的命令可以查询目前生效的各种配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config ls [-l] [--json]</span><br></pre></td></tr></table></figure><p>另外，可以通过下面的命令操作配置</p><ol><li>获取某个配置项</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config get 配置项</span><br></pre></td></tr></table></figure><ol start="2"><li>设置某个配置项</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set 配置项=值</span><br></pre></td></tr></table></figure><ol start="3"><li>移除某个配置项</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config delete 配置项</span><br></pre></td></tr></table></figure><h3 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>移除淘宝镜像源</li><li>到npm官网注册一个账号，并完成邮箱认证</li><li>本地使用 npm cli 进行登录<ol><li>使用命令<code>npm login</code>登录</li><li>使用命令<code>npm whoami</code>查看当前登录的账号</li><li>使用命令<code>npm logout</code>注销</li></ol></li><li>创建工程根目录</li><li>使用npm init进行初始化</li></ol><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><ol><li>开发</li><li>确定版本</li><li>使用命令<code>npm publish</code>完成发布</li></ol><h4 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h4><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111722994.png"></p><ul><li>可以通过网站 <a href="http://choosealicense.online/appendix/">http://choosealicense.online/appendix/</a> 选择协议，并复制协议内容</li></ul><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><h3 id="yarn-简介"><a href="#yarn-简介" class="headerlink" title="yarn 简介"></a>yarn 简介</h3><blockquote><p>yarn 官网：<a href="https://www.yarnpkg.com/zh-Hans/">https://www.yarnpkg.com/zh-Hans/</a></p></blockquote><p><code>yarn</code> 是由<code>Facebook</code>、<code>Google</code>、<code>Exponent</code> 和 <code>Tilde</code> 联合推出了一个新的 <code>JS</code> 包管理工具，<strong>它仍然使用 npm 的registry</strong>，不过提供了全新 <code>CLI</code> 来对包进行管理</p><p>过去，<code>yarn</code> 的出现极大的抢夺了 <code>npm</code> 的市场，甚至有人戏言，<code>npm</code> 只剩下一个 <code>registry</code> 了。</p><p>之所以会出现这种情况，是因为在过去，<code>npm</code> 存在下面的问题：</p><ul><li>依赖目录嵌套层次深：过去，<code>npm</code> 的依赖是嵌套的，这在 <code>windows</code> 系统上是一个极大的问题，由于众所周知的原因，<code>windows</code> 系统无法支持太深的目录</li><li>下载速度慢<ul><li>由于嵌套层次的问题，所以<code>npm</code>对包的下载只能是串行的，即前一个包下载完后才会下载下一个包，导致带宽资源没有完全利用</li><li>多个相同版本的包被重复的下载</li></ul></li><li>控制台输出繁杂：过去，<code>npm</code> 安装包的时候，每安装一个依赖，就会输出依赖的详细信息，导致一次安装有大量的信息输出到控制台，遇到错误极难查看</li><li>工程移植问题：由于 <code>npm</code> 的版本依赖可以是模糊的，可能会导致工程移植后，依赖的确切版本不一致。</li></ul><p>针对上述问题，<code>yarn</code> 从诞生那天就已经解决，它用到了以下的手段：</p><ul><li>使用扁平的目录结构</li><li>并行下载</li><li>使用本地缓存</li><li>控制台仅输出关键信息</li><li>使用<code>yanr-lock</code>文件记录确切依赖</li></ul><p>不仅如此，<code>yarn</code>还优化了以下内容：</p><ul><li>增加了某些功能强大的命令</li><li>让既有的命令更加语义化</li><li>本地安装的<code>CLI</code>工具可以使用 <code>yarn</code> 直接启动</li><li>将全局安装的目录当作一个普通的工程，生成<code>package.json</code>文件，便于全局安装移植</li></ul><p><code>yarn</code> 的出现给 <code>npm</code> 带来了巨大的压力，很快，<code>npm</code> 学习了 <code>yarn</code> 先进的理念，不断的对自身进行优化，到了目前的<code>npm6</code>版本，几乎完全解决了上面的问题：</p><ul><li>目录扁平化</li><li>并行下载</li><li>本地缓存</li><li>使用<code>package-lock</code>记录确切依赖</li><li>增加了大量的命令别名</li><li>内置了<code>npx</code>，可以启动本地的<code>CLI</code>工具</li><li>极大的简化了控制台输出</li></ul><p><strong>总结</strong></p><p><code>npm6</code> 之后，可以说<code>npm</code>已经和<code>yarn</code>非常接近，甚至没有差距了。很多新的项目，又重新从<code>yarn</code>转回到<code>npm</code>。</p><p>这两个包管理器是目前的主流，都必须要学习。</p><h3 id="yarn-的核心命令"><a href="#yarn-的核心命令" class="headerlink" title="yarn 的核心命令"></a>yarn 的核心命令</h3><ol><li><strong>初始化</strong></li></ol><p>初始化：<code>yarn init [--yes/-y]</code></p><ol start="2"><li><strong>安装</strong></li></ol><p>添加指定包：<code>yarn [global] add package-name [--dev/-D] [--exact/-E]</code></p><p>安装<code>package.json</code>中的所有依赖：<code>yarn install [--production/--prod]</code></p><ol start="3"><li><strong>脚本和本地CLI</strong></li></ol><p>运行脚本：<code>yarn run 脚本名</code> </p><blockquote><p>start、stop、test可以省略run</p></blockquote><p>运行本地安装的<code>CLI</code>：<code>yarn run CLI名</code></p><ol start="4"><li><strong>查询</strong></li></ol><p>查看bin目录：<code>yarn [global] bin</code></p><p>查询包信息：<code>yarn info 包名 [子字段]</code></p><p>列举已安装的依赖：<code>yarn [global] list [--depth=依赖深度]</code></p><blockquote><p>yarn的list命令和npm的list不同，yarn输出的信息更加丰富，包括顶级目录结构、每个包的依赖版本号</p></blockquote><ol start="5"><li><strong>更新</strong></li></ol><p>列举需要更新的包：<code>yarn outdated</code></p><p>更新包：<code>yarn [global] upgrade [包名]</code></p><ol start="6"><li><strong>卸载</strong></li></ol><p>卸载包：<code>yarn remove 包名</code></p><h3 id="yarn-的特别礼物"><a href="#yarn-的特别礼物" class="headerlink" title="yarn 的特别礼物"></a>yarn 的特别礼物</h3><p>在终端命令上，<code>yarn</code>不仅仅是对<code>npm</code>的命令做了一个改名，还增加了一些原本没有的命令，这些命令在某些时候使用起来非常方便</p><ol><li><strong>yarn check</strong></li></ol><p>使用<code>yarn check</code>命令，可以验证<code>package.json</code>文件的依赖记录和<code>lock</code>文件是否一致</p><p>这对于防止篡改非常有用</p><ol start="2"><li><strong>yarn audit</strong></li></ol><p>使用<code>yarn audit</code>命令，可以检查本地安装的包有哪些已知漏洞，以表格的形式列出，漏洞级别分为以下几种：</p><ul><li><strong>INFO</strong>：信息级别</li><li><strong>LOW</strong>: 低级别</li><li><strong>MODERATE</strong>：中级别</li><li><strong>HIGH</strong>：高级别</li><li><strong>CRITICAL</strong>：关键级别</li></ul><ol start="3"><li><strong>yarn why</strong></li></ol><p>使用<code>yarn why 包名</code>命令，可以在控制台打印出为什么安装了这个包，哪些包会用到它</p><ol start="4"><li><strong>yarn create</strong></li></ol><p>非常有趣的命令</p><p>今后，我们会学习一些脚手架，所谓脚手架，就是使用一个命令来搭建一个工程结构</p><p>过去，我们都是使用如下的做法：</p><ol><li>全局安装脚手架工具</li><li>使用全局命令搭建脚手架</li></ol><p>由于大部分脚手架工具都是以<code>create-xxx</code>的方式命名的，比如react的官方脚手架名称为<code>create-react-app</code></p><p>因此，可以使用<code>yarn create</code>命令来一步完成安装和搭建</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn create react-app my-app</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等同于下面的两条命令</span></span><br><span class="line">yarn global add create-react-app</span><br><span class="line">create-react-app my-app</span><br></pre></td></tr></table></figure><h2 id="其他包管理器"><a href="#其他包管理器" class="headerlink" title="其他包管理器"></a>其他包管理器</h2><h3 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h3><blockquote><p>官网地址：<a href="https://npm.taobao.org/">https://npm.taobao.org/</a></p></blockquote><p>为解决国内用户连接<code>npm registry</code>缓慢的问题，淘宝搭建了自己的<code>registry</code>，即淘宝npm镜像源</p><p>过去，<code>npm</code>没有提供修改registry的功能，因此，淘宝提供了一个<code>CLI</code>工具即<code>cnpm</code>，它支持除了<code>npm publish</code>以外的所有命令，只不过连接的是淘宝镜像源</p><p>如今，<code>npm</code>已经支持修改<code>registry</code>了，可能<code>cnpm</code>唯一的作用就是和<code>npm</code>共存，即如果要使用官方源，则使用<code>npm</code>，如果使用淘宝源，则使用<code>cnpm</code></p><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h3><p><code>nvm</code>并非包管理器，它是用于管理多个<code>node</code>版本的工具</p><p>在实际的开发中，可能会出现多个项目分别使用的是不同的<code>node</code>版本，在这种场景下，管理不同的<code>node</code>版本就显得尤为重要</p><p><code>nvm</code>就是用于切换版本的一个工具</p><h4 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h4><p>最新版下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p>下载<code>nvm-setup.zip</code>后，直接安装</p><h4 id="使用nvm"><a href="#使用nvm" class="headerlink" title="使用nvm"></a>使用nvm</h4><p><code>nvm</code>提供了<code>CLI</code>工具，用于管理<code>node</code>版本</p><p>在终端中输入<code>nvm</code>，以查看各种可用命令</p><blockquote><p>为了加快下载速度，建议设置淘宝镜像<br>node淘宝镜像：<a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a><br>npm淘宝镜像：<a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a></p></blockquote><h3 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h3><p><code>pnpm</code>是一种新起的包管理器，从<code>npm</code>的下载量看，目前还没有超过<code>yarn</code>，但它的实现方式值得主流包管理器学习，某些开发者极力推荐使用<code>pnpm</code></p><p>从结果上来看，它具有以下优势：</p><ol><li>目前，安装效率高于<code>npm</code>和<code>yarn</code>的最新版</li><li>极其简洁的<code>node_modules</code>目录</li><li>避免了开发时使用间接依赖的问题</li><li>能极大的降低磁盘空间的占用</li></ol><h4 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h4><p>全局安装<code>pnpm</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g pnpm</span><br></pre></td></tr></table></figure><p>之后在使用时，只需要把<code>npm</code>替换为<code>pnpm</code>即可</p><p>如果要执行安装在本地的<code>CLI</code>，可以使用<code>pnpx</code>，它和 <code>npx</code> 的功能完全一样，唯一不同的是，在使用<code>pnpx</code>执行一个需要安装的命令时，会使用<code>pnpm</code>进行安装</p><blockquote><p>比如<code>npx mocha</code>执行本地的<code>mocha</code>命令时，如果<code>mocha</code>没有安装，则npx会自动的、临时的安装mocha，安装好后，自动运行mocha命令</p></blockquote><h4 id="pnpm原理"><a href="#pnpm原理" class="headerlink" title="pnpm原理"></a>pnpm原理</h4><ol><li><p>同 <code>yarn</code> 和 <code>npm</code> 一样，<code>pnpm</code> 仍然使用缓存来保存已经安装过的包，以及使用 <code>pnpm-lock.yaml</code> 来记录详细的依赖版本</p></li><li><p>不同于 <code>yarn</code> 和 <code>npm</code>， <code>pnpm</code> 使用<strong>符号链接和硬链接</strong>（可将它们想象成快捷方式）的做法来放置依赖，从而规避了从缓存中拷贝文件的时间，使得安装和卸载的速度更快</p></li><li><p>由于使用了<strong>符号链接和硬链接</strong>，<code>pnpm</code>可以规避<code>windows</code>操作系统路径过长的问题，因此，它选择使用树形的依赖结果，有着几乎完美的依赖管理。也因为如此，项目中只能使用直接依赖，而不能使用间接依赖</p></li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>由于 <code>pnpm</code> 会改动 <code>node_modules</code> 目录结构，使得每个包只能使用直接依赖，而不能使用间接依赖，因此，如果使用 <code>pnpm</code> 安装的包中包含间接依赖，则会出现问题(<strong>现在不会了，除非使用了绝对路径</strong>)</p><p>由于 <code>pnpm</code> 超高的安装卸载效率，越来越多的包开始修正之前的间接依赖代码</p><h4 id="pnpm-原理"><a href="#pnpm-原理" class="headerlink" title="pnpm 原理"></a>pnpm 原理</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><blockquote><p>要彻底理解pnpm是怎么做的，需要有一些操作系统知识</p></blockquote><ol><li><strong>文件的本质</strong></li></ol><p>在操作系统中，文件实际上是一个指针，只不过它指向的不是内存地址，而是一个外部存储地址（这里的外部存储可以是硬盘、<code>U</code>盘、甚至是网络）</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111722420.png"></p><p>当我们删除文件时，删除的实际上是指针，因此，无论删除多么大的文件，速度都非常快。</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111723627.png"></p><ol start="2"><li><strong>文件的拷贝</strong></li></ol><p>如果你复制一个文件，是将该文件指针指向的内容进行复制，然后产生一个新文件指向新的内容</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111723231.png"></p><ol start="3"><li><strong>硬链接 hard link</strong></li></ol><p>硬链接的概念来自于 <code>Unix</code> 操作系统，它是指将一个文件<code>A</code>指针复制到另一个文件B指针中，文件<code>B</code>就是文件<code>A</code>的硬链接</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111724005.png"></p><p>通过硬链接，不会产生额外的磁盘占用，并且，两个文件都能找到相同的磁盘内容</p><p>硬链接的数量没有限制，可以为同一个文件产生多个硬链接</p><p><code>windows Vista</code>操作系统开始，支持了创建硬链接的操作，在<code>cmd</code>中使用下面的命令可以创建硬链接</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mklink /h 链接名称 目标文件</span><br></pre></td></tr></table></figure><p>由于文件夹（目录）不存在文件内容，所以文件夹（目录）不能创建硬链接</p><blockquote><p>由于种种原因，在windows操作系统中，通常不要跨越盘符创建硬链接</p></blockquote><ol start="4"><li><strong>符号链接 symbol link</strong></li></ol><p>符号链接又称为软连接，如果为某个文件或文件夹<code>A</code>创建符号连接<code>B</code>，则B指向<code>A</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111725700.png"></p><p><code>windows Vista</code>操作系统开始，支持了创建符号链接的操作，在<code>cmd</code>中使用下面的命令可以创建符号链接：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mklink /d 链接名称 目标文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> /d表示创建的是目录的符号链接，不写则是文件的符号链接</span></span><br></pre></td></tr></table></figure><blockquote><p>早期的windows系统不支持符号链接，但它提供了一个工具junction来达到类似的功能</p></blockquote><p><strong>符号链接和硬链接的区别</strong></p><ol><li>硬链接仅能链接文件，而符号链接可以链接目录</li><li>硬链接在链接完成后仅和文件内容关联，和之前链接的文件没有任何关系。而符号链接始终和之前链接的文件关联，和文件内容不直接相关</li></ol><ol start="5"><li><strong>快捷方式</strong></li></ol><p>快捷方式类似于符号链接，是<code>windows</code>系统早期就支持的链接方式。</p><p>它不仅仅是一个指向其他文件或目录的指针，其中还包含了各种信息：如权限、兼容性启动方式等其他各种属性</p><p>由于快捷方式是<code>windows</code>系统独有的，在跨平台的应用中一般不会使用</p><ol start="6"><li><strong>node环境对硬链接和符号链接的处理</strong></li></ol><p><strong>硬链接</strong>：硬链接是一个实实在在的文件，<code>node</code>不对其做任何特殊处理，也无法区别对待，实际上，<code>node</code>根本无从知晓该文件是不是一个硬链接</p><p><strong>符号链接</strong>：由于符号链接指向的是另一个文件或目录，当<code>node</code>执行符号链接下的<code>JS</code>文件时，会使用原始路径。</p><h5 id="pnpm原理-1"><a href="#pnpm原理-1" class="headerlink" title="pnpm原理"></a>pnpm原理</h5><p><code>pnpm</code>使用符号链接和硬链接来构建<code>node_modules</code>目录</p><p>下面用一个例子来说明它的构建方式</p><p>假设两个包<code>a</code>和b，<code>a</code>依赖<code>b</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111726366.png"></p><p>假设我们的工程为<code>proj</code>，直接依赖<code>a</code>，则安装时，<code>pnpm</code>会做下面的处理</p><ol><li>查询依赖关系，得到最终要安装的包：<code>a</code>和<code>b</code></li><li>查看<code>a</code>和<code>b</code>是否已经有缓存，如果没有，下载到缓存中，如果有，则进入下一步</li><li>创建 <code>node_modules</code> 目录，并对目录进行结构初始化</li></ol><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111726216.png"></p><ol start="4"><li>从缓存的对应包中使用硬链接放置文件到相应包代码目录中</li></ol><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111726722.png"></p><ol start="5"><li>使用符号链接，将每个包的<strong>直接依赖</strong>放置到自己的目录中</li></ol><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111727002.png"></p><p>这样做的目的，是为了保证<code>a</code>的代码在执行过程中，可以读取到它们的直接依赖</p><ol start="6"><li>新版本的<code>pnpm</code>为了解决一些书写不规范的包（读取间接依赖）的问题，又将所有的工程非直接依赖，使用符号链接加入到了 <code>.pnpm/node_modules</code> 中</li></ol><p>在本例中好像没有必要，但是如果<code>b</code>依赖<code>c</code>，<code>a</code>又要直接用<code>c</code>，这种不规范的用法现在<code>pnpm</code>通过这种方式支持了。</p><blockquote><p>但对于那些使用绝对路径的奇葩写法，可能永远也无法支持</p></blockquote><ol start="7"><li>在工程的<code>node_modules</code>目录中使用符号链接，放置直接依赖</li></ol><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111727794.png"></p><ol start="8"><li>完成</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;包管理器&quot;&gt;&lt;a href=&quot;#包管理器&quot; class=&quot;headerlink&quot; title=&quot;包管理器&quot;&gt;&lt;/a&gt;包管理器&lt;/h1&gt;&lt;h2 id=&quot;包管理工具概述&quot;&gt;&lt;a href=&quot;#包管理工具概述&quot; class=&quot;headerlink&quot; title=&quot;包管理工具概述&quot;&gt;&lt;/a&gt;包管理工具概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本门课程的前置知识：JavaScript、ES6、模块化、git&lt;br&gt;本门课程的所有代码均书写在 nodejs 环境中，不涉及浏览器环境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;模块（module）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常以单个文件形式存在的功能片段，入口文件通常称之为&lt;strong&gt;入口模块&lt;/strong&gt;或&lt;strong&gt;主模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;库（library，简称lib）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以一个或多个模块组成的完整功能块，为开发中某一方面的问题提供完整的解决方案&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;包（package）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包含元数据的库，这些元数据包括：名称、描述、git主页、许可证协议、作者、依赖等等&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111717653.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;&lt;code&gt;CommonJS&lt;/code&gt; 的出现，使 &lt;code&gt;node&lt;/code&gt; 环境下的 &lt;code&gt;JS&lt;/code&gt; 代码可以用模块更加细粒度的划分。一个类、一个函数、一个对象、一个配置等等均可以作为模块，这种细粒度的划分，是开发大型应用的基石。&lt;/p&gt;
&lt;p&gt;为了解决在开发过程中遇到的常见问题，比如加密、提供常见的工具方法、模拟数据等等，一时间，在前端社区涌现了大量的第三方库。这些库使用 &lt;code&gt;CommonJS&lt;/code&gt; 标准书写而成，非常容易使用。&lt;/p&gt;
&lt;p&gt;然而，在下载使用这些第三方库的时候，遇到难以处理的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;下载过程繁琐&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;进入官网或 &lt;code&gt;github&lt;/code&gt; 主页&lt;/li&gt;
&lt;li&gt;找到并下载相应的版本&lt;/li&gt;
&lt;li&gt;拷贝到工程的目录中&lt;/li&gt;
&lt;li&gt;如果遇到有同名的库，需要更改名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果该库需要依赖其他库，还需要按照要求先下载其他库&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发环境中安装的大量的库如何在生产环境中还原，又如何区分&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新一个库极度麻烦&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自己开发的库，如何在下一次开发使用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;以上问题，就是包管理工具要解决的问题&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="PackageManager" scheme="https://github.com/haodex/haodex.github.io.git/categories/PackageManager/"/>
    
    
    <category term="包管理器" scheme="https://github.com/haodex/haodex.github.io.git/tags/%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Jquery</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/11/08/jQuery/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/11/08/jQuery/</id>
    <published>2021-11-08T07:35:53.000Z</published>
    <updated>2021-11-25T01:43:06.322Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一节-jQuery初步认知"><a href="#第一节-jQuery初步认知" class="headerlink" title="第一节 jQuery初步认知"></a>第一节 jQuery初步认知</h3><hr><h4 id="jQuery概述"><a href="#jQuery概述" class="headerlink" title="jQuery概述"></a>jQuery概述</h4><hr><ul><li><strong><code>JQuery</code>概念</strong></li><li><code>javascript</code>概念<pre><code>  - 基于`Js`语言的`API`和语法组织逻辑，通过内置`window`和`document`对象，来操作内存中的`DOM`元素</code></pre><ul><li><code>JQuery</code>概念<ul><li>基于<code>javascript</code>的，同上，提高了代码的效率</li></ul></li></ul></li><li><strong><code>jQuery</code>是什么:</strong><ul><li>是一个<code>javascript</code>代码仓库，我们称之为<code>javascript</code>框架。</li><li>是一个快速的简洁的<code>javascript</code>框架，可以简化查询<code>DOM</code>对象、处理事件、制作动画、处理<code>Ajax</code>交互过程。</li><li> <strong>它可以帮我们做什么(有什么优势)</strong></li><li>轻量级、体积小，使用灵巧(只需引入一个<code>js</code>文件)</li><li> 强大的选择器</li><li>出色的<code>DOM</code>操作的封装</li><li>出色的浏览器兼容性</li><li>可靠的事件处理机制</li><li>完善的<code>Ajax</code></li><li>链式操作、隐式迭代</li><li>方便的选择页面元素(模仿<code>CSS</code>选择器更精确、灵活)</li><li>动态更改页面样式/页面内容(操作<code>DOM</code>，动态添加、移除样式)</li><li>控制响应事件(动态添加响应事件)</li><li>提供基本网页特效(提供已封装的网页特效方法)</li><li>快速实现通信(<code>ajax</code>)</li><li>易扩展、插件丰富</li></ul></li></ul><span id="more"></span><ul><li><p><strong>如何引入<code>JQuery</code>包</strong></p><ul><li><p>引入本地的<code>JQuery</code></p></li><li><p>引入<code>Google</code>在线提供的库文件（稳定可靠高速）</p></li><li><p>使用<code>Google</code>提供的<code>API</code>导入 <code>&lt;script type=“text/javascript” src=“jquery.js”&gt;&lt;/script&gt;</code></p></li><li><p>写第一个<code>JQUery</code>案例</p><ul><li>解释:在<code>JQuery</code>库中，<code>$</code>是<code>JQuery</code>的别名，<code>$()</code>等效于就<code>jQuery()</code></li></ul></li></ul></li></ul> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=“text/javascript” src=“”&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">“text/javascript”</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(“jQuery 你好!”);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p><strong>讲解<code>$(function()&#123;&#125;)</code>;</strong></p><ul><li><p><code>$</code>是<code>jQuery</code>别名。如<code>$()</code>也可<code>jQuery()</code>这样写,相当于页面初始化函数，当页面加载完毕，会执行<code>jQuery()</code>。</p></li><li><p>希望在做所有事情之前，<code>JQuery</code>操作<code>DOM</code>文档。必须确保在<code>DOM</code>载入完毕后开始执行，应该用<code>ready</code>事件做处理<code>HTML</code>文档的开始</p></li><li><p><code>$(document).ready(function()&#123;&#125;)</code>;</p><ul><li>类似于<code>js</code>的<code>window.onload</code>事件函数，但是<code>ready</code>事件要先于<code>onload</code>事件执行</li><li><code>window.onload = function()&#123;&#125;</code>;</li></ul></li><li><p>为方便开发，<code>jQuery</code>简化这样的方法，直接用<code>$()</code>表示</p></li><li><p><code>JQuery</code>的<code>ready</code>事件不等于<code>Js</code>的<code>load</code>：</p><ul><li>执行时机不同：<code>load</code>需要等外部图片和视频等全部加载才执行。<code>ready</code>是<code>DOM</code>绘制完毕后执行，先与外部文件</li><li>用法不同：<code>load</code>只可写一次，<code>ready</code>可以多次</li></ul></li></ul></li><li><p><strong><code>window.onload</code>与<code>$(document).ready()</code>对比</strong></p></li></ul><table><thead><tr><th></th><th>window.onload</th><th>$(document).ready()</th></tr></thead><tbody><tr><td>执行时机</td><td>必须等网页中所有内容加载完后(图片)才执行</td><td>网页中的<code>DOM</code>结构绘制完后就执行,可能<code>DOM</code>元素相关的东西并没有加载完</td></tr><tr><td>编写个数</td><td>不能同时执行多个</td><td>能同时执行多个</td></tr><tr><td>简化写法</td><td>无</td><td><code>$(document).ready(function()&#123; //.. &#125;);</code><br /><br />推荐写法：<code>$(function()&#123; &#125;);</code></td></tr></tbody></table><ul><li><p>**<code>jQuery</code>有哪些功能(<code>API</code>)**：</p><ul><li>选择器</li><li>过滤器</li><li>事件</li><li>效果</li><li><code>ajax</code></li></ul></li><li><p><strong>简单的<code>JQuery</code>选择器</strong>：</p><ul><li><code>JQuery</code>基本选择器（<code>ID</code>选择器，标签选择器，类选择器，通配选择器和组选择器<code>5</code>种）</li><li><code>ID</code>选择器：<code>document.getElementById(id)</code>与<code>$(&quot;#id&quot;)</code>对比(改变文字大小)—<code>id</code>唯一，返回单个元素</li><li>标签选择器：<code>document.getElementsByTagName(tagName)</code>与<code>$(&quot;tagname&quot;)</code>对比—多个标签，返回数组</li><li>类选择器:<code>$(&quot;.className&quot;)</code>–多个<code>classname</code>（改变背景图片）</li><li>通配选择器：<code>document.getElementsByTagName(&quot;*&quot;)</code>与<code>$(&quot;*&quot;)</code>对比—指范围内的所有标签元素</li><li>组选择器：<code>$(&quot;seletor1,seletor2,seletor3&quot;)</code>—-无数量限制，用逗号分割</li></ul></li></ul><h4 id="初步了解JQuery"><a href="#初步了解JQuery" class="headerlink" title="初步了解JQuery"></a>初步了解<code>JQuery</code></h4><hr><ul><li><p><strong><code>JQuery</code>是什么</strong></p><ul><li><code>javascript</code>用来干什么的：<ul><li>操作<code>DOM</code>对象</li><li>动态操作样式<code>css</code></li><li>数据访问</li><li>控制响应事件等</li></ul></li><li><code>jQuery</code>作用一样，只是更加快速简洁</li></ul></li><li><p><strong>如何引用<code>JQuery</code></strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">写第一个JQUery案例</span><br><span class="line">&lt;script type=“text/javascript” src=“”&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">“text/javascript”</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(“jQuery 你好!”);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>$()讲解</code></strong></p><ul><li><code>$</code>在<code>JQuery</code>库中，<code>$</code>是<code>JQuery</code>的别名，<code>$()</code>等效于就<code>jQuery()</code>.</li><li><code>$()</code>是<code>JQuery</code>方法,赞可看作是<code>JQuery</code>的选择器，与<code>css</code>选择器相似（可做对比）</li><li><code>var jQuery==$ =function()&#123;&#125;</code> <code>$()</code>本质就是一个函数也就是 <code>jQuery</code>的核心函数</li><li>只要是<code>jQuery</code>的对象都这样变量加上一个<code>符号$ </code>方便识别：<code>var $div = $(&quot;#&quot;)</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>　<span class="title">$</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>$()</code>和<code>document</code>是相等的吗</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">alert(document.getElementById(&quot;id&quot;) == $(&quot;#aa&quot;));//返回结果为false</span><br><span class="line">alert(document.getElementById(&quot;id&quot;) == $(&quot;#aa&quot;).get(0));//返回true</span><br></pre></td></tr></table></figure><ul><li><p><strong>代理对象<code>$()</code></strong></p><ul><li><code>jQuery</code>中返回的是代理对象本身</li><li><code>jQuery</code>的核心原理是通过选择器找到对应的代理对象</li><li><code>jQuery</code>全都是通过方法操作</li><li>样式选择器<code>$(&quot;.className&quot;)</code><ul><li><code>$(&quot;.aa&quot;).css(&quot;color&quot;,&quot;green&quot;);</code></li></ul></li><li>id选择器(“”)<ul><li><code>$(&quot;#a&quot;).css(&quot;background-color&quot;,&quot;#ff0066&quot;);</code></li></ul></li><li>标签选择器<ul><li><code>$(&quot;p&quot;).css(&quot;color&quot;,&quot;#cc3366&quot;);</code></li></ul></li><li>组选择器<ul><li><code>$(&quot;#b ul li&quot;).size();</code></li></ul></li></ul></li><li><p><strong>对象转换(<code>$(element)</code>)</strong></p><ul><li>原生<code>dom</code>对象和<code>jquery</code>代理对象的相互转换</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(传入的原生对象);</span><br><span class="line"><span class="comment">//原生对象转化成jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> nav = <span class="built_in">document</span>.getElementById(<span class="string">&quot;nav&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> $nav = $(nav);</span><br><span class="line">alert($nav.get(<span class="number">0</span>) == nav);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>检索范围的限制（<code>$(&#39;字符串&#39;,element)</code>）</strong></p><ul><li><p><strong>总结：三种写法对比：</strong></p><ul><li><p>方式一：不推荐 搜索速度最慢</p><ul><li><code>$(&quot;#nav&quot;).css();</code></li><li><code>$(&quot;#nav li&quot;).css();</code></li></ul></li><li><p>方式二：搜索速度最快 链式操作</p><ul><li><code>$(&quot;#nav&quot;).css().children().css();</code></li></ul></li><li><p>方式三：也常用 速度第二快</p><ul><li><code>var $nav = $(&quot;#nav&quot;).css()</code>;</li><li><code>$(&quot;li&quot;,#nav).css()</code>;  <code>$nav </code>限制了搜索范围 速度快</li></ul></li></ul></li></ul></li><li><p><strong>总结： <code>$()</code> <code>jquery</code>核心方法的作用和使用场景</strong></p><ul><li>如果是一个字符串参数并且没有标签对（选择器）<code> $(ul.nav&quot;)</code></li><li>如果是一个字符串参数并且有标签对（创建<code>html</code>标签）<code>$(&quot;&lt;img&gt;&quot;)</code> –最终加到<code>DOM</code>树中 <code>$xx.append(&quot;&lt;img&gt;&quot;)</code>;</li><li>如果是传入一个<code>element dom</code>对象，直接包装为<code>proxy</code>对象返回 <code>$(DOM对象)</code></li><li>如果第一个参数是字符串，第二个是<code>element</code> <code>dom</code>对象的话，那么就是在<code>element</code>这个<code>dom</code>对象里面寻找选择器对应的元素并且代理 <code>$(&quot;li&quot;,$DOM对象)</code></li></ul></li></ul><ul><li><strong>代理模式以及代理内存结构</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111714993.png" alt="代理内存结构1"></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111715711.png" alt="代理内存结构2"></p><h3 id="第二节-选择器"><a href="#第二节-选择器" class="headerlink" title="第二节 选择器"></a>第二节 选择器</h3><hr><ul><li><strong>来回顾一下<code>CSS</code>常用的选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>标签选择器</td><td><code>E&#123;css规则&#125;</code></td><td>以文档元素作为选择符</td></tr><tr><td><code>ID</code>选择器</td><td><code>#ID&#123;css规则&#125;</code></td><td><code>ID</code>作为选择符</td></tr><tr><td>类选择器</td><td><code>E.className&#123;css规则&#125;</code></td><td><code>class</code>作为选择符</td></tr><tr><td>群组选择器</td><td><code>E1,E2,E3&#123;css规则&#125;</code></td><td>多个选择符应用同样的样式</td></tr><tr><td>后代选择器</td><td><code>E F&#123;css规则&#125;</code></td><td>元素<code>E</code>的任意后代元素<code>F</code></td></tr></tbody></table><h4 id="选择器引擎规则-39-字符串-39"><a href="#选择器引擎规则-39-字符串-39" class="headerlink" title="选择器引擎规则($(&#39;字符串&#39;))"></a>选择器引擎规则(<code>$(&#39;字符串&#39;)</code>)</h4><ul><li><p><code>css</code>选择器的规则</p><ul><li>标签选择器 – $(‘p’)</li><li><code>id</code>选择器 – $(‘#id’)</li><li>类选择器 – $(‘.class’)</li><li>混合选择器 – $(‘.class p’)</li></ul></li><li><p><code>css3</code>的选择器规则</p></li><li><p>状态和伪类（<code>:even</code> <code>:odd</code> <code>:first</code> <code>:last</code> <code>:eq(index)</code>）</p></li><li><p>属性（<code>[attr=value]</code>）</p></li></ul><h4 id="层级选择器-通过DOM的嵌套关系匹配元素"><a href="#层级选择器-通过DOM的嵌套关系匹配元素" class="headerlink" title="层级选择器:通过DOM的嵌套关系匹配元素"></a>层级选择器:通过<code>DOM</code>的嵌套关系匹配元素</h4><ul><li><code>jQuery</code>层级选择器—-包含选择器、子选择器、相邻选择器、兄弟选择器4种</li><li>a.包含选择器：<code>$(&quot;a b&quot;)</code>在给定的祖先元素下匹配所有后代元素。(不受层级限制)</li><li>b.子选择器：<code>$(&quot;parent &gt; child&quot;) </code>在给定的父元素下匹配所有子元素。</li><li>c.相邻选择器：<code>$(&quot;prev + next&quot;)</code> 匹配所有紧接在<code>prev</code>元素后的<code>next</code>元素。</li><li>d.兄弟选择器：<code>$(&quot;prev ~ siblings&quot;)</code> 匹配prev元素之后的所有<code>sibling</code>元素。</li></ul><h4 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h4><hr><ul><li><strong>基本过滤选择</strong></li></ul><table><thead><tr><th>选择器</th><th>说明</th><th>返回</th></tr></thead><tbody><tr><td><code>:first</code></td><td>匹配第一个元素</td><td>单个元素</td></tr><tr><td><code>:last</code></td><td>匹配最后一个元素</td><td>单个元素</td></tr><tr><td><code>:eq()</code></td><td>匹配一个给定索引值的元素</td><td>单个元素</td></tr><tr><td><code>:even</code></td><td>选索引为偶数的元素(从0开始)</td><td>集合元素</td></tr><tr><td><code>:odd</code></td><td>选索引为奇数的元素(从0开始)</td><td>集合元素</td></tr><tr><td><code>:gt(index)</code></td><td>选索引大于index的元素(从0开始)</td><td>集合元素</td></tr><tr><td><code>:lt(index)</code></td><td>选索引小于index的元素(从0开始)</td><td>集合元素</td></tr><tr><td><code>:filter</code></td><td>$(‘li’).filter(‘.demo’),选中li里面class类名是demo的li，返回<code>true</code>的元素</td><td>集合元素</td></tr><tr><td><code>:not</code></td><td>和filter正好相反</td><td>集合元素</td></tr><tr><td><code>:animated</code></td><td>选取当前正在执行动画的所有元素</td><td>集合元素</td></tr><tr><td><code>:focus</code></td><td>选取当前正在获取焦点的元素</td><td>集合元素</td></tr><tr><td><code>:find(elem)</code></td><td>选择当前元素中所有后代为elem的元素</td><td>集合元素</td></tr></tbody></table><ul><li><strong>内容过滤选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td><code>:contains(text)</code></td><td>选取含有文本内容为text的元素</td><td>集合元素</td></tr><tr><td><code>:empty</code></td><td>选取不包含子元素获取文本的空元素</td><td>集合元素</td></tr><tr><td><code>:has(selector)</code></td><td>选择返回在子元素中拥有一个elem元素的所有父级元素</td><td>集合元素</td></tr><tr><td><code>:parent</code></td><td>选取含有子元素或者文本的元素</td><td>集合元素</td></tr></tbody></table><ul><li><strong>可见过滤选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td><code>:hidden</code></td><td>选择所有不可见的元素</td><td>集合元素</td></tr><tr><td><code>:visible</code></td><td>选取所有可见的元素</td><td>集合元素</td></tr></tbody></table><ul><li><strong>属性过滤选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>说明</th><th>返回</th></tr></thead><tbody><tr><td><code>[attribute]</code></td><td>选取拥有此属性的元素</td><td>集合元素</td></tr><tr><td><code>[attribute=value]</code></td><td>选取属性值为<code>value</code>值的元素</td><td>集合元素</td></tr><tr><td><code>[attribue^=value]</code></td><td>选取属性的值以<code>value</code>开始的元素</td><td>集合元素</td></tr><tr><td><code>[attribue$=value]</code></td><td>选取属性的值以<code>value</code>结束的元素</td><td>集合元素</td></tr></tbody></table><ul><li><strong>子元素过滤选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>说明</th><th>返回</th></tr></thead><tbody><tr><td><code>:nth-child(index/even/odd)</code></td><td>选取每个父元素下的第index个子元素或者奇偶元素（<code>index</code>从<code>1</code>算起）</td><td>集合元素</td></tr><tr><td><code>:first-child</code></td><td>选取每个元素的第一个子元素</td><td>集合元素</td></tr><tr><td><code>:last-child</code></td><td>选取每个元素的最后一个子元素</td><td>集合元素</td></tr></tbody></table><ul><li><p><code>:nth-child()</code>选择器是很常用的子元素过滤选择器，如下</p><ul><li><code>:nth-child(even)</code>选择每个父元素下的索引值是偶数的元素</li><li><code>:nth-child(odd)</code>选择每个父元素下的索引值是奇数的元素</li><li><code>:nth-child(2)</code>选择每个父元素下的索引值是<code>2</code>的元素</li><li><code>:nth-child(3n)</code>选择每个父元素下的索引值是3的倍数的元素 (<code>n</code>从<code>1</code>开始)</li></ul></li><li><p><strong>表单对象属性过滤选择器</strong></p></li></ul><table><thead><tr><th>选择器</th><th>说明</th><th>返回</th></tr></thead><tbody><tr><td><code>:enabled</code></td><td>选取所有可用元素</td><td>集合元素</td></tr><tr><td><code>:disabled</code></td><td>选取所有不可用元素</td><td>集合元素</td></tr><tr><td><code>:checked</code></td><td>选取所有被选中的元素（单选框、复选框）</td><td>集合元素</td></tr><tr><td><code>:selected</code></td><td>选取所有被选中的元素（下拉列表）</td><td>集合元素</td></tr></tbody></table><ul><li><strong>表单选择器</strong></li></ul><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td><code>:input</code></td><td>选取所有<code>input </code> <code>textarea </code> <code>select</code> <code>button</code>元素</td></tr><tr><td><code>:text</code></td><td>选取所有单行文本框</td></tr><tr><td><code>:password</code></td><td>选取所有密码框</td></tr><tr><td><code>:radio</code></td><td>选取所有单选框</td></tr><tr><td><code>:checkbox</code></td><td>选取所有多选框</td></tr><tr><td><code>:submit</code></td><td>选取所有的提交按钮</td></tr><tr><td><code>:image</code></td><td>选取所有的图像按钮</td></tr><tr><td><code>:reset</code></td><td>选取所有的重置按钮</td></tr><tr><td><code>:button</code></td><td>选取所有的按钮</td></tr><tr><td><code>:file</code></td><td>选取所有的上传域</td></tr><tr><td><code>:hidden</code></td><td>选取所有的不可见元素</td></tr></tbody></table><ul><li><p><strong>特定位置选择器</strong></p><ul><li><code>:first</code></li><li><code>:last</code></li><li><code>:eq(index)</code></li></ul></li><li><p><strong>指定范围选择器</strong></p><ul><li><code>:even</code></li><li><code>:odd</code></li><li><code>:gt(index)</code></li><li><code>:lt(index)</code></li></ul></li><li><p><strong>排除选择器</strong></p><ul><li><code>:not</code> 非</li></ul></li></ul><h3 id="第三节-选择器优化"><a href="#第三节-选择器优化" class="headerlink" title="第三节 选择器优化"></a>第三节 选择器优化</h3><hr><ul><li><p>使用合适的选择器表达式可以提高性能、增强语义并简化逻辑。常用的选择器中，<code>ID</code>选择器速度最快，其次是类型选择器。</p><ul><li>a. 多用<code>ID</code>选择器</li><li>b. 少直接使用<code>class</code>选择器</li><li>c. 多用父子关系，少用嵌套关系</li><li>d. 缓存<code>jQuery</code>对象</li></ul></li><li><p><strong>使用过滤器</strong></p><ul><li><code>jQuery</code>提供了<code>2</code>种选择文档元素的方式：选择器和过滤器</li><li>a. 类过虑器：根据元素的类属性来进行过滤操作。<ul><li><code>hasClass(className)</code>：判断当前<code>jQuery</code>对象中的某个元素是否包含指定类名，包含返回<code>true</code>，不包含返回<code>false</code></li></ul></li><li>b. 下标过滤器：精确选出指定下标元素<ul><li><code>eq(index)</code>：获取第<code>N</code>个元素。<code>index</code>是索引值，下标从<code>0</code>开始</li></ul></li><li>c. 表达式过滤器<ul><li><code>filter(expr)/(fn)</code>：筛选出与指定表达式/函数匹配的元素集合。<br><code>如：$(&#39;li&#39;).filter(&#39;.demo&#39;),li里面class类名是demo的li，filter里面也可以填写function函数，如：$(&#39;li&#39;).filter(function(index) &#123;   return true / false / 条件; &#125;)</code></li><li>功能最强大的表达式过滤器，可接收函数参数，也可以是简单的选择器表达式</li></ul></li><li>e. 清洗 <code>not(expr)</code>：和filter正好相反，返回true都不要</li><li>d. 映射 <code>map(callback)</code>：将一组元素转换成其他数组</li><li>f. 截取 <code>slice(start,end)</code>：选取一个匹配的子集</li></ul></li><li><p><strong>查找</strong></p><ul><li>向下查找后代元素<ul><li><code>children()</code>:取得所有元素的所有子元素集合（子元素）</li><li><code>find()</code>:搜索所有与指定表达式匹配的元素(所有后代元素中查找)</li></ul></li><li>查找兄弟元素 <code>siblings()</code>查找当前元素的兄弟</li></ul></li></ul><h3 id="第四节-代理对象属性和样式操作"><a href="#第四节-代理对象属性和样式操作" class="headerlink" title="第四节 代理对象属性和样式操作"></a>第四节 代理对象属性和样式操作</h3><hr><ul><li><p><strong>代理对象属性和样式操作</strong></p></li><li><p><code>attr</code></p><ul><li><code>prop</code>(一般属性值是<code>boolean</code>的值或者不用设置属性值，一般使用)</li><li><code>css</code>(最好不用，一般我用来做测试)</li><li><code>addClass</code> / <code>removeClass</code></li></ul></li><li><p>操作原生<code>DOM</code>的时候用的方式：一次只能操作一个</p><ul><li>操作属性：<code>setAttribute</code> / <code>getAttribute</code></li><li>操作样式：<code>style.xx = value</code></li><li>操作类样式：<code>className=&#39;&#39;</code></li><li>获取<code>DOM</code>的子元素<code>children</code>属性</li><li><code>DOM</code>里面添加一个子元素<code>appendChild()</code></li></ul></li><li><p>操作<code>jQuery</code>代理对象的时候：批量操作<code>DOM</code>对象(全都是通过方法操作)</p></li><li><p>操作属性：<code>attr()</code>、<code>prop()</code></p><ul><li><p><code>attr</code>和<code>prop</code>区别：如果属性的值是布尔类型的值 用<code>prop</code>操作 反之<code>attr</code></p></li><li><p><code>attr</code>主要依赖的是Element对象的<code>getArribute()</code>和<code>setAttribute()</code>两个方法</p></li><li><p><code>prop</code>主要依赖的是JS中的对象属性和设置方式</p></li></ul></li><li><p>操作样式：<code>css()</code></p><ul><li>css() 给dom赋予样式，可以链式调用，有两种写法<ul><li>如：$(‘li’).css(‘color’,’red’).css(‘font-size’,’22px’);</li><li>如:$(‘li’).css({color:’red’,font-size:’red’})</li></ul></li></ul></li><li><p>操作类样式：<code>addClass()</code> <code>removeClass()</code></p><ul><li><code>addClass()</code>: 给元素添加Class类名</li><li><code>removeClass()</code>: 给元素删除Class类名,不添加值就是删除所有Class类名</li></ul></li><li><p>操作<code>DOM</code>子元素：<code>children()</code></p></li><li><p>添加子元素：<code>append()</code></p></li></ul><h3 id="第五节-jQuery中DOM操作"><a href="#第五节-jQuery中DOM操作" class="headerlink" title="第五节 jQuery中DOM操作"></a>第五节 jQuery中DOM操作</h3><hr><ul><li><p><code>DOM</code>是一种与浏览器、平台|语言无关的接口，使用该接口可以轻松的访问 页面中的所有的标准组件</p></li><li><p><strong><code>DOM</code>操作的分类</strong></p><ul><li><p><strong><code>DOM Core</code></strong></p><ul><li><code>DOM core</code>并不专属于<code>JavaScript</code>，任何支持<code>DOM</code>的程序都可以使用</li><li><code>JavaScript</code> 中的<code>getElementByID()</code> <code>getElementsByTagName()</code> <code>getAttribute()</code> <code>setAttribute()</code>等方法都是<code>DOM Core</code>的组成部分</li></ul></li><li><p><strong><code>HTML-DOM</code></strong></p><ul><li><code>HTML -DOM</code>的出现比<code>DOM-Core</code>还要早，它提供一些更简明的标志来描述<code>HTML</code>元素的属性</li></ul></li><li><p>比如：使用<code>HTML-DOM</code>来获取某元素的<code>src</code>属性的方法</p><ul><li><code>element.src</code></li></ul></li><li><p><strong><code>CSS-DOM</code></strong></p><ul><li>针对<code>CSS</code>的操作。在<code>JavaScript</code>中，主要用于获取和设置<code>style</code>对象的各种属性，通过改变<code>style</code>对象的属性，使网页呈现不同的效果</li></ul></li></ul></li></ul><h4 id="查找、创建、删除、复制、替换节点"><a href="#查找、创建、删除、复制、替换节点" class="headerlink" title="查找、创建、删除、复制、替换节点"></a>查找、创建、删除、复制、替换节点</h4><ul><li><strong>查找节点</strong><ul><li>查找属性节点 <code>attr()</code> 可以获取各属性的值</li></ul></li><li><strong>创建节点</strong><ul><li><code>$(html)</code>：根据传递的标记字符串，创建<code>DOM</code>对象</li></ul></li><li><strong>插入节点</strong></li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>append()</code></td><td>插入到所有子元素的最后一位,父元素在子元素的前面,返回的是父元素</td></tr><tr><td><code>appendTo()</code></td><td>颠倒<code>append()</code>的操作,子元素在父元素的前面,返回的是子元素</td></tr><tr><td><code>prepend()</code></td><td>插入到所有子元素的第一位,父元素在子元素的前面,返回的是父元素</td></tr><tr><td><code>prependTo()</code></td><td>颠倒<code>prepend()</code>的操作,子元素在父元素的前面,返回的是子元素</td></tr><tr><td><code>after()</code></td><td>h剪切到元素的后面,父元素在子元素前面,返回的是父级元素</td></tr><tr><td><code>insertAfter()</code></td><td>颠倒<code>after()</code>的操作,子元素在父元素的前面,返回的是子元素</td></tr><tr><td><code>before()</code></td><td>剪切到元素的前面,和原生<code>js</code>中的<code>insertBefore</code>像,父元素在子元素前面,返回的是父元素</td></tr><tr><td><code>insertBefore()</code></td><td>颠倒<code>before()</code>的操作,子元素在父元素后面,返回的是子元素</td></tr></tbody></table><ul><li><p><strong>删除节点</strong></p><ul><li><code>jQuery</code>提供了三种删除节点的方法 <code>remove()</code> <code>detach()</code> <code>empty()</code></li></ul></li><li><p><strong><code>remove()方法</code></strong></p><ul><li>当某个节点用<code>remove()</code>方法删除后，该节点所包含的所有后代节点将同时被删除，将会只剩下一个DOM元素，不再有事件功能了，但还是可以继续使用删除后的引用</li></ul></li><li><p><strong><code>detach()</code></strong></p><ul><li>和<code>remove()</code>方法一样，也是从<code>DOM</code>中去掉所有匹配的元素，与<code>remove()</code>不同的是，所有绑定的事件、附加的数据等，都会被保留下来，等待下一次的使用</li></ul></li><li><p><strong><code>empty()</code></strong></p><ul><li><code>empty()</code>方法并不是删除节点，而是清空节点，它能清空元素中所有后代节点</li></ul></li><li><p><strong>复制节点</strong></p><ul><li>使用<code>clone()</code>方法来完成</li><li>在<code>clone()</code>方法中传递一个参数<code>true</code>，同时克隆元素中所绑定的事件</li></ul></li><li><p><strong>替换节点</strong></p><ul><li><code>replaceWith()</code>:将所有匹配的元素替换成指定的元素</li><li><code>replaceAll()</code>:用匹配的元素替换掉指定元素</li><li>注意：两者效果一致，只是语法不同 <code>$A.replaceAll($B) </code>等效于 <code>$B.replaceWhith($A)</code>;</li></ul></li></ul><h4 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h4><ul><li>获取样式和设置样式 <code>attr()</code></li><li>追加样式 <code>addClass()</code>，添加<code>属性</code></li><li>移除样式 <code>removeClass()</code>移除<code>属性</code></li><li>切换样式<ul><li><strong><code>toggle()</code></strong> 方法只要是控制行为上的重复切换（如果元素是显示的，则隐藏；如果元素原来是隐藏的，则显示）</li><li><strong><code>toggleClass()</code></strong> 方法控制样式上的重复切换（如何类名存在，则删除它，如果类名不存在，则添加它）</li></ul></li><li>判断是否含有某个样式<ul><li><strong><code>hasClass()</code></strong> 可以用来判断元素是否含有某个<code>class</code>,如有返回<code>true</code> 该方法等价于<code>is()</code></li></ul></li><li><strong>设置和获取HTML、文本和值</strong><ul><li><strong><code>html()</code></strong><ul><li>此方法类似<code>JavaScript</code>中<code>innerHTML</code>属性，可以用来读取和设置某个元素中的<code>HTML</code>内容</li></ul></li><li><strong><code>text()</code></strong><ul><li>此方法类型<code>JavaScript</code>中<code>innerHTML</code>，用来读取和设置某个元素中的文本内容</li></ul></li><li><strong><code>val()</code></strong><ul><li>此方法类似<code>JavaScript</code>中的<code>value</code>属性，用来设置获取元素的值。无论是文本框、下拉列表还是单选框，都可以返回元素的值，如果元素多选，返回一个包含所有选择的值的数组</li></ul></li></ul></li></ul><h4 id="遍历节点"><a href="#遍历节点" class="headerlink" title="遍历节点"></a>遍历节点</h4><ul><li><strong><code>children()</code></strong> 方法<ul><li>该方法用来取得匹配元素的子元素集合</li><li><code>childre()</code>方法只考虑子元素而不考虑其他后代元素</li></ul></li><li><strong><code>next()</code></strong> 方法<ul><li>选中当前元素下一个同级元素</li></ul></li><li><strong><code>nextAll()</code></strong> 方法<ul><li>当前元素下面所有的同级元素</li></ul></li><li><strong><code>prev()</code></strong> 方法<ul><li>返回被选元素的前一个同级元素</li></ul></li><li><strong><code>prevAll()</code></strong> 方法<ul><li>当前元素前面的所有同级元素</li></ul></li><li><strong><code>siblings()</code></strong> 方法<ul><li>用于匹配元素前后所有的同级元素</li></ul></li><li><strong><code>prevUntil()</code></strong> 方法<ul><li><code>$(&quot;selector&quot;).prevUntil(&quot;stop&quot;)</code></li><li><code>prevUntil()</code>方法返回<code>selector</code>与<code>stop</code>之间，selector之前，stop之后的所有同级元素</li><li>返回在类名为 “selector” 和 “stop”的两个<code>&lt;li&gt;</code>元素之间的所有同级元素：</li></ul></li><li><strong><code>nextUntil()</code></strong> 方法<ul><li><code>$(&quot;selector&quot;).nextUntil(&quot;stop&quot;)</code></li><li><code>nextUntil()</code>方法返回<code>selector</code>与<code>stop</code>之间，selector之后，stop之前的所有同级元素</li><li>返回在类名为 “selector” 和 “stop”的两个<code>&lt;li&gt;</code>元素之间的所有同级元素：</li></ul></li><li><strong><code>parent()</code></strong> 方法<ul><li>获得当前元素的直接父级元素,可以传参,判断自己的直接父元素是不是这个</li></ul></li><li><strong><code>parents()</code></strong> 方法<ul><li>获得当前元素的每个祖先元素,可以传参,筛选出来传参的那个dom元素</li></ul></li><li><strong><code>offsetparent()</code></strong> 方法<ul><li>返回离自己最近有定位的父级元素</li></ul></li><li><strong><code>closest()</code></strong> 方法<ul><li>传入参数,从元素本身开始，逐级向上级元素匹配，并返回最先匹配的祖先元素</li></ul></li><li><strong><code>each()</code></strong> 方法<ul><li>遍历数组元素</li><li><code>each(function(index,ele)&#123;&#125;) index</code>：代表索引值，ele：代表元素本身</li></ul></li></ul><h4 id="定位操作"><a href="#定位操作" class="headerlink" title="定位操作"></a>定位操作</h4><ul><li><code>CSS DOM</code>技术简单的来说就是读取和设置<code>style</code>对象的各种属性</li><li>用<code>css()</code>方法获取元素的样式属性，可以同时设置多个样式属性</li><li><strong><code>CSS DOM</code>中关于元素定位有几个常用的方法</strong></li><li><strong><code>offset()</code></strong> 方法<ul><li>它的作用是获取元素在当前视窗的相对偏移其中返回的对象包含两个属性，即<code>top</code>和<code>left</code>，他只对可见元素有效</li></ul></li><li><strong><code>position()</code></strong> 方法<ul><li>获取相对于最近的一个<code>position()</code>样式属性设置为<code>relative</code>或者<code>absolute</code>的祖父节点的相对偏移，与<code>offset()</code>一样，他返回的对象也包括两个属性，即<code>top</code>和<code>left</code></li></ul></li><li><strong><code>scrollTop()</code></strong> 方法和 <strong><code>scrollLeft()</code></strong> 方法<ul><li>这两个方法的作用分别是获取元素的滚动条距顶端的距离和距左侧的距离</li><li><strong>一张图总结以上的位置关系(项目中很常用-必须要弄清楚)</strong></li></ul></li><li><strong><code>width()</code></strong> 方法<ul><li>取得第一个匹配元素当前计算的实际宽度值（px）</li></ul></li><li><strong><code>height()</code></strong> 方法<ul><li>取得匹配元素当前计算的实际高度值（px）。</li></ul></li><li><strong><code>innerWidth()</code></strong> 方法<ul><li>获取第一个匹配元素内部区域宽度（包括补白、不包括边框）（content + padding）</li></ul></li><li><strong><code>innerHeight()</code></strong> 方法<ul><li>获取第一个匹配元素内部区域高度（包括补白、不包括边框）（content + padding）</li></ul></li><li><strong><code>outerWidth()</code></strong> 方法<ul><li>获取第一个匹配元素外部宽度（默认包括补白和边框）（content + padding + border），参数为<code>true</code>的时候，求出宽度带有<code>margin</code></li></ul></li><li><strong><code>outerHeight()</code></strong> 方法<ul><li>获取第一个匹配元素外部高度（默认包括补白和边框）（content + padding + border），参数为<code>true</code>的时候，求出宽度带有<code>margin</code></li></ul></li></ul><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul><li><p><strong><code>wrap()</code></strong> 方法</p><ul><li>把选中的元素用其他元素的结构化标记包裹起来</li><li>如：<code>$(&#39;li&#39;).wrap($(&#39;&lt;div&gt;&#39;))</code>，把每一个<code>li</code>用<code>div</code>包裹起来</li><li><code>wrap(function(index,ele)&#123;&#125;)</code> 可以用函数判断包裹</li></ul></li><li><p><strong><code>wrapInner()</code></strong> 方法</p><ul><li>把传入的<code>dom</code>元素包裹住选中元素的内容</li><li>如：<code>$(&#39;li&#39;).wrapInner($(&#39;&lt;div&gt;&#39;))</code>，用<code>div</code>把<code>li</code>里面的内容包裹起来</li></ul></li><li><p><code>wrapInner(function(index,ele)&#123;&#125;)</code> 可以用函数判断包裹</p></li><li><p><strong><code>wrapAll()</code></strong> 方法</p><ul><li>将所有选中的元素用单个元素包裹起来</li><li>容易破坏页面结构<ul><li>就是把所有的被选中的元素集和到了一起，把不属于这个元素的都剔除了，如<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">&#x27;li&#x27;</span>).wrappAll(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong><code>unwrap()</code></strong> 方法</p></li><li><p>unwrap() 方法删除被选元素的父元素，也可以传入<code>dom</code>参数</p></li><li><p><strong><code>end()</code></strong> 方法</p><ul><li>回到最近的一个”破坏性”操作之前。即，将匹配的元素列表变为前一次的状态。</li><li>他之前会在<code>prevObject</code>上面存储上一次操作的内容，<code>end()</code>就是调用了prevObject里面的内容，所以说调取<code>end()</code>就相当于调取了<code>prevObject</code></li></ul></li><li><p><strong><code>add()</code></strong> 方法</p><ul><li>将元素添加到选好的元素的集合中</li><li>把<code>&lt;p&gt;</code>和<code>&lt;span&gt;</code>元素添加到已存在的元素组合中<code>&lt;h1&gt;</code></li><li>可以集中操作</li><li><code>$(&#39;li&#39;).eq(0).add($(&#39;li&#39;).eq(4)).css(&#123;width:100&#125;)</code> 选中第一个<code>li</code>和最后一个<code>li</code>添加样式</li></ul></li><li><p><strong><code>slice(a,b)</code></strong> 方法</p><ul><li>选取一个匹配的子集</li><li>选取<code>a</code>到<code>b</code>之间的内容，包括<code>a</code>,不包括<code>b</code>（算头不算尾）</li></ul></li><li><p><strong><code>is()</code></strong> 方法</p><ul><li>判断是不是的</li><li>返回<code>true/false</code></li></ul></li></ul><h3 id="第六节-jQuery中的事件"><a href="#第六节-jQuery中的事件" class="headerlink" title="第六节 jQuery中的事件"></a>第六节 jQuery中的事件</h3><hr><ul><li><p><strong>事件对象的属性</strong></p><ul><li><p><code>event.type</code>：获取事件的类型</p></li><li><p><code>event.target</code>:获取到触发事件的元素</p></li><li><p><code>event.preventDefault</code>方法 阻止默认事件行为</p></li><li><p><code>event.stopPropagation()</code>阻止事件的冒泡</p></li><li><p><code>keyCode</code>：只针对于<code>keypress</code>事件，获取键盘键数字 按下回车，<code>13 </code></p></li><li><p><code>event.pageX / event.pageY</code> 获取到光标相对于页面文档的<code>x</code>坐标和<code>y</code>坐标</p><ul><li> 如果没有<code>jQuery</code>，在IE浏览器中用<code>event.x</code> / <code>event.y</code>;在<code>Firefox</code>浏览器中用<code>event.pageX</code> / <code>event.pageY</code>。如果页面上有滚动条还要加上滚动条的宽度和高度</li></ul></li><li><p><code>event.clientX</code>：光标对于浏览器窗口的水平坐标</p></li><li><p><code>event.clientY</code>：光标对于浏览器窗口的垂直坐标</p></li><li><p><code>event.screenX</code>：光标对于电脑屏幕的水平坐标    电脑屏幕</p></li><li><p><code>event.screenY</code>：光标对于电脑屏幕的水平坐标</p></li><li><p> <code>event.which</code> 该方法的作用是在鼠标单击事件中获取到鼠标的左、中、右键，和在键盘事件中的按键 <code>1</code>代表左键  <code>2</code>代表中键  <code>3</code>代表右键</p></li></ul></li><li><p><strong>事件冒泡</strong></p><ul><li>什么是冒泡<ul><li>在页面上可以有多个事件，也可以多个元素影响同一个元素</li><li>从里到外</li><li>嵌套关系</li><li>相同事件</li><li>其中的某一父类没有相同事件时,继续向上查找</li></ul></li></ul></li><li><p><strong>停止事件冒泡</strong></p><ul><li>停止事件冒泡可以阻止事件中其他对象的事件处理函数被执行</li><li>在<code>jQuery</code>中提供了**<code>stopPropagation()</code>**方法</li></ul></li><li><p><strong>阻止默认行为</strong></p><ul><li>网页中元素有自己的默认行为，例如：单击超链接后会跳转、单击提交后表单会提交，有时需要阻止元素的默认行为</li><li>在<code>jQuery</code>中提供了<code> preventDefault()</code>方法来阻止元素的默认行为</li></ul></li><li><p><strong>事件捕获</strong></p><ul><li>事件捕获和冒泡是相反的过程，事件捕获是从最顶端往下开始触发</li><li>并非所有的浏览器都支持事件捕获，并且这个缺陷无法通过<code>JavaScript</code>来修复。<code>jQuery</code>不支持事件捕获，如需要用事件捕获，要用原生的<code>JavaScript</code></li></ul></li><li><p><strong>绑定自定义事件</strong></p><ul><li><code>trigger(参数1,参数2)</code>：方法触发被选元素的自定义指定事件类型</li><li>参数1:自己定义的事件</li><li>参数2:自己传入的参数</li><li>例如：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#demo&#x27;</span>).on(<span class="string">&#x27;eat&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event,a</span>)</span>&#123; <span class="comment">// a就是传入的[100]</span></span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&#x27;#demo&#x27;</span>).tigger(<span class="string">&#x27;eat&#x27;</span>,[<span class="number">100</span>]);</span><br></pre></td></tr></table></figure></li><li>会事件冒泡</li></ul></li><li><p><strong><code>on()</code>;事件绑定方法</strong></p><ul><li><p><code>on(events,[selector],[data],fn);</code></p></li><li><p><code>on(事件类型,事件源,额外数据,执行函数)</code></p></li><li><p><strong><code>bind()</code>;绑定，旧版本的</strong></p></li><li><p>为匹配元素绑定处理方法</p></li><li><p>需要给一个元素添加多个事件 ，事件执行一样时候</p></li><li><p><code>one()</code>：只执行一次</p></li></ul></li><li><p><strong><code>off()</code>;取消事件绑定方法</strong></p><ul><li>off(events,[selector],fn);</li><li>off(事件类型,事件源,执行函数)</li></ul></li></ul><ul><li><strong>绑定特定事件类型方法</strong>：</li></ul><table><thead><tr><th>分类</th><th>页面载入方法</th><th>说明</th></tr></thead><tbody><tr><td>页面载入</td><td><code>ready(fn)</code></td><td>当<code>DOM</code>载入就绪可以绑定一个要执行的函数</td></tr></tbody></table><table><thead><tr><th>分类</th><th>事件绑定（解除绑定）方法</th><th>说明</th></tr></thead><tbody><tr><td>事件绑定</td><td><code>on(type,[selector],[data],fn)</code></td><td>在选择元素上绑定一个或者多个事件处理函数，[data]是参数，[selector]是事件源对象</td></tr><tr><td>事件绑定</td><td><code>off()</code></td><td>移除<code>on</code>绑定的事件，可以添加事件源，分别取消事件,添加事件</td></tr><tr><td>事件绑定</td><td><code>one()</code></td><td>只触发绑定事件一次</td></tr><tr><td>事件绑定</td><td><code>bind(type,[data],fn)</code></td><td>为每个匹配元素的特定事件绑定一个事件处理函数</td></tr><tr><td>事件绑定</td><td><code>unblind()</code></td><td>解除绑定</td></tr><tr><td>事件绑定</td><td><code>delegate(selector,eventType,handler)</code></td><td>为所有选择匹配元素附加一个或多个事件处理函数</td></tr><tr><td>事件绑定</td><td><code>undelegate()</code></td><td>移除绑定</td></tr></tbody></table><table><thead><tr><th>分类</th><th>事件动态方法</th><th>说明</th></tr></thead><tbody><tr><td>事件动态</td><td><code>live(type,fn)</code></td><td>对动态生成的元素进行事件绑定</td></tr><tr><td>事件动态</td><td><code>die(type,fn)</code></td><td>移除<code>live()</code>绑定的事件</td></tr></tbody></table><table><thead><tr><th>分类</th><th>鼠标交互方法</th><th>说明</th></tr></thead><tbody><tr><td>交互事件</td><td><code>click()</code></td><td>当鼠标指针点击元素时，触发<code>click</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mousedown()</code></td><td>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 <code>mousedow</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mouseenter()</code></td><td>鼠标指针移动到元素上时触发<code>mouseenter</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mouseleave()</code></td><td>当鼠标指针离开元素时，会发生<code>mouseleave</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mousemove()</code></td><td>当鼠标指针在指定的元素中移动时，就会发生<code>mousemove</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mouseout()</code></td><td>当鼠标指针从元素上移开时，发生<code>mouseout</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mouseover()</code></td><td>当鼠标指针位于元素上方时，会发生<code>mouseover</code>方法</td></tr><tr><td>鼠标事件</td><td><code>mouseup()</code></td><td>当在元素上放松鼠标按钮时，会发生<code>mouseup</code>方法</td></tr><tr><td>鼠标事件</td><td><code>blur()</code></td><td>当元素失去焦点时触发<code>blur</code>方法</td></tr><tr><td>鼠标事件</td><td><code>focus()</code></td><td>当元素获得焦点时，触发<code>focus</code>方法</td></tr><tr><td>鼠标事件</td><td><code>hover()</code></td><td>鼠标移入移出触发<code>hover</code>方法</td></tr><tr><td>鼠标事件</td><td><code>toggle(fn1,fn2,[fn3],[fn4])</code></td><td>每单击后依次调用函数</td></tr><tr><td>鼠标事件</td><td><code>change()</code></td><td>当元素的值发生改变时，会发生<code>change</code>方法</td></tr><tr><td>鼠标事件</td><td><code>submit()</code></td><td>当提交表单时，会发生<code>submit</code>方法</td></tr></tbody></table><table><thead><tr><th>分类</th><th>键盘交互方法</th><th>说明</th></tr></thead><tbody><tr><td>键盘事件</td><td><code>keydown</code></td><td>当键盘或按钮被按下时，发生<code>keydown</code>事件。</td></tr><tr><td>键盘事件</td><td><code>keypress</code></td><td>当键盘按键被按下并释放一个键时发生<code>keypress</code>事件</td></tr><tr><td>键盘事件</td><td><code>keyup</code></td><td>当按钮被松开时，发生<code>keyup</code>事件。它发生在当前获得焦点的元素上</td></tr></tbody></table><table><thead><tr><th>分类</th><th>窗口操作方法</th><th>说明</th></tr></thead><tbody><tr><td>窗口操作</td><td><code>resize(fn)</code></td><td>绑定一个处理函数,当调整浏览器窗口的大小时，发生 resize 事件,规定当发生 resize 事件时运行的函数。</td></tr><tr><td>窗口操作</td><td><code>scroll(fn)</code></td><td>绑定一个处理函数,当用户滚动指定的元素时，会发生 scroll 事件,规定当发生 scroll 事件时运行的函数。</td></tr></tbody></table><h3 id="第七节-jQuery动画"><a href="#第七节-jQuery动画" class="headerlink" title="第七节 jQuery动画"></a>第七节 jQuery动画</h3><hr><ul><li><code>JavaScrip</code>t语言本身不支持动画设计，必须通过改变<code>CSS</code>来实现动画效果</li></ul><p><strong>显隐动画</strong></p><ul><li><p><code>show()</code>:显示 <code>hide()</code>:隐藏</p><ul><li>原理：<code>hide()</code>通过改变元素的高度宽度和不透明度，直到这三个属性值到<code>0</code></li><li><code>show()</code>从上到下增加元素的高度，从左到右增加元素宽度，从<code>0</code>到<code>1</code>增加透明度，直至内容完全可见</li><li>参数：<ul><li><code>show(speed,callback)</code><ul><li><code>speed</code>: 字符串或数字，表示动画将运行多久（<code>slow=0.6</code>/<code>normal=0.4</code>/<code>fast=0.2</code>）</li><li><code>callback</code>: 动画完成时执行的方法</li></ul></li></ul></li></ul></li><li><p>显示和隐藏式一对密不可分的动画形式</p></li><li><p><strong>显隐切换</strong></p><ul><li><code>toggle()</code>:切换元素的可见状态<ul><li>原理：匹配元素的宽度、高度以及不透明度，同时进行动画，隐藏动画后将<code>display</code>设置为<code>none</code></li><li>参数：<ul><li><code>toggle(speed)</code></li><li><code>toggle(speed,callback)</code></li><li><code>toggle(boolean)</code><ul><li><code>speed</code>: 字符串或数字，表示动画将运行多久（<code>slow=0.6</code>/<code>normal=0.4</code>/<code>fast=0.2</code>）</li><li><code>easing</code>： 使用哪个缓冲函数来过渡的字符串(<code>linear</code>/<code>swing</code>)</li><li><code>callback</code>： 动画完成时执行的方法</li><li><code>boolean</code>:<code>true</code>为显示 <code>false</code>为隐藏</li></ul></li></ul></li></ul></li></ul></li></ul><p><strong>滑动</strong></p><ul><li><p> <strong>显隐滑动效果</strong></p></li><li><p><code>slideDown()</code>:滑动显示</p></li><li><p><code>slideUp()</code>:滑动隐藏</p></li><li><p>参数:</p><ul><li><code>slideDown(speed,callback)</code></li><li><code>slideUp(speed,callback)</code></li></ul></li><li><p><strong>显隐切换滑动</strong></p><ul><li><code>slideToggle()</code>:显隐滑动切换</li><li>参数:<ul><li><code>slideToggle(speed,callback)</code></li></ul></li><li>如果是显示的，那么滑动隐藏</li><li>如果是隐藏的，那么滑动显示</li></ul></li></ul><p><strong>渐变：通过改变不透明度</strong></p><ul><li><p><strong>淡入淡出</strong></p><ul><li><code>fadeIn()</code> 淡入,使用透明度效果显示选中的元素</li><li><code>fadeOut()</code> 淡出，使用透明度效果隐藏选中的元素</li><li>参数：<ul><li><code>fadeIn(speed,callback)</code></li><li><code>fadeOut(speed,callback)</code></li></ul></li></ul></li><li><p><strong>设置淡出透明效果</strong></p><ul><li><code>fadeTo()</code>⁭：以渐进的方式调整到指定透明度</li><li>参数：<ul><li><code>fadeTo(speed,opacity,callback)</code></li></ul></li></ul></li><li><p> <strong>渐变切换:结合<code>fadeIn</code>和<code>fadeOut</code></strong></p></li><li><p><code>fadeToggle()</code></p><ul><li>参数:<ul><li><code>fadeOut(speed,callback)</code></li></ul></li><li>如果是显示的，那么淡入</li><li>如果是隐藏的，那么淡出</li></ul></li></ul><ul><li><strong>自定义动画：<code>animate()</code></strong><ul><li>注意：在使用<code>animate</code>方法之前，为了影响该元素的<code>top</code>  <code> left</code> <code>bottom</code>  <code>right</code>样式属性，必须先把元素的<code>position</code>样式设置为<code>relative</code>或者<code>absolute</code></li><li><strong>animate()</strong> 方法有四个参数<ul><li><strong>animate({变化参数},’时间’,’运动速率’,’回调函数’)</strong></li><li><strong>变化参数</strong><ul><li>比如：<code>width</code>,<code>height</code></li></ul></li><li><strong>回调函数</strong><ul><li>执行完动画返回的结果，也可以进行下一次动画</li></ul></li><li><strong>运动速率</strong><ul><li><code>linear</code>代表匀速（直线）运动</li><li><code>swing</code>代表慢快慢的运动</li><li><code>jQuery</code>当中就提供了这两种速率，如果想要更多效果，可以引入<code>jQuery</code>插件:<code>jquery.sasing.js</code></li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111714656.jpg" alt="easing插件的效果"></li></ul></li></ul></li><li><strong>停止元素的动画</strong><ul><li>很多时候需要停止匹配正在进行的动画，需要使用stop()</li><li><code>stop()</code>语法结构：<code>stop([clearQueue],[gotoEnd]);</code><ul><li>都是可选参数，为布尔值<ul><li>第一个参数，是否停止后续所有运动，<code>false</code>，不停止，<code>true</code>，停止</li><li>第二个参数：是否立即到达当前目标点，<code>false</code>：不到达，<code>true</code>：到达</li></ul></li><li>如果直接使用<code>stop()</code>方法，会立即停止当前正在进行的动画</li></ul></li></ul></li><li><strong>判断元素是否处于动画状态</strong><ul><li>如果不处于动画状态，则为元素添加新的动画，否则不添加<br><code>if(!$(element).is(&quot;:animated&quot;))&#123; //判断元素是否处于动画状态&#125;</code></li><li>这个方法在<code>animate</code>动画中经常被用到，需要注意</li></ul></li><li><strong>延迟动画：delay()</strong><ul><li>在动画执行过程中，如果你想对动画进行延迟操作，那么使用<code>delay()</code></li></ul></li></ul></li><li>用<code>animate</code>模拟<code>show()</code>:</li><li><code>show</code>: 表示由透明到不透明</li><li><code>toggle</code>: 切换</li><li><code>hide</code>:表示由显示到隐藏</li></ul><blockquote><p>里面可以用各种样式，也可以设置事件，<code>linear</code>代表匀速（直线）运动，<code>swing</code>代表慢快慢的运动</p></blockquote><ul><li><strong>动画方法总结</strong></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>hide()</code>和<code>show()</code></td><td>同时修改多个样式属性即高度和宽度和不透明度</td></tr><tr><td><code>fadeIn()</code></td><td>使用透明度效果,显示隐藏的元素</td></tr><tr><td><code>fadeOut()</code></td><td>使用透明度效果,隐藏显示的效果</td></tr><tr><td><code>slideUp()</code></td><td>使用滑动效果,隐藏选中的元素</td></tr><tr><td><code>slideDown()</code></td><td>使用滑动效果,显示隐藏的效果</td></tr><tr><td><code>fadeTo()</code></td><td>只改变不透明度</td></tr><tr><td><code>toggle()</code></td><td>用来代替<code>show()</code>和<code>hide()</code>方法，所以会同时修改多个属性即高度、宽度和不透明度</td></tr><tr><td><code>slideToggle()</code></td><td>用来代替<code>slideUp</code>和<code>slideDown()</code>方法，使用滑动效果切换元素的可见状态,如果是可见的,则隐藏,如果是隐藏的则显示,所以只能改变高度</td></tr><tr><td><code>fadeToggle()</code></td><td>用来代替<code>fadeIn()</code>和<code>fadeOut</code>方法，使用透明度效果切换元素的可见状态,如果是可见的,则隐藏,如果是隐藏的则显示,只能改变不透明度</td></tr><tr><td><code>animate()</code></td><td>属于自定义动画，以上各种动画方法都是调用了<code>animate</code>方法。此外，用<code>animate</code>方法还能自定义其他的样式属性，例如：<code>left</code> <code>marginLeft ``scrollTop</code>等</td></tr></tbody></table><h3 id="第八节-jQuery工具方法"><a href="#第八节-jQuery工具方法" class="headerlink" title="第八节 jQuery工具方法"></a>第八节 jQuery工具方法</h3><hr><ul><li><p>实例方法是定义在原型上面</p></li><li><p>定义在<code>jQuery</code>函数上面的方法就叫做工具方法，如：<code>jQuery.type()</code>，<code>$.type()</code></p></li><li><p><strong>type()</strong></p><ul><li>判断数据类型</li><li>原生<code>js</code>里面的判断数据类型<ul><li><code>typeof arr</code>;</li><li><code>arr instanceof Array</code></li><li><code>arr.constructor == &#39;Array&#39;</code></li></ul></li><li><code>Object.prototype.toString.call(arr)</code>;</li></ul></li><li><p><strong>trim()</strong></p></li><li><p>消除两边的空格（字符串中间的空格消除不掉）</p></li><li><p><strong>proxy()</strong></p><ul><li>改变<code>this</code>指向</li><li>参数1：要改变<code>this</code>指向的函数或变量</li><li>参数2：<code>this</code>要指向的函数或变量</li><li>如：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(a + <span class="string">&#x27;&#x27;</span> + b);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;aimee&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line"> $.proxy(show,obj)(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"> <span class="comment">// 把show的this指向obj</span></span><br><span class="line"> <span class="comment">// 在最后还可以传参，也可以这样传参</span></span><br><span class="line"> <span class="comment">// $.proxy(show,obj,1,2);</span></span><br><span class="line"> <span class="comment">// $.proxy(show,obj,1)(2);</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">// 柯里化的思想</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">nianji,xuehao</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(nianji);</span><br><span class="line">   <span class="built_in">console</span>.log(xuehao);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;aimee&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> fn = $.proxy(show,obj,<span class="number">2014</span>);</span><br><span class="line"> fn(<span class="number">201401010101</span>);</span><br><span class="line"> fn(<span class="number">201402020202</span>);</span><br><span class="line"> <span class="comment">// 不用再次传参,直接传需要的，不用传好几个参数了</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>noConflict()</strong></p><ul><li>防止冲突，如<code>var jq = $.noConflict(removeAll)</code></li></ul></li><li><p>让出变量<code>$</code>的<code>jQuery</code>控制权</p><ul><li>为了防止引用两个类库内的全局变量都是$</li></ul></li><li><p>也是为了可以引用好几个不同版本的jQuery文件</p><ul><li>该方法释放 <code>jQuery</code>对<code>$</code>变量的控制。</li></ul></li><li><p>该方法也可用于为<code>jQuery</code>变量规定新的自定义名称</p></li><li><p><strong>parseJSON()</strong></p><ul><li>解析一个<code>JSON</code>字符串，如<code>var obj = $.parseJSON(&#39;&#123;&quot;name&quot;:&quot;John&quot;&#125;&#39;)</code></li><li>用于将符合标准格式的的<code>JSON</code>字符串转为与之对应的<code>JavaScript</code>对象</li></ul></li><li><p><strong>makeArry()</strong></p></li><li><p>把类数组转换成数组</p></li><li><p><strong>extend()</strong></p><ul><li>定义在了<code>jQuery</code>函数上面</li><li>在<code>jQuery</code>源码当中，有很多的工具方法都是基于<code>extend</code>方法来实现的</li><li>扩展提供了新的<code>jQuery</code>工具方法，用来拓展一个新的工具或实例方法</li><li>这两个函数是一样的，只不过一个是在<code>jQuery</code>方法上面，一个是在<code>prototype</code>上面</li><li><strong>$.extend()</strong></li><li><strong>$.fn.extend()</strong><ul><li><code>fn</code>就是<code>prototype</code>,<code>$.fn</code>就是相当于<code>$.prototype</code></li></ul></li></ul></li><li><p>这个<code>extend()</code>定义在了<code>prototype</code>上面</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">用来拓展一个新的工具方法，就是自己在<span class="string">`jQuery`</span>方法上创建一个方法,</span><br><span class="line"></span><br><span class="line">$.extend(&#123;</span><br><span class="line">  <span class="attr">leftTrim</span>: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^\s+/g</span>;</span><br><span class="line">    <span class="keyword">return</span> str.replace(reg,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log($.leftTrim(<span class="string">&#x27;         dg&#x27;</span>));</span><br><span class="line"><span class="comment">// 调用这个 leftTree，就和调用其他的 jQuery 方法一样</span></span><br><span class="line"><span class="comment">// 作用是消除左侧空格</span></span><br><span class="line"></span><br><span class="line">用来拓展一个新的实例方法，就是在<span class="string">`jQuery`</span>方法的<span class="string">`prototype`</span>上创建一个方法,</span><br><span class="line">   </span><br><span class="line">$.fn.extend(&#123;</span><br><span class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementById(selector);</span><br><span class="line">            <span class="built_in">this</span>.length = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">this</span>.[<span class="number">0</span>] = dom;</span><br><span class="line">            <span class="built_in">this</span>.__proto__ = jQuery.prototype;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">还可以合并对象，<span class="string">`fn.extend`</span>同时适用</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">parson1</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;dg&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">number</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">parson2</span>: &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">weight</span>: <span class="string">&quot;80kg&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> aa = $.extend(<span class="literal">true</span>,obj,obj2)</span><br><span class="line"><span class="comment">// 把obj2和合并到了obj1</span></span><br><span class="line"><span class="comment">// true是深拷贝，取掉true就是浅拷贝</span></span><br><span class="line"><span class="comment">// 后面相同的会覆盖到前面的</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Callbacks()</strong></p><ul><li><p>回调函数，返回回调函数对象</p></li><li><p>管理回调队列</p></li><li><p>可以混合搭配，同时使用</p><ul><li><strong>fire()</strong> 执行函数（可执行多次）</li><li><strong>add()</strong> 调取函数（可传参多个）</li><li><strong>once()</strong> 参数，只执行一次<code>fire</code>函数</li><li><strong>unique</strong> 参数，在<code>add</code>调用函数里，相同的函数只执行一遍</li><li><strong>memory</strong> 参数，记忆，<code>fire()</code>后面的函数依旧会被执行</li><li><strong>stopOnFalse</strong> 参数，上个回调函数返回<code>false</code>之后中断后面的回调函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn2&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn3&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cb = $.Callbacks(<span class="string">&#x27;memory once stopFalse unique&#x27;</span>)</span><br><span class="line"><span class="comment">// memory：fire后面的函数依旧会被执行</span></span><br><span class="line"><span class="comment">// once：fire函数只会执行一次</span></span><br><span class="line"><span class="comment">// stopOnFalse：fn2返回了false，fn3不会被执行，和memory相抵触，没有作用</span></span><br><span class="line"><span class="comment">// unique：在一个add调用函数里面，只执行一遍函数</span></span><br><span class="line"></span><br><span class="line">cb.add(fn1,fn1); <span class="comment">// 调用函数fn1,fn1</span></span><br><span class="line">cb.add(fn2); <span class="comment">// 调用函数fn2</span></span><br><span class="line">cb.fire(); <span class="comment">// 执行函数队列</span></span><br><span class="line">cb.fire(); <span class="comment">// 执行函数队列</span></span><br><span class="line">cb.add(fn3); <span class="comment">// 调用函数fn3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Deferred()</strong></p><ul><li>延迟回调对象，相当于有状态的<code>Callbacks()</code></li><li>添加函数<ul><li><strong>done</strong> 对象被受理时，调用添加的处理程序</li><li><strong>fail</strong> 对象被拒绝时，调用添加的处理程序</li><li><strong>progress</strong> 调用正在进行中的对象上进行的回调函数</li></ul></li><li>触发函数<ul><li><strong>resolve</strong> 成功的状态</li><li><strong>reject</strong> 失败的状态</li><li><strong>notity</strong> 进行中的状态</li><li><strong>promise</strong> 不能触发函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dtd = $.Deferred();  <span class="comment">// 让一个变量代替Deferred，解决重复使用</span></span><br><span class="line"> <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;dtd.notify()&#125;,<span class="number">500</span>)<span class="comment">// notity()，进行中的状态</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;dtd.reject(),<span class="number">1000</span>) <span class="comment">// reject(),成功和失败的状态不会改变，如果失败就不会执行成功了，但是进行中可以改变状失败的状态</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;dtd.resolve()&#125;,<span class="number">2000</span>)<span class="comment">// resolve()，成功的状态</span></span><br><span class="line">  <span class="keyword">return</span> dtd.promise(); <span class="comment">// 返回dtd函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb = demo(); <span class="comment">// 闭包，接受dtd函数</span></span><br><span class="line"><span class="comment">//cb.resolve(); 这个不可以在外面执行了，因为dtd返回的是只读的Deferred对象</span></span><br><span class="line"></span><br><span class="line">cb.done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// done，对象成功的时候调用</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// fail，对象失败的时候调用</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.progress(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// progress，正在进行时调用</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;doing&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功和失败的状态不会改变，如果失败就不会执行成功了，但是进行中可以改变状态</span></span><br></pre></td></tr></table></figure></li><li><p><strong>when()</strong></p><ul><li>里面传的参数是<code>Deferred</code>对象</li><li>执行完之后会<code>return</code>出来一个<code>Deferred</code>对象</li><li>当<code>when</code>里面传的几个<code>Deferred</code>对象，同时都为成功的状态时，才能触发<code>done</code>里面的内容，但凡有一个失败的，就会执行<code>fail</code>里面的内容<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dtd = $.Deferred();<span class="comment">// 让回调函数有转台</span></span><br><span class="line">  dtd.resolve(); <span class="comment">// 成功的状态</span></span><br><span class="line">  <span class="keyword">return</span> dtd.promise(); <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 让回调函数有转台</span></span><br><span class="line">  dtd.resolve();<span class="comment">// 成功的状态</span></span><br><span class="line">  <span class="keyword">return</span> dtd.promise();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb = aa();</span><br><span class="line"><span class="keyword">var</span> cb2 = bb();</span><br><span class="line"></span><br><span class="line">$.when(cb,cb2)</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.progress(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;doing&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="第九节-jQuery与Ajax"><a href="#第九节-jQuery与Ajax" class="headerlink" title="第九节 jQuery与Ajax"></a>第九节 jQuery与Ajax</h3><hr><ul><li><strong>Ajax</strong>简介 :<ul><li> <code>Asynchronous Javascript And XML</code> （异步的<br><code>JavaScript</code>和<code>XML</code>）</li><li>它并不是一种单一的技术，而是有机利用一系列交互式网页应用相关的技术所形成的结合体</li></ul></li><li><strong><code>Ajax</code>优势与不足</strong><ul><li><strong><code>Ajax</code>优势</strong><ul><li>优秀的用户体验<ul><li>这是<code>Ajax</code>下最大的有点，能在不刷新整个页面前提下更新数据</li></ul></li><li>提高<code>web</code>程序的性能<ul><li> 与传统模式相比，<code>Ajax</code>模式在性能上最大的区别在于传输数据的方式，在传统模式中，数据的提交时通过表单来实现的。<code>Ajax</code>模式只是通过<code>XMLHttpRequest</code>对象向服务器提交希望提交的数据，即按需发送</li></ul></li><li>减轻服务器和带宽的负担<ul><li> <code>Ajax</code>的工作原理相当于在用户和服务器之间加了一个中间层，似用户操作与服务器响应异步化。它在客户端创建<code>Ajax</code>引擎，把传统方式下的一些服务器负担的工作转移到客户端，便于客户端资源来处理，减轻服务器和带宽的负担</li></ul></li></ul></li><li><strong>Ajax的不足</strong><ul><li>浏览器对<code>XMLHttpRequest</code>对象的支持度不足</li><li>破坏浏览器前进、后退按钮的正常功能</li><li>对搜索引擎的支持的不足</li><li>开发和调试工具的缺乏</li></ul></li></ul></li></ul><h4 id="创建一个Ajax请求"><a href="#创建一个Ajax请求" class="headerlink" title="创建一个Ajax请求"></a>创建一个Ajax请求</h4><hr><ul><li><p><strong><code>serialize()</code></strong> 方法</p><ul><li>串联表单对象，序列表表格内容为字符串，用于 Ajax 请求。</li></ul></li><li><p><strong><code>serializeArray()</code></strong> 方法</p><ul><li>把串联表单对象的形式用数组表示出来</li></ul></li><li><p><code>Ajax</code>的核心是<code>XMLHttpRequest</code>对象，它是<code>Ajax</code>实现的关键，发送异步请求、接受响应以及执行回调都是通过它来完成</p></li><li><p><strong>创建<code>ajax</code>对象 <code>var xhr = new XMLHttpRequest();</code></strong></p></li><li><p><strong>准备发送请求</strong></p><ul><li><p><strong><code>get</code> / <code>post</code></strong></p><ul><li><p><strong><code>get</code></strong></p><ul><li>传递的数据放在<code>URL</code>后面</li><li>中文编码 <code>encodeURI( &#39;&#39; )</code>;</li><li>缓存 在数据后面加上随机数或者日期对象或者……</li></ul></li><li><p><strong><code>post</code></strong></p><ul><li>传递的数据放在<code>send()</code>里面，并且一定要规定数据格式</li><li>没有缓存问题</li></ul></li></ul></li><li><p><code>form</code>表单中:</p><ul><li><code>action</code>:<ul><li><code>method</code>: (默认是<code> get</code>)<pre><code>- `get`: 会在`url`里面以 `name=value` , 两个数据之间用 `&amp;` 连接</code></pre></li></ul></li><li><code>post</code>:</li></ul></li><li><p><code>enctype</code>: <code>&quot;application/x-www-form-urlencoded&quot;</code></p></li><li><p><code>url</code></p></li><li><p>是否异步</p><ul><li>同步(<code>false</code>)：阻塞</li><li>异步(<code>true</code>)：非阻塞</li></ul></li></ul></li><li><p><strong>正式发送请求</strong></p></li><li><p><strong><code>ajax</code>请求处理过程</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">alert( xhr.responseText );</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><code>onreadystatechange</code> ：当处理过程发生变化的时候执行下面的函数</p></li><li><p><code>readyState</code> ：<code>ajax</code>处理过程</p><ul><li>0：请求未初始化（还没有调用 <code>open()</code>）。</li><li>1：请求已经建立，但是还没有发送（还没有调用 <code>send()</code>）。</li><li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</li><li>3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</li><li>4：响应已完成；您可以获取并使用服务器的响应了。</li></ul></li><li><p><code>responseText</code> ：请求服务器返回的数据存在该属性里面</p></li><li><p><code>status</code> : <code>http</code>状态码</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111714145.jpg" alt="HTTP状态码"></p><ul><li>案例：<code>ajax</code>封装案例</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ajax请求后台数据</span></span><br><span class="line"><span class="keyword">var</span> btn =  <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">ajax(&#123;<span class="comment">//json格式</span></span><br><span class="line"><span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line"><span class="attr">url</span>:<span class="string">&quot;post.php&quot;</span>,</span><br><span class="line"><span class="attr">data</span>:<span class="string">&quot;username=poetries&amp;pwd=123456&quot;</span>,</span><br><span class="line"><span class="attr">asyn</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装ajax</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">aJson</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ajx = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> type = aJson.type || <span class="string">&quot;get&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> asyn = aJson.asyn || <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> url = aJson.url;<span class="comment">// url 接收 传输位置</span></span><br><span class="line"><span class="keyword">var</span> success = aJson.success;<span class="comment">// success 接收 传输完成后的回调函数</span></span><br><span class="line"><span class="keyword">var</span> data = aJson.data || <span class="string">&#x27;&#x27;</span>;<span class="comment">// data 接收需要附带传输的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;<span class="comment">//兼容处理</span></span><br><span class="line">ajx = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//一般浏览器</span></span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ajx = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);<span class="comment">//IE6+</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="string">&quot;get&quot;</span> &amp;&amp; data)</span><br><span class="line">&#123;</span><br><span class="line">url +=<span class="string">&quot;/?&quot;</span>+data+<span class="string">&quot;&amp;&quot;</span>+<span class="built_in">Math</span>.random();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化ajax请求</span></span><br><span class="line">ajx.open( type , url , asyn );</span><br><span class="line"><span class="comment">//规定传输数据的格式</span></span><br><span class="line">ajx.setRequestHeader(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line"><span class="comment">//发送ajax请求（包括post数据的传输）</span></span><br><span class="line">type == <span class="string">&quot;get&quot;</span> ?ajx.send():ajx.send(aJson.data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理请求</span></span><br><span class="line">ajx.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">aJson</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ajx.readState == <span class="number">4</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ajx.status == <span class="number">200</span> &amp;&amp; ajx.status&lt;<span class="number">300</span>)<span class="comment">//200是HTTP 请求成功的状态码</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//请求成功处理数据</span></span><br><span class="line">success &amp;&amp; success(ajx.responseText);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;请求出错&quot;</span>+ajx.status);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="jQuery中的Ajax-补充部分–来自锋利的jQuery"><a href="#jQuery中的Ajax-补充部分–来自锋利的jQuery" class="headerlink" title="jQuery中的Ajax  [补充部分–来自锋利的jQuery]"></a>jQuery中的Ajax  [补充部分–来自锋利的jQuery]</h4><hr><p><code>jquery</code>对<code>Ajax</code>操作进行了封装，在<code>jquery</code>中的<code>$.ajax()</code>方法属于最底层的方法，第<code>2</code>层是<code>load()</code>、<code>$.get()</code>、<code>$.post();</code>第<code>3</code>层是<code>$.getScript()</code>、<code>$.getJSON()</code>，第<code>2</code>层使用频率很高</p><h5 id="load-方法"><a href="#load-方法" class="headerlink" title="load()方法"></a><code>load()</code>方法</h5><hr><ul><li><code>load()</code>方法是<code>jquery</code>中最简单和常用的<code>ajax</code>方法，能载入远程<code>HTML</code>代码并插入<code>DOM</code>中 结构为：<code>load(url,[data],[callback])</code></li><li>使用<code>url</code>参数指定选择符可以加载页面内的某些元素 <code>load</code>方法中<code>url</code>语法：<code>url selector</code> 注意：<code>url</code>和选择器之间有一个空格</li><li>传递方式<ul><li><code>load()</code>方法的传递方式根据参数<code>data</code>来自动指定，如果没有参数传递，则采用<code>GET</code>方式传递，反之，采用<code>POST</code></li></ul></li><li>回调参数<ul><li>必须在加载完成后才执行的操作，该函数有三个参数 分别代表请求返回的内容、请求状态、<code>XMLHttpRequest</code>对象</li><li>只要请求完成，回调函数就会被触发</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#testTest&quot;</span>).load(<span class="string">&quot;test.html&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">responseText,textStatus,XMLHttpRequest</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//respnoseText 请求返回的内容</span></span><br><span class="line">    <span class="comment">//textStatus 请求状态 ：sucess、error、notmodified、timeout</span></span><br><span class="line">    <span class="comment">//XMLHttpRequest</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>load方法参数</strong></li></ul><table><thead><tr><th>参数名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>url</code></td><td><code>String</code></td><td>请求<code>HTML</code>页面的<code>URL</code>地址</td></tr><tr><td><code>data(可选)</code></td><td><code>Object</code></td><td>发送至服务器的<code>key</code> / <code>value</code>数据</td></tr><tr><td><code>callback(可选)</code></td><td><code>Function</code></td><td>请求完成时的回调函数，无论是请求成功还是失败</td></tr></tbody></table><h5 id="get-和-post-方法"><a href="#get-和-post-方法" class="headerlink" title="$.get()和$.post()方法"></a>$.get()和$.post()方法</h5><hr><p><code>load()</code>方法通常用来从web服务器上获取静态的数据文件。在项目中需要传递一些参数给服务器中的页面，那么可以使用<code>$.get()</code>和<code>$.post()</code>或<code>$.ajax()</code>方法</p><ul><li><p>注意：<code>$.get()</code>和<code>$.post()</code>方法是<code>jquery</code>中的全局函数</p></li><li><p><strong>$.get()方法</strong></p><ul><li><code>$.get()</code>方法使用<code>GET</code>方式来进行异步请求</li><li>结构为：<code>$.get(url,[data],callback,type)</code><ul><li>如果服务器返回的内容格式是<code>xml</code>文档，需要在服务器端设置<code>Content-Type</code>类型 代码如下：<code>header(&quot;Content-Type:text/xml:charset=utf-8&quot;)</code> //<code>php</code></li></ul></li></ul></li><li><p><strong><code>$.get()</code>方法参数解析</strong></p></li></ul><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>url</code></td><td><code>String</code></td><td>请求<code>HTML</code>页的地址</td></tr><tr><td><code>data(可选)</code></td><td><code>Object</code></td><td>发送至服务器的<code>key</code>/ <code>value</code> 数据会作为<code>QueryString</code>附加到请求URL中</td></tr><tr><td><code>callback(可选)</code></td><td><code>Function</code></td><td>载入成功的回调函数（只有当<code>Response</code>的返回状态是success才调用该方法）</td></tr><tr><td><code>type(可选)</code></td><td><code>String</code></td><td>服务器返回内容的格式，包括<code>xml</code>、<code>html</code>、<code>script</code>、<code>json</code>、<code>text</code>和<code>_default</code></td></tr></tbody></table><ul><li><p><strong>$.post()方法</strong></p><ul><li>它与<code>$.get()</code>方法的结构和使用方式相同，有如下区别<ul><li><code>GET</code>请求会将参数跟张乃URL后进行传递，而<code>POST</code>请求则是作为<code>Http</code>消息的实体内容发送给web服务器，在<code>ajax</code>请求中，这种区别对用户不可见</li><li><code>GET</code>方式对传输数据有大小限制（通常不能大于<code>2KB</code>），而使用<code>POST</code>方式传递的数据量要比<code>GET</code>方式大得多（理论不受限制）</li><li><code>GET</code>方式请求的数据会被浏览器缓存起来，因此其他人可以从浏览器的历史纪录中读取这些数据，如：账号、密码。在某种情况下，<code>GET</code>方式会带来严重的安全问题，而<code>POST</code>相对来说可以避免这些问题</li><li><code>GET</code>和<code>POST</code>方式传递的数据在服务端的获取也不相同。在<code>PHP</code>中，<code>GET</code>方式用<code>$_GET[]</code>获取；<code>POST</code>方式用<code>$_POST[]</code>获取;两种方式都可用<code>$_REQUEST[]</code>来获取</li></ul></li></ul></li><li><p><strong>总结</strong></p><ul><li>使用<code>load()</code>、<code>$.get()</code>和<code>$.post()</code>方法完成了一些常规的<code>Ajax</code>程序，如果还需要复杂的<code>Ajax</code>程序，就需要用到<code>$.ajax()</code>方式</li></ul></li></ul><h5 id="ajax-方法"><a href="#ajax-方法" class="headerlink" title="$.ajax()方法"></a>$.ajax()方法</h5><hr><ul><li><code>$.ajax()</code>方法是<code>jquery</code>最底层的<code>Ajax</code>实现，它的结构为<code>$.ajax(options)</code></li><li>该方法只有一个参数，但在这个对象里包含了<code>$.ajax()</code>方式所需要的请求设置以及回调函等信息，参数以<code>key</code> / <code>value</code>存在，所有参数都是可选的</li><li><strong>$.ajax()方式常用参数解析</strong></li></ul><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>url</code></td><td><code>String</code></td><td>(默认为当前页地址)发送请求的地址</td></tr><tr><td><code>type</code></td><td><code>String</code></td><td>请求方式（<code>POST</code>或<code>GET</code>）默认为<code>GET</code></td></tr><tr><td><code>timeout</code></td><td><code>Number</code></td><td>设置请求超时时间（毫秒）</td></tr><tr><td><code>data</code></td><td><code>string</code></td><td>传输数据</td></tr><tr><td><code>context</code></td><td></td><td>回调函数的作用域</td></tr><tr><td><code>async</code></td><td><code>boolean</code></td><td>是否异步，默认true</td></tr><tr><td><code>cache</code></td><td><code>boolean</code></td><td>是否缓存，默认<code>true</code></td></tr><tr><td><code>crossDomain</code></td><td><code>boolean</code></td><td>同域请求为false，跨域请求为true</td></tr><tr><td><code>dataType</code></td><td><code>String</code></td><td>预期服务器返回的类型。可用的类型如下<br /><br /> <strong>xml</strong>:返回<code>XML</code>文档，可用<code>jquery</code>处理<br /><strong>html</strong>:返回纯文本的<code>HTML</code>信息，包含的<code>script</code>标签也会在插入<code>DOM</code>时执行<br /><strong>script</strong>：返回纯文本的<code>javascript</code>代码。不会自动缓存结果，除非设置<code>cache</code>参数。注意：在远程请求时，所有的<code>POST</code>请求都将转为<code>GET</code>请求<br /><strong>json</strong>:返回<code>JSON</code>数据<br /><strong>jsonp</strong>:<code>JSONP</code>格式，使用<code>jsonp</code>形式调用函数时，例如：<code>myurl?call back=?,jquery</code>将自动替换后一个<code>？</code>为正确的函数名，以执行回调函数<br /><strong>text</strong>:返回纯文本字符串</td></tr><tr><td><code>beforeSend</code></td><td><code>Function</code></td><td>发送请求前可以修改<code>XMLHttpRequest</code>对象的函数，例如添加自定义<code>HTTP</code>头。在<code>beforeSend</code>中如果返回<code>false</code>可以取消本次<code>Ajax</code>请求。<code>XMLHttpRequest</code>对象是唯一的参数<br /> function(XMLHttpRequest){<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>this</code>;//调用本次<code>Ajax</code>请求时传递的<code>options</code>参数<br>}</td></tr><tr><td><code>complete</code></td><td><code>Function</code></td><td>请求完成后的回调函数（请求成功或失败时都调用）<br /> 参数：<code>XMLHttpRequest</code>对象和一个描述成功请求类型的字符串<br />function(XMLHttpRequest,textStatus){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>this</code>;//调用本次Ajax请求时传递的<code>options</code>参数<br>}</td></tr><tr><td><code>success</code></td><td><code>Function</code></td><td>请求成功后调用的回调函数，有两个参数<br />(1)由服务器返回，并根据<code>dataTyppe</code>参数进行处理后的数据<br />(2)描述状态的字符串<br /><code>function</code>(data,textStatus){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<code>data</code>可能是<code>xmlDoc、``jsonObj</code>、<code>html</code>、<code>text</code>等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>this</code>;//调用本次<code>Ajax</code>请求时传递的<code>options</code>参数<br />}</td></tr><tr><td><code>error</code></td><td><code>Function</code></td><td>请求失败时被调用的函数</td></tr><tr><td><code>global</code></td><td><code>Boolean</code></td><td>默认为<code>true</code>。表示是否触发全局<code>Ajax</code>事件，设置为<code>false</code>将不会触发。<code>AjaxStart</code>或<code>AjaxStop</code>可用于控制各种<code>Ajax</code>事件</td></tr></tbody></table><h3 id="第十节-插件"><a href="#第十节-插件" class="headerlink" title="第十节 插件"></a>第十节 插件</h3><hr><ul><li><p><strong>什么是插件</strong></p><ul><li>插件(<code>Plugin</code>)也称为<code>jQuery</code>的扩展。以<code>jQuery</code>核心代码为基础编写的符合一定规范的应用程序。通过<code>js</code>文件的方式引用。</li></ul></li><li><p><strong>插件分为哪几类</strong></p><ul><li><code>UI</code>类、表单及验证类、输入类、特效类、<code>Ajax</code>类、滑动类、图形图像类、导航类、综合工具类、动画类等等</li></ul></li></ul><ul><li> <strong>引入插件的步骤</strong></li><li>引入<code>jquery.js</code>文件，而且在所以插件之前引入</li><li>引入插件</li><li>引入插件相关文件，比如皮肤、中文包</li></ul><ul><li><p><strong>如何自定义插件</strong>：</p><ul><li>插件形式分为3类：<ul><li>封装对象方法插件</li><li>封装全局函数插件</li><li>选择器插件(类似于.<code>find()</code>)</li></ul></li></ul></li><li><p><strong>自定义插件的规范</strong>（解决各种插件的冲突和错误，增加成功率）</p><ul><li>命名：<code>jquery.插件名.js</code></li><li>所有的新方法附加在<code>jquery.fn</code>对象上面，所有新功能附加在<code>jquery</code>上</li><li>所有的方法或插件必须用分号结尾，避免出问题</li><li>插件必须返回jQuery对象，便于链式连缀</li><li>避免插件内部使用<code>$</code>，如果要使用，请传递<code>jQuery</code>(<code>$</code>并不是总等于<code>jQuery</code>，另外其他<code>js</code>框架也可能使用<code>$</code>)</li><li>插件中的<code>this</code>应该指向<code>jQuery</code>对象</li><li>使用<code>this.each()</code>迭代元素</li></ul></li><li><p><strong>自定义插件案例</strong></p><ul><li>为了方便用户创建插件，<code>jQuery</code>提供了 <code>jQuery.extend()</code> 和 <code>jQuery.fn.extend()</code></li><li><code>jQuery.extend()</code>：创建工具函数或者是选择器</li><li><code>jQuery.fn.extend()</code>：创建<code>jQuery</code>对象命令  （<code>fn</code>相当于<code>prototype</code>的别名）</li></ul></li><li><p><strong><code>jQuery</code>官方提供的插件开发模板</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">$.fn.plugin=<span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> defaults = &#123;</span><br><span class="line"><span class="comment">//各种参数 各种属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> options = $.extend(defaults,options);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//实现功能的代码</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><p><strong>自定义<code>jQuery</code>函数</strong>：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">$.extend(&#123;</span><br><span class="line"><span class="attr">test</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;hello plugin&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><p><strong>自定义<code>jQuery</code>命令</strong>：</p><ul><li>形式1：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    $.fn.extend(&#123;</span><br><span class="line">        <span class="attr">say</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         alert(<span class="string">&quot;hello plugin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><ul><li>形式2：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">$.fn.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;hello plugin&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><h3 id="jQuery源码"><a href="#jQuery源码" class="headerlink" title="jQuery源码"></a>jQuery源码</h3><hr><blockquote><p>`jQuery的实例方法是在jQuery的原型上定义的，而jQuery的工具方法就是自己的一个独立的方法</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">简易jQuery实现</span><br><span class="line"></span><br><span class="line">jQuery中有很多的方法，但是为了避免他们的变量名冲突，所以要把他们的作用域都独立起来，jQuery中使用了立即执行函数</span><br><span class="line"><span class="number">1.</span>命名空间</span><br><span class="line"><span class="number">2.</span>立即执行函数</span><br><span class="line"></span><br><span class="line"><span class="comment">// global 是window，factory就是执行的函数，两个都是形参，可以说传什么可以由你决定，但是传别的就和jQuery不一样了，同时jquery没有把他的所有的函数在立即执行函数的函数体执行，而是在实参里面去执行。</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">global</span>,factory</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    factory(<span class="built_in">window</span>);</span><br><span class="line">    </span><br><span class="line">&#125;(<span class="built_in">this</span>,<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">window</span></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 然而当这样，想在外面执行jQuery(&#x27;demo&#x27;).css().html()就不能执行了，因为jQuery成为了一个独立的作用域，window找不到他的，当然也有解决的办法。如：</span></span><br><span class="line">    <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// jQuery 的构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> jQuery.prototype.init(selector);</span><br><span class="line">            <span class="comment">// new的话每次返回的都是一个全新的init对象，因为需要把init和jQuery的作用域独立起来，所以需要new一下，如果不new的话init和jQuery中的函数如果冲突的话会执行init里面的函数。</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        jQuery.prototype = &#123;</span><br><span class="line">            <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementById(selector);</span><br><span class="line">                <span class="built_in">this</span>[<span class="number">0</span>] = dom;</span><br><span class="line">                <span class="built_in">this</span>.length = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">this</span>.__proto__ = jQuery.prototype;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// jQuery(&quot;demo&quot;).css();</span></span><br><span class="line">            <span class="comment">// 一开始会报错，因为jQuery中的init的prototype是Object，而Object的方法里没有css这个方法,需要把jQuery中的init的prototype指向jQuery的prototype，如：jQuery.prototype.init.prototype = jQuery.prototype; 或者可以在init函数里面把__proto__指向jQuery.prototype</span></span><br><span class="line">            <span class="attr">css</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;css&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">                <span class="comment">// jQuery最重要的是链式调用，调用css()之后还想调用html()，我们要搞清楚谁调用html()？是jQuery(&#x27;dom&#x27;).css()，也就是css()，但是这时候css返回的是undefined，这时候不可以链式调用，所以我们要把css返回值返回为刚才选中的jQuery的DOM对象，所以要return this，this指向的就是jQuery的DOM对象，一开始jQuery对象中没有html这个方法，但是它自己的prototype上有html这个方法</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">html</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">init模块就是为了找dom结构的</span><br><span class="line"></span><br><span class="line">传入参数类型：</span><br><span class="line">$(selector)</span><br><span class="line"><span class="number">1.</span>$(<span class="string">&#x27;&#x27;</span>) -- 空字符</span><br><span class="line"><span class="number">2.</span>$(<span class="literal">false</span>/<span class="literal">null</span>/<span class="literal">undefined</span>) -- <span class="literal">null</span>/<span class="literal">false</span>/<span class="literal">undefined</span></span><br><span class="line"><span class="number">3.</span>$(<span class="string">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span>) $(<span class="string">&#x27;&lt;li/&gt;123123123&#x27;</span>) $(<span class="string">&#x27;&lt;li&gt;&#x27;</span>,&#123;<span class="attr">html</span>:<span class="number">123</span>&#125;) -- 字符串</span><br><span class="line"><span class="number">4.</span>$(<span class="string">&#x27;#id&#x27;</span>) $(<span class="string">&#x27;.class&#x27;</span>) $(<span class="string">&#x27;div&#x27;</span>) $(<span class="string">&#x27;ul li&#x27;</span>) $(<span class="string">&#x27;li&#x27;</span>,<span class="string">&#x27;ul&#x27;</span>) $(<span class="string">&#x27;li:eq(0)&#x27;</span>) -- 选择器</span><br><span class="line"><span class="number">5.</span>$(dom) -- 原生Dom</span><br><span class="line"><span class="number">6.</span>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) -- 函数</span><br><span class="line"><span class="number">7.</span>$($()) -- jQuery对象</span><br></pre></td></tr></table></figure><h3 id="附录一-jQuery各个版本新增的一些常用的方法"><a href="#附录一-jQuery各个版本新增的一些常用的方法" class="headerlink" title="附录一 jQuery各个版本新增的一些常用的方法"></a>附录一 jQuery各个版本新增的一些常用的方法</h3><hr><ul><li><code>jQuery1.3</code>新增常用的方法</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>.closest()</code></td><td>从元素本身开始，逐级向上级元素匹配，并返回最先匹配的祖先元素</td></tr><tr><td><code> die()</code></td><td>从元素中删除先前用<code>live()</code>方法绑定的所有的事件</td></tr><tr><td><code> live()</code></td><td>附加一个事件处理器到符合目前选择器的所有元素匹配</td></tr></tbody></table><ul><li><code>jQuery1.4</code>新增常用的方法</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>.first()</code></td><td>获取集合中第一个元素</td></tr><tr><td><code> last()</code></td><td>获取集合中最后一个元素</td></tr><tr><td><code> has(selector)</code></td><td>保留包含特定后代的元素，去掉那些不含有指定后代的元素</td></tr><tr><td><code>detach()</code></td><td>从<code>DOM</code>中去掉所有匹配的元素。<code>detach()</code>和<code>remov()</code>一样，除了<code>detach()</code>保存了所有<code>jquery</code>数据和被移走的元素相关联。当需要移走一个元素，不久又将该元素插入<code>DOM</code>时，这种方法很有用</td></tr><tr><td><code> delegate()</code></td><td>为所有选择器匹配的元素附加一个处理一个或多个事件</td></tr><tr><td><code> undelegate()</code></td><td>为所有选择器匹配的元素删除一个处理一个或多个事件</td></tr></tbody></table><ul><li><code>jQuery1.6</code>新增常用的方法</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>prop(proptyName)</code></td><td>获取在匹配元素集合中的第一个元素的属性值</td></tr><tr><td><code>removeProp(proptyName,value)</code></td><td>为匹配的元素删除设置的属性</td></tr><tr><td><code> :focus</code></td><td>选择当前获取焦点的元素</td></tr></tbody></table><h3 id="附录二-jQuery性能优化"><a href="#附录二-jQuery性能优化" class="headerlink" title="附录二 jQuery性能优化"></a>附录二 jQuery性能优化</h3><hr><ul><li><p><strong>性能优化</strong></p><ul><li><p>使用最新版的jQuery类库</p></li><li><p><strong>使用合适的选择器</strong></p><ul><li><code>$(#id)</code><ul><li>使用<code>id</code>来定位<code>DOM</code>元素是最佳的方式，为了提高性能，建议从最近的<code>ID</code>元素开始往下搜索</li></ul></li><li><code>$(&quot;p&quot;)</code> , <code>$(&quot;div&quot;)</code> , <code>$(&quot;input&quot;)</code><ul><li>标签选择器性能也不错，它是性能优化的第二选择。因为<code>jQuery</code>将直接调用本地方法<code>document.getElementsByTagName()</code>来定位<code>DOM</code>元素</li></ul></li><li><code>$(&quot;.class&quot;)</code><ul><li>建议有选择性的使用</li></ul></li><li><code>$(&quot;[attribute=value]&quot;)</code><ul><li>对这个利用属性定位<code>DOM</code>元素，本地<code>JavaScript</code>并没有直接实现。这种方式性能并不是很理想。建议避免使用。</li></ul></li><li><code>$(&quot;:hidden&quot;)</code><ul><li> 和上面利用属性定位<code>DOM</code>方式类似，建议尽量不要使用</li></ul></li><li><strong>注意的地方</strong><ul><li>尽量使用<code>ID</code>选择器</li><li>尽量给选择器指定上下文</li></ul></li></ul></li><li><p><strong>缓存对象</strong></p><ul><li>如果你需要在其他函数中使用<code>jQuery</code>对象，你可以把他们缓存在全局环境中</li></ul></li><li><p><strong>数组方式使用<code>jQuery</code>对象</strong></p><ul><li>使用<code>jQuery</code>选择器获取的结果是一个<code>jQuery</code>对象。在性能方面，建议使用<code>for</code>或<code>while</code>循环来处理，而不是<code>$.each()</code></li></ul></li></ul></li><li><p><strong>事件代理</strong></p><ul><li>每一个<code>JavaScript</code>事件（如：<code>click</code>、<code>mouseove</code>r）都会冒泡到父级节点。当我们需要给多个元素调用同个函数时这点很有用。比如，我们要为一个表单绑定这样的行为：点击td后，把背景颜色设置为红色<ul><li><code>$(&quot;#myTable td&quot;).click(function()&#123;$(this).css(&quot;background&quot;,&quot;red&quot;);&#125;);</code></li><li>假设有<code>100</code>个<code>td</code>元素，在使用以上的方式时，绑定了<code>100</code>个事件，将带来性能影响</li><li>代替这种多元素的事件监听方法是，你只需向他们的父节点绑定一次事件，然后通过<code>event.target</code>获取到点击的当前元素<ul><li><code>$(&quot;#myTable td&quot;).click(function(&#123;$(e.target).css(&quot;background&quot;,&quot;red&quot;)&#125;);</code></li><li><code>e.target</code>捕捉到触发的目标</li></ul></li></ul></li><li>在<code>jQuery1.7</code>中提供了一个新的方法<code>on()</code>，来帮助你将整个事件监听封装到一个便利的方法中<ul><li> <code>$(&quot;#myTable td&quot;).on(&quot;click&quot;,&#39;td&#39;,function()&#123;$(this).css(&quot;background&quot;,&quot;red&quot;);&#125;);</code></li></ul></li></ul></li><li><p><strong>将你的代码转化成jQuery插件</strong></p><ul><li>它能够使你的代码有更好的重用性，并且能够有效的帮助你组织代码</li></ul></li><li><p><strong>使用join()方法来拼接字符串</strong></p><ul><li>也许你之前使用<code>+</code>来拼接字符串，现在可以改了。它确实有助于性能优化，尤其是长字符串处理的时候</li></ul></li><li><p><strong>合理使用HTML5和Data属性</strong></p><ul><li><code>HTML5</code>的<code>data</code>属性可以帮助我们插入数据，特别是后端的数据交换。<code>jQuery</code>的<code>Data()</code>方法有效利用<code>HTML5</code>的属性<ul><li>例如：<code>&lt;div id=&quot;dl&quot; data-role=&quot;page&quot; data-list-value=&quot;43&quot; data-options=&#39;&#123;&quot;name:&quot;&quot;John&quot;&#125;&#39;&gt;</code></li><li>为了读取数据，你需要使用如下代码<ul><li><code>$(&quot;#dl&#39;).data(&quot;role&#39;;//page)</code></li><li><code>$(&quot;#dl&#39;).data(&quot;lastValue&#39;;//43)</code></li><li><code>$(&quot;#dl&#39;).data(&quot;options&#39;;//john)</code></li></ul></li></ul></li></ul></li><li><p><strong>尽量使用原生的JavaScript方法</strong></p></li><li><p><strong>压缩JavaScript代码</strong></p><ul><li>一方面使用<code>Gzip</code>；另一方面去除<code>JavaScript</code>文件里面的注释、空白</li></ul></li></ul><h3 id="附录三-常用的jQuery代码片段"><a href="#附录三-常用的jQuery代码片段" class="headerlink" title="附录三 常用的jQuery代码片段"></a>附录三 常用的jQuery代码片段</h3><hr><ul><li>禁用页面的右键菜单</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="title">functuion</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>).bind(<span class="string">&quot;contextmenu&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>新窗口打开页面</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//例子1：href=&quot;http://&quot;的链接将会在新窗口打开链接</span></span><br><span class="line">    $(<span class="string">&#x27;a[href=^=&quot;http://&quot;]&#x27;</span>).attr(<span class="string">&quot;target&quot;</span>,<span class="string">&quot;_blank&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//例子2：rel=&quot;external&quot;的超链接将会在新窗口打开链接</span></span><br><span class="line">    $(<span class="string">&quot;a[rel$=&#x27;external&#x27;]&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.target = <span class="string">&quot;_blank&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//use</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://baidu.com&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external&quot;</span>&gt;</span>open<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>判断浏览器类型</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).reday(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//Firefox2 and above</span></span><br><span class="line">    <span class="keyword">if</span>( $.browser.mozilla &amp;&amp; $.browser.version&gt;=<span class="string">&quot;1.8&quot;</span>)&#123;</span><br><span class="line">      <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Safari</span></span><br><span class="line">  <span class="keyword">if</span>($.browser.safari)&#123;</span><br><span class="line">     <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Chrome</span></span><br><span class="line">  <span class="keyword">if</span>($.browser.chrome)&#123;</span><br><span class="line">     <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Opera</span></span><br><span class="line">  <span class="keyword">if</span>($.browser.opera)&#123;</span><br><span class="line">     <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IE6 and blow</span></span><br><span class="line">  <span class="keyword">if</span>($.browser.msie &amp;&amp; $.browser.version&lt;=<span class="number">6</span>)&#123;</span><br><span class="line">     <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// anything above IE6</span></span><br><span class="line">  <span class="keyword">if</span>($.browser.msie &amp;&amp; $.browser.version &gt; <span class="number">6</span>)&#123;</span><br><span class="line">     <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>输入框文字获取和失去焦点</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;input.text1&quot;</span>).val(<span class="string">&quot;Enter you search text here&quot;</span>);</span><br><span class="line">    textFill($(<span class="string">&#x27;input.text1&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">textFill</span>(<span class="params">input</span>)</span>&#123;<span class="comment">//input focus text function</span></span><br><span class="line">    <span class="keyword">var</span> originvalue = input.val();</span><br><span class="line">    input.focus(<span class="function"><span class="title">funtion</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($.trim(input.val())== originvalue)&#123;</span><br><span class="line">            input.val(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>($.trim(input.val()) == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">          input.val(originalvalue);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>获取鼠标位置</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      $(<span class="string">&quot;#XY&quot;</span>).html(<span class="string">&quot;X:&quot;</span> + e.pageX+ <span class="string">&quot;| Y&quot;</span> + e.pageY);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>判断元素是否存在</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">&quot;#id&quot;</span>).length)&#123;</span><br><span class="line">      <span class="comment">// do some thing</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>点击div也可以跳转</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.location  = $(<span class="built_in">this</span>).find(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//use</span></span><br><span class="line"></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>设置div在屏幕中央</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    jQuery.fn.center = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.css(<span class="string">&quot;position&quot;</span>,<span class="string">&quot;absolute&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.css(<span class="string">&quot;top&quot;</span>,($(<span class="built_in">window</span>).height() - <span class="built_in">this</span>.lenght()) / <span class="number">2</span> +$(<span class="built_in">window</span>).scrollTop() + <span class="string">&quot;px&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.css(<span class="string">&quot;left&quot;</span>,($(<span class="built_in">window</span>).height() - <span class="built_in">this</span>.lenght()) / <span class="number">2</span> +$(<span class="built_in">window</span>).scrollLeft() + <span class="string">&quot;px&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//use</span></span><br><span class="line"></span><br><span class="line"> $(<span class="string">&quot;#XY&quot;</span>).center();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>关闭所有动画效果</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    jQuery.fx.off = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>检测鼠标的右键和左键</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#xy&quot;</span>).mousedown(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        alert(e.which);<span class="comment">//1 = 鼠标左键  2= 鼠标中间 3 = 鼠标右键</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>回车提交表单</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;input&quot;</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(e.which == <span class="string">&quot;13&quot;</span>)&#123;</span><br><span class="line">            alert(<span class="string">&quot;回车提交&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>设置全局的Ajax参数</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#load&quot;</span>).ajaxStart(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    showLoading();<span class="comment">//显示loading</span></span><br><span class="line">    disableButtons() <span class="comment">//禁用按钮</span></span><br><span class="line">&#125;)</span><br><span class="line"> $(<span class="string">&quot;#load&quot;</span>).ajaxComplete(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    hideLoading();<span class="comment">//隐藏loading</span></span><br><span class="line">    enableButtons();<span class="comment">//启用按钮</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>获取选中的下拉框</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#someElement&quot;</span>).find(<span class="string">&#x27;option:selected&#x27;</span>);</span><br><span class="line">$(<span class="string">&quot;#someElement option:selected&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>切换复选框</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tog = <span class="literal">false</span>;</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;input[type=checkbox]&#x27;).attr(&quot;</span>checked<span class="string">&quot;,!tog);</span></span><br><span class="line"><span class="string">    tog = !tog;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><ul><li>个性化链接</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     $(<span class="string">&quot;a[href$=&#x27;pdf&#x27;]&quot;</span>).addClass(<span class="string">&quot;pdf&quot;</span>);</span><br><span class="line">     $(<span class="string">&quot;a[href$=&#x27;zip&#x27;]&quot;</span>).addClass(<span class="string">&quot;zip&quot;</span>);</span><br><span class="line">     $(<span class="string">&quot;a[href$=&#x27;psd&#x27;]&quot;</span>).addClass(<span class="string">&quot;psd&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在一段时间后自动隐藏或关闭元素</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeOut(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).fadeIn(<span class="number">400</span>);</span><br><span class="line">  &#125;,<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//而在1.4之后的版本可以用delay()来实现</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).slideUp(<span class="number">300</span>).delay(<span class="number">3000</span>).fadeIn(<span class="number">400</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用事件代理绑定元素</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//为table里面的td元素绑定click事件，不管td是一直存在还是动态创建的</span></span><br><span class="line"> <span class="comment">//jQuery 1.4.2之前使用这种方式</span></span><br><span class="line"> $(<span class="string">&quot;table&quot;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;td&quot;</span>,<span class="built_in">this</span>).live(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       $(<span class="built_in">this</span>).toggleClass(<span class="string">&quot;hover&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery 1.4.2使用的方式</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;table&quot;</span>).delegate(<span class="string">&quot;td&quot;</span>,<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).toggleClass(<span class="string">&quot;hover&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery1.7.1使用的方式</span></span><br><span class="line">$(<span class="string">&quot;table&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;td&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).toggleClass(<span class="string">&quot;hover&quot;</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><ul><li>预加载图片</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = [];</span><br><span class="line">  <span class="comment">// Arguments are image paths relative to the current page.</span></span><br><span class="line">  $.preLoadImages = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args_len = <span class="built_in">arguments</span>.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = args_len; i--;) &#123;</span><br><span class="line">      <span class="keyword">var</span> cacheImage = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">      cacheImage.src = <span class="built_in">arguments</span>[i];</span><br><span class="line">      cache.push(cacheImage);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">jQuery.preLoadImages(<span class="string">&quot;image1.gif&quot;</span>, <span class="string">&quot;/path/to/image2.png&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>让页面中的每个元素都适合在移动设备上展示</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">scr.setAttribute(<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(scr);</span><br><span class="line">scr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).attr(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;&#x27;</span>).attr(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;&#x27;</span>).css(&#123;</span><br><span class="line"><span class="string">&#x27;margin&#x27;</span> : <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;padding&#x27;</span> : <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;width&#x27;</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;clear&#x27;</span>:<span class="string">&#x27;both&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>图像等比例缩放</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).bind(<span class="string">&quot;load&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// IMAGE RESIZE</span></span><br><span class="line">$(<span class="string">&#x27;#product_cat_list img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> maxWidth = <span class="number">120</span>;</span><br><span class="line"><span class="keyword">var</span> maxHeight = <span class="number">120</span>;</span><br><span class="line"><span class="keyword">var</span> ratio = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> width = $(<span class="built_in">this</span>).width();</span><br><span class="line"><span class="keyword">var</span> height = $(<span class="built_in">this</span>).height();</span><br><span class="line"><span class="keyword">if</span>(width &gt; maxWidth)&#123;</span><br><span class="line">ratio = maxWidth / width;</span><br><span class="line">$(<span class="built_in">this</span>).css(<span class="string">&quot;width&quot;</span>, maxWidth);</span><br><span class="line">$(<span class="built_in">this</span>).css(<span class="string">&quot;height&quot;</span>, height * ratio);</span><br><span class="line">height = height * ratio;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> width = $(<span class="built_in">this</span>).width();</span><br><span class="line"><span class="keyword">var</span> height = $(<span class="built_in">this</span>).height();</span><br><span class="line"><span class="keyword">if</span>(height &gt; maxHeight)&#123;</span><br><span class="line">ratio = maxHeight / height;</span><br><span class="line">$(<span class="built_in">this</span>).css(<span class="string">&quot;height&quot;</span>, maxHeight);</span><br><span class="line">$(<span class="built_in">this</span>).css(<span class="string">&quot;width&quot;</span>, width * ratio);</span><br><span class="line">width = width * ratio;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//$(&quot;#contentpage img&quot;).show();</span></span><br><span class="line"><span class="comment">// IMAGE RESIZE</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>返回页面顶部</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Back To Top</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;.top&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     $(<span class="built_in">document</span>).scrollTo(<span class="number">0</span>,<span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//Create a link defined with the class .top</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span>Back To Top<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>使用jQuery打造手风琴式的折叠效果</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> accordion = &#123;</span><br><span class="line">     <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> $container = $(<span class="string">&#x27;#accordion&#x27;</span>);</span><br><span class="line">           $container.find(<span class="string">&#x27;li:not(:first) .details&#x27;</span>).hide();</span><br><span class="line">           $container.find(<span class="string">&#x27;li:first&#x27;</span>).addClass(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">           $container.on(<span class="string">&#x27;click&#x27;</span>,<span class="string">&#x27;li a&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                  e.preventDefault();</span><br><span class="line">                  <span class="keyword">var</span> $this = $(<span class="built_in">this</span>).parents(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">                  <span class="keyword">if</span>($this.hasClass(<span class="string">&#x27;active&#x27;</span>))&#123;</span><br><span class="line">                         <span class="keyword">if</span>($(<span class="string">&#x27;.details&#x27;</span>).is(<span class="string">&#x27;:visible&#x27;</span>)) &#123;</span><br><span class="line">                                $this.find(<span class="string">&#x27;.details&#x27;</span>).slideUp();</span><br><span class="line">                         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                $this.find(<span class="string">&#x27;.details&#x27;</span>).slideDown();</span><br><span class="line">                         &#125;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                         $container.find(<span class="string">&#x27;li.active .details&#x27;</span>).slideUp();</span><br><span class="line">                         $container.find(<span class="string">&#x27;li&#x27;</span>).removeClass(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">                         $this.addClass(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">                         $this.find(<span class="string">&#x27;.details&#x27;</span>).slideDown();</span><br><span class="line">                  &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>使用jQuery和Ajax自动填充选择框</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">&quot;select#ctlJob&quot;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.getJSON(<span class="string">&quot;/select.php&quot;</span>,&#123;<span class="attr">id</span>: $(<span class="built_in">this</span>).val(), <span class="attr">ajax</span>: <span class="string">&#x27;true&#x27;</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> options = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j.length; i++) &#123;</span><br><span class="line">options += <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span> + j[i].optionDisplay + <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">&quot;select#ctlPerson&quot;</span>).html(options);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>自动替换丢失的图片</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Safe Snippet</span></span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).error(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="built_in">this</span>).unbind(<span class="string">&quot;error&quot;</span>).attr(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;missing_image.gif&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Persistent Snipper</span></span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).error(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="built_in">this</span>).attr(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;missing_image.gif&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>预防对表单进行多次提交</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;form&#x27;</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> jQuery.data(<span class="built_in">this</span>, <span class="string">&quot;disabledOnSubmit&quot;</span>) == <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      jQuery.data(<span class="built_in">this</span>, <span class="string">&quot;disabledOnSubmit&quot;</span>, &#123; <span class="attr">submited</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      $(<span class="string">&#x27;input[type=submit], input[type=button]&#x27;</span>, <span class="built_in">this</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="built_in">this</span>).attr(<span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;disabled&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>动态添加表单元素</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//change event on password1 field to prompt new input</span></span><br><span class="line">$(<span class="string">&#x27;#password1&#x27;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//dynamically create new input and insert after password1</span></span><br><span class="line">        $(<span class="string">&quot;#password1&quot;</span>).append(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>在窗口滚动时自动加载内容</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> loading = <span class="literal">false</span>;</span><br><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((($(<span class="built_in">window</span>).scrollTop()+$(<span class="built_in">window</span>).height())+<span class="number">250</span>)&gt;=$(<span class="built_in">document</span>).height())&#123;</span><br><span class="line"><span class="keyword">if</span>(loading == <span class="literal">false</span>)&#123;</span><br><span class="line">loading = <span class="literal">true</span>;</span><br><span class="line">$(<span class="string">&#x27;#loadingbar&#x27;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;block&quot;</span>);</span><br><span class="line">$.get(<span class="string">&quot;load.php?start=&quot;</span>+$(<span class="string">&#x27;#loaded_max&#x27;</span>).val(), <span class="function"><span class="keyword">function</span>(<span class="params">loaded</span>)</span>&#123;</span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).append(loaded);</span><br><span class="line">$(<span class="string">&#x27;#loaded_max&#x27;</span>).val(<span class="built_in">parseInt</span>($(<span class="string">&#x27;#loaded_max&#x27;</span>).val())+<span class="number">50</span>);</span><br><span class="line">$(<span class="string">&#x27;#loadingbar&#x27;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">loading = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">&#x27;#loaded_max&#x27;</span>).val(<span class="number">50</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>导航菜单背景切换效果</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&#x27;nav&#x27;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>导航一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>导航二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>导航三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：代码需要修饰完善</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#nav&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 要知道siblings的使用</span></span><br><span class="line"></span><br><span class="line">$(e.target).addClass(<span class="string">&#x27;tclass&#x27;</span>).siblings(<span class="string">&#x27;.tclass&#x27;</span>).removeClass(<span class="string">&#x27;tclass&#x27;</span>);;</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><ul><li>解决<code>jQuery</code>, <code>prototype</code>共存，<code>$</code>全局变量冲突问题</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;prototype.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://blogbeta.blueidea.com/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> jQuery.noConflict();<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">注意：一定要先引入prototype.js 再引入jquery.js，先后顺序不可错</span><br></pre></td></tr></table></figure><ul><li> jQuery 判断元素上是否绑定了事件</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jQuery event封装支持判断元素上是否绑定了事件，此方法只适用于jQuery绑定的事件</span></span><br><span class="line"><span class="keyword">var</span> $events = $(<span class="string">&quot;#foo&quot;</span>).data(<span class="string">&quot;events&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>( $events &amp;&amp; $events[<span class="string">&quot;click&quot;</span>] )&#123;　　</span><br><span class="line">    <span class="comment">//your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如何正确地使用<code>toggleClass</code></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切换（toggle）类允许你根据某个类的//是否存在来添加或是删除该类。</span></span><br><span class="line"><span class="comment">//这种情况下有些开发者使用：</span></span><br><span class="line">a.hasClass(<span class="string">&#x27;blueButton&#x27;</span>) ? a.removeClass(<span class="string">&#x27;blueButton&#x27;</span>) : a.addClass(<span class="string">&#x27;blueButton&#x27;</span>);</span><br><span class="line"><span class="comment">//toggleClass允许你使用下面的语句来很容易地做到这一点</span></span><br><span class="line">a.toggleClass(<span class="string">&#x27;blueButton&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>如何设置IE特有的功能</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($.browser.msie) &#123;</span><br><span class="line">    <span class="comment">// Internet Explorer就是个虐待狂</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如何验证某个元素是否为空</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">if</span> (! $(<span class="string">&#x27;#keks&#x27;</span>).html()) &#123;</span><br><span class="line">    <span class="comment">//什么都没有找到;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">if</span> ($(<span class="string">&#x27;#keks&#x27;</span>).is(<span class="string">&quot;:empty&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">//什么都没有找到;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问IFrame里的元素</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iFrameDOM = $(<span class="string">&quot;iframe#someID&quot;</span>).contents();</span><br><span class="line"><span class="comment">//然后，就可以通过find方法来遍历获取iFrame中的元素了</span></span><br><span class="line">iFrameDOM.find(<span class="string">&quot;.message&quot;</span>).slideUp();</span><br></pre></td></tr></table></figure><ul><li>管理搜索框的值<ul><li>现在各大网站都有搜索框，而搜索框通常都有默认值，当输入框获取焦点时，默认值消失。而一旦输入框失去焦点，而输入框里又没有输入新的值，输入框里的值又会恢复成默认值，如果往输入框里输入了新值，则输入框的值为新输入的值。这种特效用<code>JQuery</code><br>很容易实现</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#searchbox&quot;</span>) .focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $(<span class="built_in">this</span>).val(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;) .blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> $this = $(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// &#x27;请搜索...&#x27;为搜索框默认值</span></span><br><span class="line">    ($this.val() === <span class="string">&#x27;&#x27;</span>)? $this.val(<span class="string">&#x27;请搜索...&#x27;</span>) : <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>部分页面加载更新<ul><li>为了提高<code>web</code>性能，有更新时我们通常不会加载整个页面，而只是仅仅更新部分页面内容，如图片的延迟加载等。页面部分刷新的特效在<code>JQuery</code>中也很容易实现</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//每隔5秒钟刷新页面内容 //获取的内容将增加到 id为content的元素后</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#content&quot;</span>).load(url); &#125;, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><ul><li>采配置JQuery与其它库的兼容性<ul><li>如果在项目中使用<code>JQuery</code>，<code>$</code> 是最常用的变量名，但<code>JQuery</code>并不是唯一一个使用<code>$</code>作为变量名的库，为了避免命名冲突，你可以按照下面方式来组织你的代码</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一： 为JQuery重新命名为</span></span><br><span class="line"> $jvar $j = jQuery.noConflict();$j(<span class="string">&#x27;#id&#x27;</span>).... <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">方法二： 推荐使用的方式</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123; $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//这儿，你可以正常的使用JQuery语法 &#125;);</span></span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><ul><li>测试密码的强度<ul><li>在某些网站注册时常常会要求设置密码，网站也会根据输入密码的字符特点给出相应的提示，如密码过短、强度差、强度中等、强度强等。这又是怎么实现的呢？看下面代码：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pass&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;passstrength&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面的正则表达式建议各位收藏哦，项目上有可能会用得着</span></span><br><span class="line">$(<span class="string">&#x27;#pass&#x27;</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码为八位及以上并且字母数字特殊字符三项都包括</span></span><br><span class="line"><span class="keyword">var</span> strongRegex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;^(?=.&#123;8,&#125;)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\\W).*$&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码为七位及以上并且字母、数字、特殊字符三项中有两项，强度是中等</span></span><br><span class="line"> <span class="keyword">var</span> mediumRegex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;^(?=.&#123;7,&#125;)(((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[0-9]))).*$&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> enoughRegex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(?=.&#123;6,&#125;).*&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span> == enoughRegex.test($(<span class="built_in">this</span>).val())) &#123;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#passstrength&#x27;</span>).html(<span class="string">&#x27;More Characters&#x27;</span>); &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (strongRegex.test($(<span class="built_in">this</span>).val())) &#123;</span><br><span class="line">     $(<span class="string">&#x27;#passstrength&#x27;</span>).className = <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">     $(<span class="string">&#x27;#passstrength&#x27;</span>).html(<span class="string">&#x27;Strong!&#x27;</span>); &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mediumRegex.test($(<span class="built_in">this</span>).val())) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#passstrength&#x27;</span>).className = <span class="string">&#x27;alert&#x27;</span>;</span><br><span class="line">    $(<span class="string">&#x27;#passstrength&#x27;</span>).html(<span class="string">&#x27;Medium!&#x27;</span>); &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">&#x27;#passstrength&#x27;</span>).className = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">    $(<span class="string">&#x27;#passstrength&#x27;</span>).html(<span class="string">&#x27;Weak!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="附录四-常见CND加速服务"><a href="#附录四-常见CND加速服务" class="headerlink" title="附录四 常见CND加速服务"></a>附录四 常见CND加速服务</h3><hr><ul><li><a href="http://www.bootcdn.cn/">Bootstrap中文网开源项目免费 CDN 服务</a></li><li><a href="http://cdn.code.baidu.com/">百度静态资源公共库</a></li><li><a href="http://libs.useso.com/">360网站卫士常用前端公共库CDN服务–已停止服务</a></li><li><a href="http://staticfile.org/">开放静态文件 CDN </a></li><li><a href="http://www.asp.net/ajax/cdn">微软CDN服务</a></li><li><a href="https://bbs.aliyun.com/read/139395.html">阿里云</a></li><li><a href="http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs">百度开放云平台</a></li><li><a href="http://code.jquery.com/">jQuery CDN</a></li><li><a href="http://www.jq22.com/cdn/">jQuery cdn加速</a></li><li><a href="http://lib.sinaapp.com/">新浪CDN</a></li></ul><h3 id="附录五-jQuery的一些资源"><a href="#附录五-jQuery的一些资源" class="headerlink" title="附录五 jQuery的一些资源"></a>附录五 jQuery的一些资源</h3><hr><ul><li>速查手册<ul><li><a href="http://www.css88.com/jqapi-1.9/">jQuery API 中文文档–css88</a></li><li><a href="http://overapi.com/jquery">jQuery-overapi</a></li><li><a href="http://www.sxt.cn/searchsxt/sxtapipro/index.html">在线桌面版API</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/%E5%AE%9E%E7%94%A8%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8CAPI.md">更多详情—一份实用的API参考手册集合</a></li></ul></li><li><code>jQuery</code>插件</li><li>基础常用<ul><li><a href="http://caibaojian.com/scrollfix">滚动固定在某个位置</a></li><li><a href="http://caibaojian.com/power-slider">jQuery图片滚动插件全能版</a></li><li><a href="http://code.ciaoca.com/jquery/wookmark/?utm_source=caibaojian.com">jQuery Wookmark Load 瀑布流布局</a></li><li><a href="http://code.ciaoca.com/jquery/jcrop/?utm_source=caibaojian.com">jQuery Jcrop 图像裁剪</a></li><li><a href="http://code.ciaoca.com/jquery/kxbdmarquee/?utm_source=caibaojian.com">jQuery kxbdMarquee 无缝滚动</a></li><li><a href="http://code.ciaoca.com/jquery/lightbox/?utm_source=caibaojian.com">jQuery lightBox 灯箱效果</a></li><li><a href="http://www.appelsiini.net/projects/lazyload?utm_source=caibaojian.com">Lazy Load Plugin for jQuery</a></li></ul></li><li>更多插件-动效库整理<ul><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/%E6%8F%92%E4%BB%B6%E5%BA%93.md">插件动效库</a></li><li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6.md">常用组件</a></li></ul></li></ul><h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><hr><ul><li><a href="http://www.cnblogs.com/aaronjs/p/3279314.html">jQuery源码分析系列</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><hr><ul><li>锋利的<code>jQuery</code></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第一节-jQuery初步认知&quot;&gt;&lt;a href=&quot;#第一节-jQuery初步认知&quot; class=&quot;headerlink&quot; title=&quot;第一节 jQuery初步认知&quot;&gt;&lt;/a&gt;第一节 jQuery初步认知&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;jQuery概述&quot;&gt;&lt;a href=&quot;#jQuery概述&quot; class=&quot;headerlink&quot; title=&quot;jQuery概述&quot;&gt;&lt;/a&gt;jQuery概述&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;JQuery&lt;/code&gt;概念&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javascript&lt;/code&gt;概念&lt;pre&gt;&lt;code&gt;  - 基于`Js`语言的`API`和语法组织逻辑，通过内置`window`和`document`对象，来操作内存中的`DOM`元素
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JQuery&lt;/code&gt;概念&lt;ul&gt;
&lt;li&gt;基于&lt;code&gt;javascript&lt;/code&gt;的，同上，提高了代码的效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;jQuery&lt;/code&gt;是什么:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;是一个&lt;code&gt;javascript&lt;/code&gt;代码仓库，我们称之为&lt;code&gt;javascript&lt;/code&gt;框架。&lt;/li&gt;
&lt;li&gt;是一个快速的简洁的&lt;code&gt;javascript&lt;/code&gt;框架，可以简化查询&lt;code&gt;DOM&lt;/code&gt;对象、处理事件、制作动画、处理&lt;code&gt;Ajax&lt;/code&gt;交互过程。&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;它可以帮我们做什么(有什么优势)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;轻量级、体积小，使用灵巧(只需引入一个&lt;code&gt;js&lt;/code&gt;文件)&lt;/li&gt;
&lt;li&gt; 强大的选择器&lt;/li&gt;
&lt;li&gt;出色的&lt;code&gt;DOM&lt;/code&gt;操作的封装&lt;/li&gt;
&lt;li&gt;出色的浏览器兼容性&lt;/li&gt;
&lt;li&gt;可靠的事件处理机制&lt;/li&gt;
&lt;li&gt;完善的&lt;code&gt;Ajax&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;链式操作、隐式迭代&lt;/li&gt;
&lt;li&gt;方便的选择页面元素(模仿&lt;code&gt;CSS&lt;/code&gt;选择器更精确、灵活)&lt;/li&gt;
&lt;li&gt;动态更改页面样式/页面内容(操作&lt;code&gt;DOM&lt;/code&gt;，动态添加、移除样式)&lt;/li&gt;
&lt;li&gt;控制响应事件(动态添加响应事件)&lt;/li&gt;
&lt;li&gt;提供基本网页特效(提供已封装的网页特效方法)&lt;/li&gt;
&lt;li&gt;快速实现通信(&lt;code&gt;ajax&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;易扩展、插件丰富&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript框架" scheme="https://github.com/haodex/haodex.github.io.git/categories/JavaScript%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Jquery" scheme="https://github.com/haodex/haodex.github.io.git/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>Touch</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/11/08/Touch%20%E4%BA%8B%E4%BB%B6/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/11/08/Touch%20%E4%BA%8B%E4%BB%B6/</id>
    <published>2021-11-08T07:35:53.000Z</published>
    <updated>2021-11-08T07:52:05.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端-js-touch事件"><a href="#移动端-js-touch事件" class="headerlink" title="移动端 js touch事件"></a><a href="https://www.cnblogs.com/fengfan/p/4506555.html">移动端 js touch事件</a></h1><p>随着智能手机和平板电脑的普及, 越来越多的人用移动设备浏览网页，我们平时在<code>pc</code>浏览器上用的鼠标事件，比如：<code>click</code>, <code>mouseover</code>等， 已经无法满足移动设备触摸屏的特点，触摸时代的到来，离不开那些触摸事件。</p><h3 id="触摸事件包含4个接口。"><a href="#触摸事件包含4个接口。" class="headerlink" title="触摸事件包含4个接口。"></a>触摸事件包含4个接口。</h3><p><strong>TouchEvent</strong></p><ul><li>代表当触摸行为在平面上变化的时候发生的事件.</li></ul><p><strong>Touch</strong></p><ul><li>代表用户手指与触摸平面间的一个接触点.</li></ul><p><strong>TouchList</strong></p><ul><li>代表一系列的<code>Touch</code>; 一般在用户多个手指同时接触触控平面时使用这个接口.</li></ul><p><strong>DocumentTouch</strong></p><ul><li><p>包含了一些创建 <code>Touch</code>对象与<code>TouchList</code>对象的便捷方法.</p></li><li><p>（参考于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Touch_events">https://developer.mozilla.org/zh-CN/docs/Web/API/Touch_events</a> ）</p></li><li><p><code>TouchEvent</code>接口可以响应基本触摸事件（如单个手指点击），它包含了一些具体的事件， </p></li></ul><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><ul><li><p><code>touchstart</code> : 触摸开始（手指放在触摸屏上）</p></li><li><p><code>touchmove</code> : 拖动（手指在触摸屏上移动）</p></li><li><p><code>touchend</code>: 触摸结束（手指从触摸屏上移开）</p></li><li><p><code>touchenter</code> ：移动的手指进入一个<code>dom</code>元素。</p></li><li><p><code>touchleave</code> ：移动的手指离开一个<code>dom</code>元素。</p></li><li><p>还有一个<code>touchcancel</code>，是在拖动中断时候触发。</p></li></ul><h3 id="事件属性"><a href="#事件属性" class="headerlink" title="事件属性"></a>事件属性</h3><ul><li><code>altKey </code> : 该属性返回一个布尔值，表示在指定的事件发生时，<code>Alt</code> 键是否处于按下状态， <code>event.altKey=true|false|1|0</code></li><li><code>type</code> : 触摸时触发的事件类型，比如<code>touchstart</code></li><li><strong>每个触摸事件都包括了三个触摸属性列表：</strong></li><li><code>touches</code>：当前位于屏幕上的所有手指触摸点的一个列表。</li><li><code>targetTouches</code>：当前元素对象上所有触摸点的列表。</li><li><code>changedTouches</code>：涉及当前事件的触摸点的列表。</li><li>它们都是一个数组，每个元素代表一个触摸点。</li><li>每个触摸点对应的Touch都有三对重要的属性，<code>clientX/clientY</code>、<code>pageX/pageY</code>、<code>screenX/screenY</code>。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端-js-touch事件&quot;&gt;&lt;a href=&quot;#移动端-js-touch事件&quot; class=&quot;headerlink&quot; title=&quot;移动端 js touch事件&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/fengfan/p/4</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://github.com/haodex/haodex.github.io.git/categories/JavaScript/"/>
    
    
    <category term="Touch" scheme="https://github.com/haodex/haodex.github.io.git/tags/Touch/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/11/08/ES6/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/11/08/ES6/</id>
    <published>2021-11-08T07:35:53.000Z</published>
    <updated>2021-11-11T10:35:43.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Es6"><a href="#Es6" class="headerlink" title="Es6"></a>Es6</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>介绍：<ul><li><code>ES2015</code>年退出<code>JavaScript</code>新版本也叫<code>ES2015</code></li><li>现在已经<code>ES7（2016）</code>，<code>ES8（2017）</code>，<code>ES9（2018）</code>很多新增内容仍是填</li><li>普遍使用的依然是<code>ES6</code>，<code>ES7</code>部分内容</li><li><code>ES7</code>及后面版本浏览器或node环境未完全支持，但已有<code>babel</code>工具可对其进行编译支持（转成<code>ES5</code>）</li><li>所以：新版本语言只是在原有基础上新增了一些语法糖，执行时还会转换为<code>ES5</code></li></ul></li><li><strong>ECMAScript</strong>、<strong>JavaScript</strong>、<strong>NodeJs</strong>，它们的区别是什么？<ul><li><code>ECMAScript</code>：简称<code>ES</code>，是一个语言标准（循环、判断、变量、数组等数据类型）</li><li><code>JavaScript</code>：运行在浏览器端的语言，该语言使用<code>ES</code>标准，<code>ES + web api = JavaScript</code></li><li><code>NodeJs</code>：运行在服务器端的语言，该语言使用<code>ES</code>标准，<code>ES + node api = JavaScript</code></li></ul></li><li><strong>ECMAScript</strong>有哪些关键的版本？<ul><li><code>ES3.0</code>：<code>1999</code></li><li><code>ES5.0</code>：<code>2009</code></li><li><code>ES6.0</code>：<code>2015</code>，从该版本不再使用数字作为编号，而使用年份，也叫<code>ES2015</code></li><li><code>ES7.0</code>：<code>2016</code></li></ul></li><li>为什么<strong>ES6</strong>如此重要？<ul><li><code>ES6</code>解决<code>JS</code>无法开发大型应用的语言层面的问题。</li></ul></li><li>为什么要学习<code>ES6</code>？<ul><li><code>ES6</code>引入的语言新特性，更具规范性，易读性，方便操作，简化了大型项目开发的复杂程度、降低了出错概率，提升了开发效率</li><li>大部分公司（不代表所有，代表着一个趋势）都在用<code>ES6</code>开发，已成为开发，求职必会内容</li></ul></li></ul><span id="more"></span><h2 id="块级绑定"><a href="#块级绑定" class="headerlink" title="块级绑定"></a>块级绑定</h2><h3 id="babel本地使用"><a href="#babel本地使用" class="headerlink" title="babel本地使用"></a>babel本地使用</h3><ul><li><p>用<code>Babel</code>工具做对比<code>ES6</code>-&gt;低级语法</p></li><li><p>在线<code>Babel</code>工具(<a href="https://babeljs.io/repl)%EF%BC%88https://babeljs.cn%EF%BC%89">https://babeljs.io/repl)（https://babeljs.cn）</a></p></li><li><p><code>npm</code>本地下载工具（用于生产环境）</p><ul><li><p><code>npm init -y</code> ：初始化</p></li><li><p><code>npm install @babel/core @babel/cli @babel/preset-env</code>：安装<strong>Babel</strong></p></li><li><p><code>npx babel xxx.js(需要被转换的文件名称) -o xxx.js(转换完成的文件名称) --watch</code>：编译<code>ES6</code>格式的<code>js</code>文件，<code>--watch</code>是时刻监控(更新)</p></li><li><p><strong>babel</strong>配置文件：</p><ul><li><p><strong>.babelrc</strong>文件，严格<code>json</code></p></li><li><p>```js<br>{</p><pre><code>&quot;presets&quot;: [    &quot;@babel/preset-env&quot;],&quot;plugins&quot;: [],……</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 声明变量的问题</span><br><span class="line"></span><br><span class="line">- 使用`var`声明变量</span><br><span class="line">- 允许重复的变量声明：导致数据被覆盖</span><br><span class="line">- 变量提升：怪异的数据访问、闭包问题</span><br><span class="line">- 全局变量挂载到`window`全局对象：全局对象成员污染问题</span><br><span class="line"></span><br><span class="line">### 使用let声明变量</span><br><span class="line"></span><br><span class="line">- 加强了对作用域的控制</span><br><span class="line"></span><br><span class="line">`ES6`不仅引入`let`关键字用于解决变量声明的问题，同时引入了块级作用域的概念</span><br><span class="line"></span><br><span class="line">块级作用域：代码执行时遇到花括号，会创建一个块级作用域，花括号结束，销毁块级作用域</span><br><span class="line"></span><br><span class="line">- 特点</span><br><span class="line">  - `let`声明的变量不会挂载到全局对象</span><br><span class="line">  - `let`声明的变量，不允许当前作用域范围内重复声明</span><br><span class="line">  - 在块级作用域中用`let`定义的变量，在作用域外不能访问</span><br><span class="line">  - 使用`let`不会有变量提升，因此，不能在定义`let`变量之前使用它</span><br><span class="line"></span><br><span class="line">底层实现上，`let`声明的变量实际上也会有提升，但是，提升后会将其放入到“暂时性死区”，如果访问的变量位于暂时性死区，则会报错：`“Cannot access &#x27;a&#x27; before initialization”`。当代码运行到该变量的声明语句时，会将其从暂时性死区中移除。</span><br><span class="line"></span><br><span class="line">在循环中，用`let`声明的循环变量，会特殊处理，每次进入循环体，都会开启一个新的作用域，并且将循环变量绑定到该作用域（每次循环，使用的是一个全新的循环变量）</span><br><span class="line"></span><br><span class="line">在循环中使用`let`声明的循环变量，在循环结束后会销毁</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">//临时死区</span><br><span class="line">let a = 10;</span><br><span class="line">&#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">    //Cannot access &#x27;a&#x27; before initialization</span><br><span class="line">    let a = 20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//闭包</span><br><span class="line">var arr = [];</span><br><span class="line">//let声明会销毁块级作用域</span><br><span class="line">for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">arr[i] = function()&#123; </span><br><span class="line">console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[0]();</span><br><span class="line">arr[4]();</span><br><span class="line">arr[7]();</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="使用const声明常量"><a href="#使用const声明常量" class="headerlink" title="使用const声明常量"></a>使用const声明常量</h3><blockquote><p> <code>const</code>和<code>let</code>完全相同，仅在于用<code>const</code>声明的变量，必须在声明时赋值，而且不可以重新赋值。</p></blockquote><ul><li>实际上，在开发中，应该尽量使用<code>const</code>来声明变量，以保证变量的值不会随意篡改，原因如下：</li></ul><ol><li><p>根据经验，开发中的很多变量，都是不会更改，也不应该更改的。</p></li><li><p>后续的很多框架或者是第三方<code>JS</code>库，都要求数据不可变，使用常量可以一定程度上保证这一点。</p></li><li><p>注意的细节：</p><ol><li><p>常量不可变，是指声明的常量的内存空间不可变，并不保证内存空间中的地址指向的其他空间不可变。</p><ol><li>```js<br>const PI = {};<br>PI.name = 20;<br>//PI = 20;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   1. 常量的命名</span><br><span class="line">      1. 特殊的常量：该常量从字面意义上，一定是不可变的，比如圆周率、月地距地或其他一些绝不可能变化的配置。通常，**该常量的名称全部使用大写，多个单词之间用下划线分割**</span><br><span class="line">      2. 普通的常量：使用和之前一样的命名即可</span><br><span class="line">   2. 在`for`循环中，循环变量不可以使用常量</span><br><span class="line"></span><br><span class="line">## 字符串和正则表达式</span><br><span class="line"></span><br><span class="line">### 更好的Unicode支持</span><br><span class="line"></span><br><span class="line">- 早期，由于存储空间宝贵，`Unicode`使用`16`位二进制来存储文字。我们将一个`16`位的二进制编码叫做一个码元（`Code Unit`）。</span><br><span class="line"></span><br><span class="line">- 后来，由于技术的发展，`Unicode`对文字编码进行了扩展，将某些文字扩展到了`32`位（占用两个码元），并且，将某个文字对应的二进制数字叫做码点（`Code Point`）。</span><br><span class="line"></span><br><span class="line">- `ES6`为了解决这个困扰，为字符串提供了方法：`codePointAt`，根据字符串码元的位置得到其码点。</span><br><span class="line"></span><br><span class="line">- 同时，`ES6`为正则表达式添加了一个`flag: u`，如果添加了该配置，则匹配时，使用码点匹配</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  const text = &#x27;𠮷&#x27;;</span><br><span class="line">  </span><br><span class="line">  console.log(&quot;字符串长度：&quot;, text.length);</span><br><span class="line">  console.log(&quot;使用正则测试：&quot;, /^.$/u.test(text));</span><br><span class="line">  console.log(&quot;得到第一个码元：&quot;, text.charCodeAt(0));</span><br><span class="line">  console.log(&quot;得到第二个码元：&quot;, text.charCodeAt(1));</span><br><span class="line">  </span><br><span class="line">  //𠮷：\ud842\udfb7</span><br><span class="line">  console.log(&quot;得到第一个码点：&quot;, text.codePointAt(0));</span><br><span class="line">  console.log(&quot;得到第二个码点：&quot;, text.codePointAt(1));</span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">   * 判断字符串char，是32位，还是16位</span><br><span class="line">   * @param &#123;*&#125; char </span><br><span class="line">   */</span><br><span class="line">  function is32bit(char, i) &#123;</span><br><span class="line">      //如果码点大于了16位二进制的最大值，则其是32位的</span><br><span class="line">      return char.codePointAt(i) &gt; 0xffff;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">   * 得到一个字符串码点的真实长度</span><br><span class="line">   * @param &#123;*&#125; str </span><br><span class="line">   */</span><br><span class="line">  function getLengthOfCodePoint(str) &#123;</span><br><span class="line">      var len = 0;</span><br><span class="line">      for (let i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">          //i在索引码元</span><br><span class="line">          if (is32bit(str, i)) &#123;</span><br><span class="line">              //当前字符串，在i这个位置，占用了两个码元</span><br><span class="line">              i++;</span><br><span class="line">          &#125;</span><br><span class="line">          len++;</span><br><span class="line">      &#125;</span><br><span class="line">      return len;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  console.log(&quot;𠮷是否是32位的：&quot;, is32bit(&quot;𠮷&quot;, 0))</span><br><span class="line">  console.log(&quot;ab𠮷ab的码点长度：&quot;, getLengthOfCodePoint(&quot;ab𠮷ab&quot;))</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="更多的字符串API"><a href="#更多的字符串API" class="headerlink" title="更多的字符串API"></a>更多的字符串API</h3><ul><li><p>以下均为字符串的实例（原型）方法</p></li><li><p><strong>includes</strong>：判断字符串中是否包含指定的子字符串</p></li><li><p><strong>startsWith</strong>：判断字符串中是否以指定的字符串开始</p></li><li><p><strong>endsWith</strong>：判断字符串中是否以指定的字符串结尾</p></li><li><p><strong>repeat</strong>：将字符串重复指定的次数，然后返回一个新字符串。</p></li><li><p>```js<br>const text = “成哥是狠人”;</p><p>console.log(“是否包含“狠”：”, text.includes(“狠”));<br>console.log(“是否以“成哥”开头：”, text.startsWith(“成哥”));<br>console.log(“是否以“狠人”结尾：”, text.endsWith(“狠人”));<br>console.log(“重复4次：”, text.repeat(4));</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 模板字符串</span><br><span class="line"></span><br><span class="line">- `ES6`之前处理字符串繁琐的两个方面：</span><br><span class="line">  - 多行字符串</span><br><span class="line">  - 字符串拼接</span><br><span class="line"></span><br><span class="line">- 在`ES6`中，提供了模板字符串的书写，可以非常方便的换行和拼接，要做的，仅仅是将字符串的开始或结尾改为 **`** 符号</span><br><span class="line"></span><br><span class="line">- 如果要在字符串中拼接`js`表达式，只需要在模板字符串中使用```$&#123;JS表达式&#125;```</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  let val = &quot;我是&quot;</span><br><span class="line">  var text = `$&#123;val&#125;人` </span><br><span class="line">  //等同于</span><br><span class="line">  var text = &quot;我是&quot; + &quot;人&quot;;</span><br><span class="line">  //$&#123;表达式&#125;，表达式可以是任何表达式</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><ul><li><p>使用</p><ul><li><p>在书写形参时，直接给形参赋值，附的值即为默认值</p></li><li><p>这样一来，当调用函数时，如果没有给对应的参数赋值（给它的值是<code>undefined</code>），则会自动使用默认值。</p></li><li><p>```js<br>function sum(a, b = 1, c = 2) {</p><pre><code>return a + b + c;</code></pre><p>}<br>console.log(sum(10, undefined, undefined))<br>console.log(sum(11))<br>console.log(sum(1, undefined, 5))</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- [扩展]对**arguments**的影响</span><br><span class="line"></span><br><span class="line">  - 只要给函数加上参数默认值，该函数会自动变量严格模式下的规则：arguments和形参脱离</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    function getContainer() &#123;</span><br><span class="line">        console.log(&quot;abc&quot;);</span><br><span class="line">        return document.getElementById(&quot;container&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 创建一个元素</span><br><span class="line">     * @param &#123;*&#125; name 元素的名称 </span><br><span class="line">     * @param &#123;*&#125; container 元素的父元素</span><br><span class="line">     * @param &#123;*&#125; content 元素的内容 </span><br><span class="line">     */</span><br><span class="line">    function createElement(name = &quot;div&quot;, container = getContainer(), content = &quot;&quot;) &#123;</span><br><span class="line">        const ele = document.createElement(name)</span><br><span class="line">        if (content) &#123;</span><br><span class="line">            ele.innerHTML = content;</span><br><span class="line">        &#125;</span><br><span class="line">        container.appendChild(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    createElement(undefined, undefined, &quot;手动阀手动阀十分&quot;)</span><br><span class="line">    createElement(undefined, undefined, &quot;234242342424&quot;)</span><br><span class="line">    createElement(undefined, document.getElementById(&quot;container&quot;), &quot;234242342424&quot;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>[扩展]留意暂时性死区</p><ul><li><p>形参和<code>ES6</code>中的<code>let</code>或<code>const</code>声明一样，具有作用域，并且根据参数的声明顺序，存在暂时性死区。</p></li><li><p>```js<br>function test(a, b = 1) {</p><pre><code>console.log(&quot;arugments&quot;, arguments[0], arguments[1]);console.log(&quot;a:&quot;, a, &quot;b:&quot;, b);a = 3;console.log(&quot;arugments&quot;, arguments[0], arguments[1]);console.log(&quot;a:&quot;, a, &quot;b:&quot;, b);</code></pre><p>}</p><p>test(1, 2);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 剩余参数</span><br><span class="line"></span><br><span class="line">- **arguments**的缺陷：</span><br><span class="line"></span><br><span class="line">  - 如果和形参配合使用，容易导致混乱</span><br><span class="line">  - 从语义上，使用`arguments`获取参数，由于形参缺失，无法从函数定义上理解函数的真实意图</span><br><span class="line"></span><br><span class="line">- **ES6**的剩余参数专门用于手机末尾的所有参数，将其放置到一个形参数组中。</span><br><span class="line"></span><br><span class="line">  - 语法:</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    function (...形参名)&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实例</p><ul><li><p>```js<br>function test(a, b, …args) {</p><p>}</p><p>test(1, 32, 46, 7, 34); </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  function sum(...args) &#123;</span><br><span class="line">      //args收集了所有的参数，形成的一个数组</span><br><span class="line">      let sum = 0;</span><br><span class="line">      for (let i = 0; i &lt; args.length; i++) &#123;</span><br><span class="line">          sum += args[i];</span><br><span class="line">      &#125;</span><br><span class="line">      return sum;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  console.log(sum())</span><br><span class="line">  console.log(sum(1))</span><br><span class="line">  console.log(sum(1, 2))</span><br><span class="line">  console.log(sum(1, 2, 3))</span><br><span class="line">  console.log(sum(1, 2, 3, 4))</span><br></pre></td></tr></table></figure></li><li><p>```js<br>function test(…args1, …args2) {</p><pre><code>console.log(args1)console.log(args2)</code></pre><p>}</p><p>test(1, 32, 46, 7, 34);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **细节：**</span><br><span class="line">  - 一个函数，仅能出现一个剩余参数</span><br><span class="line">  - 一个函数，如果有剩余参数，剩余参数必须是最后一个参数</span><br><span class="line"></span><br><span class="line">### 展开运算符</span><br><span class="line"></span><br><span class="line">使用方式：```  ...要展开的东西  ```</span><br><span class="line"></span><br><span class="line">- 对数组展开 **ES6**</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    const arr1 = [3, 67, 8, 5];</span><br><span class="line">    </span><br><span class="line">    //克隆arr1数组到arr2</span><br><span class="line">    </span><br><span class="line">    const arr2 = [0, ...arr1, 1];</span><br><span class="line">    </span><br><span class="line">    console.log(arr2, arr1 === arr2)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对对象展开 <strong>ES7</strong></p><ul><li><p>```js<br>const obj1 = {</p><pre><code>name: &quot;成哥&quot;,age: 18,love: &quot;邓嫂&quot;,address: &#123;    country: &quot;中国&quot;,    province: &quot;黑龙江&quot;,    city: &quot;哈尔滨&quot;&#125;</code></pre><p>}</p><p>// 浅克隆到obj2</p><p>const obj2 = {</p><pre><code>...obj1,name: &quot;邓哥&quot;</code></pre><p>};</p><p>console.log(obj2)</p><p>console.log(obj1.address === obj2.address)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 实例</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    const obj1 = &#123;</span><br><span class="line">        name: &quot;成哥&quot;,</span><br><span class="line">        age: 18,</span><br><span class="line">        loves: [&quot;邓嫂&quot;, &quot;成嫂1&quot;, &quot;成嫂2&quot;],</span><br><span class="line">        address: &#123;</span><br><span class="line">            country: &quot;中国&quot;,</span><br><span class="line">            province: &quot;黑龙江&quot;,</span><br><span class="line">            city: &quot;哈尔滨&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 浅克隆到obj2</span><br><span class="line">    const obj2 = &#123;</span><br><span class="line">        ...obj1,</span><br><span class="line">        name: &quot;邓哥&quot;,</span><br><span class="line">        address: &#123;</span><br><span class="line">            ...obj1.address</span><br><span class="line">        &#125;,</span><br><span class="line">        loves: [...obj1.loves, &quot;成嫂3&quot;]</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    console.log(obj2)</span><br><span class="line">    </span><br><span class="line">    console.log(obj1.loves === obj2.loves)</span><br></pre></td></tr></table></figure></li><li><p>```js<br>/**</p><ul><li>对所有数字求和</li><li>@param  {…any} args </li><li>/<br>function sum(…args) {<br>  let sum = 0;<br>  for (let i = 0; i &lt; args.length; i++) {<pre><code>  sum += args[i];</code></pre>  }<br>  return sum;<br>}</li></ul><p>/**</p><ul><li>获取一个指定长度的随机数组成的数组</li><li>@param {*} length </li><li>/<br>function getRandomNumbers(length) {<br>  const arr = [];<br>  for (let i = 0; i &lt; length; i++) {<pre><code>  arr.push(Math.random());</code></pre>  }<br>  return arr;<br>}</li></ul><p>const numbers = getRandomNumbers(10);<br>//将数组的每一项展开，依次作为参数传递，而不是把整个数组作为一个参数传递<br>// sum(numbers)</p><p>console.log(sum(…numbers))//相当于传递了10个参数<br>console.log(sum(1, 3, …numbers, 3, 5))</p></li></ul></li></ul><h3 id="确函数的双重用途"><a href="#确函数的双重用途" class="headerlink" title="确函数的双重用途"></a>确函数的双重用途</h3><blockquote><p><code>ES6</code>提供了一个特殊的<code>API</code>，可以使用该<code>API</code>在函数内部，判断该函数是否使用了<code>new</code>来调用</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span>.target </span><br><span class="line"><span class="comment">//该表达式，得到的是：如果没有使用new来调用函数，则返回undefined</span></span><br><span class="line"><span class="comment">//如果使用new调用函数，则得到的是new关键字后面的函数本身</span></span><br></pre></td></tr></table></figure><ul><li><p>```js<br>function Person(firstName, lastName) {</p><pre><code>//判断是否是使用new的方式来调用的函数// //过去的判断方式// if (!(this instanceof Person)) &#123;//     throw new Error(&quot;该函数没有使用new来调用&quot;)// &#125;if (new.target === undefined) &#123;    throw new Error(&quot;该函数没有使用new来调用&quot;)&#125;this.firstName = firstName;this.lastName = lastName;this.fullName = `$&#123;firstName&#125; $&#123;lastName&#125;`;</code></pre><p>}</p><p>const p1 = new Person(“袁”, “进”);<br>console.log(p1)</p><p>const p2 = Person(“袁”, “进”);<br>console.log(p2);</p><p>const p3 = Person.call(p1, “袁”, “进”)<br>console.log(p3);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 箭头函数</span><br><span class="line"></span><br><span class="line">- 回顾：`this`指向</span><br><span class="line">  - 通过对象调用函数，`this`指向对象</span><br><span class="line">  - 直接调用函数，`this`指向全局对象</span><br><span class="line">  - 如果通过`new`调用函数，`this`指向新创建的对象</span><br><span class="line">  - 如果通过`apply`、`call`、`bind`调用函数，`this`指向指定的数据</span><br><span class="line">  - 如果是`DOM`事件函数，`this`指向事件源</span><br><span class="line">- 特点</span><br><span class="line">  - 不用写`function`关键字</span><br><span class="line">  - 只能作为函数使用不能`new`为构造函数，没有原型</span><br><span class="line">  - 参数不能重复命名</span><br><span class="line">  - 返回值可以不写`return`，但是有时需要配合`&#123;&#125;`</span><br><span class="line">  - 内部`arguments`、`this` 由定义时外围最接近一层的非箭头函数的`arguments`和`this`决定其值</span><br><span class="line"></span><br><span class="line">- 使用语法</span><br><span class="line">  - 箭头函数是一个函数表达式，理论上，任何使用函数表达式的场景都可以使用箭头函数</span><br><span class="line"></span><br><span class="line">  - 完整语法：</span><br><span class="line"></span><br><span class="line">    - ```js</span><br><span class="line">      (参数1, 参数2, ...)=&gt;&#123;</span><br><span class="line">          //函数体</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      const isOdd = (num) =&gt; &#123;</span><br><span class="line">          return num % 2 !== 0;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果参数只有一个，可以省略小括号</p><ul><li>```js<br>参数 =&gt; const print = num =&gt; {console.log(“给我的数字是：”, num)}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 如果箭头函数只有一条返回语句，可以省略大括号，和`return`关键字</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    参数 =&gt; 返回值</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注意细节</p><ul><li>箭头函数中，不存在<code>this</code>、<code>arguments</code>、<code>new.target</code>，如果使用了，则使用的是函数外层的对应的<code>this</code>、<code>arguments</code>、<code>new.target</code></li><li>箭头函数没有原型</li><li>箭头函数不能作用构造函数使用</li></ul></li></ul></li><li><p>应用场景</p><ul><li>临时性使用的函数，并不会可以调用它，比如：</li><li>事件处理函数</li><li>异步处理函数</li><li>其他临时性的函数</li><li>为了绑定外层this的函数</li></ul><ol start="3"><li>在不影响其他代码的情况下，保持代码的简洁，最常见的，数组方法中的回调函数</li></ol></li><li><p>实例</p><ul><li><p>```js<br>//原来的函数<br>function sum(a,b) {</p><pre><code>return a + b;</code></pre><p>}</p><p>//箭头函数<br>//求和,可以不写return，但是函数体需要在箭头后面<br>let sum = (a,b) =&gt; a + b;</p><p>//对象,如果想返回对象，则需要将对象变为函数表达式，大括号外面加一层括号,({})<br>let sum = (a,b) =&gt; ({a:a,b:b});</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 例：高阶函数</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    //高阶函数：如果一个函数接受一个参数以后，如果返回一个函数的话就是高阶函数，或者这个函数能够接受一个参数，这个参数是一个函数的话也是高阶函数</span><br><span class="line">    </span><br><span class="line">    //普通形式</span><br><span class="line">    function sum(x) &#123;</span><br><span class="line">    return function(y) &#123;</span><br><span class="line">            return function (z) &#123;</span><br><span class="line">                return x + y + z;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var sum1 = sum(1);</span><br><span class="line">    var sum2 = sum1(2);</span><br><span class="line">    console.log(sum2(3));</span><br><span class="line">    </span><br><span class="line">    //箭头函数形式</span><br><span class="line">    let sum = (x) =&gt; &#123;</span><br><span class="line">        return (y) =&gt; &#123;</span><br><span class="line">            return (z) =&gt; &#123;</span><br><span class="line">                return x + y + z;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //当去掉return时就变为下面的形式了</span><br><span class="line">    //当箭头函数的形参只有一个时，是可以去掉参数的括号，但是当形参有一个以上的情况下，需要括上括号</span><br><span class="line">    let sum = (x) =&gt; (y) =&gt; (z) =&gt; x + y + z;</span><br><span class="line">    sum(1)(2)(3);</span><br></pre></td></tr></table></figure></li><li><p>不能<code>new</code></p><ul><li>```js<br>let sum = () =&gt; {<pre><code>this.a = 10;</code></pre>}new sum();//会报错<br>//arrow.js:33 Uncaught TypeError: sum is not a constructor at arrow.js:33<br>//sum.prototype =&gt; undefined<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 形式区分：</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    //函数形式</span><br><span class="line">    let sum = () =&gt; &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    sum();</span><br><span class="line">    </span><br><span class="line">    //对象形式</span><br><span class="line">    let obj = &#123;</span><br><span class="line">        fn: () =&gt; &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.fn();</span><br><span class="line">    </span><br><span class="line">    //数组形式</span><br><span class="line">    let arr = [() =&gt; &#123;&#125;]</span><br><span class="line">    arr[0()];</span><br><span class="line">    </span><br><span class="line">    //同时也可以返回值也可以是箭头函数</span><br><span class="line">    return () =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>arguments</strong>特点</p><ul><li><p>```js<br>//内部arguments、this 由定义时外围最接近一层的非箭头函数的arguments和this决定其值，也就是说箭头函数的外围不是箭头函数才会有arguments</p><p>function outer() {</p><pre><code>//arguments//9 10 11let sum = (a,b) =&gt; &#123;    console.log(arguments,a,b);    //这个输出的argument就是outer的arguments，箭头函数本身没有arguments&#125;;sum(1,2);</code></pre><p>}<br>outer(9,10,11);</p><p>//当函数需要返回外围函数的arguments时，可以使用箭头函数</p><p>function Curry() {</p><pre><code>/* var arg = arguments;return function() &#123;   console.log(arg,arguments)    //如果不使用箭头函数，这个arguments就是这个函数本身的arguments，就需要外围声明一个变量储存arguments&#125; */return () =&gt; &#123;    console.log(arguments);&#125;</code></pre><p>}<br>Curry(1,2,3);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **this**特点</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    //当箭头函数外围没有非箭头函数时，则this等于window</span><br><span class="line">    var a = &#x27;outerObj&#x27;;</span><br><span class="line">    let obj = &#123;</span><br><span class="line">        a:&quot;innserObj&quot;,</span><br><span class="line">        fn: () =&gt; &#123;</span><br><span class="line">            // this =&gt; window</span><br><span class="line">            console.log(this.a);//outerObj</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.fn();</span><br></pre></td></tr></table></figure></li><li><p>```js<br>var a = ‘outerObj’;<br>let obj = {</p><pre><code>a: &#39;innerObj&#39;,//fn() &#123;&#125;就相当于fn: function()&#123;&#125;fn() &#123;    let sum = () =&gt; &#123;        //this =&gt; window，这时外围就有了非箭头函数了，this指向也就变味了obj        console.log(this.a); //innserObj    &#125;    return sum;&#125;</code></pre><p>}<br>let outerSum = obj.fn();<br>outerSum();</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  let obj = &#123;</span><br><span class="line">      ms: &#x27;abc&#x27;,</span><br><span class="line">      fn() &#123;</span><br><span class="line">          // var self = this;</span><br><span class="line">          setTimeout(() =&gt; &#123;</span><br><span class="line">              console.log(this.ms);</span><br><span class="line">          &#125;,500)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  obj.fn();</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="新增的对象字面量语法"><a href="#新增的对象字面量语法" class="headerlink" title="新增的对象字面量语法"></a>新增的对象字面量语法</h3><ul><li><p>成员速写</p><ul><li>如果对象字面量初始化时，成员的名称来自于一个变量，并且和变量的名称相同，则可以进行简写</li></ul></li><li><p>方法速写</p><ul><li>对象字面初始化时，方法可以省略冒号和<code>function</code>关键字</li></ul></li><li><p>计算属性名</p><ul><li>有的时候，初始化对象时，某些属性名可能来自于某个表达式的值，在<code>ES6</code>，可以使用中括号来表示该属性名是通过计算得到的。</li></ul></li><li><p>```js<br>const prop1 = “name2”;<br>const prop2 = “age2”;<br>const prop3 = “sayHello2”;</p><p>const user = {</p><pre><code>[prop1]: &quot;姬成&quot;,[prop2]: 100,// 方法可以省略冒号和关键字[prop3]()&#123;    console.log(this[prop1], this[prop2])&#125;</code></pre><p>}</p><p>user<a href="">prop3</a>;</p><p>console.log(user)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Object的新增API</span><br><span class="line"></span><br><span class="line">- **Object.is**</span><br><span class="line">  - 用于判断两个数据是否相等，基本上跟严格相等（===）是一致的，除了以下两点：</span><br><span class="line">  - `NaN`和`NaN`相等</span><br><span class="line">  - `+0`和`-0`不相等</span><br><span class="line">- **Object.assign**</span><br><span class="line">  - 用于混合对象</span><br><span class="line">- **Object.getOwnPropertyNames** 的枚举顺序</span><br><span class="line">  - `Object.getOwnPropertyNames`方法之前就存在，只不过，官方没有明确要求，对属性的顺序如何排序，如何排序，完全由浏览器厂商决定。</span><br><span class="line">  - `ES6`规定了该方法返回的数组的排序方式如下：</span><br><span class="line">    - 先排数字，并按照升序排序</span><br><span class="line">    - 再排其他，按照书写顺序排序</span><br><span class="line">- **Object.setPrototypeOf**</span><br><span class="line">  - 该函数用于设置某个对象的隐式原型</span><br><span class="line">  - 比如： `Object.setPrototypeOf(obj1, obj2)`，相当于：  ` obj1.__proto__ = obj2 `</span><br><span class="line"></span><br><span class="line">- 实例</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    console.log(NaN === NaN); // false</span><br><span class="line">    console.log(+0 === -0);  // true</span><br><span class="line">    </span><br><span class="line">    console.log(Object.is(NaN, NaN)) //true</span><br><span class="line">    console.log(Object.is(+0, -0)) // false</span><br></pre></td></tr></table></figure><ul><li><p>```js<br>const obj1 = {</p><pre><code>a: 1</code></pre><p>}<br>const obj2 = {</p><pre><code>b: 2</code></pre><p>}</p><p>// obj1.<strong>proto</strong> = obj2<br>Object.setPrototypeOf(obj1, obj2)<br>console.log(obj1)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Object.defineProperty</span><br><span class="line"></span><br><span class="line">- 简介</span><br><span class="line"></span><br><span class="line">  - `ES5`规范开始后续版本迭代，也在致力于做一件事，就是把`js`底层已有的功能，提供给开发者使用。`Object.defineProperty`就是其中一个，此方法会可直接在一个对象上定义一个新的具有详细描述的属性，或者修改一个对象的现有属性，并返回这个对象。</span><br><span class="line">  - 在一个对象上定义一个新的具有详细描述的属性，或者修改一个对象的现有属性。</span><br><span class="line"></span><br><span class="line">- 使用：</span><br><span class="line"></span><br><span class="line">  - **Object.defineProperty**(对象,属性,描述符);</span><br><span class="line"></span><br><span class="line">  - 描述符对象的属性的进行详细描述：</span><br><span class="line"></span><br><span class="line">    - 数据描述符：</span><br><span class="line"></span><br><span class="line">      - **value**：`&#x27;xxx&#x27;` 属性值。默认~(空)</span><br><span class="line"></span><br><span class="line">      - **writable**：`true` 是否可写。默认`false`</span><br><span class="line"></span><br><span class="line">      - **configurable**：`true` 是否可配置。默认`false`</span><br><span class="line"></span><br><span class="line">      - **enumerable**：`true` 是否可枚举。默认`false`</span><br><span class="line"></span><br><span class="line">      - ```js</span><br><span class="line">        let obj = &#123;</span><br><span class="line">            name: &#x27;cst&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //value,对象中的值</span><br><span class="line">        console.log(obj.name);</span><br><span class="line">        //writable true(可写)</span><br><span class="line">        obj.name = &#x27;yz&#x27;</span><br><span class="line">        //configurable true,delete对象(可配置)</span><br><span class="line">        delete obj.name</span><br><span class="line">        //enumerable true,枚举(可枚举)</span><br><span class="line">        for(var prop in obj) &#123;</span><br><span class="line">            console.log(prop);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        //writable false(不可写)</span><br><span class="line">        Function.prototype</span><br><span class="line">        //configurable false(不可配置)</span><br><span class="line">        var a = 10; window.a;//window全局变量不可被删</span><br><span class="line">        //enumerable false(不可枚举)</span><br><span class="line">        Object.prototype</span><br></pre></td></tr></table></figure><ul><li><p>存取描述符</p><ul><li><p><strong>set</strong>：<code>function()&#123;&#125;</code> 属性访问器 进行写操作时调用该方法</p><ul><li>```js<br>var obj = {<pre><code>tempValue: &#39;duyi&#39;,//set更改时需要传入value，进行更改set name(value) &#123;   this.tempValue = value;    //将原属性更改为value&#125;</code></pre>}<br>obj.name = 10;//传入value<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **get**：`function()&#123;&#125;` 属性访问器 进行读操作时调用该方法</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    var obj = &#123;</span><br><span class="line">        tempValue: &#x27;duyi&#x27;,</span><br><span class="line">        get name() &#123;</span><br><span class="line">            return this.tempValue;</span><br><span class="line">            //get取出的是方法返回的值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>注意：</p><ul><li>如果描述中同时出现<code>value</code>、<code>writable</code>和<code>set</code>、<code>get</code>两组的话，会出现异常，切记不要同时使用</li></ul></li><li><p>作用：</p><ul><li>双向数据绑定的核心方法，主要做数据劫持操作（监控属性变化），同时是后期<code>ES6</code>中很多语法糖底层实现的核心方法</li></ul></li></ul></li><li><p>实例</p><ul><li>```js<br>var obj = {};var tempValue = ‘’;Object.defineProperty(obj,’name’,{<pre><code>//value: &#39;cst&#39;, //value//writable: false, //不可写configurable: true, //可配置enumerable: true, //可枚举//有get和set就不能有value和writable，二者取其一get: function() &#123;    return tempValue;&#125;,set: function(value) &#123;    tempValue = value;&#125;</code></pre>});obj.name = 10;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 数据劫持</span><br><span class="line"></span><br><span class="line">- `VUE`双向数据绑定核心功能由 `Observer`、`Compile`、`Watcher`三部分实现，其中`Observer`部分功能实现有`Object.defineProperty`实现</span><br><span class="line"></span><br><span class="line">  - `Observer`:检测数据变化进行相应回调（数据劫持）</span><br><span class="line">  - 实现一个简单的数据劫持，作为`Object.defineProperty`的练习。从而引出`Proxy`&amp;`Reflect`</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  &lt;input type=&quot;text&quot; id=&quot;demo&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;show&quot;&gt;&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  var oDiv = document.getElementById(&#x27;show&#x27;),</span><br><span class="line">      oInput = document.getElementById(&#x27;demo&#x27;);</span><br><span class="line">  </span><br><span class="line">  var oData = &#123;</span><br><span class="line">      valueObj: &#123;</span><br><span class="line">          value:&#x27;cc&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      value: &#x27;duyi&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  oInput.oninput = function() &#123;</span><br><span class="line">      oData.value = this.value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //更新显示函数</span><br><span class="line">  function upDate() &#123;</span><br><span class="line">      oDiv.innerText = oData.value;</span><br><span class="line">      // oDiv.innerText = oData.valueObj.value; //监控对象中的对象</span><br><span class="line">  &#125;</span><br><span class="line">  upDate();</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  //监控对象的某个属性是否发生改变</span><br><span class="line">  function Observer(data) &#123;</span><br><span class="line">      //判断是否是对象</span><br><span class="line">      if(!data || typeof data != &#x27;object&#x27;) &#123;</span><br><span class="line">          return data;</span><br><span class="line">      &#125;;</span><br><span class="line">      //循环判断</span><br><span class="line">      // for(var prop in data) &#123;&#125;</span><br><span class="line">      //Object.keys(data)，可以将对象中的每个属性都放到数组中</span><br><span class="line">      Object.keys(data).forEach(function(key) &#123;</span><br><span class="line">          defineRective(data,key,data[key]);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //监控函数</span><br><span class="line">  function defineRective(data,key,val) &#123;</span><br><span class="line">      //AO</span><br><span class="line">      Observer(val);</span><br><span class="line">      Object.defineProperty(data,key,&#123;</span><br><span class="line">          get () &#123;</span><br><span class="line">              return val;</span><br><span class="line">          &#125;,</span><br><span class="line">          set (newValue) &#123;</span><br><span class="line">              if(newValue == val) return;</span><br><span class="line">              val = newValue;</span><br><span class="line">              upDate();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Observer(oData);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="proxy-amp-reflect"><a href="#proxy-amp-reflect" class="headerlink" title="proxy &amp; reflect"></a>proxy &amp; reflect</h3><ul><li><p>简介</p><ul><li>植入代理模式的思想，以简洁易懂的方式控制对外部对象的访问</li><li><strong>new Proxy</strong>(对象,描述符);</li><li><strong>Proxy</strong>是一个构造函数，需要用变量接受</li></ul></li><li><p>描述符对象的属性的进行详细描述：</p><ul><li>数据描述符：<ul><li><strong>value</strong>：<code>&#39;xxx&#39;</code> 属性值。默认~(空)</li><li><strong>writable</strong>：<code>true</code> 是否可写。默认<code>false</code></li><li><strong>configurable</strong>：<code>true</code> 是否可配置。默认<code>false</code></li><li><strong>enumerable</strong>：<code>true</code> 是否可枚举。默认<code>false</code></li></ul></li><li>存取描述符<ul><li><strong>set</strong>：<code>function(target,key,value,receiver)&#123;&#125;</code> 属性访问器 进行写操作时调用该方法<ul><li><code>target</code>：对象</li><li><code>key</code>：属性</li><li><code>value</code>：传入的值</li><li><code>receiver</code>：代理函数</li></ul></li><li><strong>get</strong>：<code>function(target,key,receiver)&#123;&#125;</code> 属性访问器 进行读操作时调用该方法<ul><li><code>target</code>：对象</li><li><code>key</code>：属性</li><li><code>receiver</code>：代理函数</li></ul></li><li><strong>has</strong>:<code>function(target,key)&#123;&#125;</code><ul><li><code>target</code>：对象</li><li><code>key</code>：属性</li><li><code>has</code>对应<code>in</code>操作符，返回<code>true</code>/<code>false</code>，通常用来隐藏自己的私密属性</li></ul></li></ul></li></ul></li><li><p>总结</p><ul><li>利用内置的<code>set</code>、<code>get</code>方法控制属性的读写功能用处比较大，其余<code>has</code>、<code>deleProperty</code>…等方法不太在工作开发中使用，但是兼容性不太好</li></ul></li><li><p>```js<br>//初始对象<br>let oData = {</p><pre><code>val: &#39;duyi&#39;,_val: &#39;zzz&#39;</code></pre><p>}</p><p>//代理函数,oProxyData<br>let oProxyData = new Proxy(oData,{</p><pre><code>//进行参数读写控制set (target,key,value,receiver) &#123;    //传入参数    Reflect.set(target.key,value);    upData();&#125;,get (target,key,value,receiver) &#123;    //获取对象并获取其中的属性值    Reflect.get(target,key);&#125;,has (target,key) &#123;    //判断属性是否有_，如果有则为false，否则key in oData    return key.indexOf(&#39;_&#39;) != -1 ? false : key in oData;&#125;</code></pre><p>})</p><p>//读写 控制<br>console.log(‘_val’ in oProxy);<br>//读<br>console.log(oProxy.val);<br>//写<br>oProxy.val = 10;</p><p>function upData() {</p><pre><code>console.log(&#39;更新了&#39;);</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 面向对象简介</span><br><span class="line"></span><br><span class="line">- 面向对象：一种编程思想，跟具体的语言</span><br><span class="line"></span><br><span class="line">- 对比面向过程：</span><br><span class="line"></span><br><span class="line">  - 面向过程：思考的切入点是功能的步骤</span><br><span class="line">  - 面向对象：思考的切入点是对象的划分</span><br><span class="line"></span><br><span class="line">  - 面向过程目的在于把功能拆分成步骤，一环扣一环的完成，但是需求复杂到一定程度后，对开发者能力的挑战也是越来越强</span><br><span class="line">  - 面向对象目的在于前期把功能拆分并抽象成不同的对象，聚焦于每个对象的能力和他们之间的配合，项目复杂后相对于面向过程来讲较为轻松一些</span><br><span class="line">  - 举个例子：【大象装冰箱】</span><br><span class="line">  - 面向对象的编程语言需要具备封装、继承、多态，`js`不是面向对象的语言，而是基于对象的语言，`js`中基本上一切皆是对象</span><br><span class="line">  - 前端变成需要面向对象的思想</span><br><span class="line">    - 相对于复杂业务为了做到功能复用，降低项目开发的复杂度，需要这种思想，比如，前端校验和写一个校验器，而不是面向过程每次需要验证都一条线的下来编写</span><br><span class="line">    - 目前前端主流框架`vue`、`react`都是采用面向对象的方式来做，以及进入公司进行高级开发，组件研发，制作功能模块，也需要采取这样的思想做事</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  /**</span><br><span class="line">   * 大象</span><br><span class="line">   */</span><br><span class="line">  function Elephant() &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">   * 冰箱</span><br><span class="line">   */</span><br><span class="line">  function Frige() &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Frige.prototype.openDoor = function () &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Frige.prototype.closeDoor = function () &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Frige.prototype.join = function(something)&#123;</span><br><span class="line">      this.openDoor();</span><br><span class="line">      //装东西</span><br><span class="line">  </span><br><span class="line">      this.closeDoor();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //1. 冰箱门打开</span><br><span class="line">  // var frig = new Frige();</span><br><span class="line">  // frig.openDoor();</span><br><span class="line">  </span><br><span class="line">  // //2. 大象装进去</span><br><span class="line">  // var ele = new Elephant();</span><br><span class="line">  // frig.join(ele);</span><br><span class="line">  </span><br><span class="line">  // //3. 冰箱门关上</span><br><span class="line">  // frig.closeDoor();</span><br><span class="line">  </span><br><span class="line">  var frig = new Frige();</span><br><span class="line">  </span><br><span class="line">  frig.join(new Elephant());</span><br></pre></td></tr></table></figure></li></ul><h3 id="类-Class"><a href="#类-Class" class="headerlink" title="类-Class"></a>类-Class</h3><h4 id="类：构造函数的语法糖"><a href="#类：构造函数的语法糖" class="headerlink" title="类：构造函数的语法糖"></a>类：构造函数的语法糖</h4><ul><li><p>传统的构造函数的问题</p><ul><li>属性和原型方法定义分离，降低了可读性</li><li>原型成员可以被枚举</li><li>默认情况下，构造函数仍然可以被当作普通函数使用</li></ul></li><li><p>类的特点</p><ul><li>类声明不会被提升，与 <code>let</code> 和 <code>const</code> 一样，存在暂时性死区</li><li>类中的所有代码均在严格模式下执行</li><li>类的所有方法都是不可枚举的</li><li>类的所有方法都无法被当作构造函数使用</li><li>类的构造器必须使用 <code>new</code> 来调用</li></ul></li><li><p>```js<br>// 类 class<br>// 不可以 var、let，它是一个语法糖，本质还是function<br>class Animal {</p><pre><code>// 私有属性 cunstructorconstructor(type, name, age, sex) &#123;    this.type = type;    this.name = name;    this.age = age;    this.sex = sex;&#125;// 公有属性（相当于给原型添加属性）print() &#123;    console.log(`【种类】：$&#123;this.type&#125;`);    console.log(`【名字】：$&#123;this.name&#125;`);    console.log(`【年龄】：$&#123;this.age&#125;`);    console.log(`【性别】：$&#123;this.sex&#125;`);&#125;</code></pre><p>}</p><p>const a = new Animal(“狗”, “旺财”, 3, “男”);<br>a.print();</p><p>for (const prop in a) {</p><pre><code>console.log(prop)</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 类的其他书写方式</span><br><span class="line"></span><br><span class="line">- 可计算的成员名</span><br><span class="line">- **getter**和**setter**</span><br><span class="line">  - **Object.defineProperty** 可定义某个对象成员属性的读取和设置</span><br><span class="line">  - 使用`getter`和`setter`控制的属性，不在原型上</span><br><span class="line">- 静态成员</span><br><span class="line">  - 构造函数本身的成员</span><br><span class="line">  - 使用`static`关键字定义的成员即静态成员</span><br><span class="line">- 字段初始化器（**ES7**）</span><br><span class="line">  - 注意：</span><br><span class="line">  - 使用`static`的字段初始化器，添加的是静态成员</span><br><span class="line">  - 没有使用`static`的字段初始化器，添加的成员位于对象上</span><br><span class="line">  - 箭头函数在字段初始化器位置上，指向当前对象</span><br><span class="line">- 类表达式</span><br><span class="line"></span><br><span class="line">- 实例</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    // getter setter</span><br><span class="line">    </span><br><span class="line">    const printName = &quot;print&quot;;</span><br><span class="line">    </span><br><span class="line">    class Animal &#123;</span><br><span class="line">        constructor(type, name, age, sex) &#123;</span><br><span class="line">            this.type = type;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">            this.sex = sex;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        //创建一个age属性，并给它加上getter，读取该属性时，会运行该函数</span><br><span class="line">        get age() &#123;</span><br><span class="line">            return this._age + &quot;岁&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        //创建一个age属性，并给它加上setter，给该属性赋值时，会运行该函数</span><br><span class="line">        set age(age) &#123;</span><br><span class="line">            if (typeof age !== &quot;number&quot;) &#123;</span><br><span class="line">                throw new TypeError(&quot;age property must be a number&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (age &lt; 0) &#123;</span><br><span class="line">                age = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (age &gt; 1000) &#123;</span><br><span class="line">                age = 1000;</span><br><span class="line">            &#125;</span><br><span class="line">            this._age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        [printName]() &#123;</span><br><span class="line">            console.log(`【种类】：$&#123;this.type&#125;`);</span><br><span class="line">            console.log(`【名字】：$&#123;this.name&#125;`);</span><br><span class="line">            console.log(`【年龄】：$&#123;this.age&#125;`);</span><br><span class="line">            console.log(`【性别】：$&#123;this.sex&#125;`);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var a = new Animal(&quot;狗&quot;, &quot;旺财&quot;, 3, &quot;男&quot;);</span><br></pre></td></tr></table></figure><ul><li>```js<br>// static 静态属性class Chess {<pre><code>constructor(name) &#123;    this.name = name;&#125;// static 静态属性static width = 50;static height = 50;static method() &#123;&#125;</code></pre>}console.log(Chess.width)<br>console.log(Chess.height)Chess.method();<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  // 类表达式</span><br><span class="line">  </span><br><span class="line">  const A = class &#123; //匿名类，类表达式</span><br><span class="line">      a = 1;</span><br><span class="line">      b = 2;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const a = new A();</span><br><span class="line">  console.log(a)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><ul><li><p>如果两个类<code>A</code>和<code>B</code>，如果可以描述为：<code>B</code> 是 <code>A</code>，则，<code>A</code>和<code>B</code>形成继承关系</p></li><li><p>如果<code>B</code>是<code>A</code>，则：</p><ul><li><code>B</code>继承自A</li><li><code>A</code>派生<code>B</code></li><li><code>B</code>是<code>A</code>的子类</li><li><code>A</code>是<code>B</code>的父类</li></ul></li><li><p>如果<code>A</code>是<code>B</code>的父类，则<code>B</code>会自动拥有<code>A</code>中的所有实例成员。</p></li><li><p>新的关键字：</p><ul><li><strong>extends</strong>：继承，用于类的定义</li><li><strong>super</strong><ul><li>直接当作函数调用，表示父类构造函数</li><li>如果当作对象使用，则表示父类的原型</li></ul></li></ul></li><li><p>注意：<code>ES6</code>要求，如果定义了<code>constructor</code>，并且该类是子类，则必须在<code>constructor</code>的第一行手动调用父类的构造函数</p></li><li><p>如果子类不写<code>constructor</code>，则会有默认的构造器，该构造器需要的参数和父类一致，并且自动调用父类构造器</p></li><li><p>【冷知识】</p><ul><li>用<code>JS</code>制作抽象类<ul><li>抽象类：一般是父类，不能通过该类创建对象</li></ul></li><li>正常情况下，<code>this</code>的指向，<code>this</code>始终指向具体的类的对象</li></ul></li><li><p>```js<br>// ES5构造函数<br>function Animal(type, name, age, sex) {</p><pre><code>this.type = type;this.name = name;this.age = age;this.sex = sex;</code></pre><p>}<br>Animal.prototype.print = function () {</p><pre><code>console.log(`【种类】：$&#123;this.type&#125;`);console.log(`【名字】：$&#123;this.name&#125;`);console.log(`【年龄】：$&#123;this.age&#125;`);console.log(`【性别】：$&#123;this.sex&#125;`);</code></pre><p>}</p><p>function Dog(name, age, sex) {</p><pre><code>//借用父类的构造函数Animal.call(this, &quot;犬类&quot;, name, age, sex);</code></pre><p>}</p><p>Object.setPrototypeOf(Dog.prototype, Animal.prototype);</p><p>const d = new Dog(“旺财”, 3, “公”);<br>d.print();<br>console.log(d);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  // ES6 class</span><br><span class="line">  class Animal &#123;</span><br><span class="line">      constructor(type, name, age, sex) &#123;</span><br><span class="line">          if (new.target === Animal) &#123;</span><br><span class="line">              throw new TypeError(&quot;你不能直接创建Animal的对象，应该通过子类创建&quot;)</span><br><span class="line">          &#125;</span><br><span class="line">          this.type = type;</span><br><span class="line">          this.name = name;</span><br><span class="line">          this.age = age;</span><br><span class="line">          this.sex = sex;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      print() &#123;</span><br><span class="line">          console.log(`【种类】：$&#123;this.type&#125;`);</span><br><span class="line">          console.log(`【名字】：$&#123;this.name&#125;`);</span><br><span class="line">          console.log(`【年龄】：$&#123;this.age&#125;`);</span><br><span class="line">          console.log(`【性别】：$&#123;this.sex&#125;`);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      jiao() &#123;</span><br><span class="line">          throw new Error(&quot;动物怎么叫的？&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 类Dog的prototype继承类Animal的prototype </span><br><span class="line">  class Dog extends Animal &#123;</span><br><span class="line">      constructor(name, age, sex) &#123;</span><br><span class="line">          // 调用父类的私有属性</span><br><span class="line">          super(&quot;犬类&quot;, name, age, sex);</span><br><span class="line">          // 子类特有的属性</span><br><span class="line">          this.loves = &quot;吃骨头&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      print() &#123;</span><br><span class="line">          // 调用父类的print</span><br><span class="line">          super.print();</span><br><span class="line">          // 自己特有的代码</span><br><span class="line">          console.log(`【爱好】：$&#123;this.loves&#125;`);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      //同名方法，会覆盖父类</span><br><span class="line">      jiao() &#123;</span><br><span class="line">          console.log(&quot;旺旺！&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //下面的代码逻辑有误</span><br><span class="line">  const a = new Dog(&quot;旺财&quot;, 3, &quot;公&quot;)</span><br><span class="line">  a.print();</span><br></pre></td></tr></table></figure></li></ul><h4 id="Decorator-装饰器"><a href="#Decorator-装饰器" class="headerlink" title="Decorator(装饰器)"></a>Decorator(装饰器)</h4><ul><li>```js<br>class Test {<pre><code>@Obsoleteprint() &#123;    console.log(&quot;print方法&quot;)&#125;</code></pre>}function Obsolete(target, methodName, descriptor) {<pre><code>// function Test// print// &#123; value: function print()&#123;&#125;, ... &#125;// console.log(target, methodName, descriptor);const oldFunc = descriptor.valuedescriptor.value = function (...args) &#123;    console.warn(`$&#123;methodName&#125;方法已过时`);    oldFunc.apply(this, args);&#125;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  //面向对象</span><br><span class="line">  //张三</span><br><span class="line">  let oInput = document.getElementById(&#x27;inp&#x27;),</span><br><span class="line">      oBtn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">  </span><br><span class="line">  @Skin //修饰类</span><br><span class="line">  class Search &#123;</span><br><span class="line">      //静态属性</span><br><span class="line">          //ES6规范 static num() &#123;return 10;&#125;</span><br><span class="line">          //ES7规范 static num = 10;</span><br><span class="line">      //私有属性</span><br><span class="line">      constructor() &#123;</span><br><span class="line">          this.keyValue = &#x27;&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">      //装饰器</span><br><span class="line">      // @名称</span><br><span class="line">      @myReadOnly //修饰url属性，给url加了装饰器</span><br><span class="line">      //私有属性</span><br><span class="line">      url = &#x27;urlA-&#x27;;</span><br><span class="line">      </span><br><span class="line">      @dealData(&#x27;张三&#x27;) //修饰原型属性，给getContent加了装饰器</span><br><span class="line">      //原型属性</span><br><span class="line">      getContent (a, b) &#123;</span><br><span class="line">          console.log(&#x27;向&#x27; + this.url + &#x27;发送网络请求，数据：&#x27; + this.keyValue,a,b);</span><br><span class="line">          return 10;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //target：类本身</span><br><span class="line">  function Skin(target) &#123;</span><br><span class="line">      target.aa = 10;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  let oS = new Search();</span><br><span class="line">  </span><br><span class="line">  oInput.oninput = function () &#123;</span><br><span class="line">      oS.keyValue = this.value;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  oBtn.onclick = function () &#123;</span><br><span class="line">      oS.getContent();</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  //李四</span><br><span class="line">  //装饰器</span><br><span class="line">  //修饰私有属性的描述符属性</span><br><span class="line">      //configurable</span><br><span class="line">       //enumerable</span><br><span class="line">       //initializer</span><br><span class="line">       //writable</span><br><span class="line">  //装饰原型上的属性的描述符属性</span><br><span class="line">      //configurable</span><br><span class="line">      //enumerable</span><br><span class="line">      //initializer</span><br><span class="line">      //writable</span><br><span class="line">  </span><br><span class="line">  //装饰私有属性</span><br><span class="line">  //参数：原型 修饰属性名称 描述符属性</span><br><span class="line">  function myReadOnly(proto,key,descriptor) &#123;</span><br><span class="line">      //</span><br><span class="line">      // console.log(proto,key,descriptor);</span><br><span class="line">      //可不可写</span><br><span class="line">      descriptor.writable = false;</span><br><span class="line">      //initializer()的返回值决定了属性url的值</span><br><span class="line">      descriptor.initializer = function() &#123;</span><br><span class="line">          return &quot;urlA-&quot;;</span><br><span class="line">      &#125;;</span><br><span class="line">       //描述符属性：</span><br><span class="line">       //configurable</span><br><span class="line">       //enumerable</span><br><span class="line">       //initializer</span><br><span class="line">       //writable</span><br><span class="line">  &#125;</span><br><span class="line">  //修饰原型属性</span><br><span class="line">  function dealData (ms) &#123;</span><br><span class="line">      return function (proto,key,descriptor) &#123;</span><br><span class="line">          // console.log(proto,key,descriptor);</span><br><span class="line">          let oldValue = descriptor.value;</span><br><span class="line">          //代理思想</span><br><span class="line">          descriptor.value = function() &#123;</span><br><span class="line">      </span><br><span class="line">              var urlB = &#x27;urlB-&#x27;;</span><br><span class="line">              console.log(&quot;向&quot; + urlB + &quot;发送网络请求，数据：&quot; + this.keyValue + &quot; 发送人 &quot; + ms);</span><br><span class="line">      </span><br><span class="line">              //先把本来的getContent函数执行一遍，将arguments传给this（oS对象）</span><br><span class="line">              return oldValue.apply(this,arguments);</span><br><span class="line">          &#125;</span><br><span class="line">          //原型描述符属性：</span><br><span class="line">           //configurable</span><br><span class="line">           //enumerable</span><br><span class="line">           //value</span><br><span class="line">           //writable</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  // //面向过程</span><br><span class="line">  // // 张三</span><br><span class="line">  // var keyValue = &#x27;&#x27;;</span><br><span class="line">  // oInput.oninput = function () &#123;</span><br><span class="line">  //     keyValue = this.value</span><br><span class="line">  // &#125;</span><br><span class="line">  // oBtn.onclick = function () &#123;</span><br><span class="line">  //     newGetContent(keyValue)</span><br><span class="line">  // &#125;</span><br><span class="line">  </span><br><span class="line">  // function getContent (data) &#123;</span><br><span class="line">  //     //模拟发送网络请求</span><br><span class="line">  //     var url = &#x27;urlA-&#x27;;</span><br><span class="line">  //     console.log(&#x27;向&#x27; + url + &#x27;发送网络请求，数据：&#x27; + data);</span><br><span class="line">  // &#125;</span><br><span class="line">  </span><br><span class="line">  // //代理</span><br><span class="line">  // var newGetContent = dealFunc(getContent);</span><br><span class="line">  </span><br><span class="line">  // //李四</span><br><span class="line">  // function dealFunc(func) &#123;</span><br><span class="line">  //     return function(data) &#123;</span><br><span class="line">  //         //</span><br><span class="line">  //         var urlB = &#x27;urlB-&#x27;;</span><br><span class="line">  //         console.log(&#x27;向&#x27; + urlB + &#x27;发送网络请求，数据：&#x27; + data)</span><br><span class="line">  //         return func.apply(this,arguments);</span><br><span class="line">  //     &#125;</span><br><span class="line">  // &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="ES7之Class提案属性"><a href="#ES7之Class提案属性" class="headerlink" title="ES7之Class提案属性"></a>ES7之Class提案属性</h4><ul><li><p>新特性</p><ul><li><strong>static property = xxx</strong>：静态属性</li><li><strong>property = xxx</strong>：私有属性</li><li><strong>@decorator</strong>：装饰器</li></ul></li><li><p>提案特性需要下载</p><ul><li><code>npm install @babel/plugin-proposal-decorators</code></li></ul></li><li><p>需要配置</p><ul><li>```js<br>{<pre><code>&quot;plugin&quot;: [    [&quot;@babel/plugin-proposal-decorators&quot;,&#123;&quot;legacy&quot;:true&#125;]    [&quot;@babel/plugin-proposal-class-properties&quot;,&#123;&quot;loose&quot;:true&#125;]]</code></pre>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 实例</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    class Search &#123;</span><br><span class="line">        //静态属性</span><br><span class="line">        //ES6规范</span><br><span class="line">            // static num() &#123;</span><br><span class="line">            //     return 10;</span><br><span class="line">            // &#125;</span><br><span class="line">        //ES7规范</span><br><span class="line">        static num = 10;</span><br><span class="line">    </span><br><span class="line">        //私有属性</span><br><span class="line">        constructor () &#123;</span><br><span class="line">            //私有属性</span><br><span class="line">            this.keyValue = &#x27;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        //装饰器</span><br><span class="line">        // @readOnly</span><br><span class="line">        //私有属性</span><br><span class="line">        url = &#x27;urlA-&#x27;;</span><br><span class="line">        //原型属性</span><br><span class="line">        getCount () &#123;</span><br><span class="line">            console.log(&#x27;发送请求&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var oS = new Search();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="手写Class"><a href="#手写Class" class="headerlink" title="手写Class"></a>手写Class</h4><h5 id="ES6之模拟class"><a href="#ES6之模拟class" class="headerlink" title="ES6之模拟class"></a>ES6之模拟class</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//class 关键字，不可以var、let，它是一个语法糖，本质还是function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用class类，相当于Es5的构造函数，不用写function</span></span><br><span class="line"><span class="comment">//私有属性constructor</span></span><br><span class="line"><span class="comment">//公有属性(原型属性) </span></span><br><span class="line"><span class="comment">//静态属性(函数本身属性)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plane</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态属性,ES6不支持非方法的静态属性，ES7支持</span></span><br><span class="line">    <span class="comment">//静态属性在Plane中定义时，它就成为了Plane本身的方法</span></span><br><span class="line">    <span class="keyword">static</span> alive () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//私有属性</span></span><br><span class="line">    <span class="title">constructor</span> (<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name || <span class="string">&#x27;普通飞机&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.blood = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果想给原型添加方法，则在constructor的同级下添加函数</span></span><br><span class="line">    fly () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;fly&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ES7 私有属性</span></span><br><span class="line">    <span class="comment">// name = 10;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//target extend origin：target的prototype继承Plane的prototype</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AttackPlane</span> <span class="keyword">extends</span> <span class="title">Plane</span></span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="comment">// Plane.call(this,name);</span></span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="comment">//super就相当于把Plane的私有属性call了一下，将私有属性全部call到了constructor中</span></span><br><span class="line">        <span class="built_in">this</span>.logo = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//公有属性</span></span><br><span class="line">    dan () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;biubiubiu&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oAp = <span class="keyword">new</span> AttackPlane(<span class="string">&#x27;战斗机&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.must be new</span></span><br><span class="line"><span class="comment">// 2.class Plane.prototype 不能枚举</span></span><br><span class="line"><span class="comment">// 3.静态属性要放到Plane函数上，非原型</span></span><br></pre></td></tr></table></figure><h5 id="ES5模拟之Class"><a href="#ES5模拟之Class" class="headerlink" title="ES5模拟之Class"></a>ES5模拟之Class</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否以new的方式构造出来的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">_this,_constructor</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断_this沿着原型链寻找，是否可以找到_this,如果不能则抛出错误，instanceof 运算符用来检测 constructor.prototype 是否存在于参数 _this 的原型链上。</span></span><br><span class="line">    <span class="keyword">if</span> (!(_this <span class="keyword">instanceof</span> _constructor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;TypeError: Class constructor Plane cannot be invoked without &#x27;new&#x27;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置公有属性和静态属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_defineProperties</span>(<span class="params">target,props</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//Object.defineProperty</span></span><br><span class="line">    props.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//ele.key ele.value</span></span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(target,ele.key,&#123; </span><br><span class="line">            <span class="attr">value</span>: ele.value,</span><br><span class="line">            <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">//可写</span></span><br><span class="line">            <span class="attr">configurable</span>: <span class="literal">true</span><span class="comment">//可配置</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理公有属性和静态属性</span></span><br><span class="line"><span class="comment">//参数：原型、原型属性，静态属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_createClass</span> (<span class="params">_constructor,_prototypeProperties,_staticProperties</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//如果传_prototypeProperties数组的话，给原型上赋值</span></span><br><span class="line">    <span class="keyword">if</span> (_prototypeProperties) &#123;</span><br><span class="line">        _defineProperties(_constructor.prototype, _prototypeProperties)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果传_staticProperties数组的话，给函数本身上赋值</span></span><br><span class="line">    <span class="keyword">if</span> (_staticProperties) &#123;</span><br><span class="line">        _defineProperties(_constructor,_staticProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Plane = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Plane</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否以new的方式来执行</span></span><br><span class="line">        _classCallCheck(<span class="built_in">this</span>,Plane);</span><br><span class="line">        <span class="comment">//把私有属性 公有属性 静态属性赋给Plane</span></span><br><span class="line">        <span class="built_in">this</span>.name = name || <span class="string">&quot;普通飞机&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.blood = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建自身属性和静态属性</span></span><br><span class="line">    _createClass(Plane,[</span><br><span class="line">        <span class="comment">//自身方法</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;fly&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;fly&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    ],[</span><br><span class="line">        <span class="comment">//静态属性</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;alive&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Plane;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oP = <span class="keyword">new</span> Plane(<span class="string">&quot;yzl&amp;战斗机&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型继承方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_inherit</span>(<span class="params">sub,sup</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.setPrototypeOf(sub.prototype,sup.prototype);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AttackPlane = (<span class="function"><span class="keyword">function</span>(<span class="params">Plane</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    _inherit(AttackPlane,Plane);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">AttackPlane</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">        _classCallCheck(<span class="built_in">this</span>,Plane);</span><br><span class="line">        <span class="built_in">this</span>.logo = <span class="string">&#x27;lll&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">var</span> that = Plane.call(<span class="built_in">this</span>,name);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> that == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">            _this.that;</span><br><span class="line">        &#125;</span><br><span class="line">        _this.logo = <span class="string">&#x27;duyi&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> _this;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//创建自身属性和静态属性</span></span><br><span class="line">    _createClass(AttackPlane,[</span><br><span class="line">        <span class="comment">//自身方法</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;dan&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;biubiubiu&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    ],[</span><br><span class="line">        <span class="comment">//静态属性</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;alive&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">return</span> AttackPlane;</span><br><span class="line">&#125;(Plane))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oAp = <span class="keyword">new</span> AttackPlane();</span><br></pre></td></tr></table></figure><h2 id="解构-destructuring"><a href="#解构-destructuring" class="headerlink" title="解构(destructuring)"></a>解构(destructuring)</h2><ul><li><p>什么是解构</p><ul><li><p>使用<code>ES6</code>的一种语法规则，将一个对象或数组的某个属性提取到某个变量中</p></li><li><p><strong>解构不会对被解构的目标造成任何影响</strong></p></li><li><p>解构过程中，具备赋值和变量声明两个功能</p></li><li><p>目的在于把等号左右长得相似的两个东西内部的值取出来</p></li><li><p>对象数组都可以参与解构</p></li></ul></li></ul><ul><li>在解构中使用默认值</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;同名变量 = 默认值&#125;</span><br></pre></td></tr></table></figure><ul><li>非同名属性解构</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;属性名:变量名&#125;</span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><ul><li><p>```js<br>const user = {</p><pre><code>name: &quot;kevin&quot;,age: 11,sex: &quot;男&quot;,address: &#123;    province: &quot;四川&quot;,    city: &quot;成都&quot;&#125;</code></pre><p>}</p><p>// let name, age, sex, address;<br>// name = user.name;<br>// age = user.age;<br>// sex = user.sex;<br>// address = user.address;</p><p>// let name, age, sex, address, abc;<br>// ({ name, age, sex, address } = user);</p><p>// 先定义5个变量，然后从对象中读取同名属性，放到变量中<br>let { name, age, sex, address, abc = 123 } = user</p><p>console.log(name, age, sex, address, abc)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  const user = &#123;</span><br><span class="line">      name: &quot;kevin&quot;,</span><br><span class="line">      age: 11,</span><br><span class="line">      sex: &quot;男&quot;,</span><br><span class="line">      address: &#123;</span><br><span class="line">          province: &quot;四川&quot;,</span><br><span class="line">          city: &quot;成都&quot;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 先定义4个变量：name、age、gender、address</span><br><span class="line">  // 再从对象user中读取同名属性赋值（其中gender读取的是sex属性）</span><br><span class="line">  let &#123; name, age, sex: gender = 123, address &#125; = user</span><br><span class="line">  </span><br><span class="line">  console.log(name, age, gender, address)</span><br></pre></td></tr></table></figure></li><li><p>```js<br>const user = {</p><pre><code>name: &quot;kevin&quot;,age: 11,sex: &quot;男&quot;,address: &#123;    province: &quot;四川&quot;,    city: &quot;成都&quot;&#125;</code></pre><p>}<br>//解构出user中的name、province<br>//定义两个变量name、province<br>//再解构<br>const { name, address: { province } } = user;</p><p>console.log(name, address, province)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 数组解构</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  const numbers = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;];</span><br><span class="line">  </span><br><span class="line">  // const &#123;</span><br><span class="line">  //     0: n1,</span><br><span class="line">  //     1: n2</span><br><span class="line">  // &#125; = numbers;</span><br><span class="line">  </span><br><span class="line">  // let n1, n2;</span><br><span class="line">  // ([n1, n2] = numbers);</span><br><span class="line">  </span><br><span class="line">  // 只获得数组前两位</span><br><span class="line">  const [n1, n2] = numbers;</span><br><span class="line">  </span><br><span class="line">  console.log(n1, n2) // a b</span><br></pre></td></tr></table></figure></li><li><p>```js<br>const numbers = [“a”, “b”, “c”, “d”];</p><p>const [n1, , , n4, n5 = 123] = numbers;</p><p>console.log(n1, n4, n5) // a d 123</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  // const numbers = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, [1, 2, 3, 4]];</span><br><span class="line">  </span><br><span class="line">  // // 得到numbers下标为4的数组中的下标为2的数据，放到变量n中</span><br><span class="line">  // const [, , , , [, , n]] = numbers;</span><br><span class="line">  </span><br><span class="line">  // console.log(n)</span><br><span class="line">  </span><br><span class="line">  const numbers = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &#123;</span><br><span class="line">      a: 1,</span><br><span class="line">      b: 2</span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  //得到numbers下标为4的数组的属性a，赋值给变量A</span><br><span class="line">  // const [, , , , &#123; a: A &#125;] = numbers;</span><br><span class="line">  </span><br><span class="line">  const &#123; a: A &#125; = numbers[4];</span><br><span class="line">  </span><br><span class="line">  console.log(A)</span><br></pre></td></tr></table></figure></li><li><p>```js<br>const user = {</p><pre><code>name: &quot;kevin&quot;,age: 11,sex: &quot;男&quot;,address: &#123;    province: &quot;四川&quot;,    city: &quot;成都&quot;&#125;</code></pre><p>}</p><p>//解构出name，然后，剩余的所有属性，放到一个新的对象中，变量名为obj<br>// name: kevin<br>// obj : {age:11, sex:”男”, address:{…}}</p><p>const { name, …obj } = user;</p><p>console.log(name, obj)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  const numbers = [324, 7, 23, 5, 3243];</span><br><span class="line">  </span><br><span class="line">  // 得到数组前两项，分别放到变量a和b中，然后剩余的所有数据放到数组nums</span><br><span class="line">  </span><br><span class="line">  // const [a, b, ...nums] = numbers;</span><br><span class="line">  </span><br><span class="line">  const a = numbers[0], b = numbers[1], nums = numbers.slice(2);</span><br><span class="line">  </span><br><span class="line">  console.log(a, b, nums);</span><br></pre></td></tr></table></figure></li></ul><h3 id="参数结构"><a href="#参数结构" class="headerlink" title="参数结构"></a>参数结构</h3><ul><li>```js<br>// function ajax(options) {<br>//     const defaultOptions = {<br>//         method: “get”,<br>//         url: “/“<br>//     }<br>//     const opt = {<br>//         …defaultOptions,<br>//         …options<br>//     }<br>//     console.log(opt)<br>// }function ajax({<pre><code>method = &quot;get&quot;,url = &quot;/&quot;</code></pre>} = {}) {<pre><code>console.log(method, url)</code></pre>}ajax()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  // function print(user) &#123;</span><br><span class="line">  //     console.log(`姓名：$&#123;user.name&#125;`)</span><br><span class="line">  //     console.log(`年龄：$&#123;user.age&#125;`)</span><br><span class="line">  //     console.log(`性别：$&#123;user.sex&#125;`)</span><br><span class="line">  //     console.log(`身份：$&#123;user.address.province&#125;`)</span><br><span class="line">  //     console.log(`城市：$&#123;user.address.city&#125;`)</span><br><span class="line">  // &#125;</span><br><span class="line">  </span><br><span class="line">  function print(&#123; name, age, sex, address: &#123;</span><br><span class="line">      province,</span><br><span class="line">      city</span><br><span class="line">  &#125; &#125;) &#123;</span><br><span class="line">      console.log(`姓名：$&#123;name&#125;`)</span><br><span class="line">      console.log(`年龄：$&#123;age&#125;`)</span><br><span class="line">      console.log(`性别：$&#123;sex&#125;`)</span><br><span class="line">      console.log(`身份：$&#123;province&#125;`)</span><br><span class="line">      console.log(`城市：$&#123;city&#125;`)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const user = &#123;</span><br><span class="line">      name: &quot;kevin&quot;,</span><br><span class="line">      age: 11,</span><br><span class="line">      sex: &quot;男&quot;,</span><br><span class="line">      address: &#123;</span><br><span class="line">          province: &quot;四川&quot;,</span><br><span class="line">          city: &quot;成都&quot;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  print(user)</span><br></pre></td></tr></table></figure></li></ul><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><h3 id="普通符号"><a href="#普通符号" class="headerlink" title="普通符号"></a>普通符号</h3><ul><li><p>符号是<code>ES6</code>新增的一个数据类型，它通过使用函数 <code>Symbol(符号描述)</code> 来创建</p></li><li><p>符号设计的初衷，是为了给对象设置私有属性</p></li><li><p>私有属性：只能在对象内部使用，外面无法使用</p></li><li><p>符号具有以下特点：</p></li><li><p>没有字面量</p><ul><li>使用 <code>typeof</code> 得到的类型是 symbol</li><li><strong>每次调用 Symbol 函数得到的符号永远不相等，无论符号名是否相同</strong></li><li>符号可以作为对象的属性名存在，这种属性称之为符号属性<ul><li>开发者可以通过精心的设计，让这些属性无法通过常规方式被外界访问</li><li>符号属性是不能枚举的，因此在 for-in 循环中无法读取到符号属性，Object.keys 方法也无法读取到符号属性</li><li><code>Object.getOwnPropertyNames</code> 尽管可以得到所有无法枚举的属性，但是仍然无法读取到符号属性</li><li><code>ES6</code> 新增 <code>Object.getOwnPropertySymbols</code> 方法，可以读取符号</li></ul></li><li>符号无法被隐式转换，因此不能被用于数学运算、字符串拼接或其他隐式转换的场景，但符号可以显式的转换为字符串，通过 <code>String</code> 构造函数进行转换即可，<code>console.log</code> 之所以可以输出符号，是它在内部进行了显式转换</li></ul></li><li><p>创建一个符号</p><ul><li>```js<br>// 创建一个符号<br>const syb1 = Symbol();<br>const syb2 = Symbol(“abc”);<br>console.log(syb1, syb2);<br>// typeof类型<br>console.log(typeof syb1 === “symbol”, typeof syb2 === “symbol”)// 创建一个符号<br>const syb1 = Symbol(“这是随便写的一个符号”);<br>const syb2 = Symbol(“这是随便写的一个符号”);<br>console.log(syb1, syb2);<br>console.log(syb1 === syb2)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  //创建一个符号</span><br><span class="line">  </span><br><span class="line">  const syb1 = Symbol(&quot;这是用于对象的一个属性&quot;);</span><br><span class="line">  </span><br><span class="line">  const obj = &#123;</span><br><span class="line">      a: 1,</span><br><span class="line">      b: 2,</span><br><span class="line">      [syb1]: 3  //符号属性</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  console.log(obj);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实例</p><ul><li><p>```js<br>// const hero = (function () {<br>//     const getRandom = Symbol();</p><p>//     return {<br>//         attack: 30,<br>//         hp: 300,<br>//         defence: 10,<br>//         gongji() { //攻击<br>//             //伤害：攻击力*随机数（0.8~1.1)<br>//             const dmg = this.attack * this[getRandom](0.8, 1.1);<br>//             console.log(dmg);<br>//         },<br>//         [getRandom](min, max) { //根据最小值和最大值产生一个随机数<br>//             return Math.random() * (max - min) + min;<br>//         }<br>//     }<br>// })()</p><p>// console.log(hero);</p><p>const Hero = (() =&gt; {</p><pre><code>const getRandom = Symbol();return class &#123;    constructor(attack, hp, defence) &#123;        this.attack = attack;        this.hp = hp;        this.defence = defence;    &#125;    gongji() &#123;        //伤害：攻击力*随机数（0.8~1.1)        const dmg = this.attack * this[getRandom](0.8, 1.1);        console.log(dmg);    &#125;    [getRandom](min, max) &#123; //根据最小值和最大值产生一个随机数        return Math.random() * (max - min) + min;    &#125;&#125;</code></pre><p>})();</p><p>const h = new Hero(3, 6, 3);<br>console.log(h);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  const syb = Symbol();</span><br><span class="line">  </span><br><span class="line">  const obj = &#123;</span><br><span class="line">      [syb]: 1,</span><br><span class="line">      a: 2,</span><br><span class="line">      b: 3</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  for (const prop in obj) &#123;</span><br><span class="line">      console.log(prop)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  console.log(Object.keys(obj))</span><br><span class="line">  console.log(Object.getOwnPropertyNames(obj))</span><br><span class="line">  //得到的是一个符号属性的数组</span><br><span class="line">  const sybs = Object.getOwnPropertySymbols(obj);</span><br><span class="line">  console.log(sybs, sybs[0] === syb)</span><br></pre></td></tr></table></figure></li><li><p>```js<br>const Hero = (() =&gt; {</p><pre><code>const getRandom = Symbol();return class &#123;    constructor(attack, hp, defence) &#123;        this.attack = attack;        this.hp = hp;        this.defence = defence;    &#125;    gongji() &#123;        //伤害：攻击力*随机数（0.8~1.1)        const dmg = this.attack * this[getRandom](0.8, 1.1);        console.log(dmg);    &#125;    [getRandom](min, max) &#123; //根据最小值和最大值产生一个随机数        return Math.random() * (max - min) + min;    &#125;&#125;</code></pre><p>})();</p><p>const h = new Hero(3, 6, 3);<br>const sybs = Object.getOwnPropertySymbols(Hero.prototype);<br>const prop = sybs[0];<br>console.log(h[prop](3, 5))</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 共享符号</span><br><span class="line"></span><br><span class="line">- 根据某个符号名称（符号描述）能够得到同一个符号</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">Symbol.for(&quot;符号名/符号描述&quot;)  //获取共享符号</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实例</p><ul><li><p>```js<br>const obj = {</p><pre><code>a: 1,b: 2,[Symbol.for(&quot;c&quot;)]: 3</code></pre><p>}</p><p>console.log(obj[Symbol.for(“c”)]);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  const syb1 = Symbol.for(&quot;abc&quot;);</span><br><span class="line">  const syb2 = Symbol.for(&quot;abc&quot;);</span><br><span class="line">  console.log(syb1 === syb2)</span><br><span class="line">  const obj1 = &#123;</span><br><span class="line">      a: 1,</span><br><span class="line">      b: 2,</span><br><span class="line">      [syb1]: 3</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const obj2 = &#123;</span><br><span class="line">      a: &quot;a&quot;,</span><br><span class="line">      b: &quot;b&quot;,</span><br><span class="line">      [syb2]: &quot;c&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  console.log(obj1, obj2);</span><br></pre></td></tr></table></figure></li><li><p>```js<br>const SymbolFor = (() =&gt; {</p><pre><code>const global = &#123;&#125;;//用于记录有哪些共享符号return function (name) &#123;    console.log(global)    if (!global[name]) &#123;        global[name] = Symbol(name);    &#125;    console.log(global);    return global[name];&#125;</code></pre><p>})();</p><p>const syb1 = SymbolFor(“abc”);</p><p>const syb2 = SymbolFor(“abc”);</p><p>console.log(syb1 === syb2);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 知名（公共、具名）符号</span><br><span class="line"></span><br><span class="line">&gt; 知名符号是一些具有特殊含义的共享符号，通过 `Symbol` 的静态属性得到</span><br><span class="line">&gt;</span><br><span class="line">&gt; `ES6` 延续了 `ES5` 的思想：减少魔法，暴露内部实现！</span><br><span class="line">&gt;</span><br><span class="line">&gt; 因此，`ES6` 用知名符号暴露了某些场景的内部实现</span><br><span class="line"></span><br><span class="line">#### Symbol.hasInstance</span><br><span class="line"></span><br><span class="line">- 该符号用于定义构造函数的静态成员，它将影响 `instanceof` 的判定</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  obj instanceof A</span><br><span class="line">  //等效于</span><br><span class="line">  A[Symbol.hasInstance](obj) // Function.prototype[Symbol.hasInstance]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>```js<br>function A() {</p><p>}</p><p>Object.defineProperty(A, Symbol.hasInstance, {</p><pre><code>value: function (obj) &#123;    return false;&#125;</code></pre><p>})</p><p>const obj = new A();</p><p>console.log(obj instanceof A);<br>// console.log(A<a href="obj">Symbol.hasInstance</a>);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### Symbol.isConcatSpreadable</span><br><span class="line"></span><br><span class="line">- 该知名符号会影响数组的 `concat` 方法</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  const arr = [3];</span><br><span class="line">  const arr2 = [5, 6, 7, 8];</span><br><span class="line">  </span><br><span class="line">  arr2[Symbol.isConcatSpreadable] = false;</span><br><span class="line">  </span><br><span class="line">  const result = arr.concat(56, arr2)</span><br><span class="line">  </span><br><span class="line">  //  [3, 56, [5,6,7,8]]</span><br><span class="line">  //  [3, 56, 5, 6, 7, 8]</span><br><span class="line">  </span><br><span class="line">  console.log(result)</span><br></pre></td></tr></table></figure></li><li><p>```js<br>const arr = [1];<br>const obj = {</p><pre><code>0: 3,1: 4,length: 2,[Symbol.isConcatSpreadable]: true</code></pre><p>}</p><p>const result = arr.concat(2, obj)</p><p>console.log(result)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### Symbol.toPrimitive</span><br><span class="line"></span><br><span class="line">- 该知名符号会影响类型转换的结果</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  class Temperature &#123;</span><br><span class="line">      constructor(degree) &#123;</span><br><span class="line">          this.degree = degree;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      [Symbol.toPrimitive](type) &#123;</span><br><span class="line">          if (type === &quot;default&quot;) &#123;</span><br><span class="line">              return this.degree + &quot;摄氏度&quot;;</span><br><span class="line">          &#125;</span><br><span class="line">          else if (type === &quot;number&quot;) &#123;</span><br><span class="line">              return this.degree;</span><br><span class="line">          &#125;</span><br><span class="line">          else if (type === &quot;string&quot;) &#123;</span><br><span class="line">              return this.degree + &quot;℃&quot;;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const t = new Temperature(30);</span><br><span class="line">  </span><br><span class="line">  console.log(t + &quot;!&quot;);</span><br><span class="line">  console.log(t / 2);</span><br><span class="line">  console.log(String(t));</span><br></pre></td></tr></table></figure></li></ul><h4 id="Symbol-toStringTag"><a href="#Symbol-toStringTag" class="headerlink" title="Symbol.toStringTag"></a>Symbol.toStringTag</h4><ul><li><p>该知名符号会影响 <code>Object.prototype.toString</code> 的返回值</p></li><li><p>```js<br>class Person {</p><pre><code>[Symbol.toStringTag] = &quot;Person&quot;</code></pre><p>}</p><p>const p = new Person();</p><p>const arr = [32424, 45654, 32]</p><p>console.log(Object.prototype.toString.apply(p));<br>console.log(Object.prototype.toString.apply(arr))</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### 其他知名符号</span><br><span class="line"></span><br><span class="line">## 异步处理</span><br><span class="line"></span><br><span class="line">### [回顾]事件循环</span><br><span class="line"></span><br><span class="line">- `JS`运行的环境称之为宿主环境。</span><br><span class="line"></span><br><span class="line">- 执行栈：`call stack`，一个数据结构，用于存放各种函数的执行环境，每一个函数执行之前，它的相关信息会加入到执行栈。函数调用之前，创建执行环境，然后加入到执行栈；函数调用之后，销毁执行环境。</span><br><span class="line"></span><br><span class="line">- `JS`引擎永远执行的是执行栈的最顶部。</span><br><span class="line"></span><br><span class="line">- 异步函数：某些函数不会立即执行，需要等到某个时机到达后才会执行，这样的函数称之为异步函数。比如事件处理函数。异步函数的执行时机，会被宿主环境控制。</span><br><span class="line"></span><br><span class="line">- 浏览器宿主环境中包含**5**个线程：</span><br><span class="line">  - `JS`引擎：负责执行执行栈的最顶部代码</span><br><span class="line">  - `GUI`线程：负责渲染页面 </span><br><span class="line">  - 事件监听线程：负责监听各种事件</span><br><span class="line">  - 计时线程：负责计时</span><br><span class="line">  - 网络线程：负责网络通信</span><br><span class="line"></span><br><span class="line">- 当上面的线程发生了某些事请，如果该线程发现，这件事情有处理程序，它会将该处理程序加入一个叫做事件队列的内存。当`JS`引擎发现，执行栈中已经没有了任何内容后，会将事件队列中的第一个函数加入到执行栈中执行。</span><br><span class="line"></span><br><span class="line">- `JS`引擎对事件队列的取出执行方式，以及与宿主环境的配合，称之为事件循环。</span><br><span class="line"></span><br><span class="line">- 事件队列在不同的宿主环境中有所差异，大部分宿主环境会将事件队列进行细分。在浏览器中，事件队列分为两种：</span><br><span class="line">  - 宏任务（队列）：`macroTask`，计时器结束的回调、事件回调、`http`回调等等绝大部分异步函数进入宏队列</span><br><span class="line">  - 微任务（队列）：`MutationObserver`，`Promise`产生的回调进入微队列</span><br><span class="line"></span><br><span class="line">&gt; `MutationObserver`函数用于监听某个`DOM`对象的变化</span><br><span class="line"></span><br><span class="line">- 当执行栈清空时，`JS`引擎首先会将微任务中的所有任务依次执行结束，如果没有微任务，则执行宏任务。</span><br><span class="line"></span><br><span class="line">- 实例</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    function a() &#123;</span><br><span class="line">        console.log(&quot;a&quot;)</span><br><span class="line">        b();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function b() &#123;</span><br><span class="line">        console.log(&quot;b&quot;);</span><br><span class="line">        c();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function c() &#123;</span><br><span class="line">        console.log(&quot;c&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    console.log(&quot;global&quot;);</span><br><span class="line">    a();</span><br><span class="line">    // global a b c</span><br></pre></td></tr></table></figure></li><li><p>```js<br>console.log(“a”)</p><p>setTimeout(() =&gt; {</p><pre><code>console.log(&quot;b&quot;)</code></pre><p>}, 0);</p><p>for (let i = 0; i &lt; 1000; i++) {</p><pre><code>console.log(&quot;c&quot;)</code></pre><p>}<br>// a c*1000 b</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  &lt;ul id=&quot;container&quot;&gt;&lt;/ul&gt;</span><br><span class="line">  &lt;button id=&quot;btn&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">  </span><br><span class="line">  let count = 1;</span><br><span class="line">  const ul = document.getElementById(&quot;container&quot;);</span><br><span class="line">  document.getElementById(&quot;btn&quot;).onclick = function A() &#123;</span><br><span class="line">      setTimeout(function C() &#123;</span><br><span class="line">          console.log(&quot;添加了一个li&quot;)</span><br><span class="line">      &#125;, 0);</span><br><span class="line">      var li = document.createElement(&quot;li&quot;)</span><br><span class="line">      li.innerText = count++;</span><br><span class="line">      ul.appendChild(li);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //监听ul</span><br><span class="line">  const observer = new MutationObserver(function B() &#123;</span><br><span class="line">      //当监听的dom元素发生变化时运行的回调函数</span><br><span class="line">      console.log(&quot;ul元素发生了变化&quot;)</span><br><span class="line">  &#125;)</span><br><span class="line">  //监听ul</span><br><span class="line">  observer.observe(ul, &#123;</span><br><span class="line">      attributes: true, //监听属性的变化</span><br><span class="line">      childList: true, //监听子元素的变化</span><br><span class="line">      subtree: true //监听子树的变化</span><br><span class="line">  &#125;)</span><br><span class="line">  //取消监听</span><br><span class="line">  // observer.disconnect();</span><br></pre></td></tr></table></figure></li></ul><h3 id="事件和回调函数的缺陷"><a href="#事件和回调函数的缺陷" class="headerlink" title="事件和回调函数的缺陷"></a>事件和回调函数的缺陷</h3><ul><li><p>我们习惯于使用传统的回调或事件处理来解决异步问题</p></li><li><p>事件：某个对象的属性是一个函数，当发生某一件事时，运行该函数</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dom.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>回调：运行某个函数以实现某个功能的时候，传入一个函数作为参数，当发生某件事的时候，会运行该函数。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dom.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>本质上，事件和回调并没有本质的区别，只是把函数放置的位置不同而已。</p></li><li><p>一直以来，该模式都运作良好。</p></li><li><p>直到前端工程越来越复杂…</p></li><li><p>目前，该模式主要面临以下两个问题：</p><ul><li>回调地狱：某个异步操作需要等待之前的异步操作完成，无论用回调还是事件，都会陷入不断的嵌套</li><li>异步之间的联系：某个异步操作要等待多个异步操作的结果，对这种联系的处理，会让代码的复杂度剧增</li></ul></li><li><p>回调地狱实例</p><ul><li><p>```js<br>const btn1 = document.getElementById(“btn1”),</p><pre><code>  btn2 = document.getElementById(&quot;btn2&quot;),  btn3 = document.getElementById(&quot;btn3&quot;);</code></pre><p>btn1.addEventListener(“click”, function() {</p><pre><code>//按钮1的其他事情btn2.addEventListener(&quot;click&quot;, function() &#123;    //按钮2的其他事情    btn3.addEventListener(&quot;click&quot;, function() &#123;        alert(&quot;hello&quot;);    &#125;)&#125;)</code></pre><p>})</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  /*</span><br><span class="line">  邓哥心中有三个女神</span><br><span class="line">  有一天，邓哥决定向第一个女神表白，如果女神拒绝，则向第二个女神表白，直到所有的女神都拒绝，或有一个女神同意为止</span><br><span class="line">  用代码模拟上面的场景</span><br><span class="line">  */</span><br><span class="line">  function biaobai(god, callback) &#123;</span><br><span class="line">      console.log(`邓哥向女神【$&#123;god&#125;】发出了表白短信`);</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">          if (Math.random() &lt; 0.1) &#123;</span><br><span class="line">              //女神同意拉</span><br><span class="line">              //resolve</span><br><span class="line">              callback(true);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              //resolve</span><br><span class="line">              callback(false);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, 1000);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  biaobai(&quot;女神1&quot;, function(result) &#123;</span><br><span class="line">      if (result) &#123;</span><br><span class="line">          console.log(&quot;女神1答应了，邓哥很开心!&quot;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          console.log(&quot;女神1拒绝了，邓哥表示无压力，然后向女神2表白&quot;);</span><br><span class="line">          biaobai(&quot;女神2&quot;, function(result) &#123;</span><br><span class="line">              if (result) &#123;</span><br><span class="line">                  console.log(&quot;女神2答应了，邓哥很开心!&quot;)</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  console.log(&quot;女神2十分感动，然后拒绝了邓哥，邓哥向女神3表白&quot;);</span><br><span class="line">                  biaobai(&quot;女神3&quot;, function(result) &#123;</span><br><span class="line">                      if (result) &#123;</span><br><span class="line">                          console.log(&quot;女神3答应了，邓哥很开心!&quot;)</span><br><span class="line">                      &#125; else &#123;</span><br><span class="line">                          console.log(&quot;邓哥表示生无可恋!!&quot;);</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li><li><p>```js<br>/*</p><pre><code>邓哥心中有二十个女神，他决定用更加高效的办法他同时给二十个女神表白，如果有女神同意，就拒绝其他的女神并且，当所有的女神回复完成后，他要把所有的回复都记录到日志进行分析用代码模拟上面的场景</code></pre><p>*/</p><p>function biaobai(god, callback) {</p><pre><code>console.log(`邓哥向女神【$&#123;god&#125;】发出了表白短信`);setTimeout(() =&gt; &#123;    if (Math.random() &lt; 0.05) &#123;        //女神同意拉        callback(true);    &#125; else &#123;        callback(false);    &#125;&#125;, Math.floor(Math.random() * (3000 - 1000) + 1000));</code></pre><p>}<br>let agreeGod = null; //同意邓哥的第一个女神<br>const results = []; //用于记录回复结果的数组<br>for (let i = 1; i &lt;= 20; i++) {</p><pre><code>biaobai(`女神$&#123;i&#125;`, result =&gt; &#123;    results.push(result);    if (result) &#123;        console.log(`女神$&#123;i&#125;同意了`)        if (agreeGod) &#123;            console.log(`邓哥回复女神$&#123;i&#125;: 不好意思，刚才朋友用我手机，乱发的`)        &#125; else &#123;            agreeGod = `女神$&#123;i&#125;`;            console.log(`邓哥终于找到了真爱`);        &#125;    &#125; else &#123;        console.log(`女神$&#123;i&#125;拒绝了`)    &#125;    if (results.length === 20) &#123;        console.log(&quot;日志记录&quot;, results)    &#125;&#125;)</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 异步处理的通用模型</span><br><span class="line"></span><br><span class="line">- `ES`官方参考了大量的异步场景，总结出了一套异步的通用模型，该模型可以覆盖几乎所有的异步场景，甚至是同步场景。</span><br><span class="line"></span><br><span class="line">- 值得注意的是，为了兼容旧系统，`ES6` 并不打算抛弃掉过去的做法，只是基于该模型推出一个全新的 `API`，使用该`API`，会让异步处理更加的简洁优雅。</span><br><span class="line"></span><br><span class="line">- 理解该 `API`，最重要的，是理解它的异步模型</span><br><span class="line"></span><br><span class="line">1. `ES6` 将某一件可能发生异步操作的事情，分为两个阶段：**unsettled** 和 **settled**</span><br><span class="line">   1. ![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111633853.png)</span><br><span class="line">   2. **unsettled**： 未决阶段，表示事情还在进行前期的处理，并没有发生通向结果的那件事</span><br><span class="line">   3. **settled**：已决阶段，事情已经有了一个结果，不管这个结果是好是坏，整件事情无法逆转</span><br><span class="line">   4. 事情总是从 未决阶段 逐步发展到 已决阶段的。并且，未决阶段拥有控制何时通向已决阶段的能力。</span><br><span class="line">2. **ES6**将事情划分为三种状态： **pending**、**resolved**、**rejected**</span><br><span class="line">   1. **pending**: 挂起，处于未决阶段，则表示这件事情还在挂起（最终的结果还没出来）</span><br><span class="line">   2. **resolved**：已处理，已决阶段的一种状态，表示整件事情已经出现结果，并是一个可以按照正常逻辑进行下去的结果</span><br><span class="line">   3. **rejected**：已拒绝，已决阶段的一种状态，表示整件事情已经出现结果，并是一个无法按照正常逻辑进行下去的结果，通常用于表示有一个错误</span><br><span class="line"></span><br><span class="line">- 既然未决阶段有权力决定事情的走向，因此，未决阶段可以决定事情最终的状态！</span><br><span class="line">- 我们将 把事情变为`resolved`状态的过程叫做：**resolve**，推向该状态时，可能会传递一些数据</span><br><span class="line">- 我们将 把事情变为`rejected`状态的过程叫做：**reject**，推向该状态时，同样可能会传递一些数据，通常为错误信息</span><br><span class="line"></span><br><span class="line">**始终记住，无论是阶段，还是状态，是不可逆的！**</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111634957.png)</span><br><span class="line"></span><br><span class="line">3. 当事情达到已决阶段后，通常需要进行后续处理，不同的已决状态，决定了不同的后续处理。</span><br><span class="line">   1. **resolved**状态：这是一个正常的已决状态，后续处理表示为 **thenable**</span><br><span class="line">   2. **rejected**状态：这是一个非正常的已决状态，后续处理表示为 **catchable**</span><br><span class="line"></span><br><span class="line">后续处理可能有多个，因此会形成作业队列，这些后续处理会按照顺序，当状态到达后依次执行</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111632530.png)</span><br><span class="line"></span><br><span class="line">4. 整件事称之为**Promise**</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111635604.png)</span><br><span class="line"></span><br><span class="line">**理解上面的概念，对学习Promise至关重要！**</span><br><span class="line"></span><br><span class="line">### Promise</span><br><span class="line"></span><br><span class="line">#### Promise的基本使用</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">const pro = new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line">    // 未决阶段的处理</span><br><span class="line">    // 通过调用resolve函数将Promise推向已决阶段的resolved状态</span><br><span class="line">    // 通过调用reject函数将Promise推向已决阶段的rejected状态</span><br><span class="line">    // resolve和reject均可以传递最多一个参数，表示推向状态的数据</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">pro.then(data=&gt;&#123;</span><br><span class="line">    //这是thenable函数，如果当前的Promise已经是resolved状态，该函数会立即执行</span><br><span class="line">    //如果当前是未决阶段，则会加入到作业队列，等待到达resolved状态后执行</span><br><span class="line">    //data为状态数据</span><br><span class="line">&#125;, err=&gt;&#123;</span><br><span class="line">    //这是catchable函数，如果当前的Promise已经是rejected状态，该函数会立即执行</span><br><span class="line">    //如果当前是未决阶段，则会加入到作业队列，等待到达rejected状态后执行</span><br><span class="line">    //err为状态数据</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>细节</strong></p><ul><li><p>未决阶段的处理函数是同步的，会立即执行</p></li><li><p><code>thenable</code>和<code>catchable</code>函数是异步的，就算是立即执行，也会加入到事件队列中等待执行，并且，加入的队列是微队列</p></li><li><p><code>pro.then</code>可以只添加<code>thenable</code>函数，<code>pro.catch</code>可以单独添加<code>catchable</code>函数</p></li><li><p>在未决阶段的处理函数中，如果发生未捕获的错误，会将状态推向<code>rejected</code>，并会被<code>catchable</code>捕获</p></li><li><p>一旦状态推向了已决阶段，无法再对状态做任何更改</p></li><li><p><strong>Promise并没有消除回调，只是让回调变得可控</strong></p></li><li><p>实例</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biaobai</span>(<span class="params">god</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`邓哥向<span class="subst">$&#123;god&#125;</span>发出了表白短信`</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &lt; <span class="number">0.1</span>) &#123;</span><br><span class="line">                <span class="comment">//女神同意拉</span></span><br><span class="line">                resolve(<span class="literal">true</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//resolve</span></span><br><span class="line">                resolve(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">biaobai(<span class="string">&quot;女神1&quot;</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 辅助函数,把传进来的对象拼接成url的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toData</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = i + <span class="string">&quot;=&quot;</span> + obj[i];</span><br><span class="line">        arr.push(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装Ajax</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//指定提交方式的默认值</span></span><br><span class="line">        obj.type = obj.type || <span class="string">&quot;get&quot;</span>;</span><br><span class="line">        <span class="comment">//设置是否异步，默认为true(异步)</span></span><br><span class="line">        obj.async = obj.async || <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//设置数据的默认值</span></span><br><span class="line">        obj.data = obj.data || <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 根据不同的浏览器创建XHR对象</span></span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">            <span class="comment">// 非IE浏览器</span></span><br><span class="line">            xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// IE浏览器</span></span><br><span class="line">            xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 区分get和post,发送HTTP请求</span></span><br><span class="line">        <span class="keyword">if</span> (obj.type === <span class="string">&quot;post&quot;</span>) &#123;</span><br><span class="line">            xhr.open(obj.type, obj.url, obj.async);</span><br><span class="line">            xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">            <span class="keyword">let</span> data = toData(obj.data);</span><br><span class="line">            xhr.send(data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> url = obj.url + <span class="string">&quot;?&quot;</span> + toData(obj.data);</span><br><span class="line">            xhr.open(obj.type, url, obj.async);</span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接收返回过来的数据</span></span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">                    resolve(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(xhr.status)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;./data/students.json?name=李华&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(resp)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const pro = new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;未决阶段&quot;)</span></span><br><span class="line"><span class="comment">//     resolve(123);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// pro.then(data =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     // pro的状态是resolved</span></span><br><span class="line"><span class="comment">//     console.log(data);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;未决阶段&quot;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">123</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">pro.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// pro的状态是pending</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">pro.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// pro的状态是pending</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">pro.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// pro的状态是pending</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;未决阶段&quot;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.random &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">            resolve(<span class="number">123</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;asdfasdf&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">pro.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//pro: resolved</span></span><br><span class="line">pro.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">pro.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;c&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;123&quot;</span>); <span class="comment">// pro: rejected</span></span><br><span class="line">&#125;)</span><br><span class="line">pro.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">pro.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    resolve(<span class="number">1</span>); <span class="comment">//无效</span></span><br><span class="line">    reject(<span class="number">2</span>); <span class="comment">//无效</span></span><br><span class="line">    resolve(<span class="number">3</span>); <span class="comment">//无效</span></span><br><span class="line">    reject(<span class="number">4</span>); <span class="comment">//无效</span></span><br><span class="line">&#125;)</span><br><span class="line">pro.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">pro.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Promise的串联"><a href="#Promise的串联" class="headerlink" title="Promise的串联"></a>Promise的串联</h4><p>当后续的Promise需要用到之前的<code>Promise</code>的处理结果时，需要<code>Promise</code>的串联</p><p><code>Promise</code>对象中，无论是<code>then</code>方法还是<code>catch</code>方法，它们都具有返回值，返回的是一个全新的<code>Promise</code>对象，它的状态满足下面的规则：</p><ol><li>如果当前的<code>Promise</code>是未决的，得到的新的Promise是挂起状态</li><li>如果当前的<code>Promise</code>是已决的，会运行响应的后续处理函数，并将后续处理函数的结果（返回值）作为<code>resolved</code>状态数据，应用到新的<code>Promise</code>中；如果后续处理函数发生错误，则把返回值作为<code>rejected</code>状态数据，应用到新的<code>Promise</code>中。</li></ol><p><strong>后续的Promise一定会等到前面的Promise有了后续处理结果后，才会变成已决状态</strong></p><p>如果前面的<code>Promise</code>的后续处理，返回的是一个<code>Promise</code>，则返回的新的<code>Promise</code>状态和后续处理返回的<code>Promise</code>状态保持一致。</p><ul><li>实例</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pro1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> pro2 = pro1.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result * <span class="number">2</span></span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err * <span class="number">3</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        pro1.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err * <span class="number">2</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//pro2类型：Promise对象</span></span><br><span class="line">        <span class="comment">//pro2的状态：</span></span><br><span class="line">        pro2.then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result * <span class="number">2</span>), <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err * <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：6</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pro1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pro2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">pro1.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;结果出来了，得到的是一个Promise&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> pro2;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">biaobai</span>(<span class="params">god</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`邓哥向<span class="subst">$&#123;god&#125;</span>发出了表白短信`</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &lt; <span class="number">0.3</span>) &#123;</span><br><span class="line">                <span class="comment">//女神同意拉</span></span><br><span class="line">                resolve(<span class="literal">true</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//resolve</span></span><br><span class="line">                resolve(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">邓哥心中有三个女神</span></span><br><span class="line"><span class="comment">有一天，邓哥决定向第一个女神表白，如果女神拒绝，则向第二个女神表白，直到所有的女神都拒绝，或有一个女神同意为止</span></span><br><span class="line"><span class="comment">用代码模拟上面的场景</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> gods = [<span class="string">&quot;女神1&quot;</span>, <span class="string">&quot;女神2&quot;</span>, <span class="string">&quot;女神3&quot;</span>, <span class="string">&quot;女神4&quot;</span>, <span class="string">&quot;女神5&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> pro;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; gods.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">        pro = biaobai(gods[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    pro = pro.then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (resp === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resp) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;gods[i]&#125;</span>同意了`</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;gods[i]&#125;</span>拒绝了`</span>)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; gods.length - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> biaobai(gods[i + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise的其他api"><a href="#Promise的其他api" class="headerlink" title="Promise的其他api"></a>Promise的其他api</h4><ul><li><p>原型成员 (实例成员)</p><ul><li><strong>then</strong>：注册一个后续处理函数，当<code>Promise</code>为<code>resolved</code>状态时运行该函数</li><li><strong>catch</strong>：注册一个后续处理函数，当<code>Promise</code>为<code>rejected</code>状态时运行该函数</li><li><strong>finally</strong>：[<code>ES2018</code>]注册一个后续处理函数（无参），当<code>Promise</code>为已决时运行该函数</li></ul></li><li><p>构造函数成员 （静态成员）</p></li><li><p><strong>resolve</strong>(数据)：该方法返回一个<code>resolved</code>状态的<code>Promise</code>，传递的数据作为状态数据</p><ul><li>特殊情况：如果传递的数据是<code>Promise</code>，则直接返回传递的<code>Promise</code>对象</li></ul></li><li><p><strong>reject</strong>(数据)：该方法返回一个<code>rejected</code>状态的<code>Promise</code>，传递的数据作为状态数据</p></li><li><p>**all(iterable)**：这个方法返回一个新的<code>promise</code>对象，该<code>promise</code>对象在<code>iterable</code>参数对象里所有的<code>promise</code>对象都成功的时候才会触发成功，一旦有任何一个<code>iterable</code>里面的<code>promise</code>对象失败则立即触发该<code>promise</code>对象的失败。这个新的<code>promise</code>对象在触发成功状态以后，会把一个包含<code>iterable</code>里所有promise返回值的数组作为成功回调的返回值，顺序跟<code>iterable</code>的顺序保持一致；如果这个新的<code>promise</code>对象触发了失败状态，它会把<code>iterable</code>里第一个触发失败的<code>promise</code>对象的错误信息作为它的失败错误信息。<code>Promise.all</code>方法常被用于处理多个<code>promise</code>对象的状态集合。</p></li><li><p>**race(iterable)**：当<code>iterable</code>参数里的任意一个子<code>promise</code>被成功或失败后，父<code>promise</code>马上也会用子<code>promise</code>的成功返回值或失败详情作为参数调用父<code>promise</code>绑定的相应句柄，并返回该<code>promise</code>对象</p></li><li><p>例</p></li><li><p>```js<br>// const pro = new Promise((resolve, reject) =&gt; {<br>//     resolve(1);<br>// })<br>//等效于：<br>// const pro = Promise.resolve(1);</p><p>// const pro = new Promise((resolve, reject) =&gt; {<br>//     reject(1);<br>// })<br>//等效于：<br>// const pro = Promise.reject(1);</p><p>const p = new Promise((resolve, reject) =&gt; {</p><pre><code>resolve(3);</code></pre><p>})<br>// const pro = Promise.resolve(p);<br>//等效于<br>const pro = p;<br>console.log(pro === p)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  function getRandom(min, max) &#123;</span><br><span class="line">      return Math.floor(Math.random() * (max - min)) + min;</span><br><span class="line">  &#125;</span><br><span class="line">  const proms = [];</span><br><span class="line">  for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">      proms.push(new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">          setTimeout(() =&gt; &#123;</span><br><span class="line">              if (Math.random() &lt; 0.5) &#123;</span><br><span class="line">                  console.log(i, &quot;完成&quot;);</span><br><span class="line">                  resolve(i);</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  console.log(i, &quot;失败&quot;)</span><br><span class="line">                  reject(i);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;, getRandom(1000, 5000));</span><br><span class="line">      &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  //等到所有的promise变成resolved状态后输出: 全部完成</span><br><span class="line">  const pro = Promise.all(proms)</span><br><span class="line">  pro.then(datas =&gt; &#123;</span><br><span class="line">      console.log(&quot;全部完成&quot;, datas);</span><br><span class="line">  &#125;)</span><br><span class="line">  pro.catch(err =&gt; &#123;</span><br><span class="line">      console.log(&quot;有失败的&quot;, err);</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(proms);</span><br></pre></td></tr></table></figure></li><li><p>```js<br>function getRandom(min, max) {</p><pre><code>return Math.floor(Math.random() * (max - min)) + min;</code></pre><p>}<br>const proms = [];<br>for (let i = 0; i &lt; 10; i++) {</p><pre><code>proms.push(new Promise((resolve, reject) =&gt; &#123;    setTimeout(() =&gt; &#123;        if (Math.random() &lt; 0.5) &#123;            console.log(i, &quot;完成&quot;);            resolve(i);        &#125; else &#123;            console.log(i, &quot;失败&quot;)            reject(i);        &#125;    &#125;, getRandom(1000, 5000));&#125;))</code></pre><p>}<br>//等到所有的promise变成resolved状态后输出: 全部完成<br>const pro = Promise.race(proms)<br>pro.then(data =&gt; {</p><pre><code>console.log(&quot;有人完成了&quot;, data);</code></pre><p>})<br>pro.catch(err =&gt; {</p><pre><code>console.log(&quot;有人失败了&quot;, err);</code></pre><p>})<br>console.log(proms);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  /*</span><br><span class="line">  邓哥心中有二十个女神，他决定用更加高效的办法</span><br><span class="line">  他同时给二十个女神表白，如果有女神同意，就拒绝其他的女神</span><br><span class="line">  并且，当所有的女神回复完成后，他要把所有的回复都记录到日志进行分析</span><br><span class="line">  用代码模拟上面的场景</span><br><span class="line">  */</span><br><span class="line">  function biaobai(god) &#123;</span><br><span class="line">      return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">          console.log(`邓哥向女神【$&#123;god&#125;】发出了表白短信`);</span><br><span class="line">          setTimeout(() =&gt; &#123;</span><br><span class="line">              if (Math.random() &lt; 0.05) &#123;</span><br><span class="line">                  //女神同意拉</span><br><span class="line">                  console.log(god, &quot;同意&quot;)</span><br><span class="line">                  resolve(true);</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  console.log(god, &quot;拒绝&quot;)</span><br><span class="line">                  resolve(false);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;, Math.floor(Math.random() * (3000 - 1000) + 1000));</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  const proms = [];</span><br><span class="line">  let hasAgree = false; //是否有女神同意</span><br><span class="line">  </span><br><span class="line">  for (let i = 1; i &lt;= 20; i++) &#123;</span><br><span class="line">      const pro = biaobai(`女神$&#123;i&#125;`).then(resp =&gt; &#123;</span><br><span class="line">          if (resp) &#123;</span><br><span class="line">              if (hasAgree) &#123;</span><br><span class="line">                  console.log(&quot;发错了短信，邓哥很机智的拒绝了&quot;)</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  hasAgree = true;</span><br><span class="line">                  console.log(&quot;邓哥很开心，终于成功了！&quot;);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          return resp;</span><br><span class="line">      &#125;)</span><br><span class="line">      proms.push(pro);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Promise.all(proms).then(results =&gt; &#123;</span><br><span class="line">      console.log(&quot;日志记录&quot;, results);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li><li><p>```js<br>// Promise.all可以将多个Promise实例包装成一个新的Promise实例<br>// 同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组<br>// 而失败的时候则返回最先被reject失败状态的值</p><p>function test(x) {</p><pre><code>return new Promise((reason,reject) =&gt; &#123;    setTimeout(() =&gt; &#123;        Math.random() * 100 &gt; 50 ? reason(x) : reject(x)    &#125;,100)&#125;)</code></pre><p>}</p><p>let oP = Promise.all([test(‘a’),test(‘b’),test(‘c’)]);<br>oP.then((val) =&gt; {</p><pre><code>console.log(val);</code></pre><p>},(reason) =&gt; {</p><pre><code>console.log(reason);</code></pre><p>});</p><p>// 顾名思义：Promise.race就是赛跑的意思，意思就是说<br>// Promise.race([p1,p2,p3])里那个结果获得的快，就返回那个结果<br>// 不管结果本身是成功状态还是失败状态<br>Promise.race([test(‘a’),test(‘b’),test(‘c’)]).then((val) =&gt;{</p><pre><code>console.log(val,&#39;ok&#39;)</code></pre><p>},(reason) =&gt; {</p><pre><code>console.log(reason,&#39;no&#39;);</code></pre><p>});</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### [扩展手写Promise]</span><br><span class="line"></span><br><span class="line">##### ES6之手写Promise</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">const MyPromise = (() =&gt; &#123;</span><br><span class="line">    const PENDING = &quot;pending&quot;,</span><br><span class="line">        RESOLVED = &quot;resolved&quot;,</span><br><span class="line">        REJECTED = &quot;rejected&quot;,</span><br><span class="line">        PromiveValue = Symbol(&quot;PromiseValue&quot;), //状态数据</span><br><span class="line">        PromiseStatus = Symbol(&quot;PromiseStatus&quot;),</span><br><span class="line">        thenables = Symbol(&quot;thenables&quot;), //thenable</span><br><span class="line">        catchables = Symbol(&quot;catchbles&quot;), //catchables</span><br><span class="line">        changeStatus = Symbol(&quot;changeStatus&quot;),//当前状态</span><br><span class="line">        settleHandle = Symbol(&quot;settleHandle&quot;), //后续处理的通用函数</span><br><span class="line">        linkPromise = Symbol(&quot;linkPromise&quot;);  //创建串联的Promise</span><br><span class="line"></span><br><span class="line">    return class MyPromise &#123;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 改变当前Promise的状态</span><br><span class="line">         * @param &#123;*&#125; newStatus </span><br><span class="line">         * @param &#123;*&#125; newValue </span><br><span class="line">         * @param &#123;*&#125; queue 执行的作业队列</span><br><span class="line">         */</span><br><span class="line">        [changeStatus](newStatus, newValue, queue) &#123;</span><br><span class="line">            if (this[PromiseStatus] !== PENDING) &#123;</span><br><span class="line">                //状态无法变更</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            this[PromiseStatus] = newStatus;</span><br><span class="line">            this[PromiveValue] = newValue;</span><br><span class="line">            //执行相应队列中的函数</span><br><span class="line">            queue.forEach(handler =&gt; handler(newValue));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * </span><br><span class="line">         * @param &#123;*&#125; executor 未决阶段（pending状态）下的处理函数</span><br><span class="line">         */</span><br><span class="line">        constructor(executor) &#123;</span><br><span class="line">            this[PromiseStatus] = PENDING;</span><br><span class="line">            this[PromiveValue] = undefined;</span><br><span class="line">            this[thenables] = []; //后续处理函数的数组 -&gt; resolved</span><br><span class="line">            this[catchables] = []; //后续处理函数的数组 -&gt; rejected</span><br><span class="line"></span><br><span class="line">            const resolve = data =&gt; &#123;</span><br><span class="line">                this[changeStatus](RESOLVED, data, this[thenables]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            const reject = reason =&gt; &#123;</span><br><span class="line">                this[changeStatus](REJECTED, reason, this[catchables]);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                executor(resolve, reject)</span><br><span class="line">            &#125;</span><br><span class="line">            catch (err) &#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 处理 后续处理函数</span><br><span class="line">         * @param &#123;*&#125; handler 后续处理函数</span><br><span class="line">         * @param &#123;*&#125; immediatelyStatus 需要立即执行的状态</span><br><span class="line">         * @param &#123;*&#125; queue 作业队列</span><br><span class="line">         */</span><br><span class="line">        [settleHandle](handler, immediatelyStatus, queue) &#123;</span><br><span class="line">            if (typeof handler !== &quot;function&quot;) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if (this[PromiseStatus] === immediatelyStatus) &#123;</span><br><span class="line">                //直接运行</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    handler(this[PromiveValue]);</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                queue.push(handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [linkPromise](thenalbe, catchable) &#123;</span><br><span class="line">            function exec(data, handler, resolve, reject) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    const result = handler(data); //得到当前Promise的处理结果</span><br><span class="line">                    if (result instanceof MyPromise) &#123;</span><br><span class="line">                        result.then(d =&gt; &#123;</span><br><span class="line">                            resolve(d)</span><br><span class="line">                        &#125;, err =&gt; &#123;</span><br><span class="line">                            reject(err);</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        resolve(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (err) &#123;</span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">                this[settleHandle](data =&gt; &#123;</span><br><span class="line">                    exec(data, thenalbe, resolve, reject);</span><br><span class="line">                &#125;, RESOLVED, this[thenables])</span><br><span class="line"></span><br><span class="line">                this[settleHandle](reason =&gt; &#123;</span><br><span class="line">                    exec(reason, catchable, resolve, reject);</span><br><span class="line">                &#125;, REJECTED, this[catchables])</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        then(thenable, catchable) &#123;</span><br><span class="line">            return this[linkPromise](thenable, catchable);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        catch(catchable) &#123;</span><br><span class="line"></span><br><span class="line">            return this[linkPromise](undefined, catchable);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        static all(proms) &#123;</span><br><span class="line">            return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">                const results = proms.map(p =&gt; &#123;</span><br><span class="line">                    const obj = &#123;</span><br><span class="line">                        result: undefined,</span><br><span class="line">                        isResolved: false</span><br><span class="line">                    &#125;</span><br><span class="line">                    p.then(data =&gt; &#123;</span><br><span class="line">                        obj.result = data;</span><br><span class="line">                        obj.isResolved = true;</span><br><span class="line">                        //判断是否所有的全部完成</span><br><span class="line">                        const unResolved = results.filter(r =&gt; !r.isResolved)</span><br><span class="line">                        if (unResolved.length === 0) &#123;</span><br><span class="line">                            //全部完成</span><br><span class="line">                            resolve(results.map(r =&gt; r.result));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, reason =&gt; &#123;</span><br><span class="line">                        reject(reason);</span><br><span class="line">                    &#125;)</span><br><span class="line">                    return obj;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static race(proms) &#123;</span><br><span class="line">            return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">                proms.forEach(p =&gt; &#123;</span><br><span class="line">                    p.then(data =&gt; &#123;</span><br><span class="line">                        resolve(data);</span><br><span class="line">                    &#125;, err =&gt; &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static resolve(data) &#123;</span><br><span class="line">            if (data instanceof MyPromise) &#123;</span><br><span class="line">                return data;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                return new MyPromise(resolve =&gt; &#123;</span><br><span class="line">                    resolve(data);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static reject(reason) &#123;</span><br><span class="line">            return new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">                reject(reason);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul><h5 id="ES5之手写Promise"><a href="#ES5之手写Promise" class="headerlink" title="ES5之手写Promise"></a>ES5之手写Promise</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生Promise特性</span></span><br><span class="line"><span class="comment">//new</span></span><br><span class="line"><span class="comment">// 参数：executor 同步执行，executor中要有两个参数(resolve,reject)</span></span><br><span class="line"><span class="comment">// 触发Fulfilled Rejected状态（成功，失败），没有触发之前是pending等待状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步操作</span></span><br><span class="line"><span class="comment">// 链式操作</span></span><br><span class="line"><span class="comment">// then异步执行，抛出错误</span></span><br><span class="line"><span class="comment">// 空then</span></span><br><span class="line"><span class="comment">// 返回值是对象时</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将self事先等于window</span></span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 状态：一开始为进行中pending</span></span><br><span class="line">    self.status = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了then可以调用函数的参数，为self声明两个参数来接收两个函数的参数</span></span><br><span class="line">    self.resolveValue = <span class="literal">null</span>;</span><br><span class="line">    self.rejectReason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调数组，当注册函数时不执行，先存入数组，当真正执行函数时，在执行</span></span><br><span class="line">    self.ResolveCallBackList = [];</span><br><span class="line">    self.RejectCallBackList = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//只有状态===pending时才可以转换状态</span></span><br><span class="line">        <span class="keyword">if</span> (self.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">            self.status = <span class="string">&#x27;Fulfilled&#x27;</span>; <span class="comment">//成功</span></span><br><span class="line">            <span class="comment">//将value赋值给self的resolveValue，以便then使用</span></span><br><span class="line">            self.resolveValue = value;</span><br><span class="line">            <span class="comment">// 执行回调函数中的函数</span></span><br><span class="line">            self.ResolveCallBackList.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">                ele();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//失败函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//只有状态===pending时才可以转换状态</span></span><br><span class="line">        <span class="keyword">if</span> (self.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">            self.status = <span class="string">&#x27;Rejected&#x27;</span>; <span class="comment">//失败</span></span><br><span class="line">            <span class="comment">// 将reason赋值给self的rejectReason，以便then使用</span></span><br><span class="line">            self.rejectReason = reason;</span><br><span class="line">            <span class="comment">// 执行回调函数中的函数</span></span><br><span class="line">            self.RejectCallBackList.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">                ele();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用try&#123;&#125;catch&#123;&#125;判断错误，当executor抛出错误时，执行reject()来打印错误</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理返回值函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ResolutionReturnPromise</span>(<span class="params">nextPromise, returnValue, res, rej</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果返回值是Promise对象时</span></span><br><span class="line">    <span class="keyword">if</span> (returnValue <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">        returnValue.then(</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">                res(val);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">                rej(reason);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果返回值不是Promise对象时，执行res</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res(returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// then函数，参数：onFulfilled,onRejected两个函数参数，分别代表完成、拒绝</span></span><br><span class="line">MyPromise.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 空then处理方法：</span></span><br><span class="line">    <span class="comment">//若没有onFulfilled时则返回参数val</span></span><br><span class="line">    <span class="comment">//若onRejected则抛出参数reason错误</span></span><br><span class="line">    <span class="keyword">if</span> (!onFulfilled) &#123;</span><br><span class="line">        onFulfilled = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!onRejected) &#123;</span><br><span class="line">        onRejected = <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(reason);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将self事先等于window</span></span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链式操作</span></span><br><span class="line">    <span class="comment">// 拿到上一次函数返回结果，用于下一次then的参数</span></span><br><span class="line">    <span class="keyword">var</span> nextPromise = <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">res, rej</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 当状态为Fulfilled时，执行onFulfilled完成</span></span><br><span class="line">        <span class="keyword">if</span> (self.status === <span class="string">&#x27;Fulfilled&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//异步方式执行操作：setTimeout</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 在then中抛出错误时，在下一个then中的reject函数中打印</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//拿到此次函数的返回结果，用于下一次then的参数</span></span><br><span class="line">                    <span class="keyword">var</span> nextResolveValue = onFulfilled(self.resolveValue);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 处理返回值函数</span></span><br><span class="line">                    ResolutionReturnPromise(nextPromise, nextResolveValue, res, rej);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/* </span></span><br><span class="line"><span class="comment">                    //拿到此次函数的返回结果，用于下一次then的参数</span></span><br><span class="line"><span class="comment">                    var nextResolveValue = onFulfilled(self.resolveValue);</span></span><br><span class="line"><span class="comment">                    </span></span><br><span class="line"><span class="comment">                    //执行下一次函数时，使用上一次函数返回结果作为参数</span></span><br><span class="line"><span class="comment">                    res(nextResolveValue); */</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    rej(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当状态为Rjected时，执行onRejected拒绝</span></span><br><span class="line">        <span class="keyword">if</span> (self.status === <span class="string">&#x27;Rejected&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> nextRejectValue = onRejected(self.rejectReason);</span><br><span class="line">                    ResolutionReturnPromise(nextPromise, nextRejectValue, res, rej);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    rej(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异步操作实现</span></span><br><span class="line">        <span class="keyword">if</span> (self.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 将函数推入回调函数</span></span><br><span class="line">            self.ResolveCallBackList.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> nextResolveValue = onFulfilled(self.resolveValue);</span><br><span class="line">                        ResolutionReturnPromise(nextPromise, nextResolveValue, res, rej);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        rej(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">0</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            self.RejectCallBackList.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> nextRejectValue = onRejected(self.rejectReason);</span><br><span class="line">                        ResolutionReturnPromise(nextPromise, nextRejectValue, res, rej);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        rej(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">0</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nextPromise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态方法 race</span></span><br><span class="line">MyPromise.race = <span class="function"><span class="keyword">function</span> (<span class="params">promiseArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (promiseArr.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        promiseArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele, index</span>) </span>&#123;</span><br><span class="line">            resolve(ele).then(</span><br><span class="line">                <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                    resolve(res);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    reject(err);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态方法 all</span></span><br><span class="line">MyPromise.all = <span class="function"><span class="keyword">function</span> (<span class="params">promiseArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> results = [], <span class="comment">//执行数组</span></span><br><span class="line">        promiseArrCount = <span class="number">0</span>, <span class="comment">//计算函数总执行次数</span></span><br><span class="line">        promiseArrLength = promiseArr.length; <span class="comment">//函数参数总长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        promiseArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele, index</span>) </span>&#123;</span><br><span class="line">            resolve(ele).then(</span><br><span class="line">                <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                    promiseArrCount++;</span><br><span class="line">                    results.push(res);</span><br><span class="line">                    <span class="comment">//当所有函数都正确执行了，resolve执行输出所有结果</span></span><br><span class="line">                    <span class="keyword">if</span> (promiseArrCount === promiseArrLength) &#123;</span><br><span class="line">                        <span class="keyword">return</span> resolve(results);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> reject(err);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h3><ul><li><p><code>async</code>函数，是<code>Generator</code>语法糖，通过<code>babel</code>编译后可以看出它就是<code>Generator+promise+Co</code>思想实现的，配合<code>await</code>使用</p></li><li><p>目的：优雅的解决异步操作问题</p></li></ul><blockquote><p><code>async</code> 和 <code>await</code> 是 <code>ES2016</code> 新增两个关键字，它们借鉴了 <code>ES2015</code> 中生成器在实际开发中的应用，目的是简化 <code>Promise api</code> 的使用，并非是替代 <code>Promise</code>。</p></blockquote><h5 id="async"><a href="#async" class="headerlink" title="async"></a>async</h5><ul><li><p>目的是简化在函数的返回值中对Promise的创建</p></li><li><p><strong>async</strong> 用于修饰函数（无论是函数字面量还是函数表达式），放置在函数最开始的位置，被修饰函数的返回结果一定是 <strong>Promise</strong> 对象。</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等效于</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        resolve(<span class="number">2</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="await"><a href="#await" class="headerlink" title="await"></a>await</h5><ul><li><p><strong>await关键字必须出现在async函数中！！！！</strong></p></li><li><p><strong>await</strong>用在某个表达式之前，如果表达式是一个<strong>Promise</strong>，则得到的是<strong>thenable</strong>中的状态数据。</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> test1();</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test2();</span><br></pre></td></tr></table></figure><p>等效于</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        resolve(<span class="number">2</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        test1().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> result = data;</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test2();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果<code>await</code>的表达式不是<code>Promise</code>，则会将其使用<code>Promise.resolve</code>包装后按照规则运行</p><ul><li><p>实例</p><ul><li><p>```js<br>function biaobai(god) {</p><pre><code>return new Promise(resolve =&gt; &#123;    console.log(`邓哥向$&#123;god&#125;发出了表白短信`);    setTimeout(() =&gt; &#123;        if (Math.random() &lt; 0.3) &#123;            //女神同意拉            resolve(true)        &#125; else &#123;            //resolve            resolve(false);        &#125;    &#125;, 500);&#125;)</code></pre><p>}</p><p>/*</p><pre><code>        邓哥心中有三个女神        有一天，邓哥决定向第一个女神表白，如果女神拒绝，则向第二个女神表白，直到所有的女神都拒绝，或有一个女神同意为止        用代码模拟上面的场景    */</code></pre><p>(async () =&gt; {</p><pre><code>const gods = [&quot;女神1&quot;, &quot;女神2&quot;, &quot;女神3&quot;, &quot;女神4&quot;, &quot;女神5&quot;];for (let i = 0; i &lt; gods.length; i++) &#123;    const g = gods[i];    // 当前循环等待的Promise没有resolve，下一次循环不运行    const result = await biaobai(g);    if (result) &#123;        console.log(`$&#123;g&#125;同意了，不用再表白了！！！`);        break;    &#125; else &#123;        console.log(`$&#123;g&#125;没有同意`)    &#125;&#125;</code></pre><p>})()</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  async function getPromise() &#123;</span><br><span class="line">      if (Math.random() &lt; 0.5) &#123;</span><br><span class="line">          return 1;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          throw 2;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  async function test() &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          const result = await getPromise();</span><br><span class="line">          console.log(&quot;正常状态&quot;, result)</span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">          console.log(&quot;错误状态&quot;, err);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  test();</span><br></pre></td></tr></table></figure></li><li><p>```js<br>function delay(duration) {</p><pre><code>return new Promise((resolve, reject) =&gt; &#123;    setTimeout(() =&gt; &#123;        resolve();    &#125;, duration);&#125;)</code></pre><p>}</p><p>async function biaobai(god) {</p><pre><code>console.log(`邓哥向$&#123;god&#125;发出了表白短信`);await delay(500);return Math.random() &lt; 0.3;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### promise函数化</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">let fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">// 当使用NodeJs开始时，使用promise为中心的开发方式，带来的好处是大家都使用promise进行异步方案的解决，不用考虑回调callback，但是还是有一些库没有用promise来实现，所以就需要使用一个函数来把那些库要使用的函数来进行promise实现，不过promisify只可以把一个函数来进行promise转换</span><br><span class="line">function promisify(func) &#123;</span><br><span class="line">return function(...arg) &#123;</span><br><span class="line">return new Promise((res,rej) =&gt; &#123;</span><br><span class="line">// 在node中参数基本上都是error-firstb标准形式，所以基本可以写成(err,data)形式</span><br><span class="line">func(...arg, (err,data) =&gt; &#123;</span><br><span class="line">if(err) &#123;</span><br><span class="line">rej(err);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">res(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// let readFile = promisify(fs.readFile);</span><br><span class="line">// readFile(&#x27;./number.txt&#x27;,&#x27;utf-8&#x27;).then((val) =&gt; &#123;</span><br><span class="line">// console.log(val);</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// promisifyAll 函数可以把一个库中所有的函数都promise化并添加成另外一个函数，</span><br><span class="line">// promisifyAll 函数可以为一个方法中的所有函数另外添加一个Async（promise化）的函数，可以</span><br><span class="line">function promisifyAll(obj) &#123;</span><br><span class="line">for (let key in obj) &#123;</span><br><span class="line">let fn = obj[key];</span><br><span class="line">if(typeof fn === &#x27;function&#x27;) &#123;</span><br><span class="line">obj[key + &#x27;Async&#x27;] = promisify(fn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">promisifyAll(fs);</span><br><span class="line">// fs.readFile -&gt; readFileAsync</span><br><span class="line">// fs.writeFile -&gt; readFileAsync</span><br><span class="line"></span><br><span class="line">fs.readFileAsync(&#x27;./number.txt&#x27;,&#x27;utf-8&#x27;).then((val) =&gt; &#123;</span><br><span class="line">console.log(val);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// bluebird库中有这个promisify函数和promisifyArr函数</span><br><span class="line">// let bluebird = require(&#x27;bluebird&#x27;);</span><br><span class="line">// bluebird.promisify(fs.readFile);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="FetchApi"><a href="#FetchApi" class="headerlink" title="FetchApi"></a>FetchApi</h2><h3 id="Fetch-Api-概述"><a href="#Fetch-Api-概述" class="headerlink" title="Fetch Api 概述"></a>Fetch Api 概述</h3><ul><li><p><strong>XMLHttpRequest的问题</strong></p><ul><li>所有的功能全部集中在同一个对象上，容易书写出混乱不易维护的代码</li><li>采用传统的事件驱动模式，无法适配新的 <code>Promise Api</code></li></ul></li><li><p><strong>Fetch Api 的特点</strong></p><ul><li>并非取代 <code>AJAX</code>，而是对 <code>AJAX</code> 传统 <code>API</code> 的改进</li><li>精细的功能分割：头部信息、请求信息、响应信息等均分布到不同的对象，更利于处理各种复杂的 <code>AJAX</code> 场景</li><li>使用 <code>Promise Api</code>，更利于异步代码的书写</li><li><code>Fetch Api</code> 并非 <code>ES6</code> 的内容，属于 <code>HTML5</code> 新增的 <code>Web Api</code></li><li>需要掌握网络通信的知识</li></ul></li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote><p>请求测试地址：<a href="http://101.132.72.36:5100/api/local">http://101.132.72.36:5100/api/local</a></p><p>​            <a href="http://jsonplaceholder.typicode.com/posts">http://jsonplaceholder.typicode.com/posts</a></p></blockquote><p>使用 <code>fetch</code> 函数即可立即向服务器发送网络请求</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>该函数有两个参数：</p><ol><li>必填，字符串，请求地址</li><li>选填，对象，请求配置</li></ol><p><strong>请求配置对象</strong></p><ul><li><strong>method</strong>：字符串，请求方法，默认值<code>GET</code></li><li><strong>headers</strong>：对象，请求头信息</li><li><strong>body</strong>: 请求体的内容，必须匹配请求头中的 <code>Content-Type</code></li><li><strong>mode</strong>：字符串，请求模式<ul><li><strong>cors</strong>：默认值，配置为该值，会在请求头中加入 <code>origin</code> 和 <code>referer</code></li><li><strong>no-cors</strong>：配置为该值，不会在请求头中加入 <code>origin</code> 和 <code>referer</code>，跨域的时候可能会出现问题</li><li><strong>same-origin</strong>：指示请求必须在同一个域中发生，如果请求其他域，则会报错</li></ul></li><li><strong>credentials</strong>: 如何携带凭据（<code>cookie</code>）<ul><li><strong>omit</strong>：默认值，不携带<code>cookie</code></li><li><strong>same-origin</strong>：请求同源地址时携带<code>cookie</code></li><li><strong>include</strong>：请求任何地址都携带<code>cookie</code></li></ul></li><li><strong>cache</strong>：配置缓存模式<ul><li><strong>default</strong>: 表示<code>fetch</code>请求之前将检查下<code>http</code>的缓存.</li><li><strong>no-store</strong>: 表示<code>fetch</code>请求将完全忽略<code>http</code>缓存的存在. 这意味着请求之前将不再检查下<code>http</code>的缓存, 拿到响应后, 它也不会更新<code>http</code>缓存.</li><li><strong>no-cache</strong>: 如果存在缓存, 那么<code>fetch</code>将发送一个条件查询<code>request</code>和一个正常的<code>request</code>, 拿到响应后, 它会更新<code>http</code>缓存.</li><li><strong>reload</strong>: 表示fetch请求之前将忽略<code>http</code>缓存的存在, 但是请求拿到响应后, 它将主动更新<code>http</code>缓存.</li><li><strong>force-cache</strong>: 表示<code>fetch</code>请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 除非没有任何缓存, 那么它将发送一个正常的<code>request</code>.</li><li><strong>only-if-cached</strong>: 表示<code>fetch</code>请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 如果没有缓存, 它将抛出网络错误(该设置只在mode为”<code>same-origin</code>”时有效).</li></ul></li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p><strong>fetch</strong> 函数返回一个 <strong>Promise</strong> 对象</p><ul><li>当收到服务器的返回结果后，Promise 进入resolved状态，状态数据为 Response 对象</li><li>当网络发生错误（或其他导致无法完成交互的错误）时，Promise 进入 rejected 状态，状态数据为错误信息</li></ul><p><strong>Response对象</strong></p><ul><li><strong>ok</strong>：<code>boolean</code>，当响应消息码在<code>200~299</code>之间时为<code>true</code>，其他为<code>false</code></li><li><strong>status</strong>：<code>number</code>，响应的状态码</li><li>**text()**：用于处理文本格式的 <code>Ajax</code> 响应。它从响应中获取文本流，将其读完，然后返回一个被解决为 <code>string</code> 对象的 <code>Promise</code>。</li><li>**blob()**：用于处理二进制文件格式（比如图片或者电子表格）的 <code>Ajax</code> 响应。它读取文件的原始数据，一旦读取完整个文件，就返回一个被解决为 <code>blob</code> 对象的 <code>Promise</code>。</li><li>**json()**：用于处理 <code>JSON</code> 格式的 <code>Ajax</code> 的响应。它将 <code>JSON</code> 数据流转换为一个被解决为 <code>JavaScript</code> 对象的promise。</li><li>**redirect()**：可以用于重定向到另一个 <code>URL</code>。它会创建一个新的 <code>Promise</code>，以解决来自重定向的 <code>URL</code> 的响应。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;获得信息&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getProvinces</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&quot;http://jsonplaceholder.typicode.com/posts&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> resp = <span class="keyword">await</span> fetch(url)</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> resp.json();</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getProvinces();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h3><p>除了使用基本的<code>fetch</code>方法，还可以通过创建一个<code>Request</code>对象来完成请求（实际上，<code>fetch</code>的内部会帮你创建一个<code>Request</code>对象）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Request(url地址, 配置)</span><br></pre></td></tr></table></figure><p>注意点：</p><p>尽量保证每次请求都是一个新的<code>Request</code>对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;获得信息&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> req;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRequestInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!req) &#123;</span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">&quot;http://jsonplaceholder.typicode.com/posts&quot;</span>;</span><br><span class="line">        req = <span class="keyword">new</span> Request(url, &#123;&#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(req);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> req.clone(); <span class="comment">//克隆一个全新的request对象，配置一致</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getProvinces</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> resp = <span class="keyword">await</span> fetch(getRequestInfo())</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> resp.json();</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getProvinces();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;得到所有的省份数据&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> req;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRequestInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!req) &#123;</span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">&quot;http://jsonplaceholder.typicode.com/posts&quot;</span>;</span><br><span class="line">        req = <span class="keyword">new</span> Request(url, &#123;&#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(req);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> req.clone(); <span class="comment">//克隆一个全新的request对象，配置一致</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getProvinces</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// const resp = await fetch(getRequestInfo())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resp = <span class="keyword">new</span> Response(<span class="string">`[</span></span><br><span class="line"><span class="string">    &#123;&quot;id&quot;:1, &quot;name&quot;:&quot;北京&quot;&#125;,</span></span><br><span class="line"><span class="string">    &#123;&quot;id&quot;:2, &quot;name&quot;:&quot;天津&quot;&#125;</span></span><br><span class="line"><span class="string">]`</span>, &#123;</span><br><span class="line">        <span class="attr">ok</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> getJSON(resp);</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getJSON</span>(<span class="params">resp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> json = <span class="keyword">await</span> resp.json();</span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getProvinces();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Headers-对象"><a href="#Headers-对象" class="headerlink" title="Headers 对象"></a>Headers 对象</h3><blockquote><p>在<strong>Request</strong>和<strong>Response</strong>对象内部，会将传递的请求头对象，转换为<strong>Headers</strong></p></blockquote><p><strong>Headers</strong>对象中的方法：</p><ul><li>**has(key)**：检查请求头中是否存在指定的key值</li><li><strong>get(key)</strong>: 得到请求头中对应的key值</li><li>**set(key, value)**：修改对应的键值对</li><li>**append(key, value)**：添加对应的键值对</li><li>**keys()**：得到所有的请求头键的集合</li><li>**values()**：得到所有的请求头中的值的集合</li><li>**entries()**：得到所有请求头中的键值对的集合</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;获得信息&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> req;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCommonHeaders</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printHeaders</span>(<span class="params">headers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> datas = headers.entries();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> pair <span class="keyword">of</span> datas) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`key: <span class="subst">$&#123;pair[<span class="number">0</span>]&#125;</span>，value: <span class="subst">$&#123;pair[<span class="number">1</span>]&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRequestInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!req) &#123;</span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">&quot;http://jsonplaceholder.typicode.com/posts&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> headers = getCommonHeaders();</span><br><span class="line">        headers.set(<span class="string">&quot;a&quot;</span>, <span class="number">3</span>)</span><br><span class="line">        req = <span class="keyword">new</span> Request(url, &#123;</span><br><span class="line">            headers</span><br><span class="line">        &#125;);</span><br><span class="line">        printHeaders(headers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> req.clone(); <span class="comment">//克隆一个全新的request对象，配置一致</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getProvinces</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> resp = <span class="keyword">await</span> fetch(getRequestInfo())</span><br><span class="line">    printHeaders(resp.headers);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> getJSON(resp);</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getJSON</span>(<span class="params">resp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> json = <span class="keyword">await</span> resp.json();</span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getProvinces();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>流程：</p><ol><li>客户端将文件数据发送给服务器</li><li>服务器保存上传的文件数据到服务器端</li><li>服务器响应给客户端一个文件访问地址</li></ol><blockquote><p>测试地址：<a href="http://101.132.72.36:5100/api/upload">http://101.132.72.36:5100/api/upload</a><br>键的名称（表单域名称）：<strong>imagefile</strong></p></blockquote><p>请求方法：<code>POST</code><br>请求的表单格式：<code>multipart</code> / <code>form-data</code><br>请求体中必须包含一个键值对，键的名称是服务器要求的名称，值是文件数据</p><blockquote><p><code>HTML5</code>中，<code>JS</code>仍然无法随意的获取文件数据，但是可以获取到<code>input</code>元素中，被用户选中的文件数据<br>可以利用<code>HTML5</code>提供的<code>FormData</code>构造函数来创建请求体</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;&quot;</span> alt=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;imgAvatar&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">async function upload() &#123;</span></span><br><span class="line"><span class="xml">    const inp = document.getElementById(&quot;avatar&quot;);</span></span><br><span class="line"><span class="xml">    if (inp.files.length === 0) &#123;</span></span><br><span class="line"><span class="xml">        alert(&quot;请选择要上传的文件&quot;);</span></span><br><span class="line"><span class="xml">        return;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    const formData = new FormData(); //构建请求体</span></span><br><span class="line"><span class="xml">    formData.append(&quot;imagefile&quot;, inp.files[0]);</span></span><br><span class="line"><span class="xml">    const url = &quot;http://101.132.72.36:5100/api/upload&quot;</span></span><br><span class="line"><span class="xml">    const resp = await fetch(url, &#123;</span></span><br><span class="line"><span class="xml">        method: &quot;POST&quot;,</span></span><br><span class="line"><span class="xml">        body: formData //自动修改请求头</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">    const result = await resp.json();</span></span><br><span class="line"><span class="xml">    return result;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">document.querySelector(&quot;button&quot;).onclick = async function() &#123;</span></span><br><span class="line"><span class="xml">    const result = await upload();</span></span><br><span class="line"><span class="xml">    const img = document.getElementById(&quot;imgAvatar&quot;)</span></span><br><span class="line"><span class="xml">    img.src = result.path;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h2><h3 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器(Iterator)"></a>迭代器(Iterator)</h3><h4 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h4><ul><li><p>什么是迭代？</p><ul><li>从一个数据集合中按照一定的顺序，不断取出数据的过程</li></ul></li><li><p>迭代和遍历的区别？</p><ul><li>迭代强调的是依次取数据，并不保证取多少，也不保证把所有的数据取完</li><li>遍历强调的是要把整个数据依次全部取出</li></ul></li><li><p>迭代器</p><ul><li>对迭代过程的封装，在不同的语言中有不同的表现形式，通常为对象</li><li>依照与迭代模式的思想而实现，分为内部迭代器和外部迭代器</li><li>内部迭代器：<ul><li>本身是函数，该函数内部定义好迭代规则，完全接手整个迭代过程，外部迭代只需要一次初始调用</li><li><code> Array.prototype.forEach</code>，<code>jQuery.each</code>内部迭代器</li></ul></li><li>外部迭代器：<ul><li>本身是函数，执行返回迭代对象，迭代下一个元素必须显示调用，调用复杂度增加，但灵活性增加</li><li><code>function outerIterator() &#123;&#125;</code> 外部迭代器</li></ul></li></ul></li><li><p>迭代模式</p><ul><li><p>一种设计模式，用于统一迭代过程，并规范了迭代器规格：</p></li><li><p>迭代器应该具有得到下一个数据的能力</p></li><li><p>迭代器应该具有判断是否还有后续数据的能力</p></li><li><p>提供一种方法可以顺序获得聚合对象的各个元素，是一种最简单也最常见的设计模式，它可以让用户透过特定的接口寻访集合中的每一个元素而不用了解底层的实现</p></li></ul></li><li><p>迭代器目的：</p><ul><li>从迭代模式思想中可以看出，就是要标准化迭代操作</li><li>举个例子：服务端提供数组数据给前端，前端for循环遍历，但由于业务变化，使得数据结构发生变化，返回对象或者<code>set</code>、<code>map</code>，导致前端遍历代码大量重写</li><li>解决方案<ul><li><code>ES6</code>引入<code>Interator</code>，部署在<code>NodeList</code>、<code>arguments</code>、<code>Array</code>、<code>Set</code>、Map、字符串上等数据的Symbol。iterator属性</li><li><code>使得这些数据``iterable</code>可迭代了，能进行<code>for of</code>、<code>...</code>、、<code>Array.from</code>等操作</li></ul></li></ul></li></ul><h4 id="JS中的迭代器"><a href="#JS中的迭代器" class="headerlink" title="JS中的迭代器"></a>JS中的迭代器</h4><p>JS规定，如果一个对象具有<code>next</code>方法，并且该方法返回一个对象，该对象的格式如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">value</span>: 值, <span class="attr">done</span>: 是否迭代完成&#125;</span><br></pre></td></tr></table></figure><p>则认为该对象是一个迭代器</p><p>含义：</p><ul><li><strong>next</strong>方法：用于得到下一个数据</li><li>返回的对象<ul><li><strong>value</strong>：下一个数据的值</li><li><strong>done：boolean</strong>，是否迭代完成</li></ul></li></ul><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><ul><li><p>```js<br>const arr = [1, 2, 3, 4, 5];<br>//迭代数组arr<br>const iterator = {</p><pre><code>i: 0, //当前的数组下标next() &#123;    var result = &#123;        value: arr[this.i],        done: this.i &gt;= arr.length    &#125;    this.i++;    return result;&#125;</code></pre><p>}</p><p>//让迭代器不断的取出下一个数据，直到没有数据为止<br>let data = iterator.next();<br>while (!data.done) { //只要没有迭代完成，则取出数据</p><pre><code>console.log(data.value)//进行下一次迭代data = iterator.next();</code></pre><p>}</p><p>console.log(“迭代完成”)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  const arr1 = [1, 2, 3, 4, 5];</span><br><span class="line">  const arr2 = [6, 7, 8, 9];</span><br><span class="line">  </span><br><span class="line">  // 迭代器创建函数  iterator creator</span><br><span class="line">  function createIterator(arr) &#123;</span><br><span class="line">      let i = 0;//当前的数组下标</span><br><span class="line">      return &#123; </span><br><span class="line">          next() &#123;</span><br><span class="line">              var result = &#123;</span><br><span class="line">                  value: arr[i],</span><br><span class="line">                  done: i &gt;= arr.length</span><br><span class="line">              &#125;</span><br><span class="line">              i++;</span><br><span class="line">              return result;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const iter1 = createIterator(arr1);</span><br><span class="line">  const iter2 = createIterator(arr2);</span><br></pre></td></tr></table></figure></li><li><p>```js<br> // 依次得到斐波拉契数列前面n位的值<br>// 1 1 2 3 5 8 13 …..</p><p>//创建一个斐波拉契数列的迭代器<br>function createFeiboIterator() {</p><pre><code>let prev1 = 1,    prev2 = 1, //当前位置的前1位和前2位    n = 1; //当前是第几位return &#123;    next() &#123;        let value;        if (n &lt;= 2) &#123;            value = 1;        &#125; else &#123;            value = prev1 + prev2;        &#125;        const result = &#123;            value,            done: false        &#125;;        prev2 = prev1;        prev1 = result.value;        n++;        return result;    &#125;&#125;</code></pre><p>}</p><p>const iterator = createFeiboIterator();</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 可迭代协议 与 for-of 循环</span><br><span class="line"></span><br><span class="line">#### 可迭代协议</span><br><span class="line"></span><br><span class="line">- **概念回顾**</span><br><span class="line">  - 迭代器(**iterator**)：一个具有`next`方法的对象，`next`方法返回下一个数据并且能指示是否迭代完成</span><br><span class="line">  - 迭代器创建函数（**iterator creator**）：一个返回迭代器的函数</span><br><span class="line"></span><br><span class="line">- **可迭代协议**</span><br><span class="line">  - **ES6**规定，如果一个对象具有知名符号属性```Symbol.iterator```，并且属性值是一个迭代器创建函数，则该对象是可迭代的（**iterable**）</span><br><span class="line"></span><br><span class="line">&gt; 思考：如何知晓一个对象是否是可迭代的？</span><br><span class="line">&gt; 思考：如何遍历一个可迭代对象？</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  //可迭代对象</span><br><span class="line">  var obj = &#123;</span><br><span class="line">      a: 1,</span><br><span class="line">      b: 2,</span><br><span class="line">      [Symbol.iterator]() &#123;</span><br><span class="line">          const keys = Object.keys(this);</span><br><span class="line">          let i = 0;</span><br><span class="line">          return &#123;</span><br><span class="line">              next: () =&gt; &#123;</span><br><span class="line">                  const propName = keys[i];</span><br><span class="line">                  const propValue = this[propName];</span><br><span class="line">                  const result = &#123;</span><br><span class="line">                      value: &#123;</span><br><span class="line">                          propName,</span><br><span class="line">                          propValue</span><br><span class="line">                      &#125;,</span><br><span class="line">                      done: i &gt;= keys.length</span><br><span class="line">                  &#125;</span><br><span class="line">                  i++;</span><br><span class="line">                  return result;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  for (const item of obj) &#123;</span><br><span class="line">      console.log(item); // &#123;propName:&quot;a&quot;, propValue:1&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="for-of-循环"><a href="#for-of-循环" class="headerlink" title="for-of 循环"></a>for-of 循环</h4><p><strong>for-of</strong> 循环用于遍历可迭代对象，格式如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代完成后循环结束</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">in</span> iterable)&#123;</span><br><span class="line">    <span class="comment">//iterable：可迭代对象</span></span><br><span class="line">    <span class="comment">//item：每次迭代得到的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// const iterator = arr[Symbol.iterator]();</span></span><br><span class="line"><span class="comment">// let result = iterator.next();</span></span><br><span class="line"><span class="comment">// while (!result.done) &#123;</span></span><br><span class="line"><span class="comment">//     const item = result.value; //取出数据</span></span><br><span class="line"><span class="comment">//     console.log(item);</span></span><br><span class="line"><span class="comment">//     //下一次迭代</span></span><br><span class="line"><span class="comment">//     result = iterator.next();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;<span class="number">1</span>&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// const iterator = divs[Symbol.iterator]()</span></span><br><span class="line"><span class="comment">// let result = iterator.next();</span></span><br><span class="line"><span class="comment">// while (!result.done) &#123;</span></span><br><span class="line"><span class="comment">//     const item = result.value; //取出数据</span></span><br><span class="line"><span class="comment">//     console.log(item);</span></span><br><span class="line"><span class="comment">//     //下一次迭代</span></span><br><span class="line"><span class="comment">//     result = iterator.next();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> divs) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="展开运算符与可迭代对象"><a href="#展开运算符与可迭代对象" class="headerlink" title="展开运算符与可迭代对象"></a>展开运算符与可迭代对象</h4><ul><li>展开运算符可以作用于可迭代对象，这样，就可以轻松的将可迭代对象转换为数组</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> propName = keys[i];</span><br><span class="line">                <span class="keyword">const</span> propValue = <span class="built_in">this</span>[propName];</span><br><span class="line">                <span class="keyword">const</span> result = &#123;</span><br><span class="line">                    <span class="attr">value</span>: &#123;</span><br><span class="line">                        propName,</span><br><span class="line">                        propValue</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">done</span>: i &gt;= keys.length</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [...obj];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(...obj);</span><br></pre></td></tr></table></figure><h3 id="生成器-Generator"><a href="#生成器-Generator" class="headerlink" title="生成器 (Generator)"></a>生成器 (Generator)</h3><ul><li>什么是生成器？<ul><li>生成器是一个通过构造函数<strong>Generator</strong>创建的对象，生成器既是一个迭代器，同时又是一个可迭代对象</li></ul></li><li>如何创建生成器？<ul><li>生成器的创建，必须使用生成器函数（<strong>Generator Function</strong>）</li></ul></li><li>如何书写一个生成器函数呢？</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一个生成器函数，该函数一定返回一个生成器，就是在function和函数名之间添加*号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">method</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>生成器函数内部是如何执行的？</p><ul><li>生成器函数内部是为了给生成器的每次迭代提供的数据</li><li>每次调用生成器的<code>next</code>方法，将导致生成器函数运行到下一个<code>yield</code>关键字位置</li><li><code>yield</code>是一个关键字，该关键字只能在生成器函数内部使用，表达“产生”一个迭代数据。</li><li>函数体内部<code>yield</code>表达式，产出不同的内部状态（值）</li><li>遇到<code>yield</code>即暂停</li></ul></li><li><p>有哪些需要注意的细节？</p><ul><li><p>生成器函数可以有返回值，返回值出现在第一次<code>done</code>为<code>true</code>时的<code>value</code>属性中</p></li><li><p>调用生成器的<code>next</code>方法时，可以传递参数，传递的参数会交给<code>yield</code>表达式的返回值</p></li><li><p>第一次调用<code>next</code>方法时，传参没有任何意义</p></li><li><p>在生成器函数内部，可以调用其他生成器函数，但是要注意加上<code>*</code>号</p></li><li><p><code>function</code>和函数名之间要带<code>*</code>星号</p></li></ul></li><li><p>生成器的其他<strong>API</strong></p><ul><li><strong>return</strong>方法：调用该方法，可以提前结束生成器函数，从而提前让整个迭代过程结束</li><li><strong>throw</strong>方法：调用该方法，可以在生成器中产生一个错误</li></ul></li><li><p>实例</p><ul><li>```js<br>function* test() {<pre><code>console.log(&quot;第1次运行&quot;)yield 1;console.log(&quot;第2次运行&quot;)yield 2;console.log(&quot;第3次运行&quot;)</code></pre>}const generator = test();<br>// generator.next()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">- ```js</span><br><span class="line">  const arr1 = [1, 2, 3, 4, 5];</span><br><span class="line">  const arr2 = [6, 7, 8, 9];</span><br><span class="line">  </span><br><span class="line">  // 迭代器创建函数  iterator creator</span><br><span class="line">  function* createIterator(arr) &#123;</span><br><span class="line">      for (const item of arr) &#123;</span><br><span class="line">          yield item;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const iter1 = createIterator(arr1);</span><br><span class="line">  const iter2 = createIterator(arr2);</span><br><span class="line">  // iter1/2.next()</span><br></pre></td></tr></table></figure></li><li>```js<br>//创建一个斐波拉契数列的迭代器<br>function* createFeiboIterator() {<pre><code>let prev1 = 1,    prev2 = 1, //当前位置的前1位和前2位    n = 1; //当前是第几位while (true) &#123;    if (n &lt;= 2) &#123;        yield 1;    &#125; else &#123;        const newValue = prev1 + prev2        yield newValue;        prev2 = prev1;        prev1 = newValue;    &#125;    n++;&#125;</code></pre>}const iterator = createFeiboIterator();<br>// iterator.next()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">- ```js</span><br><span class="line">  function* test() &#123;</span><br><span class="line">      console.log(&quot;第1次运行&quot;)</span><br><span class="line">      yield 1;</span><br><span class="line">      console.log(&quot;第2次运行&quot;)</span><br><span class="line">      yield 2;</span><br><span class="line">      console.log(&quot;第3次运行&quot;);</span><br><span class="line">      // 调用return，可以提前结束生成器函数，从而提前让整个迭代过程结束</span><br><span class="line">      return 10;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const generator = test();</span><br><span class="line">  // generator.next()</span><br></pre></td></tr></table></figure></li><li>```js<br> function* test() {<pre><code> console.log(&quot;函数开始&quot;) let info = yield 1; console.log(info) info = yield 2 + info; console.log(info)</code></pre> }const generator = test();<br>// generator.next()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">- ```js</span><br><span class="line">  function* t1()&#123;</span><br><span class="line">      yield &quot;a&quot;</span><br><span class="line">      yield &quot;b&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function* test() &#123;</span><br><span class="line">      yield* t1();</span><br><span class="line">      yield 1;</span><br><span class="line">      yield 2;</span><br><span class="line">      yield 3;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const generator = test();</span><br><span class="line">  // generator.next()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>生成器，异步任务控制</p><ul><li>```js<br>function* task() {<pre><code>const d = yield 1;console.log(d)// //d : 1const resp = yield fetch(&quot;http://101.132.72.36:5100/api/local&quot;)const result = yield resp.json();console.log(result);</code></pre>}run(task)function run(generatorFunc) {<pre><code>const generator = generatorFunc();let result = generator.next(); //启动任务（开始迭代）, 得到迭代数据handleResult();//对result进行处理function handleResult() &#123;    if (result.done) &#123;        return; //迭代完成，不处理    &#125;    //迭代没有完成，分为两种情况    //1. 迭代的数据是一个Promise    //2. 迭代的数据是其他数据    if (typeof result.value.then === &quot;function&quot;) &#123;        //1. 迭代的数据是一个Promise        //等待Promise完成后，再进行下一次迭代        result.value.then(data =&gt; &#123;            result = generator.next(data)            handleResult();        &#125;)    &#125; else &#123;        //2. 迭代的数据是其他数据，直接进行下一次迭代        result = generator.next(result.value)        handleResult();    &#125;&#125;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 更多的集合类型</span><br><span class="line"></span><br><span class="line">### set 集合</span><br><span class="line"></span><br><span class="line">&gt; 一直以来，`JS`只能使用数组和对象来保存多个数据，缺乏像其他语言那样拥有丰富的集合类型。因此，`ES6`新增了两种集合类型（`set` 和 `map`），用于在不同的场景中发挥作用。</span><br><span class="line"></span><br><span class="line">**set用于存放不重复的数据**</span><br><span class="line"></span><br><span class="line">- 简介：`Set`是`ES6`提供给我们的构造函数，能够造出一种新的存储数据的结构</span><br><span class="line">- 特点：只有属性值，成员值唯一（不重复）</span><br><span class="line">- 用途：可以转成数组，其本身具备去重、交集、并集，差集的作用等</span><br><span class="line"></span><br><span class="line">- 如何创建**set**集合</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    new Set(); //创建一个没有任何内容的set集合</span><br><span class="line">    </span><br><span class="line">    new Set(iterable); //创建一个具有初始内容的set集合，内容来自于可迭代对象每一次迭代的结果</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如何对<code>set</code>集合进行后续操作</p><ul><li><strong>add(数据)</strong>: 添加一个数据到<code>set</code>集合末尾，如果数据已存在，则不进行任何操作<ul><li><code>set</code>使用<code>Object.is</code>的方式判断两个数据是否相同，但是，针对<code>+0</code>和<code>-0</code>，<code>set</code>认为是相等</li></ul></li><li><strong>has(数据)</strong>: 判断<code>set</code>中是否存在对应的数据</li><li>**delete(数据)**：删除匹配的数据，返回是否删除成功</li><li>**clear()**：清空整个<code>set</code>集合</li><li><strong>size</strong>: 获取<code>set</code>集合中的元素数量，只读属性，无法重新赋值</li></ul></li><li><p>如何与数组进行相互转换</p><ul><li><p>```js<br>const s = new Set([x,x,x,x,x]);<br>// set本身也是一个可迭代对象，每次迭代的结果就是每一项的值<br>const arr = […s];</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 如何遍历</span><br><span class="line">  - 使用`for-of`循环</span><br><span class="line">  - 使用`set`中的实例方法`forEach`</span><br><span class="line"></span><br><span class="line">- 注意：`set`集合中不存在下标，因此`forEach`中的回调的第二个参数和第一个参数是一致的，均表示`set`中的每一项</span><br><span class="line"></span><br><span class="line">- 实例</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    const s1 = new Set();</span><br><span class="line">    console.log(s1);</span><br><span class="line">    </span><br><span class="line">    const s2 = new Set(&quot;asdfasfasf&quot;);</span><br><span class="line">    console.log(s2);</span><br></pre></td></tr></table></figure></li><li><p>```js<br>const s1 = new Set();</p><p>s1.add(1);<br>s1.add(2);<br>s1.add(3);<br>s1.add(1); //无效<br>s1.add(+0);<br>s1.add(-0); //无效</p><p>// for (const item of s1) {<br>//     console.log(item)<br>// }</p><p>s1.forEach((item, index, s) =&gt; {</p><pre><code>console.log(item, index, s);</code></pre><p>})<br>console.log(s1);<br>console.log(“总数为：”, s1.size);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  const arr = [45, 7, 2, 2, 34, 46, 6, 57, 8, 55, 6, 46];</span><br><span class="line">  const result = [...new Set(arr)];</span><br><span class="line">  console.log(result);</span><br><span class="line">  </span><br><span class="line">  const str = &quot;asf23sdfgsdgfsafasdfasfasfasfsafsagfdsfg&quot;;</span><br><span class="line">  const s = [...new Set(str)].join(&quot;&quot;);</span><br><span class="line">  console.log(s);</span><br></pre></td></tr></table></figure></li><li><p>```js<br>// 两个数组的并集、交集、差集 （不能出现重复项），得到的结果是一个新数组<br>const arr1 = [33, 22, 55, 33, 11, 33, 5];<br>const arr2 = [22, 55, 77, 88, 88, 99, 99];</p><p>//并集<br>// const result = […new Set(arr1.concat(arr2))];<br>console.log(“并集”, […new Set([…arr1, …arr2])]);</p><p>const cross = […new Set(arr1)].filter(item =&gt; arr2.indexOf(item) &gt;= 0);<br>//交集<br>console.log(“交集”, cross)</p><p>//差集<br>// console.log(“差集”, […new Set([…arr1, …arr2])].filter(item =&gt; arr1.indexOf(item) &gt;= 0 &amp;&amp; arr2.indexOf(item) &lt; 0 || arr2.indexOf(item) &gt;= 0 &amp;&amp; arr1.indexOf(item) &lt; 0))<br>console.log(“差集”, […new Set([…arr1, …arr2])].filter(item =&gt; cross.indexOf(item) &lt; 0))</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 手写Set</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">class MySet &#123;</span><br><span class="line">    constructor(iterator = []) &#123;</span><br><span class="line">        //验证是否是可迭代的对象</span><br><span class="line">        if (typeof iterator[Symbol.iterator] !== &quot;function&quot;) &#123;</span><br><span class="line">            throw new TypeError(`你提供的$&#123;iterator&#125;不是一个可迭代的对象`)</span><br><span class="line">        &#125;</span><br><span class="line">        this._datas = [];</span><br><span class="line">        for (const item of iterator) &#123;</span><br><span class="line">            this.add(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get size() &#123;</span><br><span class="line">        return this._datas.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(data) &#123;</span><br><span class="line">        if (!this.has(data)) &#123;</span><br><span class="line">            this._datas.push(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    has(data) &#123;</span><br><span class="line">        for (const item of this._datas) &#123;</span><br><span class="line">            if (this.isEqual(data, item)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    delete(data) &#123;</span><br><span class="line">        for (let i = 0; i &lt; this._datas.length; i++) &#123;</span><br><span class="line">            const element = this._datas[i];</span><br><span class="line">            if (this.isEqual(element, data)) &#123;</span><br><span class="line">                //删除</span><br><span class="line">                this._datas.splice(i, 1);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clear() &#123;</span><br><span class="line">        this._datas.length = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *[Symbol.iterator]() &#123;</span><br><span class="line">        for (const item of this._datas) &#123;</span><br><span class="line">            yield item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    forEach(callback) &#123;</span><br><span class="line">        for (const item of this._datas) &#123;</span><br><span class="line">            callback(item, item, this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断两个数据是否相等</span><br><span class="line">     * @param &#123;*&#125; data1 </span><br><span class="line">     * @param &#123;*&#125; data2 </span><br><span class="line">     */</span><br><span class="line">    isEqual(data1, data2) &#123;</span><br><span class="line">        if (data1 === 0 &amp;&amp; data2 === 0) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return Object.is(data1, data2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><blockquote><p>键值对（key value pair）数据集合的特点：键不可重复</p></blockquote><ul><li><p><strong>map</strong>集合专门用于存储多个键值对数据。</p></li><li><p>在<strong>map</strong>出现之前，我们使用的是对象的方式来存储键值对，键是属性名，值是属性值。</p></li><li><p>使用对象存储有以下问题：</p><ul><li>键名只能是字符串</li><li>获取数据的数量不方便</li><li>键名容易跟原型上的名称冲突</li></ul></li><li><p>如何创建<strong>Map</strong></p><ul><li><p>```js<br>new Map(); //创建一个空的map<br>new Map(iterable); //创建一个具有初始内容的map，初始内容来自于可迭代对象每一次迭代的结果，但是，它要求每一次迭代的结果必须是一个长度为2的数组，数组第一项表示键，数组的第二项表示值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 如何进行后续操作</span><br><span class="line">  - **size**：只读属性，获取当前`map`中键的数量</span><br><span class="line">  - set(键, 值)：设置一个键值对，键和值可以是任何类型</span><br><span class="line">    - 如果键不存在，则添加一项</span><br><span class="line">    - 如果键已存在，则修改它的值</span><br><span class="line">    - 比较键的方式和`set`相同</span><br><span class="line">  - **get(键)**: 根据一个键得到对应的值</span><br><span class="line">  - has(键)：判断某个键是否存在</span><br><span class="line">  - **delete(键)**：删除指定的键</span><br><span class="line">  - **clear()**: 清空`map`</span><br><span class="line"></span><br><span class="line">- 数组互相转换和**set**一样</span><br><span class="line"></span><br><span class="line">- 遍历</span><br><span class="line">  - **for-of**，每次迭代得到的是一个长度为2的数组</span><br><span class="line">  - **forEach**，通过回调函数遍历</span><br><span class="line">    - 参数`1`：每一项的值</span><br><span class="line">    - 参数`2`：每一项的键</span><br><span class="line">    - 参数`3`：**map**本身</span><br><span class="line"></span><br><span class="line">- 实例</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">     const mp1 = new Map([[&quot;a&quot;, 3], [&quot;b&quot;, 4], [&quot;c&quot;, 5]]);</span><br><span class="line">    const obj = &#123;&#125;;</span><br><span class="line">    mp1.set(obj, 6456);</span><br><span class="line">    mp1.set(&quot;a&quot;, &quot;abc&quot;);</span><br><span class="line">    mp1.set(obj, 111);</span><br><span class="line">    </span><br><span class="line">    console.log(mp1)</span><br><span class="line">    console.log(&quot;总数：&quot;, mp1.size);</span><br><span class="line">    console.log(&quot;get(&#x27;a&#x27;)&quot;, mp1.get(&quot;a&quot;));</span><br><span class="line">    console.log(&quot;has(&#x27;a&#x27;)&quot;, mp1.has(&quot;a&quot;));</span><br></pre></td></tr></table></figure></li><li><p>```js<br>const mp = new Map([</p><pre><code>[&quot;a&quot;, 3],[&quot;c&quot;, 10],[&quot;b&quot;, 4],[&quot;c&quot;, 5]</code></pre><p>]);<br>const result = […mp]<br>console.log(result);</p><p>// for (const [key, value] of mp) {<br>//     console.log(key, value)<br>// }</p><p>mp.forEach((value, key, mp) =&gt; {</p><pre><code>console.log(value, key, mp)</code></pre><p>})</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 手写Map</span><br><span class="line"></span><br><span class="line">#### ES6之实现Map</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">class MyMap &#123;</span><br><span class="line">    constructor(iterable = []) &#123;</span><br><span class="line">        //验证是否是可迭代的对象</span><br><span class="line">        if (typeof iterable[Symbol.iterator] !== &quot;function&quot;) &#123;</span><br><span class="line">            throw new TypeError(`你提供的$&#123;iterable&#125;不是一个可迭代的对象`)</span><br><span class="line">        &#125;</span><br><span class="line">        this._datas = [];</span><br><span class="line">        for (const item of iterable) &#123;</span><br><span class="line">            // item 也得是一个可迭代对象</span><br><span class="line">            if (typeof item[Symbol.iterator] !== &quot;function&quot;) &#123;</span><br><span class="line">                throw new TypeError(`你提供的$&#123;item&#125;不是一个可迭代的对象`);</span><br><span class="line">            &#125;</span><br><span class="line">            const iterator = item[Symbol.iterator]();</span><br><span class="line">            const key = iterator.next().value;</span><br><span class="line">            const value = iterator.next().value;</span><br><span class="line">            this.set(key, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set(key, value) &#123;</span><br><span class="line">        const obj = this._getObj(key);</span><br><span class="line">        if (obj) &#123;</span><br><span class="line">            //修改</span><br><span class="line">            obj.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            this._datas.push(&#123;</span><br><span class="line">                key,</span><br><span class="line">                value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get(key) &#123;</span><br><span class="line">        const item = this._getObj(key);</span><br><span class="line">        if (item) &#123;</span><br><span class="line">            return item.value;</span><br><span class="line">        &#125;</span><br><span class="line">        return undefined;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get size() &#123;</span><br><span class="line">        return this._datas.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    delete(key) &#123;</span><br><span class="line">        for (let i = 0; i &lt; this._datas.length; i++) &#123;</span><br><span class="line">            const element = this._datas[i];</span><br><span class="line">            if (this.isEqual(element.key, key)) &#123;</span><br><span class="line">                this._datas.splice(i, 1);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clear() &#123;</span><br><span class="line">        this._datas.length = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据key值从内部数组中，找到对应的数组项</span><br><span class="line">     * @param &#123;*&#125; key </span><br><span class="line">     */</span><br><span class="line">    _getObj(key) &#123;</span><br><span class="line">        for (const item of this._datas) &#123;</span><br><span class="line">            if (this.isEqual(item.key, key)) &#123;</span><br><span class="line">                return item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    has(key) &#123;</span><br><span class="line">        return this._getObj(key) !== undefined;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断两个数据是否相等</span><br><span class="line">     * @param &#123;*&#125; data1 </span><br><span class="line">     * @param &#123;*&#125; data2 </span><br><span class="line">     */</span><br><span class="line">    isEqual(data1, data2) &#123;</span><br><span class="line">        if (data1 === 0 &amp;&amp; data2 === 0) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return Object.is(data1, data2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *[Symbol.iterator]() &#123;</span><br><span class="line">        for (const item of this._datas) &#123;</span><br><span class="line">            yield [item.key, item.value];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    forEach(callback) &#123;</span><br><span class="line">        for (const item of this._datas) &#123;</span><br><span class="line">            callback(item.value, item.key, this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const mp1 = new MyMap([</span><br><span class="line">    [&quot;a&quot;, 3],</span><br><span class="line">    [&quot;b&quot;, 4],</span><br><span class="line">    [&quot;c&quot;, 5]</span><br><span class="line">]);</span><br><span class="line">const obj = &#123;&#125;;</span><br><span class="line">mp1.set(obj, 6456);</span><br><span class="line">mp1.set(&quot;a&quot;, &quot;abc&quot;);</span><br><span class="line">mp1.set(obj, 111);</span><br><span class="line"></span><br><span class="line">// for (const item of mp1) &#123;</span><br><span class="line">//     console.log(item)</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// const result = [...mp1];</span><br><span class="line">// console.log(result)</span><br><span class="line">mp1.forEach((a1, a2, a3) =&gt; &#123;</span><br><span class="line">    console.log(a1, a2, a3);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="ES5之实现Map"><a href="#ES5之实现Map" class="headerlink" title="ES5之实现Map"></a>ES5之实现Map</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原生Map特性</span></span><br><span class="line"><span class="comment">//1.不重复</span></span><br><span class="line"><span class="comment">//2.属性不只是字符串，还可以是 &#123;&#125; null [] function number</span></span><br><span class="line"><span class="comment">//3.实现方法 delete set get has clear </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myMap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//桶长度 = 8</span></span><br><span class="line">    <span class="built_in">this</span>.bucketLength = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">myMap.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//初始化 桶 长度8</span></span><br><span class="line">    <span class="built_in">this</span>.bucket = <span class="keyword">new</span> <span class="built_in">Array</span>( <span class="built_in">this</span>.bucketLength );</span><br><span class="line">    <span class="comment">//循环遍历桶添加初始化值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="built_in">this</span>.bucket.length; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>.bucket[i] = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;bucket&#x27;</span> + i,</span><br><span class="line">            <span class="attr">next</span>: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hash算法</span></span><br><span class="line"><span class="comment">//1. [0,8]</span></span><br><span class="line"><span class="comment">//2. 重复算值固定</span></span><br><span class="line">myMap.prototype.makeHash = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// key 可能是 string number boolean null  NaN [] &#123;&#125; function()&#123;&#125; undefine</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> key !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//如果为数字，hash直接等于key</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> key == <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//number NaN</span></span><br><span class="line">            <span class="comment">//判断key是否等于NaN</span></span><br><span class="line">            hash = <span class="built_in">Object</span>.is(key,<span class="literal">NaN</span>) ? <span class="number">0</span> : key;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> key == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//null &#123;&#125; [] </span></span><br><span class="line">            hash = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> key == <span class="string">&#x27;boolean&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//true 1  |  false 0</span></span><br><span class="line">            hash += key;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//undefine function() &#123;&#125;</span></span><br><span class="line">            hash = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//string</span></span><br><span class="line">        <span class="comment">//&#x27;a&#x27; &#x27;ab&#x27; &#x27;....很多个字符&#x27;</span></span><br><span class="line">        <span class="comment">//长度大于等于3，取字符串前三个字符的ascii，累加 取余 变为0-8（规则由自己定义）</span></span><br><span class="line">        <span class="comment">//长度不大于3时，就取长度位数进行计算</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//判断如果字符没有第三位时返回0，有时就返回该位的ascii码</span></span><br><span class="line">            hash += key[i] ? key[i].charCodeAt(<span class="number">0</span>) : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash % <span class="number">8</span>; <span class="comment">//生成0-8范围</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set方法</span></span><br><span class="line">myMap.prototype.set = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取hash</span></span><br><span class="line">    <span class="keyword">let</span> hash = <span class="built_in">this</span>.makeHash(key);</span><br><span class="line">    <span class="comment">//获取桶的序号</span></span><br><span class="line">    <span class="keyword">let</span> oTempBucket = <span class="built_in">this</span>.bucket[hash];</span><br><span class="line">    <span class="comment">//循环条件，oTempBucket.next是否有值</span></span><br><span class="line">    <span class="keyword">while</span>(oTempBucket.next) &#123;</span><br><span class="line">        <span class="comment">//如果next中的值与传入的值相同，那么就让next的value等于传入的value</span></span><br><span class="line">        <span class="keyword">if</span> (oTempBucket.next.key == key) &#123;</span><br><span class="line">            oTempBucket.next.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//如果在key不等于next.key，就让oTempBucket自己等于自己的下一个，再次循环比较</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            oTempBucket = oTempBucket.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//给最后一个oTempBucket添加值</span></span><br><span class="line">    oTempBucket.next = &#123;</span><br><span class="line">        <span class="attr">key</span>: key,</span><br><span class="line">        <span class="attr">value</span>: value,</span><br><span class="line">        <span class="attr">next</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get方法</span></span><br><span class="line">myMap.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取hash</span></span><br><span class="line">    <span class="keyword">let</span> hash = <span class="built_in">this</span>.makeHash(key);</span><br><span class="line">    <span class="comment">//获取桶的序号</span></span><br><span class="line">    <span class="keyword">let</span> oTempBucket = <span class="built_in">this</span>.bucket[hash];</span><br><span class="line">    <span class="comment">//循环条件，oTempBucket.next是否有值</span></span><br><span class="line">    <span class="keyword">while</span>(oTempBucket.next) &#123;</span><br><span class="line">        <span class="comment">//如果next中的值与传入的值相同，那么就返回next中的value</span></span><br><span class="line">        <span class="keyword">if</span>(oTempBucket.next.key == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> oTempBucket.next.value;</span><br><span class="line">        <span class="comment">//如果在key不等于next.key，就让oTempBucket自己等于自己的下一个，再次循环比较</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            oTempBucket = oTempBucket.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果oTempBucket.next没有值，直接返回undefine</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//delete方法</span></span><br><span class="line">myMap.prototype.delete = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取hash</span></span><br><span class="line">    <span class="keyword">let</span> hash = <span class="built_in">this</span>.makeHash(key);</span><br><span class="line">    <span class="comment">//获取桶的序号</span></span><br><span class="line">    <span class="keyword">let</span> oTempBucket = <span class="built_in">this</span>.bucket[hash];</span><br><span class="line">    <span class="comment">//循环条件，oTempBucket.next是否有值</span></span><br><span class="line">    <span class="keyword">while</span> (oTempBucket.next) &#123;</span><br><span class="line">        <span class="comment">//如果next中的值与传入的值相同，那么就将next的指向改变为next.next</span></span><br><span class="line">        <span class="keyword">if</span>(oTempBucket.next.key == key) &#123;</span><br><span class="line">            oTempBucket.next = oTempBucket.next.next;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//如果传入的key不等于next.key，就让oTempBucket自己等于自己的下一个，再次循环比较</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            oTempBucket = oTempBucket.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//has方法</span></span><br><span class="line">myMap.prototype.has = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取hash</span></span><br><span class="line">    <span class="keyword">let</span> hash = <span class="built_in">this</span>.makeHash(key);</span><br><span class="line">    <span class="comment">//获取桶的序号</span></span><br><span class="line">    <span class="keyword">let</span> oTempBucket = <span class="built_in">this</span>.bucket[hash];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(oTempBucket.next) &#123;</span><br><span class="line">        <span class="keyword">if</span>(oTempBucket.next.key == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            oTempBucket = oTempBucket.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//clear方法</span></span><br><span class="line">myMap.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> oMp = <span class="keyword">new</span> myMap();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;yzl&#x27;</span>&#125;;</span><br><span class="line">oMp.set(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;yzl&#x27;</span>);</span><br><span class="line">oMp.set(<span class="string">&#x27;name1&#x27;</span>,<span class="string">&#x27;yzl&#x27;</span>);</span><br><span class="line">oMp.set(obj,<span class="string">&#x27;----&#x27;</span>);</span><br><span class="line">oMp.set(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="string">&#x27;----&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="WeakSet-和-WeakMap"><a href="#WeakSet-和-WeakMap" class="headerlink" title="WeakSet 和 WeakMap"></a>WeakSet 和 WeakMap</h3><h4 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h4><p>使用该集合，可以实现和<strong>set</strong>一样的功能，不同的是：</p><ol><li><p><strong>它内部存储的对象地址不会影响垃圾回收</strong></p></li><li><p>只能添加对象</p></li><li><p>不能遍历（不是可迭代的对象）、没有<code>size</code>属性、没有<code>forEach</code>方法</p></li><li><p>```js<br> let obj = {</p><pre><code> name: &quot;yj&quot;, age: 18</code></pre><p> };<br>let obj2 = obj;<br>const set = new WeakSet();<br>set.add(obj);</p><p>obj = null;<br>obj2 = null;<br>console.log(set)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### WeakMap</span><br><span class="line"></span><br><span class="line">类似于**map**的集合，不同的是：</span><br><span class="line"></span><br><span class="line">1. **它的键存储的地址不会影响垃圾回收**</span><br><span class="line"></span><br><span class="line">2. 它的键只能是对象</span><br><span class="line"></span><br><span class="line">3. 不能遍历（不是可迭代的对象）、没有`size`属性、没有`forEach`方法</span><br><span class="line"></span><br><span class="line">4. ```html</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">   &lt;!-- &#123; id:&quot;1&quot;, name:&quot;姓名1&quot; &#125; --&gt;</span><br><span class="line">       &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">   &lt;!-- &#123; id:&quot;2&quot;, name:&quot;姓名2&quot; &#125; --&gt;</span><br><span class="line">       &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">   &lt;!-- &#123; id:&quot;3&quot;, name:&quot;姓名3&quot; &#125; --&gt;</span><br><span class="line">       &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       const wmap = new WeakMap();</span><br><span class="line">       let lis = document.querySelectorAll(&quot;li&quot;);</span><br><span class="line">       for (const li of lis) &#123;</span><br><span class="line">           wmap.set(li, &#123;</span><br><span class="line">               id: li.innerHTML,</span><br><span class="line">               name: `姓名$&#123;li.innerHTML&#125;`</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">       lis[0].remove();</span><br><span class="line">       lis = null;</span><br><span class="line">   </span><br><span class="line">       console.log(wmap);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="代理与反射"><a href="#代理与反射" class="headerlink" title="代理与反射"></a>代理与反射</h2><h3 id="【回顾】属性描述符"><a href="#【回顾】属性描述符" class="headerlink" title="【回顾】属性描述符"></a>【回顾】属性描述符</h3><ul><li><p><strong>Property Descriptor</strong> 属性描述符  是一个普通对象，用于描述一个属性的相关信息</p></li><li><p>通过<code>Object.getOwnPropertyDescriptor(对象, 属性名)</code>可以得到一个对象的某个属性的属性描述符</p><ul><li><strong>value</strong>：属性值</li><li><strong>configurable</strong>：该属性的描述符是否可以修改</li><li><strong>enumerable</strong>：该属性是否可以被枚举</li><li><strong>writable</strong>：该属性是否可以被重新赋值</li></ul></li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 如果需要为某个对象添加属性时 或 修改属性时， 配置其属性描述符，可以使用下面的代码:</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">Object.defineProperty(对象, 属性名, 描述符);</span><br><span class="line">Object.defineProperties(对象, 多个属性的描述符)</span><br></pre></td></tr></table></figure></blockquote><h4 id="存取器属性"><a href="#存取器属性" class="headerlink" title="存取器属性"></a>存取器属性</h4><ul><li><p>属性描述符中，如果配置了 <code>get</code> 和 <code>set</code> 中的任何一个，则该属性，不再是一个普通属性，而变成了存取器属性。</p></li><li><p><code>get</code> 和 <code>set</code>配置均为函数，如果一个属性是存取器属性，则读取该属性时，会运行<code>get</code>方法，将<code>get</code>方法得到的返回值作为属性值；如果给该属性赋值，则会运行<code>set</code>方法。</p></li><li><p>存取器属性最大的意义，在于可以控制属性的读取和赋值。</p></li></ul><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><ul><li><p>```js<br> const obj = {</p><pre><code> a: 1, b: 2</code></pre><p> }</p><p> // Object.defineProperty(obj, “a”, {<br> //     value: 3,<br> //     configurable: false,<br> //     enumerable: false,<br> //     writable: false<br> // })</p><p> Object.defineProperties(obj, {</p><pre><code> a: &#123;     value: 3,     configurable: false,     enumerable: false,     writable: false &#125;</code></pre><p> })</p><p>obj.a = 10;<br>console.log(obj);</p><p>// console.log(obj)<br>// // for (const prop in obj) {<br>// //     console.log(prop);<br>// // }</p><p>// const props = Object.keys(obj)<br>// console.log(props)</p><p>// const values = Object.values(obj);<br>// console.log(values);</p><p>// const desc = Object.getOwnPropertyDescriptor(obj, “a”)</p><p>// console.log(desc);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  const obj = &#123;</span><br><span class="line">      b: 2</span><br><span class="line">  &#125;</span><br><span class="line">  Object.defineProperty(obj, &quot;a&quot;, &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">          console.log(&quot;运行了属性a的get函数&quot;)</span><br><span class="line">          return obj._a;</span><br><span class="line">      &#125;,</span><br><span class="line">      set(val)&#123;</span><br><span class="line">          console.log(&quot;运行了属性a的set函数&quot;, val)</span><br><span class="line">          obj._a = val;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // obj.a = 20 + 10; // set(20 + 10)</span><br><span class="line">  // console.log(obj.a); // console.log(get())</span><br><span class="line">  </span><br><span class="line">  // obj.a = obj.a + 1; // set(obj.a + 1)   set(get() + 1)</span><br><span class="line">  // console.log(obj.a);</span><br><span class="line">  </span><br><span class="line">  // console.log(obj.a)</span><br><span class="line">  </span><br><span class="line">  obj.a = 10;</span><br><span class="line">  console.log(obj.a);</span><br></pre></td></tr></table></figure></li><li><p>```js<br>obj = {</p><pre><code>name: &quot;adsf&quot;</code></pre><p>}</p><p>Object.defineProperty(obj, “age”, {</p><pre><code>get() &#123;    return obj._age;&#125;,set(val) &#123;    if (typeof val !== &quot;number&quot;) &#123;        throw new TypeError(&quot;年龄必须是一个数字&quot;)    &#125;    if (val &lt; 0) &#123;        val = 0;    &#125; else if (val &gt; 200) &#123;        val = 200;    &#125;    obj._age = val;&#125;</code></pre><p>})</p><p>obj.age = “Asdfasasdf”;<br>console.log(obj.age);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">      &lt;span&gt;姓名：&lt;/span&gt;</span><br><span class="line">  &lt;span id=&quot;name&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">      &lt;span&gt;年龄：&lt;/span&gt;</span><br><span class="line">  &lt;span id=&quot;age&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      const spanName = document.getElementById(&quot;name&quot;)</span><br><span class="line">  const spanAge = document.getElementById(&quot;age&quot;)</span><br><span class="line">  </span><br><span class="line">  const user = &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  Object.defineProperties(user, &#123;</span><br><span class="line">      name: &#123;</span><br><span class="line">          get() &#123;</span><br><span class="line">              return spanName.innerText;</span><br><span class="line">          &#125;,</span><br><span class="line">          set(val) &#123;</span><br><span class="line">              spanName.innerText = val;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      age: &#123;</span><br><span class="line">          get() &#123;</span><br><span class="line">              return +spanAge.innerText;</span><br><span class="line">          &#125;,</span><br><span class="line">          set(val) &#123;</span><br><span class="line">              if (typeof val !== &quot;number&quot;) &#123;</span><br><span class="line">                  throw new TypeError(&quot;年龄必须是一个数字&quot;)</span><br><span class="line">              &#125;</span><br><span class="line">              if (val &lt; 0) &#123;</span><br><span class="line">                  val = 0;</span><br><span class="line">              &#125; else if (val &gt; 200) &#123;</span><br><span class="line">                  val = 200;</span><br><span class="line">              &#125;</span><br><span class="line">              spanAge.innerText = val;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><ul><li><p><strong>Reflect</strong>是什么？</p><ul><li><code>Reflect</code>是一个内置的<code>JS</code>对象，它提供了一系列方法，可以让开发者通过调用这些方法，访问一些<code>JS</code>底层功能</li><li>由于它类似于其他语言的<strong>反射</strong>，因此取名为<code>Reflect</code></li></ul></li><li><p>它可以做什么？</p><ul><li>使用<code>Reflect</code>可以实现诸如 属性的赋值与取值、调用普通函数、调用构造函数、判断属性是否存在与对象中  等等功能</li></ul></li><li><p>这些功能不是已经存在了吗？为什么还需要用<code>Reflect</code>实现一次？</p><ul><li>有一个重要的理念，在<code>ES5</code>就被提出：减少魔法、让代码更加纯粹</li><li>这种理念很大程度上是受到函数式编程的影响</li><li><code>ES6</code>进一步贯彻了这种理念，它认为，对属性内存的控制、原型链的修改、函数的调用等等，这些都属于底层实现，属于一种魔法，因此，需要将它们提取出来，形成一个正常的<code>API</code>，并高度聚合到某个对象中，于是，就造就了<code>Reflect</code>对象</li><li>因此，你可以看到<code>Reflect</code>对象中有很多的<code>API</code>都可以使用过去的某种语法或其他<code>API</code>实现。</li></ul></li><li><p>它里面到底提供了哪些<code>API</code>呢？</p><ul><li><strong>Reflect.set(target, propertyKey, value)</strong>: 设置对象<code>target</code>的属性<code>propertyKey</code>的值为<code>value</code>，等同于给对象的属性赋值</li><li><strong>Reflect.get(target, propertyKey)</strong>: 读取对象<code>target</code>的属性<code>propertyKey</code>，等同于读取对象的属性值</li><li>**Reflect.apply(target, thisArgument, argumentsList)**：调用一个指定的函数，并绑定this和参数列表。等同于函数调用</li><li>**Reflect.deleteProperty(target, propertyKey)**：删除一个对象的属性</li><li>**Reflect.defineProperty(target, propertyKey, attributes)**：类似于<code>Object.defineProperty</code>，不同的是如果配置出现问题，返回false而不是报错</li><li>**Reflect.construct(target, argumentsList)**：用构造函数的方式创建一个对象</li><li><strong>Reflect.has(target, propertyKey)</strong>: 判断一个对象是否拥有一个属性</li><li>其他<strong>API</strong>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></li></ul></li><li><p>实例</p><ul><li>```js<br>const obj = {<pre><code>a: 1,b: 2</code></pre>}// obj.a = 10;Reflect.set(obj, “a”, 10);console.log(Reflect.get(obj, “a”))<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  // function method(a, b)&#123;</span><br><span class="line">  //     console.log(&quot;method&quot;, a, b);</span><br><span class="line">  // &#125;</span><br><span class="line">  </span><br><span class="line">  // // method(3, 4);</span><br><span class="line">  </span><br><span class="line">  // Reflect.apply(method, null, [3, 4])</span><br><span class="line">  </span><br><span class="line">  // const obj = &#123;</span><br><span class="line">  //     a: 1,</span><br><span class="line">  //     b: 2</span><br><span class="line">  // &#125;</span><br><span class="line">  </span><br><span class="line">  // // delete obj.a;</span><br><span class="line">  </span><br><span class="line">  // Reflect.deleteProperty(obj, &quot;a&quot;);</span><br><span class="line">  </span><br><span class="line">  // console.log(obj);</span><br><span class="line">  </span><br><span class="line">  // function Test(a, b) &#123;</span><br><span class="line">  //     this.a = a;</span><br><span class="line">  //     this.b = b;</span><br><span class="line">  // &#125;</span><br><span class="line">  </span><br><span class="line">  // // const t = new Test(1, 3);</span><br><span class="line">  // const t = Reflect.construct(Test, [1, 3]);</span><br><span class="line">  // console.log(t)</span><br><span class="line">  </span><br><span class="line">  const obj = &#123;</span><br><span class="line">      a: 1,</span><br><span class="line">      b: 2</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // console.log(&quot;a&quot; in obj);</span><br><span class="line">  console.log(Reflect.has(obj, &quot;a&quot;));</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Proxy-代理"><a href="#Proxy-代理" class="headerlink" title="Proxy 代理"></a>Proxy 代理</h3><blockquote><p>代理：提供了修改底层实现的方式</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代理一个目标对象</span></span><br><span class="line"><span class="comment">//target：目标对象</span></span><br><span class="line"><span class="comment">//handler：是一个普通对象，其中可以重写底层实现</span></span><br><span class="line"><span class="comment">//返回一个代理对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target, propertyKey, value</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(target, propertyKey, value);</span></span><br><span class="line">        <span class="comment">// target[propertyKey] = value;</span></span><br><span class="line">        <span class="built_in">Reflect</span>.set(target, propertyKey, value);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, propertyKey</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Reflect</span>.has(target, propertyKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, propertyKey);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">has</span>(<span class="params">target, propertyKey</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// console.log(proxy);</span></span><br><span class="line"><span class="comment">// proxy.a = 10;</span></span><br><span class="line"><span class="comment">// console.log(proxy.a);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.d);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> proxy);</span><br></pre></td></tr></table></figure><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>有一个对象，是观察者，它用于观察另外一个对象的属性值变化，当属性值变化后会收到一个通知，可能会做一些事。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.container</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个观察者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;container&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> ob = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> props = <span class="built_in">Object</span>.keys(target);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">of</span> props) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(ob, prop, &#123;</span><br><span class="line">            <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> target[prop];</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">                target[prop] = val;</span><br><span class="line">                render();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">of</span> <span class="built_in">Object</span>.keys(ob)) &#123;</span><br><span class="line">            html += <span class="string">`</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span&gt;<span class="subst">$&#123;prop&#125;</span>：&lt;/span&gt;&lt;span&gt;<span class="subst">$&#123;ob[prop]&#125;</span>&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        div.innerHTML = html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ob;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = observer(target)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.container</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个观察者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;container&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">target, prop, value</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">Reflect</span>.set(target, prop, value);</span><br><span class="line">            render();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params">target, prop</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    render();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">of</span> <span class="built_in">Object</span>.keys(target)) &#123;</span><br><span class="line">            html += <span class="string">`</span></span><br><span class="line"><span class="string">&lt;p&gt;&lt;span&gt;<span class="subst">$&#123;prop&#125;</span>：&lt;/span&gt;&lt;span&gt;<span class="subst">$&#123;target[prop]&#125;</span>&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        div.innerHTML = html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = observer(target)</span><br></pre></td></tr></table></figure><h3 id="偷懒的构造函数"><a href="#偷懒的构造函数" class="headerlink" title="偷懒的构造函数"></a>偷懒的构造函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ConstructorProxy</span>(<span class="params">Class, ...propNames</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(Class, &#123;</span><br><span class="line">        <span class="function"><span class="title">construct</span>(<span class="params">target, argumentsList</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> obj = <span class="built_in">Reflect</span>.construct(target, argumentsList)</span><br><span class="line">            propNames.forEach(<span class="function">(<span class="params">name, i</span>) =&gt;</span> &#123;</span><br><span class="line">                obj[name] = argumentsList[i];</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserProxy = ConstructorProxy(User, <span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;lastName&quot;</span>, <span class="string">&quot;age&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> UserProxy(<span class="string">&quot;袁&quot;</span>, <span class="string">&quot;进&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monster</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MonsterProxy = ConstructorProxy(Monster, <span class="string">&quot;attack&quot;</span>, <span class="string">&quot;defence&quot;</span>, <span class="string">&quot;hp&quot;</span>, <span class="string">&quot;rate&quot;</span>, <span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> MonsterProxy(<span class="number">10</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">30</span>, <span class="string">&quot;怪物&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m);</span><br></pre></td></tr></table></figure><h3 id="可验证的函数参数"><a href="#可验证的函数参数" class="headerlink" title="可验证的函数参数"></a>可验证的函数参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> a + b;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validatorFunction</span>(<span class="params">func, ...types</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(func, &#123;</span><br><span class="line">        <span class="function"><span class="title">apply</span>(<span class="params">target, thisArgument, argumentsList</span>)</span> &#123;</span><br><span class="line">            types.forEach(<span class="function">(<span class="params">t, i</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> arg = argumentsList[i]</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> arg !== t) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`第<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>个参数<span class="subst">$&#123;argumentsList[i]&#125;</span>不满足类型<span class="subst">$&#123;t&#125;</span>`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(target, thisArgument, argumentsList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sumProxy = validatorFunction(sum, <span class="string">&quot;number&quot;</span>, <span class="string">&quot;number&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sumProxy(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> a + b;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validatorFunction</span>(<span class="params">func, ...types</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...argumentsList</span>) </span>&#123;</span><br><span class="line">        types.forEach(<span class="function">(<span class="params">t, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> arg = argumentsList[i]</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> arg !== t) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`第<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>个参数<span class="subst">$&#123;argumentsList[i]&#125;</span>不满足类型<span class="subst">$&#123;t&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> func(...argumentsList)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sumProxy = validatorFunction(sum, <span class="string">&quot;number&quot;</span>, <span class="string">&quot;number&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sumProxy(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="增强的数组功能"><a href="#增强的数组功能" class="headerlink" title="增强的数组功能"></a>增强的数组功能</h2><h3 id="新增的数组API"><a href="#新增的数组API" class="headerlink" title="新增的数组API"></a>新增的数组API</h3><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><ul><li><strong>Array.of(…args)</strong>: 使用指定的数组项创建一个新数组</li><li><strong>Array.from(arg)</strong>: 通过给定的类数组或可迭代对象 创建一个新的数组。</li></ul><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul><li><strong>find(callback)</strong>: 用于查找满足条件的第一个元素</li><li>**findIndex(callback)**：用于查找满足条件的第一个元素的下标</li><li>**fill(data)**：用指定的数据填充满数组所有的内容</li><li><strong>copyWithin(target, start?, end?)</strong>: 在数组内部完成复制</li><li>**includes(data)**：判断数组中是否包含某个值，使用<code>Object.is</code>匹配</li></ul><h3 id="扩展-类型化数组"><a href="#扩展-类型化数组" class="headerlink" title="[扩展]类型化数组"></a>[扩展]类型化数组</h3><h4 id="数字存储的前置知识"><a href="#数字存储的前置知识" class="headerlink" title="数字存储的前置知识"></a>数字存储的前置知识</h4><ul><li>计算机必须使用固定的位数来存储数字，无论存储的数字是大是小，在内存中占用的空间是固定的。</li><li><code>n</code>位的无符号整数能表示的数字是<code>2^n</code>个，取值范围是：<code>0 ~ 2^n - 1</code></li><li><code>n</code>位的有符号整数能表示的数字是<code>2^n</code>个，取值范围是：<code>-2^(n-1) ~ 2^(n-1) - 1</code></li><li>浮点数表示法可以用于表示整数和小数，目前分为两种标准：<ul><li><code>32</code>位浮点数：又称为单精度浮点数，它用<code>1</code>位表示符号，<code>8</code>位表示阶码，<code>23</code>位表示尾数</li><li><code>64</code>位浮点数：又称为双精度浮点数，它用<code>1</code>位表示符号，<code>11</code>位表示阶码，<code>52</code>位表示尾数</li></ul></li><li><code>JS</code>中的所有数字，均使用双精度浮点数保存</li></ul><h4 id="类型化数组"><a href="#类型化数组" class="headerlink" title="类型化数组"></a>类型化数组</h4><p>类型化数组：用于优化多个数字的存储</p><p>具体分为：</p><ul><li><p><strong>Int8Array</strong>： <code>8</code>位有符号整数（<code>-128 ~ 127</code>）</p></li><li><p><strong>Uint8Array</strong>： <code>8</code>位无符号整数（<code>0 ~ 255</code>）</p></li><li><p><strong>Int16Array</strong>: …</p></li><li><p><strong>Uint16Array</strong>: …</p></li><li><p><strong>Int32Array</strong>: …</p></li><li><p><strong>Uint32Array</strong>: …</p></li><li><p><strong>Float32Array</strong>:</p></li><li><p><strong>Float64Array</strong></p></li><li><p>如何创建数组</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">new</span> 数组构造函数(长度)</span><br><span class="line"></span><br><span class="line">数组构造函数.of(元素...)</span><br><span class="line"></span><br><span class="line">数组构造函数.from(可迭代对象)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> 数组构造函数(其他类型化数组)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>得到长度</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数组.length   <span class="comment">//得到元素数量</span></span><br><span class="line">数组.byteLength <span class="comment">//得到占用的字节数</span></span><br></pre></td></tr></table></figure><ul><li>其他的用法跟普通数组一致，但是：<ul><li>不能增加和删除数据，类型化数组的长度固定</li><li>一些返回数组的方法，返回的数组是同类型化的新数组</li></ul></li></ul><h4 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const arr = new Int32Array(10);</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Uint8Array</span>.of(<span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// console.log(arr.length);</span></span><br><span class="line"><span class="comment">// console.log(arr.byteLength);</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = <span class="built_in">Int32Array</span>.of(<span class="number">35111</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="keyword">new</span> <span class="built_in">Int8Array</span>(arr1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1 === arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1, arr2);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Int8Array</span>.of(<span class="number">125</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">11</span>);</span><br><span class="line"><span class="keyword">const</span> arr2 = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr[1] = 100;</span></span><br><span class="line"><span class="comment">// console.log(arr);</span></span><br><span class="line"><span class="comment">// console.log(arr[1])</span></span><br><span class="line"><span class="comment">// for (const item of arr) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(item)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr[4] = 1000; //无效</span></span><br><span class="line"><span class="comment">// delete arr[0]; //无效</span></span><br><span class="line"><span class="comment">// console.log(arr)</span></span><br></pre></td></tr></table></figure><h3 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h3><blockquote><p><strong>ArrayBuffer</strong>：一个对象，用于存储一块固定内存大小的数据。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(字节数)</span><br></pre></td></tr></table></figure><ul><li>可以通过属性<code>byteLength</code>得到字节数，可以通过方法<code>slice</code>得到新的<code>ArrayBuffer</code></li></ul><h4 id="读写ArrayBuffer"><a href="#读写ArrayBuffer" class="headerlink" title="读写ArrayBuffer"></a>读写ArrayBuffer</h4><ul><li><p>使用<strong>DataView</strong></p><ul><li>通常会在需要混用多种存储格式时使用<code>DataView</code></li></ul></li><li><p>使用类型化数组</p></li><li><p>实际上，每一个类型化数组都对应一个<code>ArrayBuffer</code>，如果没有手动指定<code>ArrayBuffer</code>，类型化数组创建时，会新建一个<code>ArrayBuffer</code></p></li><li><p>练习</p><ul><li><p>```js<br>//创建了一个用于存储10个字节的内存空间<br>const bf = new ArrayBuffer(10);</p><p>const bf2 = bf.slice(3, 5);</p><p>console.log(bf, bf2);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  //创建了一个用于存储10个字节的内存空间</span><br><span class="line">  const bf = new ArrayBuffer(10);</span><br><span class="line">  </span><br><span class="line">  const view = new DataView(bf, 3, 4);</span><br><span class="line">  </span><br><span class="line">  // console.log(view);</span><br><span class="line">  </span><br><span class="line">  view.setInt16(1, 3);</span><br><span class="line">  console.log(view);</span><br><span class="line">  </span><br><span class="line">  console.log(view.getInt16(1));</span><br></pre></td></tr></table></figure></li><li><p>```js<br> const bf = new ArrayBuffer(10); //10个字节的内存</p><p>const arr1 = new Int8Array(bf);<br>const arr2 = new Int16Array(bf);<br>console.log(arr1 === arr2);<br>console.log(arr1.buffer === arr2.buffer);</p><p>arr1[0] = 10;</p><p>console.log(arr1)<br>console.log(arr2);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  const bf = new ArrayBuffer(10); //10个字节的内存</span><br><span class="line">  const arr = new Int16Array(bf);</span><br><span class="line">  arr[0] = 2344; //操作了两个字节</span><br><span class="line">  console.log(arr);</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Es6&quot;&gt;&lt;a href=&quot;#Es6&quot; class=&quot;headerlink&quot; title=&quot;Es6&quot;&gt;&lt;/a&gt;Es6&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;介绍：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ES2015&lt;/code&gt;年退出&lt;code&gt;JavaScript&lt;/code&gt;新版本也叫&lt;code&gt;ES2015&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;现在已经&lt;code&gt;ES7（2016）&lt;/code&gt;，&lt;code&gt;ES8（2017）&lt;/code&gt;，&lt;code&gt;ES9（2018）&lt;/code&gt;很多新增内容仍是填&lt;/li&gt;
&lt;li&gt;普遍使用的依然是&lt;code&gt;ES6&lt;/code&gt;，&lt;code&gt;ES7&lt;/code&gt;部分内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ES7&lt;/code&gt;及后面版本浏览器或node环境未完全支持，但已有&lt;code&gt;babel&lt;/code&gt;工具可对其进行编译支持（转成&lt;code&gt;ES5&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;所以：新版本语言只是在原有基础上新增了一些语法糖，执行时还会转换为&lt;code&gt;ES5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ECMAScript&lt;/strong&gt;、&lt;strong&gt;JavaScript&lt;/strong&gt;、&lt;strong&gt;NodeJs&lt;/strong&gt;，它们的区别是什么？&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ECMAScript&lt;/code&gt;：简称&lt;code&gt;ES&lt;/code&gt;，是一个语言标准（循环、判断、变量、数组等数据类型）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JavaScript&lt;/code&gt;：运行在浏览器端的语言，该语言使用&lt;code&gt;ES&lt;/code&gt;标准，&lt;code&gt;ES + web api = JavaScript&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NodeJs&lt;/code&gt;：运行在服务器端的语言，该语言使用&lt;code&gt;ES&lt;/code&gt;标准，&lt;code&gt;ES + node api = JavaScript&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ECMAScript&lt;/strong&gt;有哪些关键的版本？&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ES3.0&lt;/code&gt;：&lt;code&gt;1999&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ES5.0&lt;/code&gt;：&lt;code&gt;2009&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ES6.0&lt;/code&gt;：&lt;code&gt;2015&lt;/code&gt;，从该版本不再使用数字作为编号，而使用年份，也叫&lt;code&gt;ES2015&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ES7.0&lt;/code&gt;：&lt;code&gt;2016&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为什么&lt;strong&gt;ES6&lt;/strong&gt;如此重要？&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ES6&lt;/code&gt;解决&lt;code&gt;JS&lt;/code&gt;无法开发大型应用的语言层面的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为什么要学习&lt;code&gt;ES6&lt;/code&gt;？&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ES6&lt;/code&gt;引入的语言新特性，更具规范性，易读性，方便操作，简化了大型项目开发的复杂程度、降低了出错概率，提升了开发效率&lt;/li&gt;
&lt;li&gt;大部分公司（不代表所有，代表着一个趋势）都在用&lt;code&gt;ES6&lt;/code&gt;开发，已成为开发，求职必会内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://github.com/haodex/haodex.github.io.git/categories/JavaScript/"/>
    
    
    <category term="ES6" scheme="https://github.com/haodex/haodex.github.io.git/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/11/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/11/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-11-08T07:35:53.000Z</published>
    <updated>2021-11-08T07:50:45.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式就是一个表达式，用来查找一个有指定【特点】的表达式，规则匹配的。</p><h2 id="正则表达式方法"><a href="#正则表达式方法" class="headerlink" title="正则表达式方法"></a>正则表达式方法</h2><h3 id="正则表达式定义的方式"><a href="#正则表达式定义的方式" class="headerlink" title="正则表达式定义的方式"></a>正则表达式定义的方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var reg = /abc/;</span><br><span class="line">var reg = new RegExp(&#x27;abc&#x27;);</span><br></pre></td></tr></table></figure><h3 id="正则表达式使用方法"><a href="#正则表达式使用方法" class="headerlink" title="正则表达式使用方法"></a>正则表达式使用方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg.test(str);</span><br><span class="line">str.match(reg);</span><br></pre></td></tr></table></figure><h3 id="特殊属性-i-g-m"><a href="#特殊属性-i-g-m" class="headerlink" title="特殊属性  i/g/m"></a>特殊属性  i/g/m</h3><ul><li><p><code>g</code>代表的是<code>global</code>全局匹配</p></li><li><p><code>i</code>代表<code>ignoreCase</code>忽略大小写，</p></li><li><p><code>m</code>代表<code>multiline</code>多行匹配，</p></li></ul><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>具有特殊含义的字符。</p><ul><li><p><code>\</code>   转义字符</p></li><li><p><code>|</code>   或</p></li></ul><h4 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h4> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[abc]  查找方括号内的任意一个字符</span><br><span class="line"></span><br><span class="line">[^abc]   查找任何不在方括号内的字符</span><br><span class="line"></span><br><span class="line">[0-9]  查找0-9之间的数字</span><br><span class="line"></span><br><span class="line">[a-z]  查找任何小写字母</span><br><span class="line"></span><br><span class="line">[A-Z]  查找任何大写字母</span><br><span class="line"></span><br><span class="line">[A-z]  查找任何字母</span><br><span class="line"></span><br><span class="line">(red|blue|green)  查找指定字符串（子表达式）</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.       查找单个字符，除了换行和行结束符。</span><br><span class="line">\w      查找单词字符（匹配字母、数字、下划线。等价于&#x27;[A-Za-z0-9_]&#x27;）</span><br><span class="line">\W      查找非单词字符</span><br><span class="line">\d      查找数字</span><br><span class="line">\D      查找非数字</span><br><span class="line">\s      查找空白字符 </span><br><span class="line">\S      查找非空白字符</span><br><span class="line">\b      查找单词边界</span><br><span class="line">\B      查找非单词边界</span><br><span class="line">\n      查找换行符</span><br><span class="line">\f      查找换页符</span><br><span class="line">\r      查找回车符</span><br><span class="line">\t      查找制表符</span><br><span class="line">\v      查找垂直制表符</span><br><span class="line">\uxxx   查找以十六位进制数xxxx规定的Unicode字符</span><br><span class="line">[\u4e00-\u9fa5] 所有中文字符</span><br></pre></td></tr></table></figure><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下均遵循贪婪匹配：</span><br><span class="line"></span><br><span class="line">n+      匹配任何包含至少一个n的字符</span><br><span class="line">n*      匹配任何包含0个或多个n的字符</span><br><span class="line">n?      匹配任何0个或一个n的字符</span><br><span class="line">n&#123;X&#125;    匹配X个n的序列字符串</span><br><span class="line">n&#123;X,Y&#125;  匹配X至Y个n的序列字符串</span><br><span class="line">n$      匹配以n结尾的字符串</span><br><span class="line">^n      匹配任何以n开头的字符串</span><br><span class="line">?=n     正向肯定预查匹配任何后面紧接着指定字符串n的字符串</span><br><span class="line">匹配n前面的那个位置</span><br><span class="line">?!n     正向否定预查匹配任何其后没有紧接着指定字符串n的字符串</span><br><span class="line">匹配除了n前面的那个位置，?=n的反面意思</span><br><span class="line">?&lt;=n    反向肯定预查匹配任何前面紧跟着指定字符串n的字符串</span><br><span class="line">匹配n后面的那个位置</span><br><span class="line">?&lt;!n    反向否定预查匹配任何前面没有紧接着指定字符串n的字符串</span><br><span class="line">匹配除了n后面的那个位置，?&lt;=n的反面意思</span><br><span class="line">非贪婪匹配：</span><br><span class="line">n+?    n*? ...</span><br></pre></td></tr></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(?:n)   匹配时子表达式中没有这一项（不补获分组）</span><br></pre></td></tr></table></figure><h3 id="RegExp对象属性"><a href="#RegExp对象属性" class="headerlink" title="RegExp对象属性"></a>RegExp对象属性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global      查看RegExp对象是否具有g标志</span><br><span class="line">ignoreCase  查看RegExp对象是否具有i标志</span><br><span class="line">multiline   查看RegExp对象是否具有m标志</span><br><span class="line">source      查看正则表达式源文本</span><br><span class="line">lastIndex   一个整数标志开始下一次匹配的字符位置（一般与exec一起使用）</span><br></pre></td></tr></table></figure><h3 id="RegExp对象方法"><a href="#RegExp对象方法" class="headerlink" title="RegExp对象方法"></a>RegExp对象方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compile    编译正则表达式。（就是改变这个正则表达式）</span><br><span class="line">exec       检索字符串中指定的值。返回找到的值，并确定其位置。</span><br><span class="line">test       检索字符串中指定的值。返回 true 或 false。</span><br></pre></td></tr></table></figure><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search          检索正则表达式相匹配的值</span><br><span class="line">match           查找所有符合正则匹配条件的结果</span><br><span class="line">replace替换与正则表达式匹配的字符串</span><br><span class="line">split           把字符串分割成数组(注： 用字表达式分割的话会保留子表达式)</span><br></pre></td></tr></table></figure><h2 id="正则类型匹配"><a href="#正则类型匹配" class="headerlink" title="正则类型匹配"></a>正则类型匹配</h2><h3 id="字符匹配题"><a href="#字符匹配题" class="headerlink" title="字符匹配题"></a>字符匹配题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配16进制颜色</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/^#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g</span>;</span><br><span class="line"><span class="comment">// 匹配24小时时间</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/^(0?[0-9]|[01][0-9]|[2][0-3]):(0?[0-9]|[0-5][0-9])$/</span>;</span><br><span class="line"><span class="comment">// 匹配日期（格式：2017-06-10）</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/^([0-9]&#123;4&#125;)-([0][1-9]|[1][0-2])-([0][0-9]|[12][0-9]|[3][12])$/</span>;</span><br><span class="line"><span class="comment">// 匹配window文件路径（格式：盘符:\\文件夹\文件夹\文件夹\）</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/^[a-zA-Z]:\\([^\\:&lt;&gt;?|*&quot;\r\n/]+\/)*([^\\:&lt;&gt;?*&quot;|\r\n/]+)?$/</span>;</span><br><span class="line"><span class="comment">// 匹配id</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/id=&quot;[^&quot;]*&quot;/</span>;</span><br></pre></td></tr></table></figure><h3 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h3><ul><li>对于位置的理解，我们可以理解成空字符 “”。<ul><li>比如 “hello” 字符串等价于如下的形式：</li><li><code>&quot;hello&quot; == &quot;&quot; + &quot;h&quot; + &quot;&quot; + &quot;e&quot; + &quot;&quot; + &quot;l&quot; + &quot;&quot; + &quot;l&quot; + &quot;&quot; + &quot;o&quot; + &quot;&quot;;</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配开头和结尾，并替换#</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/^|$/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str.replace(regexp,<span class="string">&quot;#&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配单词边界，并替换#</span></span><br><span class="line"><span class="keyword">var</span> regexo = <span class="regexp">/\b/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;[JS] Lesson_01.mp4&quot;</span>;</span><br><span class="line">str.replace(regexp,<span class="string">&quot;#&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非单词边界，并替换#</span></span><br><span class="line"><span class="keyword">var</span> regexo = <span class="regexp">/\B/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;[JS] Lesson_01.mp4&quot;</span>;</span><br><span class="line">str.replace(regexp,<span class="string">&quot;#&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配l字符前面的位置</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/(?=l)/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(regexp,<span class="string">&#x27;#&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配除了n前面的那个位置，?=n的反面意思</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/(?!l)/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(regexp,<span class="string">&#x27;#&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配l字符后面的位置</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/(?&lt;=l)/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(regexp,<span class="string">&#x27;#&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配除了n后面的那个位置，?=n的反面意思</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/(?&lt;!l)/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(regexp,<span class="string">&#x27;#&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不匹配任何东西的正则</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/.^/</span>;</span><br><span class="line"><span class="comment">// 因为此正则要求只有一个字符，但该字符后面是开头，而这样的字符串是不存在的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把123456789变成123,456,789</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/(?!^)(?=(\d&#123;3&#125;)+$)/g</span>;</span><br></pre></td></tr></table></figure><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><blockquote><ol><li> 正则表达式实现aabb的形式变成bbaa</li><li>给10000000000三位打点 变成 10.000.000.000<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/(?!^)(?=(\d&#123;3&#125;)+$)/g</span>;</span><br></pre></td></tr></table></figure></li><li> 字符串去重 aaaaaaaaaaaaaaaaaaaaaabbbbbbbbcccccccccc变成abc</li><li> 把the-first-name转换成小驼峰式theFirstName</li><li> 匹配结尾的数字</li><li> 统一空格数</li><li> 判断字符串是不是由数字构成</li><li> 删除字符串中的空格</li><li> 身份证号匹配</li><li> 将字符串”select student.*,result.* from student inner join result on student.id = result.studentid” 和字符串”select * from student “中的student替换成key值   </li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;p&gt;正则表达式就是一个表达式，用来查找一个有指定【特点】的表达式，规则匹配的。&lt;/p&gt;
&lt;h2 id=&quot;正则表达式方法&quot;&gt;&lt;a href=&quot;#正则表达式方法&quot; class=&quot;headerlink&quot; title=&quot;正则表达式方法&quot;&gt;&lt;/a&gt;正则表达式方法&lt;/h2&gt;&lt;h3 id=&quot;正则表达式定义的方式&quot;&gt;&lt;a href=&quot;#正则表达式定义的方式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式定义的方式&quot;&gt;&lt;/a&gt;正则表达式定义的方式&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var reg = /abc/;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var reg = new RegExp(&amp;#x27;abc&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;正则表达式使用方法&quot;&gt;&lt;a href=&quot;#正则表达式使用方法&quot; class=&quot;headerlink&quot; title=&quot;正则表达式使用方法&quot;&gt;&lt;/a&gt;正则表达式使用方法&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;reg.test(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(reg);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;特殊属性-i-g-m&quot;&gt;&lt;a href=&quot;#特殊属性-i-g-m&quot; class=&quot;headerlink&quot; title=&quot;特殊属性  i/g/m&quot;&gt;&lt;/a&gt;特殊属性  i/g/m&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;g&lt;/code&gt;代表的是&lt;code&gt;global&lt;/code&gt;全局匹配&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;i&lt;/code&gt;代表&lt;code&gt;ignoreCase&lt;/code&gt;忽略大小写，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;m&lt;/code&gt;代表&lt;code&gt;multiline&lt;/code&gt;多行匹配，&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;特殊字符&quot;&gt;&lt;a href=&quot;#特殊字符&quot; class=&quot;headerlink&quot; title=&quot;特殊字符&quot;&gt;&lt;/a&gt;特殊字符&lt;/h3&gt;&lt;p&gt;具有特殊含义的字符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\&lt;/code&gt;   转义字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;|&lt;/code&gt;   或&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;方括号&quot;&gt;&lt;a href=&quot;#方括号&quot; class=&quot;headerlink&quot; title=&quot;方括号&quot;&gt;&lt;/a&gt;方括号&lt;/h4&gt; &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[abc]  查找方括号内的任意一个字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[^abc]   查找任何不在方括号内的字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0-9]  查找0-9之间的数字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[a-z]  查找任何小写字母&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[A-Z]  查找任何大写字母&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[A-z]  查找任何字母&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(red|blue|green)  查找指定字符串（子表达式）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="正则表达式" scheme="https://github.com/haodex/haodex.github.io.git/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
    <category term="正则表达式" scheme="https://github.com/haodex/haodex.github.io.git/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 &amp; CSS3</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/11/08/HTML5%20&amp;%20CSS3/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/11/08/HTML5%20&amp;%20CSS3/</id>
    <published>2021-11-08T07:35:53.000Z</published>
    <updated>2021-11-11T09:58:14.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="HTML5结构"><a href="#HTML5结构" class="headerlink" title="HTML5结构"></a>HTML5结构</h2><hr><ul><li><code>HTML5</code> 是新一代的 <code>HTML</code></li><li><code>DTD</code>声明改变    <code>&lt;!DOCTYPE html&gt;</code><ul><li>新的结构标签            </li></ul>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文档申明 文档类型申明，html代表html5的文档类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--字符编码，charset=&#x27;utf-8&#x27;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;utf-8&#x27;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">版本兼容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.省略引号，当属性值（&lt;、&gt;、=、单引号、双引号、空字符串）时，属性两边的引号可以省略，如&lt;input type=text&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.省略属性值，具有布尔值的属性，比如disabled，readonly，致谢属性值代表true，如：&lt;input type=checkbox checked&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><h3 id="常用的一些新的结构标签"><a href="#常用的一些新的结构标签" class="headerlink" title="常用的一些新的结构标签"></a>常用的一些新的结构标签</h3><hr><ul><li><p>结构标签：（块状标签）有意义的<code>div</code></p><ul><li><code>header</code>：标记定义一个页面或一个区域的头部</li><li><code>footer</code>：标记定义一个页面或一个区域的底部</li><li><code>nav</code>：标记定义导航链接</li><li><code>article</code>：标记定义一篇文章</li><li><code>section</code>：标记定义一个区域</li><li><code>aside</code>：侧边栏导航</li><li><code>hgroup</code>：标记定义文件中一个区块的相关信息</li><li><code>flgure</code>：标记定义一组媒体内容以及它们的标题（图像）</li><li><code>figcaption</code>：标签定义<code>figure</code>元素的标题</li></ul></li><li><p>多媒体交互标签</p><ul><li><code>video</code>：标记定义一个视频</li><li><code>audio</code>：标记定义音频内容</li><li><code>source</code>：标记定义媒体资源</li><li><code>canvas</code>：标记定义画布（图片）</li><li><code>embed</code>：标记定义外部的可交互的内容或插件，比如<code>flash</code></li></ul></li><li><p>特殊样式标签</p><ul><li><code>mark</code>：突出显示文字</li><li><code>meter</code>：刻度百分占比</li><li><code>progress</code>：进度条</li><li><code>wbr</code>：长单词换行位置</li></ul></li><li><p>兼容性不是很好的标签</p><ul><li><code>dialog</code>：定义一个对话框</li><li><code>bdi</code>：单独设置文字播放方式（<code>dir=&#39;rti&#39; dir=&#39;ltr&#39;</code>）</li><li><code>details / summary</code>：描述部分的详情<code>summary</code>为<code>details</code>的标题</li><li><code>wbr</code>：长单词换行位置</li><li><code>datalist</code></li></ul></li><li><p>补充说明</p><ul><li><code>small</code> 这个元素表示边栏评论，如附属细则</li><li><code>cite</code>这个元素可用于显示作品标题（图书、电影、诗歌等）</li><li><code>adress</code>这个元素显示<code>article</code>或整个文档的合同信息，且位于<code>footer</code>这个元素之中</li><li><code>time</code>显示人和机器可读的日期和时间，而且机器可读的时间戳是属性<code>datetime</code>的值第二个可选的是<code>pubtime</code>用于表示出版日期值</li></ul></li></ul><h3 id="删除的HTML标签"><a href="#删除的HTML标签" class="headerlink" title="删除的HTML标签"></a>删除的<code>HTML</code>标签</h3><hr><ul><li><p>纯表现的元素：</p><ul><li><code>basefont</code></li><li><code>big</code></li><li><code>center</code></li><li><code>font</code></li><li><code>s</code></li><li><code>strike</code></li><li><code>tt</code></li><li><code>u</code></li></ul></li><li><p>对可用性产生负面影响的元素：</p><ul><li><code>frame</code></li><li><code>frameset</code></li><li><code>noframes</code></li><li>产生混淆的元素：<ul><li><code>acronym</code></li><li><code>applet</code></li><li><code>isindex</code></li><li><code>dir</code></li></ul></li></ul></li><li><p><strong>重新定义的<code>HTML</code>标签</strong></p><ul><li><code>&lt;b&gt;</code>  代表内联文本，通常是粗体，没有传递表示重要的意思</li><li><code>&lt;i&gt; </code> 代表内联文本，通常是斜体，没有传递表示重要的意思</li><li><code>&lt;dd&gt;</code> 可以同<code>details</code>与<code>figure</code>一同使用，定义包含文本，<code>ialog</code>也可用</li><li><code>&lt;dt&gt;</code> 可以同<code>details</code>与<code>figure</code>一同使用，汇总细节，<code>dialog</code>也可用</li><li><code>&lt;hr&gt; </code>表示主题结束，而不是水平线，虽然显示相同</li><li><code>&lt;menu&gt;</code> 重新定义用户界面的菜单，配合<code>commond</code>或者<code>menuitem</code>使用</li><li><code>&lt;small&gt;</code> 表示小字体，例如打印注释或者法律条款</li><li><code>&lt;strong&gt;</code> 表示重要性而不是强调符号</li></ul></li><li><p>崭新新的页面布局</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111700992.jpg" alt="传统的布局"></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111700528.png" alt="实例-from-dunitian"></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111700486.png" alt="草图--from-dunitian"></p><h2 id="HTML5智能表单"><a href="#HTML5智能表单" class="headerlink" title="HTML5智能表单"></a>HTML5智能表单</h2><hr><h3 id="HTML4-01-form表单复习"><a href="#HTML4-01-form表单复习" class="headerlink" title="HTML4.01 form表单复习"></a>HTML4.01 form表单复习</h3><hr><ul><li><code>input</code>表单<code>type</code>属性值<ul><li><code>type=&quot;text&quot;  </code>          单行文本输入框</li><li><code>type=&quot;password&quot; </code>  密码（<code>maxlength=&quot;&quot;</code>）</li><li><code>type=&quot;radio&quot;   </code>       单项选择（<code>checked=&quot;checked&quot;</code>）</li><li><code>type=&quot;checkbox&quot; </code>  多项选择</li><li><code>type=&quot;button&quot; </code>     按钮</li><li><code>type=&quot;submit&quot;</code>         提交</li><li><code>type=&quot;file&quot;</code>           上传文件</li><li><code>type=&quot;reset&quot;     </code>    重置</li></ul></li></ul><h3 id="HTML5智能表单-1"><a href="#HTML5智能表单-1" class="headerlink" title="HTML5智能表单"></a>HTML5智能表单</h3><hr><ul><li><code>input</code>表单<code>type</code>属性值：<ul><li><code>type=&quot;email&quot; </code> 限制用户输入必须为<code>Email</code>类型</li><li><code>type=&quot;url&quot;</code>          限制用户输入必须为<code>URL</code>类型</li><li><code>type=&quot;date&quot; </code>     限制用户输入必须为日期类型</li><li><code>type=&quot;datetime&quot;</code> 显示完整日期 含时区</li><li><code>type=&quot;datetime-local&quot; </code> 显示完整日期 不含时区</li><li><code>type=&quot;time&quot;  </code>    限制用户输入必须为时间类型</li><li><code>type=&quot;month&quot; </code>  限制用户输入必须为月类型</li><li><code>type=&quot;week&quot; </code>    限制用户输入必须为周类型</li><li><code>type=&quot;number&quot;</code> 限制用户输入必须为数字类型</li><li><code>type=&quot;range&quot;</code>    生成一个滑动条</li><li><code>type=&quot;search&quot;</code>  具有搜索意义的表单<code>results=&quot;n&quot;</code>属性</li><li><code>type=&quot;color&quot; </code>    生成一个颜色选择表单</li><li><code>type=&quot;tel&quot; </code>    显示电话号码</li></ul></li></ul><h3 id="Input-类型-Date-Pickers（日期选择器）"><a href="#Input-类型-Date-Pickers（日期选择器）" class="headerlink" title="Input 类型 - Date Pickers（日期选择器）"></a>Input 类型 - Date Pickers（日期选择器）</h3><hr><ul><li><p>**<code>HTML5</code> 拥有多个可供选取日期和时间的新输入类型：</p></li><li><p><code>date</code> 选取日、月、年</p></li><li><p><code>month</code> 选取月、年</p></li><li><p><code>week</code>  选取周和年</p></li><li><p><code>time </code>  选取时间（小时和分钟）</p></li><li><p>以下两个没有作用</p><ul><li><code>datetime</code>  选取时间、日、月、年（UTC 时间）</li><li><code>datetime-local</code>  选取时间、日、月、年（本地时间）</li></ul></li></ul><h3 id="HTML5新增表单属性"><a href="#HTML5新增表单属性" class="headerlink" title="HTML5新增表单属性"></a>HTML5新增表单属性</h3><hr><ul><li><code>required:</code> <code>required </code>内容不能为空</li><li><code>placeholder:</code> 表单提示信息</li><li><code>autofocus:</code>自动聚焦</li><li><code>pattern:</code> 正则表达式  输入的内容必须匹配到指定正则范围</li><li><code>autocomplete:</code>是否保存用户输入值<ul><li>默认为<code>on</code>，关闭提示选择<code>off</code></li></ul></li><li><code>formaction:</code> 在<code>submit</code>里定义提交地址</li><li><code>datalist:</code> 输入框选择列表配合<code>list</code>使用 <code> list</code>值为<code>datalist</code>的<code>id</code>值</li><li><code>output:</code> 计算或脚本输出</li></ul><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><hr><ul><li><p><code>validity</code>对象，通过下面的<code>valid</code>可以查看验证是否通过，如果八种验证都返回<code>true</code>,一种验证失败返回<code>false</code></p><ul><li><code>oText.addEventListener(&quot;invalid&quot;,fn1,false)</code></li><li><code>ev.preventDefault()</code>: 阻止默认事件</li><li><code>valueMissing</code>: 当输入值为空的时候，返回<code>true</code></li><li><code>typeMismatch</code>: 控件值与预期不吻合，返回<code>true</code></li><li><code>patternMismatch</code>: 输入值不满足<code>pattern</code>正则，返回<code>true</code></li><li><code>cusomError</code><ul><li><code>setCustomValidity()</code></li></ul></li></ul></li></ul><h2 id="audio-video"><a href="#audio-video" class="headerlink" title="audio/video"></a>audio/video</h2><ul><li><p>视频音频格式的简单介绍</p><ul><li>常见的视频格式<ul><li>视频的组成部分：画面、音频、编码格式</li><li>视频编码：<code>H.264</code>、<code>Theora</code>、<code>VP8</code>(<code>google</code>开源)</li></ul></li><li>常见的音频格式<ul><li>视频编码：<code>ACC</code>、<code>MP3</code>、<code>Vorbis</code></li></ul></li></ul></li><li><p><code>HTML5</code>能在完全脱离插件的情况下播放音视频,但是不是所有格式都支持。</p></li><li><p><strong>支持的视频格式：</strong></p><ul><li><code>Ogg=</code>带有<code>Theora</code>视频编码<code>+Vorbis</code>音频编码的<code>Ogg</code>文件</li><li><code>MEPG4=</code>带有<code>H.264</code>视频编码<code>+AAC</code>音频编码的<code>MPEG4</code>文件</li><li><code>WebM=</code>带有<code>VP8</code>视频编码<code>+Vorbis</code>音频编码的<code>WebM</code>格式</li></ul></li></ul><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><ul><li><p>单独用法</p><ul><li><code>&lt;audio id=&quot;audio&quot; src=&quot;./成都.mp3&quot;&gt;&lt;/audio&gt;</code></li><li><code>&lt;video id=&quot;video&quot; src=&quot;./成都.mp4&quot;&gt;&lt;/video&gt;</code></li><li>注意：<code>video</code>和<code>audio</code>的方法属性和事件是共有的</li></ul></li><li><p>多类型资源，兼容方法</p><ul><li><p>```html</p><audio id='music'>    <source src='./成都.mp3' type='audio/mpeg'>    <source src='成都.ogg' type='audio/ogg'>    您的浏览器暂不支持audio标签。播放音乐</audio><video controls="controls"  width="300">    <source src='./成都.mp4' type='video/mpeg'>    <source src='成都.avi' type='video/ogg'>    您的浏览器暂不支持video标签。播放视频</video><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 标签属性</span><br><span class="line"></span><br><span class="line">- 例：`&lt;video id=&quot;video&quot; src=&quot;./成都.mp4&quot; 属性1 属性2 属性……&gt;&lt;/video&gt;`</span><br><span class="line"></span><br><span class="line">- `autoplay` ：播放</span><br><span class="line"></span><br><span class="line">- `controls`：显示控件</span><br><span class="line"></span><br><span class="line">- `preload(none/metadata/auto)`：预加载</span><br><span class="line"></span><br><span class="line">  - `node`：不需要加载数据</span><br><span class="line">  - `metadata`：元数据，诸如时长、比特率、帧大小这样的原数据而不是媒体内容需要加载的</span><br><span class="line">  - `auto`：浏览器应当加载它认为适量的媒体内容</span><br><span class="line">  - `&lt;video id=&quot;video&quot; src=&quot;***.mp4&quot; preload=&#x27;auto&#x27;&gt;&lt;/video&gt;`</span><br><span class="line"></span><br><span class="line">- `loop`：是否循环播放视频</span><br><span class="line"></span><br><span class="line">- `poster（video独有）`：当视频不可用时，使用一张图片替代，否则是空白</span><br><span class="line"></span><br><span class="line">  - `&lt;video src=&quot;成都.mp4&quot; poster=&quot;***.jpg&quot; controls&gt;&lt;/video&gt;`</span><br><span class="line"></span><br><span class="line">- 脚本化</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    var audio = document.getElementById(&#x27;audio&#x27;);</span><br><span class="line">    var audio = new Audio(&#x27;./laojie.mp3&#x27;);</span><br><span class="line">    var video= document.createElement(&#x27;video&#x27;);</span><br><span class="line">    </span><br><span class="line">    //audio可以通过new来创建，video不可以通过new来创建</span><br></pre></td></tr></table></figure></li><li><p>设置属性值</p><ul><li><code>controls = true</code></li><li><code>loop = &#39;loop&#39;</code></li><li><code>preload = &#39;none/metadata/auto&#39;</code></li><li><code>autoplay = true</code></li><li><code>currentSrc = &#39;媒体数据的url地址&#39;</code></li></ul></li></ul></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><p><code>play()</code>：播放方法，方法运行后播放</p></li><li><p><code>pause()</code>：暂停方法，方法运行后暂停</p></li><li><p><code>load()</code>：重新加载视频/音频，用于在更改来源或其他设置后对音频/视频元素进行更新</p></li><li><p><code>addTextTrack()</code>：向音频/视频添加新的文本轨道</p></li><li><p><code>canPlayType()</code></p><ul><li><p>检测浏览器是否能播放指定的音频/视频类型</p></li><li><p>```js<br>var a = new Audio();<br>if(a.canPlayType(“audio/mp3”)){</p><pre><code>a.src=&quot;./成都.mp3&quot;;a.play();</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 属性</span><br><span class="line"></span><br><span class="line">- **playbackRate**</span><br><span class="line">  - 播放速率，用于指定媒体播放的速度，该属性值为`1.0`表示正常速度，大于`1`则表示快进，`0~1`之间表示慢放，负值表示回放</span><br><span class="line">  - 每个浏览器实现的会有差别，具体看浏览器实现</span><br><span class="line">- **volume**：</span><br><span class="line">  - 调整音量大小，介于`0`（静音）——`1`（最大音量）之间，默认为`1`，将`muted`属性设置为`true`则会进入静音模式，设置为`false`则会恢复之前指定音量继续播放</span><br><span class="line">  - 超过范围会报错`[0,1]`</span><br><span class="line">- **currentTIme / duration**</span><br><span class="line"></span><br><span class="line">  - `currentTime`：设置或返回音频/视频播放的时间位置</span><br><span class="line">  - `duration`：返回当前音频/视频的时长（`window.onload`），单位：秒</span><br><span class="line">- **played / buffered / seekable**</span><br><span class="line"></span><br><span class="line">  - `played`：返回已经播放的时间段</span><br><span class="line">  - `buffered`：返回当前已经缓冲的时间段</span><br><span class="line">    - 确定当前缓存内容的百分比</span><br><span class="line">    - `Math.floor(song.buffered.end(0) / song.duration*100);`</span><br><span class="line">  - `seekable`：返回用户可以跳转的时间段</span><br><span class="line">  - *注意：*这三个属性都是`TImeRanges`对象，每个对象都有一个`length`属性以及`start()`和`end()`方法，`length`属性表示当前的一个时间段，`start()`与`end()`分别返回当前时间段的起始时间点和结束时间点（单位是秒，起始参数是`0`）</span><br><span class="line">- **paused / seeking / ended**</span><br><span class="line"></span><br><span class="line">  - `paused`：为`true`表示播放器暂停</span><br><span class="line">  - `seeking`：为`true`表示播放器正在调到一个新的播放点，它是一个事件</span><br><span class="line">  - `ended`：如果播放器播放完并且停下来，则属性为`true`</span><br><span class="line">- **preload**：是否预加载视频/音频</span><br><span class="line">- [更多属性](https://techbrood.com/tagsref?p=ref-av-dom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 事件</span><br><span class="line"></span><br><span class="line">- 事件是当达到某个条件的时候会触发这个事件</span><br><span class="line">- `play`：开始播放的时候触发事件</span><br><span class="line">- `pause`：暂停播放的时候触发事件</span><br><span class="line">- `loadedmetadata`：浏览器获取完媒体的元数据触发</span><br><span class="line">- `loadeddata`：浏览器已经加载完当前帧数据，准备播放时触发，注意兼容`IE8`</span><br><span class="line">- `ended`：当前播放结束后触发</span><br><span class="line">- `readyState`：音频当前就绪状态</span><br><span class="line">  - 表示音频元素的当前网络状态</span><br><span class="line">  - `0 = NETWORK_EMPTY - 音频尚未初始化`</span><br><span class="line">  - `1 = NETWORK_lDLE - 音频是活动的且选取资源，但并未使用网络`</span><br><span class="line">  - `2 = NETWORK_LOADING - 浏览器正在下载数据`</span><br><span class="line">  - `3 = NETWORK_NO_SOURCE - 未找到音频来源`</span><br><span class="line">- `error`：在音频/视频`(audio/video)`加载发生错误时触发</span><br><span class="line">  - `MediaError`对象的`code`属性返回一个数字值，它表示音频 / 视频的错误状态</span><br><span class="line">  - `1 = MEDIA_ERR_ABORTED - 取回过程被用户中止`</span><br><span class="line">  - `2 = MEDIA_ERR_NETWORK - 当下载时发生错误`</span><br><span class="line">  - `3 = MEDIA_ERR_DECODE - 当解码时发生错误`</span><br><span class="line">  - `4 = MEDIA_ERR_SRC_NOT_SUPPORTED - 不支持音频/视频`</span><br><span class="line">- [更多事件](</span><br><span class="line"></span><br><span class="line">## canvas</span><br><span class="line"></span><br><span class="line">- 标签 `&lt;canvas&gt;`</span><br><span class="line">  - 不支持`canvas` 的浏览器可以看到的内容</span><br><span class="line">  - 注意：`canvas`宽高需要设置在标签中 否则绘制的东西可能出错</span><br><span class="line"></span><br><span class="line">- `canvas`的应用场景</span><br><span class="line">  - 游戏</span><br><span class="line">  - 图表</span><br><span class="line">  - 动画</span><br><span class="line">  - `codepen.io`(`HTML5`动效)</span><br><span class="line">- `canvas`发展历史</span><br><span class="line">  - 最早在`apple`的`safari1.3`中引入</span><br><span class="line">  - ie9之前的浏览器不支持`canvas`</span><br><span class="line">  - http://caniuse.com/</span><br><span class="line"></span><br><span class="line">### 使用canvas</span><br><span class="line"></span><br><span class="line">- `canvas`标签（画布）</span><br><span class="line">  </span><br><span class="line">  - `&lt;canvas width=&#x27;&#x27; height=&#x27;&#x27;&gt;&lt;/canvas&gt;`</span><br><span class="line">  </span><br><span class="line">- 获取`canvas`元素</span><br><span class="line">  - `var canvas = document.getElementsById(&#x27;mycanvas&#x27;)`</span><br><span class="line"></span><br><span class="line">- 获得`canvas`上下文对象（画笔）</span><br><span class="line">  - `var ctx = canvas.getContext(&#x27;2d&#x27;);`</span><br><span class="line">  - 因为`canvas`是画`2d`图形的</span><br><span class="line">  - `WebGL`绘图是画`3d`图形的</span><br><span class="line">  </span><br><span class="line">- 注意：</span><br><span class="line">  - 元素对象（`canvas`元素）和上下文对象（通过`getContext(&#x27;2d&#x27;)`⽅方法获取到的`CanvasRenderingContext2D`对象）</span><br><span class="line">  - 元素对象相当于我们的画布，上下文对象相当于画笔，我们接下来的所有操作是基于上下文对象的</span><br><span class="line"></span><br><span class="line">- `ctx`是画笔，就是`canvas`的上下文对象</span><br><span class="line"></span><br><span class="line">- ```javascript</span><br><span class="line">  &lt;!-- 画布 --&gt;</span><br><span class="line">  &lt;canvas id=&#x27;myCanvas&#x27; width=&#x27;&#x27; height=&#x27;&#x27;&gt;&lt;/canvas&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      var myCanvas = document.getElementById(&#x27;myCanvas&#x27;); //获取canvas对象</span><br><span class="line">  var ctx = myCanvas.getContext(&#x27;2d&#x27;); //获取mycanvas的上下文对象</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="线段"><a href="#线段" class="headerlink" title="线段"></a>线段</h3><ul><li><code>moveTo(x,y)</code>：起始坐标点<code>x，y</code>（将触笔移动到<code>x,y</code>点）</li><li><code>lineTo(x,y)</code>：从起始点绘制到<code>x,y</code>点</li><li><code>stroke()</code>：触笔方法 画线  默认为黑色</li><li><code>closePath()</code>：闭合当前路径，和回到起始点的区别</li><li><code>fill()</code>：填充方法</li><li><code>fillStyle = color</code>：更改填充颜色</li><li><code>strokeStyle = color</code>：更改线段颜色</li><li><code>lineWidth = size</code>：设置线段宽度</li><li><code>beginPath()</code>：结束路径，开启一段新的路径</li><li><code>save()</code>：保存当前画布</li><li><code>restore()</code>：释放<code>save()</code>保存的画布</li><li>重点<ul><li><code>fill</code>和<code>stroke</code>方法都是作用在当前的所有子路径</li><li>完成一条路径后要重新开始另一条路径时必须使用<code>beginPath()</code>方法, <code>betinPath</code>开始子路径的一个新的集合</li></ul></li></ul><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><ul><li><code>rect(x,y,w,h)</code>：创建一个矩形<ul><li><code>x,y</code>代表起始点，<code>w,h</code>代表宽高</li></ul></li><li><code>fillRect(x,y,w,h)</code>：绘制填充的矩形</li><li><code>strokeRect(x,y,w,h)</code>：绘制空心矩形（无填充）</li><li><code>clearRect(x,y,w,h)</code>：擦除当前矩形区域<ul><li><code>x,y</code>代表起始点，<code>w,h</code>代表宽高</li></ul></li><li>注意：<ul><li><code>fillRect</code>和<code>strokeRect</code>都会自动结束路径</li></ul></li></ul><h3 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h3><h4 id="弧度"><a href="#弧度" class="headerlink" title="弧度"></a>弧度</h4><ul><li><code>arc(起始x位置,起始y位置,半径,起始弧度,结束弧度,弧形的方向)</code>：弧度<ul><li><code>ctx.arc(250,250,100,0,Math.PI()/2,0)</code></li><li>弧度的方向，<code>0</code>顺时针<code>1</code>逆时针</li></ul></li><li><code>arcTo(x1,y1,x2,y2,r)</code>：画布上创建介于两个切线之间的弧/曲线<ul><li><code>x1</code>,<code>y1</code> 坐标一  </li><li><code>x2</code>,<code>y2</code>坐标二   </li><li><code>r</code>：圆弧半斤</li><li>绘制的弧线与当前点和<code>x1,y1</code>连线，<code>x1,y1</code>和<code>x2,y2</code>连线都相切</li></ul></li></ul><h4 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h4><ul><li><code>quadraticCurveTo(x1,y1,ex,ey)</code>：二次贝塞尔曲线<ul><li><code>x1,y1</code>：控制点</li><li><code>ex,ey</code>：结束点</li></ul></li><li><code>bezierCurveTo(x1,y1,x2,y2,ex,ey)</code>：三次贝塞尔曲线<ul><li><code>x1,y1,x2,y2</code>：控制点</li><li><code>ex,ey</code>：结束点</li></ul></li></ul><h3 id="坐标轴转换"><a href="#坐标轴转换" class="headerlink" title="坐标轴转换"></a>坐标轴转换</h3><ul><li><code>translate(x,y)</code>：重新映射画布上的(0,0)位置<ul><li>移动整张画布的位置</li></ul></li><li><code>scale(sx,sy)</code>：缩放当前<code>canvas</code>绘图</li><li><code>rotate(Math.PI)</code>：旋转当前的绘图，<code>弧度公式=角度*PI/180</code></li><li><code>setTransform(a,b,c,d,e,f)</code>：先重置画布再转换<ul><li>参数：<code>setTransform(水平旋转,水平倾斜,垂直倾斜,垂直缩放,水平移动,垂直移动)</code></li></ul></li><li><code>transform(a,b,c,d,e,f)</code>：不重置画布转换，和<code>setTransfrom</code>差不多</li></ul><h3 id="填充图案"><a href="#填充图案" class="headerlink" title="填充图案"></a>填充图案</h3><ul><li><p><code>createPattern(image,&#39;repeat|repeat-x|repeat-y|no-repeat&#39;)</code></p></li><li><p>不止可以添加<code>img</code>元素，还可以添加<code>canvas</code>元素</p></li><li><p>```javascript<br>img元素(image对象),canvas元素，video元素（有图型的）</p><p><canvas id="canvas1" width="500" height="500"></canvas></p><p>var oCanvas1 = document.getElementById(‘canvas1’);<br>var ctx = oCanvas1.getContext(‘2d’);<br>var w = oCanvas1.width; //画布的宽<br>var h = oCanvas1.height; //画布的高</p><p>var oImg = new Image();<br>oImg.src = ‘图片的路径’;</p><p>oImg.onload = function() {</p><pre><code>var fill = ctx.createPattern(oImg,&#39;repeat&#39;);//oImg元素和是否重复ctx.fillStyle = fill;ctx.fillRect(0,0,w,h); //坐标点和宽高</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 渐变</span><br><span class="line"></span><br><span class="line">- `createLinearGradient(x1,y1,x2,y2)`：线性渐变</span><br><span class="line"></span><br><span class="line">  - `x1`,`y1`起始坐标点</span><br><span class="line">  - `x2`,`y2`结束坐标点</span><br><span class="line">  - 线性渐变，必须在填充渐变的区域里定义渐变，否则没有效果</span><br><span class="line"></span><br><span class="line">- `createRedialGradient(x1,y1,r1,x2,y2,r2)`：径向渐变</span><br><span class="line"></span><br><span class="line">  - `x1`,`y1`,`r1`内圆坐标及半径</span><br><span class="line"></span><br><span class="line">  - `x2`,`y2`,`r2`外圆坐标及半径</span><br><span class="line"></span><br><span class="line">  - `addColorStop`(位置,颜色)  位置:渐变点  `0-1`之间 可多个</span><br><span class="line"></span><br><span class="line">  - `bg.addColorStop(p,color)` ：添加颜色</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    //线性渐变</span><br><span class="line">    &lt;canvas id=&quot;canvas1&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">    </span><br><span class="line">    var oCanvas1 = document.getElementById(&#x27;canvas1&#x27;);</span><br><span class="line">    var ctx = oCanvas1.getContext(&#x27;2d&#x27;);</span><br><span class="line">    var w = oCanvas1.width; //画布的宽</span><br><span class="line">    var h = oCanvas1.height; //画布的高</span><br><span class="line">    var bg = ctx.createLinearGradient(0,0,0,h); //背景渐变</span><br><span class="line">    </span><br><span class="line">    bg.addColorStop(0,&#x27;red&#x27;); </span><br><span class="line">    bg.addColorStop(1,&#x27;green&#x27;);</span><br><span class="line">    ctx.fillStyle = bg;</span><br><span class="line">    ctx.fillRect(0,0,w,h);</span><br><span class="line">    </span><br><span class="line">    //径向渐变</span><br><span class="line">    &lt;canvas id=&quot;canvas1&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">    </span><br><span class="line">    var oCanvas1 = document.getElementById(&#x27;canvas1&#x27;);</span><br><span class="line">    var ctx = oCanvas1.getContext(&#x27;2d&#x27;);</span><br><span class="line">    var w = oCanvas1.width; //画布的宽</span><br><span class="line">    var h = oCanvas1.height; //画布的高</span><br><span class="line">    var bg = ctx.createRadialGradient(250,250,50,250,250,100);</span><br><span class="line">    </span><br><span class="line">    bg.addColorStop(0,&#x27;red&#x27;);</span><br><span class="line">    bg.addColorStop(0.5,&#x27;green&#x27;);</span><br><span class="line">    bg.addColorStop(1,&#x27;white&#x27;);</span><br><span class="line">    ctx.fillStyle = bg;</span><br><span class="line">    ctx.fillRect(0,0,500,500);</span><br></pre></td></tr></table></figure></li></ul><h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><ul><li><code>ctx.shadowColor = color</code>：阴影颜色，默认颜色：<code>rgba(0,0,0,0);</code></li><li><code>ctx.shadowOffsetX = x</code>：阴影<code>x</code>轴偏移量</li><li><code>ctx.shadowOffsetY = y</code>：阴影<code>y</code>轴偏移量</li><li><code>ctx.shadowBlur</code>：阴影模糊程度</li><li>这里的阴影偏移量不受坐标系变幻的影响</li></ul><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ul><li><code>ctx.fillText(text,x,y,[,maxWidth])</code>：文本填充<ul><li>参数值：<code>text</code>:文本，<code>x,y</code>为坐标轴，<code>[,maxWidth]</code>:最大文本宽度</li></ul></li><li><code>ctx.strokeText(text,x,y,[,maxWidth])</code>：描边字体（空心文本）<ul><li>参数值：<code>text</code>:文本，<code>x,y</code>为坐标轴，<code>[,maxWidth]</code>:最大文本宽度</li></ul></li><li><code>ctx.measureText(text)</code>：测量文本尺寸<ul><li><code>text</code>：文字</li></ul></li><li><code>ctx.font = &#39;字体大小 字体类型&#39;</code>：尺寸、字体缺一不可</li><li>文本对齐方式<ul><li><code>ctx.textBaseline</code>：垂直方向</li><li><code>ctx.textAline</code>：水平方向</li><li>下图中小圆点就是x,y轴的起始位置，可以用<code>textBaseline</code>和<code>textAlign</code>更改圆点的位置</li><li><code>x,y</code>轴从字体的左下角开始</li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111700800.jpg"></li></ul></li></ul><h3 id="线段样式"><a href="#线段样式" class="headerlink" title="线段样式"></a>线段样式</h3><ul><li><p><code>lineCap</code>：端点样式</p><ul><li><code>butt</code>(默认值),<code>round</code>(圆角),<code>square</code>(高度多出线宽一半)</li></ul></li><li><p><code>lineJoin</code>：边界连接点样式</p><ul><li>属性：<code>miter</code>(默认值),<code>round</code>(圆角),<code>bevel</code>(斜角)</li></ul></li><li><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111700725.jpg" alt="样式"></p></li><li><p><code>ctx.miterLimit;</code></p><ul><li>当<code>lineJoin</code>是<code>miter</code>时，用于控制斜接部分的长度</li><li>如果斜接长度超过 <code>miterLimit</code> 的值，变成<code>bevel</code></li><li>注:实际运算是大于<code>limit*lineWidth/2</code>的值，了解就好</li></ul></li></ul><h3 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h3><ul><li><p><code>ctx.clip()</code>：当前路径外的区域不再绘制</p></li><li><p>```javascript<br>var oCanvas1 = document.getElementById(‘canvas1’);<br>var ctx = oCanvas1.getContext(‘2d’);</p><p>ctx.beginPath()<br>ctx.arc(200,200,50,0,Math.PI*2,0);<br>ctx.closePath();<br>ctx.clip();<br>ctx.fillRect(100,100,300,300);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">- 注：可在`clip()` 前用 `save()` 方法保存，后续通过 `restore()` 方法恢复</span><br><span class="line"></span><br><span class="line">### 合成</span><br><span class="line"></span><br><span class="line">- `ctx.globalAlpha = 0-1`：全局透明度</span><br><span class="line">- `ctx.globalCompositeOperation = &#x27;source-over&#x27;`：新像素和原像素的合并方式</span><br><span class="line">  - `11`种值，默认`source-over`，`w3c`标准</span><br><span class="line"></span><br><span class="line">- ```javascript</span><br><span class="line">  var oCanvas1 = document.getElementById(&#x27;canvas1&#x27;);</span><br><span class="line">  var ctx = oCanvas1.getContext(&#x27;2d&#x27;);</span><br><span class="line">  </span><br><span class="line">  ctx.fillStyle = &#x27;red&#x27;;</span><br><span class="line">  ctx.fillRect(100,100,100,100);</span><br><span class="line">  ctx.globalCompositeOperation = &#x27;source-in&#x27;; //需要放在新像素和旧像素之间</span><br><span class="line">  ctx.fillStyle = &#x27;green&#x27;;</span><br><span class="line">  ctx.arc(180,180,50,0,Math.PI*2);</span><br><span class="line">  ctx.fill();</span><br><span class="line">  </span><br><span class="line">- | 属性值             | 作用                                                         |</span><br><span class="line">  | ------------------ | ------------------------------------------------------------ |</span><br><span class="line">  | `source-over`      | 默认值，将新图形画在旧图形之上                               |</span><br><span class="line">  | `destination-over` | 将新图形画在旧图形之下                                       |</span><br><span class="line">  | `source-in`        | 只保留新的，旧图形重叠的新图形区域，其余皆变透明             |</span><br><span class="line">  | `destination-in`   | 只保留新，旧图形重叠的旧图形区域，其余皆变为透明             |</span><br><span class="line">  | `source-out`       | 只保留新，旧图形非重叠的新图形区域，其余皆变为透明           |</span><br><span class="line">  | `destination-out`  | 只保留新，旧图形非重叠的旧图形区域，其余皆变透明             |</span><br><span class="line">  | `source-atop`      | 新图形只放置在新，旧图形重叠的新图形区域，然后盖在旧图形之上 |</span><br><span class="line">  | `destination-atop` | 旧图形只保留在新，旧图形重叠的旧图形区域，然后盖在新图形之上 |</span><br><span class="line">  | `lighter`          | 新旧图形重叠区域的颜色，由新，旧图形的颜色码相加而得         |</span><br><span class="line">  | `darker`           | 新旧图形重叠区域的颜色，由新，旧图形的颜色代码相减而得       |</span><br><span class="line">  | `xor`              | 新旧图形重叠区域设置透明                                     |</span><br><span class="line">  | `copy`             | 移除其他图形，只保留新图形                                   |</span><br><span class="line"></span><br><span class="line">### 绘制图片</span><br><span class="line"></span><br><span class="line">- `ctx.drawImage();` </span><br><span class="line"></span><br><span class="line">  - 第1个参数是`img(Image/canvas/video)` 注：`onload`调用</span><br><span class="line">  - 填2、3个参数 `(x, y)`：起始点坐标</span><br><span class="line">  - 填4、5个参数 `(x, y, dx, dy)` ：起始点坐标及图片所存区域的宽高</span><br><span class="line">  - 填2-9个参数 `(x1, y1, dx1, dy1, x2, y2, dx2, dy2)` </span><br><span class="line">    -  前四个为控制所绘制目标元素的起始点和宽高</span><br><span class="line">    -  前四个写完之后，可以插入后面四个参数写的区域里面</span><br><span class="line">    -  后四个为控制`canvas`绘制的起始点和大小</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  &lt;img src=&quot;./demo/js/slideBox/carousel/img/2.jpg&quot; alt=&quot;&quot; id=&quot;myImg&quot;&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      var myCanvas = document.getElementById(&#x27;myCanvas&#x27;);</span><br><span class="line">      var ctx = myCanvas.getContext(&#x27;2d&#x27;);</span><br><span class="line">  </span><br><span class="line">      var myImg = document.getElementById(&#x27;myImg&#x27;);</span><br><span class="line">      myImg.onload = function() &#123;</span><br><span class="line">          ctx.drawImage(myImg,80,80,80,80,300,300,200,200);</span><br><span class="line">          //ctx.drawImage(图片，x坐标轴，y坐标轴，宽，高，canvas的x标轴，canvas的y轴，宽，高)</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>设置背景</p><ul><li><code>createPattern(img,平铺方式)</code></li><li>平铺方式:<code>repeat</code>,<code>repeat-x</code>,<code>repeat-y</code>,<code>no-repeat</code></li></ul></li></ul><h3 id="将canvas内容导出"><a href="#将canvas内容导出" class="headerlink" title="将canvas内容导出"></a>将canvas内容导出</h3><ul><li><p><code>canvas.toDataURL()</code></p></li><li><p>是<code>canvas</code>自身的方法不是上下文对象</p></li><li><p>将<code>canvas</code>的内容抽取成一张图片， <code>base64</code>编码格式</p></li><li><p>注：同源策略的显示</p></li><li><p>将<code>canvas</code>的内容放入<code>img</code>元素里</p></li><li><p>```js<br>var myCanvas = document.getElementById(‘myCanvas’);<br>var ctx = myCanvas.getContext(‘2d’);</p><p>var oImg = new Image(); //声明了图片对象</p><p>ctx.arc(250,250,50,0,Math.PI*2,0);<br>ctx.fillStyle = ‘red’;<br>ctx.fill();<br>ctx.closePath();<br>ctx.stroke();</p><p>var data = myCanvas.toDataURL(); //把canvas转换为base64编码格式的图片信息</p><p>oImg.src = data; //让img图片的src等于data数据<br>document.body.appendChild(oImg);</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 获取canvas像素信息</span><br><span class="line"></span><br><span class="line">- `ctx.getImageData(x,y,w,h)`：返回`ImageData`对象</span><br><span class="line"></span><br><span class="line">  - `getImageData()`方法返回`ImageData`对象，该对象为画布上指定的矩形复制像素数据。</span><br><span class="line">  - 参数：</span><br><span class="line">    - `x`：开始左上角`x`坐标</span><br><span class="line">    - `y`：开始左上角`y`坐标</span><br><span class="line">    - `w`：返回的矩形区域的宽度</span><br><span class="line">    - `h`：返回的矩形区域的高度</span><br><span class="line">  - 对于 `ImageData` 对象中的每个像素，都存在着四方面的信息，即 `RGBA` 值：</span><br><span class="line">    - **R** - 红色 `(0-255)`</span><br><span class="line">    - **G** - 绿色 `(0-255)`</span><br><span class="line">    - **B** - 蓝色 `(0-255)`</span><br><span class="line">    - **A** - alpha 通道 `(0-255; 0 是透明的，255 是完全可见的)`</span><br><span class="line"></span><br><span class="line">- `ctx.createImageData(w,h)`：创建新的空白`ImageData`对象</span><br><span class="line"></span><br><span class="line">- `ctx.putImageData(imgData,x,y)`：将图像数据放回画布上</span><br><span class="line"></span><br><span class="line">  - 一般将处理完成的`getImageData()`数据放回`canvas`中</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  //白色变成灰色</span><br><span class="line">  var myCanvas = document.getElementById(&#x27;myCanvas&#x27;);</span><br><span class="line">  var ctx = myCanvas.getContext(&#x27;2d&#x27;);</span><br><span class="line">  </span><br><span class="line">  ctx.fillRect(0,0,500,500);</span><br><span class="line">  var pixel = ctx.getImageData(0,0,10,10);//获取画布的像素数据</span><br><span class="line">  var row = pixel.width;</span><br><span class="line">  var col = pixel.height;</span><br><span class="line">  var d = pixel.data;</span><br><span class="line">  </span><br><span class="line">  for(var i = 0;i &lt; row; i++)&#123;</span><br><span class="line">      var c = i * col * 4;</span><br><span class="line">      for(var j = 0;j &lt; col; j++)&#123;</span><br><span class="line">          d[c + j * 4 + 3] = 100;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  //将处理过的数据放回canvas</span><br><span class="line">  ctx.putImageData(pixel,10,10);</span><br></pre></td></tr></table></figure></li></ul><h3 id="命中检测"><a href="#命中检测" class="headerlink" title="命中检测"></a>命中检测</h3><ul><li><p><code>ctx.isPointInPath(x,y)</code>：检测是否在区域内，<code>chrome</code>与<code>safari</code>的区别</p></li><li><p><code>ctx.isPointInStroke(x,y)</code>：检测是否在线上</p></li><li><p>还可以通过检测当前点的像素值，如果为透明，则该点不在路径上</p></li><li><p>```javascript<br>var myCanvas = document.getElementById(‘myCanvas’);<br>var ctx = myCanvas.getContext(‘2d’);</p><p>ctx.moveTo(100,100);<br>ctx.lineTo(200,100);<br>ctx.lineTo(200,200);<br>ctx.closePath();<br>ctx.stroke();</p><p>console.log(ctx.isPointInPath(180,120));<br>console.log(ctx.isPointInStroke(200,200));</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 非零绕数准则</span><br><span class="line"></span><br><span class="line">- 判断点`p`是否在多边形内，从点`p`向外做一条射线（可以任意方向），多边形的边从左到右经过射线时环绕数减`1`，多边形的边从右往左经过射线时环绕数加`1`，最后环数不为`0`，即表示在多边形内部。  </span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111701073.jpg)</span><br><span class="line"></span><br><span class="line">### 如何解决canvas高分屏模糊问题</span><br><span class="line"></span><br><span class="line">- 在分辨率比较高的屏幕，例如`ip6/6s/mac`等机器上，因为`canvs`绘制的是位图，所以会导致模糊，解决方法是根据屏幕分辨率修改`canvas`样式代码中的宽和高与`canvas`的`width`和`height`属性的比例</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 扩展阅读</span><br><span class="line">- [canvas学习之API整理笔记（一）](http://luckykun.com/work/2016-09-01/canvas-study01.html)</span><br><span class="line">- [HTML5 API大盘点](http://jartto.wang/2016/07/25/make-an-inventory-of-html5-api/)</span><br><span class="line"></span><br><span class="line">## svg</span><br><span class="line"></span><br><span class="line">- `Scalable Vector Graphics`：可缩放矢量图形</span><br><span class="line">- 应用场景</span><br><span class="line">  - 图表</span><br><span class="line">  - 图标`icon`</span><br><span class="line">  - 动效</span><br><span class="line">  - 矢量图</span><br><span class="line"></span><br><span class="line">### 使用svg</span><br><span class="line"></span><br><span class="line">- 方式一：</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;?xml version=&quot;1.1&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE svg </span><br><span class="line">PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot;  &quot;http://www.w3.org/</span><br><span class="line">Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;</span><br><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;/svg&gt; </span><br></pre></td></tr></table></figure></li><li><p>方式二：</p><ul><li>图片、背景、框架</li></ul></li><li><p>方式三: </p><ul><li><code>html</code>页面中添加<code>svg</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&#x27;500&#x27;</span> <span class="attr">height</span>=<span class="string">&#x27;500&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">line</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></span><br><span class="line">    ···</span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="形状标签"><a href="#形状标签" class="headerlink" title="形状标签"></a>形状标签</h3><blockquote><blockquote><p>所有的线段和路径都需要使用stroke属性来添加颜色</p></blockquote></blockquote><ul><li><p><strong>line：线条</strong></p><ul><li><code>&lt;line&gt;&lt;/line&gt;</code></li><li><code>x1</code>，<code>y1</code>：起始<code>x、y</code>点</li><li><code>x2</code>，<code>y2</code>：终点<code>x、y</code>点</li><li>例：<code>&lt;line x1=100 y1=100 x2=200 y2=100&gt;&lt;/line&gt;</code></li></ul></li><li><p><strong>rect：矩形</strong></p><ul><li><code>&lt;rect&gt;&lt;/rect&gt;</code></li><li><code>x，y</code>：起始点</li><li><code>width，height</code>：宽高</li><li><code>rx，ry</code>：<code>x，y</code>轴上面的圆角</li><li>例：<code>&lt;rect x=200 y=200 width=100 height=100 rx=10 ry=30&gt;&lt;/rect&gt;</code></li></ul></li><li><p><strong>circle：圆形</strong></p><ul><li><code>&lt;circle&gt;&lt;/circle&gt;</code></li><li><code>r</code>:圆的半径</li><li><code>cx，cy</code>:<code>x，y</code>的坐标点，圆的中心点</li><li>例：<code>&lt;circle r=50 cx=250 cy=250&gt;&lt;/circle&gt;</code></li></ul></li><li><p><strong>ellipse：椭圆</strong></p><ul><li><code>&lt;ellipse&gt;&lt;/ellipse&gt;</code></li><li><code>rx，ry</code>：圆在<code>x，y</code>轴的半径</li><li><code>cx，cy</code>：<code>x，y</code>的坐标点，圆的中心点</li><li>例：<code>&lt;ellipse rx=50 ry=100 cx=250 cy=250&gt;&lt;/ellipse&gt;</code></li></ul></li><li><p><strong>polyline：折线</strong></p><ul><li><code>&lt;polyline&gt;&lt;/polyline&gt;</code></li><li><code>points</code>:点坐标（<code>x1 y1 x2 y2...</code>）或(<code>x1,y1,x2,y2....</code>)    </li><li><code>x</code>代表起始点，<code>y</code>代表终止点</li><li>点和点连接起来，形成一条折线</li><li>例：<code>&lt;polyline points=&quot;60 50, 75 35, 100 50, 125 35, 150 50,175 35, 190 50&quot;&gt;&lt;/polyline&gt;</code></li></ul></li><li><p><strong>polygon：多边形</strong></p><ul><li><code>&lt;polygon&gt;&lt;/polygon&gt;</code></li><li><code>points</code>:点坐标（<code>x1 y1 x2 y2...</code>）或(<code>x1,y1,x2,y2....</code>)    </li><li><code>x</code>代表起始点，<code>y</code>代表终止点</li><li>折线闭合  <code>fill-rule:evenodd/nonzero</code>;</li><li>点和点连接起来，形成一条折线，最后一个点和第一个点闭合，形成多边形</li><li>例：<code>&lt;polygon points=&quot;60 50, 75 35, 100 50, 125 35, 150 50,175 35, 190 50&quot;&gt;&lt;/polygon&gt;</code></li></ul></li><li><p><strong>text：文本</strong></p><ul><li><code>&lt;text&gt;&lt;/text&gt;</code></li><li><code>x，y</code>：起始点，在<code>x，y</code>的那个点进行书写</li><li>例：<code>&lt;text x=100 y=100&gt;&lt;/text&gt;</code></li></ul></li><li><p><strong>g：组合对象的容器</strong></p><ul><li>添加到<code>g</code>元素上的变换会应用到其所有的子元素上。添加到<code>g</code>元素的属性会被其所有的子元素继承。此外，<code>g</code>元素也可以用来定义复杂的对象，之后可以通过<code>use</code>元素来引用它们</li></ul></li></ul><h3 id="样式属性"><a href="#样式属性" class="headerlink" title="样式属性"></a>样式属性</h3><blockquote><blockquote><p>所有的样式属性要在css进行设置</p><blockquote><p>所有的线段和路径都需要使用stroke属性来添加描边颜色</p></blockquote></blockquote></blockquote><ul><li><strong>fill</strong>：填充颜色</li><li><strong>stroke</strong>：描边颜色</li><li><strong>stroke-width</strong>：描边宽度</li><li><strong>stroke-opacity</strong>：描边透明度</li><li><strong>stroke-dasharray</strong>：描边虚线<ul><li><code>&lt;path stroke-dasharray=&quot;10,10&quot; d=&quot;M 5 40 l 215 0&quot; /&gt;</code></li></ul></li><li><strong>stroke-dashoffset</strong>：描边向左右缩进</li><li><strong>fill-opacity</strong>：填充透明度</li><li><strong>stroke-linecap</strong>：线的两端样式<ul><li><code>butt</code>：默认值</li><li><code>round</code>：多出来线宽的一半变成半圆</li><li><code>square</code>：两端多出来线宽的一半</li></ul></li><li><strong>stroke-lineJoin</strong>：边界连接点样式<ul><li><code>bevel</code>：斜角</li><li><code>round</code>：圆角</li><li><code>miter</code>：默认值</li></ul></li></ul><h3 id="path元素"><a href="#path元素" class="headerlink" title="path元素"></a>path元素</h3><ul><li><p><strong>路径的意思</strong></p><blockquote><p>指令也区分大小写，大写的指令是绝对定位，小写的指令是相对定位，相对于元素进行多少个像素进行移动</p><blockquote><p>path元素使用d属性来控制路径，如：<path d=""></path></p><blockquote><p>所有的指令大写的指令为绝对坐标（具体的坐标位置）</p><p>小写的指令为相对位置（相对于起始坐标点的具体长度）</p></blockquote></blockquote></blockquote></li></ul><h4 id="M和L指令"><a href="#M和L指令" class="headerlink" title="M和L指令"></a>M和L指令</h4><ul><li><code>M</code>指令：<code>moveTo</code>的意思，画笔初始的位置</li><li><code>L</code>指令：<code>lineTo</code>的意思，画笔要画到的位置<ul><li>每两个值是一个<code>x，y</code>坐标，L后面可以一直写<code>x，y</code>坐标</li></ul></li><li>例：<code>&lt;path d=&quot;M 100 100 L 200 100 200 200&quot;&gt;&lt;/path&gt;</code></li></ul><h4 id="H和V指令"><a href="#H和V指令" class="headerlink" title="H和V指令"></a>H和V指令</h4><ul><li><code>H</code>指令：<code>horizontal lineto</code>的意思<ul><li><code>x</code>轴移动到的位置</li><li>绘制水平线</li></ul></li><li><code>V</code>指令：<code>vertical lineto</code>的意思<ul><li><code>y</code>轴移动到的位置</li><li>绘制垂直线</li></ul></li><li>例：<code>&lt;path d=&#39;M 100 100 H 200 V 200&#39;&gt;</code>，把线移动到<code>x</code>轴<code>200</code>的位置，<code>y</code>轴<code>200</code>的位置</li></ul><h4 id="Z指令"><a href="#Z指令" class="headerlink" title="Z指令"></a>Z指令</h4><ul><li><code>z</code>指令：<code>closePath</code>的意思，闭合指令</li><li>不区分大小写</li><li>例：<code>&lt;path d=&#39;M 100 100 H 200 V 200 z&#39;&gt;</code></li></ul><h4 id="A指令"><a href="#A指令" class="headerlink" title="A指令"></a>A指令</h4><ul><li><code>A</code>指令：<code>elliptical Arc</code>的意思，圆弧指令</li><li>参数<ul><li><code>rx，ry</code>圆弧的<code>x</code>轴半径和<code>y</code>轴半径</li><li><code>x-axis-rotation</code>：圆弧相对于x轴的旋转角度，默认是顺时针，可以设置负值</li><li><code>large-arc-flag</code>：表示圆弧路径是大圆弧还是小圆弧，<code>1</code>代表大圆弧，<code>0</code>代表小圆弧</li><li><code>sweep-flag</code>：表示从起点到终点是顺时针还是逆时针，<code>1</code>表示顺时针，<code>0</code>表示逆时针</li><li><code>x，y</code>：表示终点坐标</li></ul></li><li>例：<code>&lt;path d=&#39;M 100 100 A 70 120 90 1 1 150 200&#39;&gt;&lt;/path&gt;</code></li></ul><h4 id="贝塞尔曲线-1"><a href="#贝塞尔曲线-1" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h4><h5 id="Q和T指令"><a href="#Q和T指令" class="headerlink" title="Q和T指令"></a>Q和T指令</h5><ul><li><strong>二次贝塞尔曲线</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111701232.GIF" alt="二次贝塞尔曲线"></p><ul><li><strong>Q指令</strong><ul><li><code>x1，y1</code>：起始控制点</li><li><code>x，y</code>：终止点</li><li>例：<code>&lt;path d=&quot;M 100 200 Q 200 100 300 300&quot;&gt;&lt;/path&gt;</code></li></ul></li><li><strong>T指令</strong><ul><li>二次贝塞尔曲线的延申</li><li><code>x，y</code>：后面添加的两个终止点</li><li>例：<code>&lt;path M 100 200 Q 200 100 300 300 T 500 400&gt;&lt;/path&gt;</code></li></ul></li></ul><h5 id="C和S指令"><a href="#C和S指令" class="headerlink" title="C和S指令"></a>C和S指令</h5><ul><li><strong>三次贝塞尔曲线</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111701361.GIF" alt="三次贝塞尔曲线"></p><ul><li><p><strong>C指令</strong></p><ul><li><code>x1，y1</code>：起始控制点</li><li><code>x2，y2</code>：过渡控制点</li><li><code>x，y</code>：终止点</li><li>例：<code>&lt;path d=&quot;M 0 200 C 100 100 200 100 300 400&quot;&gt;&lt;/path&gt;</code></li></ul></li><li><p><strong>S指令</strong></p><ul><li>三次贝塞尔曲线的延申</li><li><code>x2，y2</code>：过渡控制点</li><li><code>x，y</code>：终止点</li><li>例：<code>&lt;path d=&quot;M 0 200 C 100 100 200 100 300 400 S 500 500 500 0&quot;&gt;&lt;/path&gt;</code></li></ul></li></ul><h4 id="获取长度和坐标方法"><a href="#获取长度和坐标方法" class="headerlink" title="获取长度和坐标方法"></a>获取长度和坐标方法</h4><ul><li><strong>getTotalLength</strong>：获取路径总长度</li><li>**getPointAtLength(x)**：获取路径上距离起始点距离<code>x</code>长度的点的坐标</li><li>注：严格来说上面两方法只适用于<code>path</code>元素，但各个浏览器实现起来都会有一点区别。例如谷歌浏览器也能获取到<code>line</code>元素的路径长度。</li></ul><h3 id="自动生成路径"><a href="#自动生成路径" class="headerlink" title="自动生成路径"></a>自动生成路径</h3><ul><li>Method Draw：<a href="http://editor.method.ac/">http://editor.method.ac/</a></li></ul><h3 id="svg渐变"><a href="#svg渐变" class="headerlink" title="svg渐变"></a>svg渐变</h3><ul><li><p><code>defs</code>标签，定义以后需要重复使用的图形元素</p></li><li><p>线性渐变</p><ul><li><p><code>linearGradient</code>：线性渐变标签</p><ul><li>属性值</li><li><code>id</code>：代表这个渐变的名字，方便其他标签调用</li><li><code>x1，y1</code>：起始点</li><li><code>x2，y2</code>：终止点，起始点和终止点可以改变渐变方向</li></ul></li><li><p><code>stop</code>：颜色节点，设置几个颜色节点就代表几个颜色</p><ul><li>属性值</li><li><code>offset</code>：颜色节点的位置，定义渐变色开始和结束</li><li><code>stop-color</code>：颜色节点的颜色</li></ul></li><li><p>```html</p><defs>    <linearGradient id="bg1" x1="0" y1="0" x2="0" y2 ="100%">        <stop offset="0%" style="stop-color:rgb(255,255,0);"></stop>        <stop offset="100%" style="stop-color:rgb(255,0,0);"></stop>    </linearGradient></defs><p><rect x="0" y="0" width="500" height="500" style="fill:url(#bg1)"></rect></p></li></ul></li></ul><ul><li><p>径向渐变</p><ul><li><p><code>radialGradient</code>：径向渐变标签</p><ul><li>属性值</li><li><code>id</code>：代表这个渐变的名字，方便其他标签调用</li><li><code>cx，cy</code>：圆的中心点，此属性定义径向渐变的结束圆的<code>x，y</code>坐标。</li><li><code>r</code>：圆的半径</li><li><code>fx，fy</code>：圆的扩散范围，此属性定义径向渐变的起始圆的<code>x，y</code>坐标。</li></ul></li><li><p><code>stop</code>：颜色节点，设置几个颜色节点就代表几个颜色</p><ul><li>属性值</li><li><code>offset</code>：颜色节点的位置，定义渐变色开始和结束</li><li><code>stop-color</code>：颜色节点的颜色</li></ul></li><li><p>```html</p><defs>    <radialGradient id="bg2" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">        <stop offset="0%" style="stop-color:green;"/>        <stop offset="100%" style="stop-color:red;"/>    </radialGradient></defs><rect x="0" y="0" width="500" height="500" style="fill:url(#bg2)"/><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### svg滤镜</span><br><span class="line"></span><br><span class="line">- 高斯滤镜</span><br><span class="line"></span><br><span class="line">  - ```html</span><br><span class="line">    &lt;defs&gt;</span><br><span class="line">        &lt;filter id=&quot;Gaussian_Blur&quot;&gt;</span><br><span class="line">            &lt;feGaussianBlur in=&quot;SourceGraphic&quot; stdDeviation=&quot;20&quot;/&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/defs&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;500&quot; height=&quot;500&quot; fill=&quot;yellow&quot; style=&quot;filter:url(#Gaussian_Blur)&quot;/&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul></li><li><p>其他滤镜</p><ul><li><a href="http://www.w3school.com.cn/svg/svg_filters_intro.asp">http://www.w3school.com.cn/svg/svg_filters_intro.asp</a></li></ul></li></ul><h3 id="svg路径动画"><a href="#svg路径动画" class="headerlink" title="svg路径动画"></a>svg路径动画</h3><ul><li><p><strong>stroke-dasharray：–px</strong></p></li><li><p><strong>stroke-dashoffset：–px;</strong></p></li><li><p>动画实现原理理，通过修改<code>stroke-dashoffse</code>t的值让路路径慢慢地展现出来</p></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">path&#123;</span><br><span class="line">    stroke: orange;</span><br><span class="line">    fill: none;</span><br><span class="line">    stroke-<span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    stroke-dasharray:<span class="number">20px</span>;</span><br><span class="line">    stroke-dashoffset: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">animation</span>:move <span class="number">3s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">    stroke-dashoffset: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">    stroke-dashoffset: <span class="number">500px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;svg <span class="attribute">width</span>=<span class="number">500</span> <span class="attribute">height</span>=<span class="number">500</span>&gt;</span><br><span class="line">&lt;path d=&quot;M <span class="number">0</span> <span class="number">100</span> L <span class="number">500</span> <span class="number">100</span>&quot;&gt;&lt;/path&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="ViewBox"><a href="#ViewBox" class="headerlink" title="ViewBox"></a>ViewBox</h3><ul><li><p><strong>ViewBox</strong></p><ul><li><p><code>viewBox</code>属性允许指定一个给定的一组图形伸展以适应特定的容器元素。</p></li><li><p><code>viewBox</code>属性的值是一个包含4个参数的列表 <code>min-x</code>, <code>min-y</code>, <code>width</code> and <code>height</code>， 以空格或者逗号分隔开，<code>viewBox</code>的四个参数分别代表：最小X轴数值，最小y轴数值，宽度，高度。</p></li><li><p>```html<br>例：<br><svg width=400 height=300 viewBox="0,0,40,30"></svg></p><p>ViewBox后两个参数的意思是，虽然在画布设置的宽有400，高有300，但实际的单位宽只有40个单位宽，高只有30单位高，也就是说设置上ViewBox之后，虽然你设置的宽不管有多大，最后都是要按照ViewBox设置的宽高来决定比例的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - **preserveAspectRatio**对齐、填充方式</span><br><span class="line"></span><br><span class="line">    - `xMin`、`xMid`、`xMax`：`x`轴-左中右对齐</span><br><span class="line">    - `YMin`、`YMid`、`YMax`：`y`轴-上中下对齐</span><br><span class="line">    - `meet`、`slice`、`none`：撑开、撑满、形变（设置填充方式）</span><br><span class="line">    - 例：`svg.setAttribute(&quot;preserveAspectRatio&quot;, &quot;xMinYMin slice&quot;)`</span><br><span class="line"></span><br><span class="line">### 用JS生成svg元素</span><br><span class="line"></span><br><span class="line">- 创建`svg`元素需要制定命名空间</span><br><span class="line"></span><br><span class="line">- `svg`元素对象一般通过调用`setAttribute()`方法来设定属性值</span><br><span class="line"></span><br><span class="line">- ```javascript</span><br><span class="line">  var char = &#x27;http://www.w3.org/2000/svg&#x27;, </span><br><span class="line">      //命名空间的名称，固定好的</span><br><span class="line">      svg = document.createElementNS(char,&#x27;svg&#x27;);</span><br><span class="line">  </span><br><span class="line">  svg.setAttribute(&#x27;width&#x27;,500);</span><br><span class="line">  svg.setAttribute(&#x27;height&#x27;,500);</span><br><span class="line">  svg.setAttribute(&#x27;viewBox&#x27;,&#x27;0 0 500 500&#x27;);</span><br><span class="line">  </span><br><span class="line">  var rect = document.createElementNS(char,&#x27;rect&#x27;);</span><br><span class="line">  </span><br><span class="line">  rect.setAttribute(&#x27;x&#x27;,100);</span><br><span class="line">  rect.setAttribute(&#x27;y&#x27;,100);</span><br><span class="line">  rect.setAttribute(&#x27;width&#x27;,100);</span><br><span class="line">  rect.setAttribute(&#x27;height&#x27;,100);</span><br><span class="line">  rect.setAttribute(&#x27;fill&#x27;,&#x27;#0fc&#x27;);</span><br><span class="line">  svg.appendChild(rect);</span><br><span class="line">  document.body.appendChild(svg);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li><p>```html<br>输入数字，进度条占用</p><style>    svg {        border: 1px solid black;    }    path{        fill: none;        stroke-width:10px;        stroke-linecap: round;    }    #path1 {        stroke:#ccc;    }    #path2{        stroke:orange;        stroke-dasharray:1000px;        stroke-dashoffset:1000px;    }    .active {        transition:  all 1s linear;    }</style></head><body><pre><code>&lt;input id=&quot;btn&quot; type=&quot;text&quot;&gt;&lt;svg width=500 height=500&gt;    &lt;path id=&quot;path1&quot; d=&quot;M 200 300 A 100 100 0 1 1 300 300&quot;&gt;&lt;/path&gt;    &lt;path id=&quot;path2&quot; d=&quot;M 200 300 A 100 100 0 1 1 300 300&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;script&gt;    //获取path长度    var len = path2.getTotalLength();    btn.onblur = function() &#123;        var value = this.value;        var total = len * value / 100; //变成百分比        path2.classList.add(&#39;active&#39;); //单独设置动画class类名        path2.style.strokeDashoffset = 1000 - total + &#39;px&#39;;    &#125;    btn.onfocus = function() &#123;        path2.classRemove(&#39;active&#39;);//失去焦点之后删除class，立即消失        path2.style.strokeDashOffset=&#39;1000px&#39;;    &#125;&lt;/script&gt;</code></pre></body><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  loading效果</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">      svg &#123;</span><br><span class="line">      border: 1px solid black;</span><br><span class="line">      &#125;</span><br><span class="line">      circle,path &#123;</span><br><span class="line">      fill:transparent;</span><br><span class="line">      stroke:#ff6700;</span><br><span class="line">      stroke-width:10px;</span><br><span class="line">      stroke-linecap: round;</span><br><span class="line">      &#125;</span><br><span class="line">      circle &#123;</span><br><span class="line">      stroke: rgba(255,150,0,.5);</span><br><span class="line">      &#125;</span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;svg width=100 height=100&gt;</span><br><span class="line">  &lt;circle r=40 cx=50 cy=50&gt;&lt;/circle&gt;</span><br><span class="line">  &lt;path d=&quot;M 10 50 A 40 40 0 0 1 50 10&quot;&gt;</span><br><span class="line">  &lt;animateTransform attributeName=&quot;transform&quot; type=&quot;rotate&quot; from=&#x27;0 50 50&#x27; to=&#x27;360 50 50&#x27; dur=&#x27;0.5s&#x27; repeatCount=&#x27;indefinite&#x27;&gt;/&lt;/animateTransform&gt;</span><br><span class="line">  &lt;/path&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">  &lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li><p>```html<br>叮当猫</p><head>    <style>        svg {            border: 1px solid black;        }        .face {            fill: white;        }<pre><code>    .eye&#123;        fill: white;    &#125;    .line-black &#123;        stroke: black;    &#125;    .fill-blue &#123;        fill:#2E87FD;    &#125;    .mouth &#123;        fill: none;    &#125;    .nose &#123;        fill: #FD0100;    &#125;    .nose-light &#123;        fill: white;    &#125;    .sling &#123;        stroke-width: 20px;        stroke: red;        stroke-linecap: round;    &#125;    .bell &#123;        fill: #cece1b;        fill-opacity: .7;;    &#125;    .body &#123;        stroke: black;    &#125;    .fist &#123;        fill: white;    &#125;    .pocket &#123;        fill: white;    &#125;    .pocket-line &#123;        fill: none;    &#125;    .foot &#123;        stroke: black;        fill: white;    &#125;    .foot-y &#123;        fill: white;    &#125;&lt;/style&gt;</code></pre></head><body>    <svg width='510' height=510>        <!-- 头部蓝色背景 -->        <path class='line-black fill-blue head-back' d="M 150 300 A 160 160 0 1 1 350 300"></path>        <!-- 脸部白色背景 -->        <ellipse rx=130 ry=110 cx=250 cy=220 class="face line-black "></ellipse>        <!-- 眼睛-右 -->        <ellipse rx=35 ry=45 cx=215 cy=110 class="eye line-black "></ellipse>        <!-- 眼睛-左 -->        <ellipse rx=35 ry=45 cx=285 cy=110 class="eye line-black "></ellipse>        <!-- 眼珠-右 -->        <ellipse rx=8 ry=10 cx=225 cy=120></ellipse>        <!-- 眼珠-左 -->        <ellipse rx=8 ry=10 cx=275 cy=120></ellipse>        <!-- 胡须-右 -->        <path d="M 150 180 L 210 190" class="line-black "></path>        <path d="M 145 205 L 210 205" class="line-black "></path>        <path d="M 150 230 L 210 220" class="line-black "></path>        <!-- 胡须-左 -->        <path d="M 280 190 L 350 180" class="line-black "></path>        <path d="M 280 205 L 345 205" class="line-black "></path>        <path d="M 280 220 L 350 230" class="line-black "></path>        <!-- 嘴巴 -->        <line class="mouth line-black " x1=250 y1=165 x2=250 y2=270></line>        <path class="mouth line-black " d="M 180 240 A 80 50 0 0 0 325 240"></path>        <!-- 鼻子 -->        <ellipse class="nose line-black " rx=15 ry=15 cx=250 cy=160></ellipse>        <ellipse class="nose-light line-black " rx=5 ry=7 cx=257 cy=155></ellipse>        <!-- 身体背景 -->        <rect class="body fill-blue" x=150 y=300 width=200 height=170></rect>        <!-- 左胳膊 -->        <path class="arm fill-blue" d="M 90 290 L 180 330 170 365 90 330 90 290"></path>        <ellipse class="line-black fist" rx=22 ry=22 cx=97 cy=312></ellipse>        <!-- 右胳膊 -->        <path class="arm fill-blue" d="M 320 330 L 410 305 410 340 320 365 320 360"></path>        <ellipse class="line-black fist" rx=22 ry=22 cx=410 cy=320></ellipse>        <!-- 口袋 -->        <path class="pocket" d="M 180 310 A 80 85 0 1 0 320 310"></path>        <path class="line-black pocket-line" d="M 200 370 A 40 40 0 1 0 300 370 z"></path>        <!-- 挂绳 -->        <path class="sling" d="M 150 300 L 350 300"></path>        <!-- 铃铛 -->        <ellipse class="bell line-black " rx=20 ry=20 cx=250 cy=315></ellipse>        <ellipse rx=7 ry=7 cx=250 cy=325></ellipse>        <path class="line-black" d="M 250 325 L 250 335"></path>        <!-- 脚 -->        <ellipse class="foot-y" rx=15 ry=20 cx=255 cy=480></ellipse>        <!-- 左脚 -->        <ellipse class="foot" rx=60 ry=20 cx=190 cy=480></ellipse>        <!-- 右脚 -->        <ellipse class="foot" rx=60 ry=20 cx=320 cy=480></ellipse>    </svg></body><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 客户端存储</span><br><span class="line"></span><br><span class="line">### storage</span><br><span class="line"></span><br><span class="line">- **localstorage**：永久存储（可以手动删除数据）</span><br><span class="line"></span><br><span class="line">- **seesionstorage**：`session`临时回话，从页面打开到页面关闭的时间段窗口的临时存储，页面关闭，本地存储消失</span><br><span class="line"></span><br><span class="line">- 存储数据</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    localStorage.name = &#x27;aimee&#x27;;</span><br><span class="line">    localStorage.info = `JSON.stringify(&#123;</span><br><span class="line">    name:&#x27;aimee&#x27;,</span><br><span class="line">    company:&#x27;diyi&#x27;</span><br><span class="line">    &#125;)`</span><br></pre></td></tr></table></figure></li><li><p>取出数据</p><ul><li>```javascript<br>localStorage.name<br>localStorage.info<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 作用域</span><br><span class="line"></span><br><span class="line">  - `localStorage`：文档源限制、同源策略限制</span><br><span class="line">  - `sessionStorage`：文档源限制、同源策略限制、窗口</span><br><span class="line"></span><br><span class="line">- 特点：</span><br><span class="line"></span><br><span class="line">  - 存储量限制 ( `5M` )</span><br><span class="line">  - 客户端完成，不会请求服务器处理</span><br><span class="line">  - `sessionStorage`数据是不共享、 `localStorage`共享</span><br><span class="line"></span><br><span class="line">- **API**</span><br><span class="line"></span><br><span class="line">  - `setItem(name,val)`：设置数据，(`key`,`value`)类型，类型都是字符串，可以用获取属性的形式操作</span><br><span class="line">  - `getItem(name)`：获取数据，通过`key`来获取到相应的`value`</span><br><span class="line">  - `removeItem(name)`：删除数据，通过key来删除相应的`value`</span><br><span class="line">  - `clear()`：删除全部存储的值</span><br><span class="line"></span><br><span class="line">- 存储事件</span><br><span class="line"></span><br><span class="line">  - 当数据有修改或者删除的情况下就会触发`storage`事件</span><br><span class="line">  - 在对数据进行改变的窗口对象上是不会触发的</span><br><span class="line">  - `Key`：修改或删除的`key`值，如果调用`clear(),key()为null`</span><br><span class="line">  - `newValue`  :  新设置的值，如果调用`removeStorage()`,`key`为`null`</span><br><span class="line">  - `oldValue` :  调用改变前的`value`值</span><br><span class="line">  - `storageArea` : 当前的`storage`对象</span><br><span class="line">  - `url` :  触发该脚本变化的文档的`url`</span><br><span class="line">  - 注：`session`同窗口才可以,例子：`iframe`操作</span><br><span class="line"></span><br><span class="line">### cookie</span><br><span class="line"></span><br><span class="line">- 存储信息到用户的设备上，数据量较小，`4k`左右</span><br><span class="line"></span><br><span class="line">- `navigator.cookieEnabled`：检测是否启用了`cookie`</span><br><span class="line"></span><br><span class="line">- 设置**cookie**值</span><br><span class="line"></span><br><span class="line">  - `document.cookie = &quot;name=aimee&quot;`</span><br><span class="line">  - 每次只能设置一个值，因为浏览器会认为后面的键值对是这个`cookie`的属性</span><br><span class="line"></span><br><span class="line">- 获得**cookie**值</span><br><span class="line"></span><br><span class="line">  - `document.cookie`</span><br><span class="line">  - 不建议出现分号，逗号，空格的奇怪符号</span><br><span class="line"></span><br><span class="line">- 设置**cookie**存储期限</span><br><span class="line"></span><br><span class="line">  - `document.cookie = &#x27;name=scott;max-age=1000&#x27;`</span><br><span class="line"></span><br><span class="line">- **expires**：当前时间加上保存时间</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    var timestamp = (new Date()).getTime() + 10000;</span><br><span class="line">    var expires = new Date(timestamp).toGMTString();</span><br><span class="line">    document.cookie = “name=scott;expires=“+expires;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除<strong>cookie</strong></p><ul><li>需要带上键值对，<code>max-age=0</code></li><li><code>document.cookie = &#39;name=scott;max-age=0&#39;</code></li></ul></li><li><p><strong>domain</strong>：跨域，设置相同的域</p></li><li><p><strong>path</strong>：路径</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111702969.png"></p></li><li><p><code>encodeURIComponent()</code>：函数可把字符串作为 <code>URI</code> 组件进行编码。</p></li><li><p><code>decodeURIComponent()</code>：函数可对 <code>encodeURIComponent()</code> 函数编码的 <code>URI</code> 进行解码。</p></li></ul><h2 id="地位位置信息、重力感应、方向感应"><a href="#地位位置信息、重力感应、方向感应" class="headerlink" title="地位位置信息、重力感应、方向感应"></a>地位位置信息、重力感应、方向感应</h2><h3 id="geolocation（地理位置信息）"><a href="#geolocation（地理位置信息）" class="headerlink" title="geolocation（地理位置信息）"></a>geolocation（地理位置信息）</h3><hr><blockquote><p><strong>geolocation</strong>：获取地理位置信息</p></blockquote><ul><li><p>经度  :   南北极的连接线</p></li><li><p>纬度  :   东西连接的线</p></li><li><p>位置信息从何而来</p><ul><li><code>IP</code>地址</li><li><code>GPS</code>全球定位系统</li><li><code>Wi-Fi</code>无线网络</li><li>基站</li></ul></li><li><p><a href="https://dev.w3.org/geo/api/spec-source.html#position_error_interface">https://dev.w3.org/geo/api/spec-source.html#position_error_interface</a></p></li><li><p><code>window.navigator.geolocation</code>：<code>navigator</code>对象下面的属性</p><ul><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111702834.png"></li></ul></li></ul><h4 id="getCurrentPosition"><a href="#getCurrentPosition" class="headerlink" title="getCurrentPosition"></a>getCurrentPosition</h4><blockquote><p>getCurrentPosition(success,error,options)</p><p>获取当前的位置信息</p></blockquote><ul><li><p><code>success</code>：获取成功的回调函数（必须）</p></li><li><p><code>error</code>：失败的回调函数</p></li><li><p><code>options</code>：一些参数，来辅助</p><ul><li><code>enableHighAccuracy</code>：是否需要高精度位置，默认<code>false</code>,<code>true/false</code></li><li><code>timeout</code>：请求超时的时间，单位<code>ms</code>，默认<code>infinity</code></li><li><code>maximumAge</code>：单位<code>ms</code>，<code>watchPosition</code>方法不停的取用户的地理位置信息，不停的更新用户的地理位置信息，位置信息过期时间设置为<code>0</code>就是无条件获取新的地理位置信息，默认为<code>0</code></li></ul></li><li><p>需要翻墙才可以使用</p></li><li><p>```js<br>例：<br>//pos就是地理位置信息<br>//成功的回调函数<br>function suc(pos) {</p><pre><code>console.log(pos);</code></pre><p>}<br>//失败的回调函数<br>function err(err) {</p><pre><code>console.log(err);</code></pre><p>}<br>//options参数<br>var options = {</p><pre><code>enableHighAccuracy: true,timeout: 2000,maximumAge: 300000 //五分钟</code></pre><p>}<br>window.navigator.geolocation.getCurrentPosition(suc,err)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 成功和失败返回回来的值</span><br><span class="line"></span><br><span class="line">  - 成功之后返回回来的地理位置信息(`GeolocationPosition`)</span><br><span class="line">    - ![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111702482.png)</span><br><span class="line">    - 经度 :  `coords.longitude`</span><br><span class="line">    - 纬度 :  `coords.latitude`</span><br><span class="line">    - 准确度 :  `coords.accuracy`</span><br><span class="line">    - 海拔 : ` coords.altitude`</span><br><span class="line">    - 海拔准确度 :  `coords.altitudeAcuracy`</span><br><span class="line">    - 行进方向 :  `coords.heading`</span><br><span class="line">    - 地面速度 :  `coords.speed`</span><br><span class="line">    - 请求的时间: `new Date(position.timestamp)`</span><br><span class="line">  - 失败之后返回回来的值(`PositionError`)</span><br><span class="line">    - 用户拒绝：`code=1`</span><br><span class="line">    - 获取不到：`code=2`</span><br><span class="line">    - 连接超时：`code=3`，一般测试不出来，可以设置`timeout`</span><br><span class="line">    - ![用户拒绝](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111702571.png)</span><br><span class="line">    - ![获取不到](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111702730.png)</span><br><span class="line">    - ![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111703276.png)</span><br><span class="line"></span><br><span class="line">#### watchPosition/clearWatch</span><br><span class="line"></span><br><span class="line">&gt;watchPosition(fn)</span><br><span class="line">&gt;</span><br><span class="line">&gt;用于注册监听器，在设备的地理位置发生改变的时候自动被调用</span><br><span class="line">&gt;</span><br><span class="line">&gt;&gt; 参数与getCurrentPosition相同</span><br><span class="line"></span><br><span class="line">- **watchPosition**</span><br><span class="line">  - `success`：获取成功的回调函数（必须）</span><br><span class="line">  - `error`：失败的回调函数</span><br><span class="line">  - `options`：一些参数，来辅助</span><br><span class="line">    - `enableHighAccuracy`：是否需要高精度位置，默认`false`,`true/false`</span><br><span class="line">    - `timeout`：请求超时的时间，单位`ms`，默认`infinity`</span><br><span class="line">    - `maximumAge`：单位`ms`，`watchPosition`方法不停的取用户的地理位置信息，不停的更新用户的地理位置信息，位置信息过期时间设置为`0`就是无条件获取新的地理位置信息，默认为`0`</span><br><span class="line">- **clearWatch(id)**：清除`watchPosition`监听</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- **examp01**</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;请求位置信息&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var btn = document.getElementById(&quot;btn&quot;);</span><br><span class="line">var box = document.getElementById(&quot;box&quot;);</span><br><span class="line"></span><br><span class="line">btn.onclick = function()&#123;</span><br><span class="line">navigator.geolocation.getCurrentPosition(function(position)&#123;</span><br><span class="line">box.innerHTML +=&quot;经度：&quot;+position.coords.longitude + &quot;&lt;br&gt;&quot;;</span><br><span class="line">box.innerHTML +=&quot;纬度：&quot;+position.coords.latitude + &quot;&lt;br&gt;&quot;;</span><br><span class="line">box.innerHTML +=&quot;海拔：&quot;+position.coords.accuracy + &quot;&lt;br&gt;&quot;;</span><br><span class="line">box.innerHTML +=&quot;海拔的准确度：&quot;+position.coords.altitudeAccuracy + &quot;&lt;br&gt;&quot;;</span><br><span class="line">box.innerHTML +=&quot;地面速度&quot;+position.coords.speed + &quot;&lt;br&gt;&quot;;</span><br><span class="line">box.innerHTML +=&quot;行进方向&quot;+position.coords.heading + &quot;&lt;br&gt;&quot;;</span><br><span class="line">box.innerHTML +=&quot;请求时间&quot;+new Date(position.timestamp) + &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;,function(err)&#123;</span><br><span class="line">alert(err.code);</span><br><span class="line">&#125;,&#123;</span><br><span class="line">enableHighAccuracy:false,//精确请求</span><br><span class="line">timeout:5000,//设置超时</span><br><span class="line">maximumAge:1000//缓存时间</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><a href="http://codepen.io/poetries/pen/RKPWMg">在线演示</a></p><ul><li>**examp02 **</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">navigator.geolocation.watchPosition(<span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">box.innerHTML +=<span class="string">&quot;经度：&quot;</span>+position.coords.longitude + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">box.innerHTML +=<span class="string">&quot;纬度：&quot;</span>+position.coords.latitude + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">box.innerHTML +=<span class="string">&quot;海拔：&quot;</span>+position.coords.accuracy + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">box.innerHTML +=<span class="string">&quot;海拔的准确度：&quot;</span>+position.coords.altitudeAccuracy + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">box.innerHTML +=<span class="string">&quot;地面速度&quot;</span>+position.coords.speed + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">box.innerHTML +=<span class="string">&quot;行进方向&quot;</span>+position.coords.heading + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">box.innerHTML +=<span class="string">&quot;请求时间&quot;</span>+<span class="keyword">new</span> <span class="built_in">Date</span>(position.timestamp) + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">alert(err.code);</span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="attr">enableHighAccuracy</span>:<span class="literal">false</span>,<span class="comment">//精确请求</span></span><br><span class="line"><span class="attr">timeout</span>:<span class="number">5000</span>,<span class="comment">//设置超时</span></span><br><span class="line"><span class="attr">maximumAge</span>:<span class="number">1000</span><span class="comment">//缓存时间</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/poetries/pen/zNGvjY">在线演示</a></p><ul><li><strong>example03 高德地图应用</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#container &#123;</span><br><span class="line">    width:600px; </span><br><span class="line">    height: 300px;</span><br><span class="line">    margin:40px auto;</span><br><span class="line">    border:1px solid red;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">&quot;http://webapi.amap.com/maps?v=1.3&amp;key=278b7b8b4728ba302b7e566fc2a97b36&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">&#x27;container&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/poetries/pen/qRdOKZ">在线演示</a></p><ul><li><strong>examp04  搜索城市</strong></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;<span class="attribute">width</span>:<span class="number">500px</span>; <span class="attribute">height</span>:<span class="number">500px</span>; <span class="attribute">margin</span>:<span class="number">100px</span> auto;&#125;  </span><br><span class="line"><span class="selector-class">.menu</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">margin</span>:auto;</span><br><span class="line"><span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>:none;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">30px</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">40px</span>;</span><br><span class="line"><span class="attribute">position</span>:absolute;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">150px</span>;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-left</span>:-<span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">38px</span>;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line"><span class="attribute">border</span>:none;</span><br><span class="line"><span class="attribute">outline</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#btn</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;container&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt; </span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;box&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">input</span> type=&quot;text&quot; id=&quot;city&quot; placeholder=&quot;请输入城市...&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">input</span> type=&quot;<span class="selector-tag">button</span>&quot; value=&quot;搜索&quot; id=&quot;btn&quot;&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; </span><br><span class="line"><span class="attribute">src</span>=&quot;http://webapi.amap.com/maps?v=<span class="number">1.3</span>&amp;key=<span class="number">278</span>b7b8b4728ba302b7e566fc2a97b36<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    var btn = document.getElementById(&quot;</span>btn<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    var city = document.getElementById(&quot;</span>city<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    var map = new AMap.Map(&#x27;container&#x27;);</span></span><br><span class="line"><span class="string">    var toolBar,mouseTool,contextMenu;</span></span><br><span class="line"><span class="string">    //在地图中添加操作toolBar插件、mouseTool插件</span></span><br><span class="line"><span class="string">    map.plugin([&quot;</span>AMap.ToolBar<span class="string">&quot;,&quot;</span>AMap.MouseTool<span class="string">&quot;],function()&#123;</span></span><br><span class="line"><span class="string">        toolBar = new AMap.ToolBar();</span></span><br><span class="line"><span class="string">        map.addControl(toolBar);</span></span><br><span class="line"><span class="string">        mouseTool = new AMap.MouseTool(map);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    var menuContext = document.createElement(&quot;</span>div<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    menuContext.innerHTML = &quot;</span>&lt;div class=menu&gt;&lt;ul&gt;&lt;li onclick=<span class="string">&#x27;zoomMenu(0)&#x27;</span>&gt;缩小&lt;/li&gt;</span><br><span class="line">    &lt;li onclick=<span class="string">&#x27;zoomMenu(1)&#x27;</span>&gt;放大&lt;/li&gt;</span><br><span class="line">    &lt;li onclick=<span class="string">&#x27;distanceMeasureMenu()&#x27;</span>&gt;距离量测&lt;/li&gt;</span><br><span class="line">    &lt;li onclick = <span class="string">&#x27;addMarkerMenu()&#x27;</span>&gt;添加标记&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    //创建一个自定义的右键菜单</span></span><br><span class="line"><span class="string">    contextMenu = new AMap.ContextMenu(&#123;isCustom:true,content:menuContext&#125;);</span></span><br><span class="line"><span class="string">    //给地图绑鼠标右键功能弹出右键菜单</span></span><br><span class="line"><span class="string">    AMap.event.addListener(map,&quot;</span>rightclick<span class="string">&quot;,function(e)&#123;</span></span><br><span class="line"><span class="string">        contextMenu.open(map,e.lnglat);//e.lnglat鼠标点击的经纬度</span></span><br><span class="line"><span class="string">        contextMenuPosition = e.lnglat;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    //右键菜单缩放地图</span></span><br><span class="line"><span class="string">    function zoomMenu(n)&#123;</span></span><br><span class="line"><span class="string">        if(n === 0)&#123;map.zoomOut();&#125;</span></span><br><span class="line"><span class="string">        if(n === 1)&#123;map.zoomIn();&#125;</span></span><br><span class="line"><span class="string">        contextMenu.close();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    contextMenu.close();</span></span><br><span class="line"><span class="string">    //测量距离功能</span></span><br><span class="line"><span class="string">    function distanceMeasureMenu()&#123;</span></span><br><span class="line"><span class="string">        mouseTool.rule();</span></span><br><span class="line"><span class="string">        contextMenu.close();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    //添加标注功能</span></span><br><span class="line"><span class="string">    function addMarkerMenu()&#123;</span></span><br><span class="line"><span class="string">        mouseTool.close();</span></span><br><span class="line"><span class="string">        var marker = new AMap.Marker(&#123;</span></span><br><span class="line"><span class="string">            map: map,</span></span><br><span class="line"><span class="string">            position: contextMenuPosition, //基点位置</span></span><br><span class="line"><span class="string">            offset: &#123;x:-5,y:-10&#125; //相对于基点位置</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        contextMenu.close();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    //搜索城市</span></span><br><span class="line"><span class="string">    btn.onclick = function()&#123;</span></span><br><span class="line"><span class="string">        var val = city.value;</span></span><br><span class="line"><span class="string">        map.setCity(val);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><a href="http://codepen.io/poetries/pen/xgGwaZ">在线演示</a></p><h3 id="devicemotion（监听加速度变化）"><a href="#devicemotion（监听加速度变化）" class="headerlink" title="devicemotion（监听加速度变化）"></a>devicemotion（监听加速度变化）</h3><blockquote><p><strong>devicemotion</strong>：监听加速度变化，当你的设备疯狂摇摆时，可以监听到是加速还是在减速，需要陀螺仪支持</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;devicemotion&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>包含的属性</p><ul><li><code>accelerationIncludingGravity</code>：包括重心引力，<code>z</code>轴方向加了<code>9.8</code>，再<code>x,y</code>方向上的值两者相同，重力加速度</li><li><code>acceleration</code>：重力加速度（需要陀螺仪支持）</li><li><code>rotationRate(alpha,beta,gamma)</code>：旋转速率</li><li><code>interval</code>：获取的时间间隔</li><li>注意：都是只读属性</li></ul></li><li><p>```js<br>//重力感应<br>window.addEventListener(‘devicemotion’,function(e) {</p><pre><code>        item.innerHTML = e.accelerationIncludingGravity.x + &#39;-&#39; +e.accelerationIncludingGravity.y + &#39;-&#39; + e.accelerationIncludingGravity.z;    &#125;)</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  微信摇一摇</span><br><span class="line">  var SHAKE_THRESHOLD = 800; //基准值800</span><br><span class="line">          var last_update = 0; //上一次更新的时间为0</span><br><span class="line">  //当前x,y,z和上一次的x,y,z</span><br><span class="line">          var x, y, z, last_x=0, last_y=0, last_z=0;</span><br><span class="line">          function deviceMotionHeadler(eventData) &#123;</span><br><span class="line">          // 加速度</span><br><span class="line">              var acceleration = eventData.accelerationIncludingGravity;</span><br><span class="line">              //时间戳</span><br><span class="line">              var curTime = new Date().getTime();</span><br><span class="line">              //300毫秒判断一次，300毫秒执行一次</span><br><span class="line">              if((curTime - last_update) &gt; 300) &#123;</span><br><span class="line">                  var diffTime = curTime - last_update;</span><br><span class="line">                  last_update = curTime;</span><br><span class="line">                  x = acceleration.x;</span><br><span class="line">                  y = acceleration.y;</span><br><span class="line">                  z = acceleration.z;</span><br><span class="line">                  </span><br><span class="line">                  var speed = Math.abs(x + y + z - last_x - last_y - last_z) / diffTime * 10000;</span><br><span class="line">                  if(speed &gt; SHAKE_THRESHOLD) &#123;</span><br><span class="line">                      alert(&#x27;shaked~!&#x27;);</span><br><span class="line">                      var div = document.createElement(&#x27;div&#x27;);</span><br><span class="line">                      div.innerText = &#x27;11&#x27;;</span><br><span class="line">                      document.body.appendChild(div);</span><br><span class="line">                  &#125;</span><br><span class="line">                  last_x = x;</span><br><span class="line">                  last_y = y;</span><br><span class="line">                  last_z = z;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          //监听加速度的变化，当加速度变化时，执行deviceMotionHeadler函数</span><br><span class="line">          window.addEventListener(&#x27;devicemotion&#x27;, deviceMotionHeadler, false);</span><br></pre></td></tr></table></figure></li></ul><h3 id="deviceorientation（监听方向变化）"><a href="#deviceorientation（监听方向变化）" class="headerlink" title="deviceorientation（监听方向变化）"></a>deviceorientation（监听方向变化）</h3><blockquote><p>deviceorientation：监听设备在方向上的变化</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(deviceorientation,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>包含的属性</p><ul><li><code>alpha</code>：表示设备沿z轴上的旋转角度，范围为<code>0~360</code></li><li><code>beta</code>表示设备再X轴上的旋转角度，范围为<code>-180~180</code>。它描述的是设备由前向后旋转的情况</li><li><code>gamma</code>表示设备在<code>y</code>轴上的旋转角度，范围为<code>-90~90</code>。它描述的是设备由左向右旋转的情况</li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111704446.png"></li></ul></li><li><p>```html</p><p>旋转：<span id="alpha">0</span></p><p>前后：<span id="beta">0</span></p><p>扭转：<span id="gamma">0</span></p><script>    function DeviceOrientationHandler(event){        var alpha = event.alpha,            beta = event.beta,            gamma = event.gamma,            webkitCompassHeading = event.webkitCompassHeading;        if(alpha != null || beta != null || gamma != null){            //判断屏幕方向            var html = "";            if( gamma > 0 ){                html = "向右倾斜" + gamma;            }else{                html = "向左倾斜" + gamma;            }            document.getElementById("gamma").innerHTML = html;            var str = '';            if( beta > 0 ){                str = "向前倾斜" + beta;            }else{                str = "向后倾斜" + beta;            }            var head = '';            var headNum = Math.round(Math.round(webkitCompassHeading/45) + 7)%8;            switch (headNum) {                case 0:                    head = '东北';                    break;                case 1:                    head = '东';                    break;                case 2:                    head = '东南';                    break;                case 3:                    head = '南';                    break;                case 4:                    head = '西南';                    break;                case 5:                    head = '西';                    break;                case 6:                    head = '西北';                    break;                case 7:                    head = '北';            }            document.getElementById("beta").innerHTML = str;            document.getElementById("alpha").innerHTML = alpha;            document.getElementById('heading').innerHTML = head + '   ' + webkitCompassHeading;        }else{            document.body.innerHTML = "当前浏览器不支持DeviceOrientation";        }    }    //判断有没有这个事件，如果有的话才监听    if(window.DeviceOrientationEvent){        window.addEventListener('deviceorientation',DeviceOrientationHandler, false);    }else{        alert("您的浏览器不支持DeviceOrientation");    }</script><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `webkitCompassHeading`：与正北方向的角度差值。正北为`0`度，正东为`90`度，正南为`180`度，正西为`270`度。因为`0`度是正北，所以叫指北针。</span><br><span class="line"></span><br><span class="line">- `webkitCompassAccuracy`：指北针的精确度，表示偏差为正负多少度。一般是`10`。</span><br><span class="line"></span><br><span class="line">## 动画函数、历史记录、线程管理</span><br><span class="line"></span><br><span class="line">### requestAnimationFrame(动画函数)</span><br><span class="line"></span><br><span class="line">&gt; 实现动画的API，让浏览器更加流畅的实现动画</span><br><span class="line"></span><br><span class="line">- 由于`JavaScript`是单线程的，所以定时器的实现是在当前任务队列完成后再执行定时器的回调的，假如当前队列任务执行时间大于定时器设置的延迟时间，那么定时器就不是那么可靠了</span><br><span class="line"></span><br><span class="line">- 动画是由浏览器按照一定的频率一帧一帧的绘制的，由`css`实现的动画的优势就是浏览器知道动画的开始及每一帧的循环间隔，能够在恰当的时间刷新`UI`，给用户一种流畅的体验，而`setInterval`或`setTimeout`实现的`JavaScript`动画就没有这么可靠了，因为浏览器压根就无法保证每一帧渲染的时间间隔，一般情况下，每秒平均刷新次数能够达到60帧，就能够给人流畅的体验，即每过 `1000/60` 毫秒渲染新一帧即可，这一点单靠定时器是无法保证的。 为此，`requestAnimationFrame`应运而生，其作用就是让浏览器流畅的执行动画效果。可以将其理解为专门用来实现动画效果的`api`，通过这个`api`,可以告诉浏览器某个`JavaScript`代码要执行动画，浏览器收到通知后，则会运行这些代码的时候进行优化，实现流畅的效果，而不再需要开发人员烦心刷新频率的问题了。</span><br><span class="line"></span><br><span class="line">- 大多数电脑显示器的刷新频率是`60Hz`，大概相当于每秒钟重绘`60`次。大多数浏览器都会对重绘操作加以限制，不超过显示器的重绘频率，因为即使超过那个频率用户体验也不会有提升。因此，最平滑动画的最佳循环间隔是`1000ms/60`，约等于`16.7ms`，所以屏幕一般`16.7ms`才会刷新一次</span><br><span class="line"></span><br><span class="line">- 特点</span><br><span class="line"></span><br><span class="line">  - `requestAnimationFrame`会把每一帧中的所有`DOM`操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，在隐藏或不可见的元素中，`requestAnimationFrame`将不会进行重绘或回流，这当然就意味着更少的`CPU`、`GPU`和内存使用量</span><br><span class="line">  - `requestAnimationFrame`是由浏览器专门为动画提供的`API`，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了`CPU`开销</span><br><span class="line">  - `requestAnimationFrame`会在浏览器每次刷新前执行，因为屏幕刷新率一般是`16.7ms`，所以一般`16.7ms`执行一次</span><br><span class="line">  - `requestAnimationFrame`的用法与`setTimeout`很相似，只是不需要设置时间间隔而已。`requestAnimationFrame`使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。它返回一个整数，表示定时器的编号，这个值可以传递给`cancelAnimationFrame`用于取消这个函数的执行。</span><br><span class="line">  - 兼容性存在问题，因为是`HTML5`新提供的`API`，只可以在`IE10`以上的浏览器</span><br><span class="line"></span><br><span class="line">- `requestAnimationFrame`：设置动画</span><br><span class="line"></span><br><span class="line">- `canvelAnimationFrame`：取消动画</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  //简单兼容</span><br><span class="line">  //设置AnimationFrame</span><br><span class="line">  window.requestAnimFrame = (function()&#123; </span><br><span class="line">  return window.requestAnimationFrame || </span><br><span class="line">          window.webkitRequestAnimationFrame || </span><br><span class="line">          window.mozRequestAnimationFrame || </span><br><span class="line">          function(callback) &#123;</span><br><span class="line">              window.setTimeout(callback,1000/60);</span><br><span class="line">          &#125;;</span><br><span class="line">  &#125;)();</span><br><span class="line">  </span><br><span class="line">  //取消AnimationFrame</span><br><span class="line">  window.cancelAnimFrame = (function() &#123;</span><br><span class="line">      return window.cancelAnimationFrame ||</span><br><span class="line">          window.webkitCancelAnimationFrame ||</span><br><span class="line">          window.mozCancelAnimationFrame ||</span><br><span class="line">          function(id) &#123;</span><br><span class="line">              window.clearTimeout(id);</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;)();</span><br></pre></td></tr></table></figure></li><li><p>```js<br>// 完美兼容<br>(function() {</p><pre><code>var lastTime = 0;    var vendors = [&#39;webkit&#39;, &#39;moz&#39;];    for(var x = 0; x &lt; vendors.length &amp;&amp; !window.requestAnimationFrame; ++x) &#123;        window.requestAnimationFrame = window[vendors[x] + &#39;RequestAnimationFrame&#39;];        window.cancelAnimationFrame = window[vendors[x] + &#39;CancelAnimationFrame&#39;] ||    // Webkit中此取消方法的名字变了                                      window[vendors[x] + &#39;CancelRequestAnimationFrame&#39;];    &#125;if (!window.requestAnimationFrame) &#123;    window.requestAnimationFrame = function(callback, element) &#123;        var currTime = new Date().getTime();        var timeToCall = Math.max(0, 16.7 - (currTime - lastTime));        var id = window.setTimeout(function() &#123;            callback(currTime + timeToCall);        &#125;, timeToCall);        lastTime = currTime + timeToCall;        return id;    &#125;;&#125;if (!window.cancelAnimationFrame) &#123;    window.cancelAnimationFrame = function(id) &#123;        clearTimeout(id);    &#125;;&#125;</code></pre><p>}());</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  例：</span><br><span class="line">  </span><br><span class="line">  &lt;div id=&quot;btn&quot;&gt;&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  //requestAnimationFrame兼容函数</span><br><span class="line">  window.requestAnimationFrame = (function() &#123;</span><br><span class="line">      return window.requestAnimationFrame || </span><br><span class="line">          window.webkitRequestAnimationFrame || </span><br><span class="line">          window.mozRequestionAnimationFrame || </span><br><span class="line">          function(callback) &#123;</span><br><span class="line">              window.setTimeout(callback,1000/60);</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line">  //cancelAnimationFrame兼容函数</span><br><span class="line">  window.cancelAnimationFrame = (function() &#123;</span><br><span class="line">      return window.cancelAnimationFrame ||</span><br><span class="line">          window.webkitCancelAnimationFrame || </span><br><span class="line">          window.mozCancelAnimationFrame || </span><br><span class="line">          function(id) &#123;</span><br><span class="line">              window.clearTimeout(id);</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line">  </span><br><span class="line">  var req; //标识</span><br><span class="line">  </span><br><span class="line">  function move() &#123;</span><br><span class="line">      btn.style.left = btn.offsetLeft + 10 + &#x27;px&#x27;;</span><br><span class="line">      if(btn.offsetLeft &gt;= 300) &#123;</span><br><span class="line">          // clearTimeout(timer);</span><br><span class="line">          cancelAnimationFrame(req);</span><br><span class="line">          btn.style.left = &#x27;300px&#x27;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          // req = setTimeout(function() &#123;</span><br><span class="line">          // move();</span><br><span class="line">          // &#125;,10)</span><br><span class="line">          req = requestAnimationFrame(move);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  move();</span><br></pre></td></tr></table></figure></li></ul><h3 id="history-历史记录"><a href="#history-历史记录" class="headerlink" title="history(历史记录)"></a>history(历史记录)</h3><ul><li><p>属性</p><ul><li><code>history.length()</code>：返回浏览器当前标签页历史列表中的 <code>URL</code> 数量</li><li><code>history.back()</code>：加载浏览器当前标签页<code>history</code> 列表中的前一个 <code>URL</code></li><li><code>history.forward()</code>：加载浏览器当前标签页<code>history</code> 列表中的下一个 <code>URL</code></li><li><code>history.go()</code>：加载 history 列表中的某个具体页面,例如 <code>history.go(-2)</code></li></ul></li><li><p>为什么要管理历史记录</p><ul><li>为了给用户更方便的操作，更方便回退</li></ul></li><li><p><code>history api</code>的作用，为了我们更方便管理历史记录，不用非要用户点击操作</p></li><li><p><strong>SPA</strong>：单页面应用</p></li><li><p>修改事件实现历史记录管理</p><ul><li><code>pushState</code><ul><li><code>history.pushState(state,title,url);</code> 添加一条历史记录</li></ul></li><li><code>repalceState</code><ul><li><code>history.replaceState(state,title,url)</code>：替换当前的历史记录</li></ul></li><li>参数：<ul><li><code>state</code>：一个与指定网址相关的状态对象，<code>popstate</code>事件触发时，该对象会传入回调函数中，如果不需要这个对象，可以填<code>null</code></li><li><code>title</code>：新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填<code>null</code></li><li><code>url</code>：新的网址，必须与当前页面处在同一个域，浏览器的地址栏将显示在这个网址</li></ul></li></ul></li><li><p>事件</p><ul><li><code>popstate</code>：历史记录发生改变时触发<ul><li>调用<code>history.pushState()或者history.replaceState()不会触发popstate事件</code></li></ul></li><li><code>hashchange</code>：当页面的<code>hash</code>值改变的时候触发，常用于构建单页面应用</li></ul></li></ul><h3 id="worker-线程管理"><a href="#worker-线程管理" class="headerlink" title="worker(线程管理)"></a>worker(线程管理)</h3><ul><li><p>简介</p><ul><li><code>Web Worker</code> (工作线程) 是 <code>HTML5</code> 中提出的概念，分为两种类型，专用线程（<code>Dedicated Web Worker</code>） 和共享线程（<code>Shared Web Worker</code>）。专用线程仅能被创建它的脚本所使用（一个专用线程对应一个主线程），而共享线程能够在不同的脚本中使用（一个共享线程对应多个主线程）。</li><li>专用线程可以看做是默认情况的 <code>Web Worker</code>，其加上修饰词的目的是为了与共享线程进行区分。本文会较为严格地区分两者，可能较为累赘，但个人认为这是必要的。如果单纯以 <code>Web Worker</code> 字样出现的地方指的是两者都会有的情况。</li></ul></li><li><p>用途</p><ul><li><code>Web Worker</code> 的意义在于可以将一些耗时的数据处理操作从主线程中剥离，使主线程更加专注于页面渲染和交互。</li><li>懒加载</li><li>文本分析</li><li>流媒体数据处理</li><li><code>canvas</code> 图形绘制</li><li>图像处理</li><li>…</li></ul></li><li><p>需要注意的点</p><ul><li>有同源限制</li><li>无法访问 <code>DOM</code> 节点</li><li>运行在另一个上下文中，无法使用<code>Window</code>对象</li><li><code>Web Worker</code> 的运行不会影响主线程，但与主线程交互时仍受到主线程单线程的瓶颈制约。换言之，如果 Worker 线程频繁与主线程进行交互，主线程由于需要处理交互，仍有可能使页面发生阻塞</li><li>共享线程可以被多个浏览上下文（<code>Browsing context</code>）调用，但所有这些浏览上下文必须同源（相同的协议，主机和端口号）</li></ul></li><li><p>浏览器支持度</p><ul><li>根据 <code>CanI Use</code> 网站的统计，目前约有 <code>93.05%</code> 的浏览器支持专用线程。</li></ul></li><li><p>线程创建</p><ul><li><p>值得注意的是，因为 <code>Web Worker</code> 有同源策略限制，所以在本地调试的时候也需要通过启动本地服务器的方式访问，使用 <code>file://</code> 协议直接打开的话将会抛出异常。</p></li><li><p>专用线程</p></li><li><p>```js<br>//专用线程由 Worker()方法创建，可以接收两个参数，第一个参数是必填的脚本的位置，第二个参数是可选的配置对象，可以指定 type、credentials、name 三个属性。</p><p>专用线程<br>var worker = new Worker(‘worker.js’)//worker.js是自己的js文件<br>// var worker = new Worker(‘worker.js’, { name: ‘dedicatedWorker’})</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 共享线程</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  //共享线程使用 Shared Worker() 方法创建，同样支持两个参数，用法与 Worker() 一致。</span><br><span class="line">  var sharedWorker = new SharedWorker(&#x27;shared-worker.js&#x27;)//shared-worker.js是自己的js文件</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数据传递</p><ul><li><p><strong>postMessage</strong>()：发送消息事件</p></li><li><p><strong>onmessage</strong>：接收消息事件</p></li><li><p><code>Worker</code> 线程和主线程都通过 <code>postMessage()</code> 方法发送消息，通过 <code>onmessage</code> 事件接收消息。在这个过程中数据并不是被共享的，而是被复制的。值得注意的是 <code>Error</code> 和 <code>Function</code> 对象不能被结构化克隆算法复制，如果尝试这么做的话会导致抛出 <code>DATA_CLONE_ERR</code> 的异常。另外，<code>postMessage()</code> 一次只能发送一个对象， 如果需要发送多个参数可以将参数包装为数组或对象再进行传递。</p></li><li><p>```js<br>// 主线程<br>//创建一个worker<br>var worker = new Worker(‘worker.js’)<br>//worker postMessage<br>worker.postMessage(10)<br>//给worker绑定message事件<br>worker.onmessage = function(e) {</p><pre><code>console.log(e.data)</code></pre><p>}</p><p>// Worker.js 线程<br>//绑定onmessage事件<br>onmessage = function(e) {</p><pre><code>console.log(e.data);//向主线程发送数据postMessage(deal(e.data));</code></pre><p>}</p><p>function deal(data) {</p><pre><code>return data * data;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">- 在 `Worker` 线程中，`self` 和 `this` 都代表子线程的全局对象。对于监听 message 事件，以下的四种写法是等同的。</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  // 写法 1</span><br><span class="line">  self.addEventListener(&#x27;message&#x27;, function (e) &#123;</span><br><span class="line">      // ...</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // 写法 2</span><br><span class="line">  this.addEventListener(&#x27;message&#x27;, function (e) &#123;</span><br><span class="line">      // ...</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // 写法 3</span><br><span class="line">  addEventListener(&#x27;message&#x27;, function (e) &#123;</span><br><span class="line">      // ...</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // 写法 4</span><br><span class="line">  onmessage = function (e) &#123;</span><br><span class="line">      // ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>主线程通过 <code>MessagePort</code> 访问专用线程和共享线程。专用线程的 <code>port</code> 会在线程创建时自动设置，并且不会暴露出来。与专用线程不同的是，共享线程在传递消息之前，端口必须处于打开状态。<code>MDN</code> 上的 <code>MessagePort</code> 关于 <code>start()</code> 方法的描述是：</p><ul><li><blockquote><p>Starts the sending of messages queued on the port (only needed when using EventTarget.addEventListener; it is implied when using MessagePort.onmessage.)</p><p>开始发送在端口上排队的消息（仅在使用EventTarget.addEventListener时需要）；当使用MessagePort.onmessage时，它是隐含的。）</p></blockquote></li><li><p>这句话经过试验，可以理解为 <code>start()</code> 方法是与 <code>addEventListener</code> 配套使用的。如果我们选择 <code>onmessage</code> 进行事件监听，那么将隐含调用 <code>start()</code> 方法。</p></li><li><p>```js<br>// 主线程<br>var sharedWorker = new SharedWorker(‘shared-worker.js’)<br>sharedWorker.port.onmessage = function(e) {</p><pre><code>// 业务逻辑</code></pre><p>}</p><p>var sharedWorker = new SharedWorker(‘shared-worker.js’)<br>sharedWorker.port.addEventListener(‘message’, function(e) {</p><pre><code>// 业务逻辑</code></pre><p>}, false)<br>sharedWorker.port.start() // 需要显式打开</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 在传递消息时，`postMessage()` 方法和 `onmessage` 事件必须通过端口对象调用。另外，在 `Worker` 线程中，需要使用 `onconnect` 事件监听端口的变化，并使用端口的消息处理函数进行响应。</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  // 主线程</span><br><span class="line">  sharedWorker.port.postMessage([10, 24])</span><br><span class="line">  sharedWorker.port.onmessage = function (e) &#123;</span><br><span class="line">      console.log(e.data)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // Worker 线程</span><br><span class="line">  onconnect = function (e) &#123;</span><br><span class="line">      let port = e.ports[0]</span><br><span class="line">  </span><br><span class="line">      port.onmessage = function (e) &#123;</span><br><span class="line">          if (e.data.length &gt; 1) &#123;</span><br><span class="line">              port.postMessage(e.data[1] - e.data[0])</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>关闭 <strong>Worker</strong></p><ul><li><p>**close()**：在<code>worker</code>作用域中调用，自己关闭</p></li><li><p>**terminate()**：在<code>worker</code>对象上调用(主进程的<code>worker</code>对象上<code>worker.terminate</code>)，上级关闭<code>worker</code></p></li><li><p>可以在主线程中使用 <code>terminate()</code> 方法或在 <code>Worker</code> 线程中使用 <code>close()</code> 方法关闭 <code>worker</code>。这两种方法是等效的，但比较推荐的用法是使用 <code>close()</code>，防止意外关闭正在运行的 <code>Worker</code> 线程。<code>Worker</code> 线程一旦关闭 <code>Worker</code> 后 <code>Worker</code> 将不再响应。</p></li><li><p>```js<br>// 主线程<br>worker.terminate()</p><p>// Dedicated Worker 线程中<br>self.close()</p><p>// Shared Worker 线程中<br>self.port.close()</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">- 错误处理</span><br><span class="line"></span><br><span class="line">  - 可以通过在主线程或 `Worker` 线程中设置 `onerror` 和 `onmessageerror` 的回调函数对错误进行处理。其中，`onerror` 在 `Worker` 的 `error` 事件触发并冒泡时执行，`onmessageerror` 在 `Worker` 收到的消息不能进行反序列化时触发(本人经过尝试没有办法触发 `onmessageerror` 事件，如果在 `worker` 线程使用 `postMessage` 方法传递一个 Error 或 Function 对象会因为无法序列化优先被 `onerror` 方法捕获，而根本不会进入反序列化的过程)</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    // 主线程</span><br><span class="line">    worker.onerror = function () &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 主线程使用专用线程</span><br><span class="line">    worker.onmessageerror = function () &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 主线程使用共享线程</span><br><span class="line">    worker.port.onmessageerror = function () &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // worker 线程</span><br><span class="line">    onerror = function () &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>加载外部脚本</p><ul><li><p> <code>importScripts()</code> ：能够将外部脚本文件加载到 <code>Worker</code> 中</p></li><li><p><code>worker</code>只是<code>window</code>的子集，只能实现部分功能，不能获取到<code>window</code>，<code>documennt</code>，所以这里不要引入<code>jquery</code>，可以引入一些计算的库</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">importScripts(<span class="string">&#x27;script1.js&#x27;</span>)</span><br><span class="line">importScripts(<span class="string">&#x27;script2.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上写法等价于</span></span><br><span class="line">importScripts(<span class="string">&#x27;script1.js&#x27;</span>, <span class="string">&#x27;script2.js&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子线程</p><ul><li><code>Worker</code> 可以生成子 <code>Worker</code>，但有两点需要注意。</li><li>子 <code>Worker</code> 必须与父网页同源</li><li>子 <code>Worker</code> 中的 <code>URI</code> 相对于父 <code>Worker</code> 所在的位置进行解析</li></ul></li><li><p>嵌入式 <strong>Worker</strong></p><ul><li><p>目前没有一类标签可以使 <code>Worker</code> 的代码像 <code>&lt;script&gt;</code> 元素一样嵌入网页中，但我们可以通过 <code>Blob()</code> 将页面中的 <code>Worker</code> 代码进行解析。</p></li><li><p>```js</p><script id="worker" type="javascript/worker">// 这段代码不会被 JS 引擎直接解析，因为类型是 'javascript/worker'// 在这里写 Worker 线程的逻辑</script><script>    var workerScript = document.querySelector('#worker').textContent    var blob = new Blob(workerScript, {type: "text/javascript"})    var worker = new Worker(window.URL.createObjectURL(blob))</script><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 关于 **postMessage**</span><br><span class="line"></span><br><span class="line">  - `Web Worker` 中，`Worker` 线程和主线程之间使用结构化克隆算法（`The structured clone algorithm`）进行数据通信。结构化克隆算法是一种通过递归输入对象构建克隆的算法，算法通过保存之前访问过的引用的映射，避免无限遍历循环。这一过程可以理解为，在发送方使用类似 `JSON.stringfy()` 的方法将参数序列化，在接收方采用类似 `JSON.parse()` 的方法反序列化。</span><br><span class="line"></span><br><span class="line">  - 但是，一次数据传输就需要同时经过序列化和反序列化，如果数据量大的话，这个过程本身也可能造成性能问题。因此， `Worker` 中提出了 `Transferable Objects` 的概念，当数据量较大时，我们可以选择在将主线程中的数据直接移交给 `Worker` 线程。值得注意的是，这种转移是彻底的，一旦数据成功转移，主线程将不能访问该数据。这个移交的过程仍然通过 `postMessage` 进行传递。</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    postMessage(message, transferList)</span><br></pre></td></tr></table></figure></li><li><p>例如，传递一个 <code>ArrayBuffer</code> 对象</p></li><li><p>```js<br>var aBuffer = new ArrayBuffer(1)<br>worker.postMessage({ data: aBuffer }, [aBuffer])</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 上下文，作用域</span><br><span class="line"></span><br><span class="line">  - `Worker` 工作在一个 `WorkerGlobalDataScope` 的上下文中。每一个 `WorkerGlobalDataScope` 对象都有不同的 `event loop`。这个 `event loop` 没有关联浏览器上下文（`browsing context`），它的任务队列也只有事件（`events`）、回调（`callbacks`）和联网的活动（`networking activity`）。</span><br><span class="line">  - 每一个 `WorkerGlobalDataScope` 都有一个 closing 标志，当这个标志设为 true 时，任务队列将丢弃之后试图加入任务队列的任务，队列中已经存在的任务不受影响（除非另有指定）。同时，定时器将停止工作，所有挂起（`pending`）的后台任务将会被删除。</span><br><span class="line"></span><br><span class="line">- **Worker** 中可以使用的函数和类</span><br><span class="line"></span><br><span class="line">  - 由于 `Worker` 工作的上下文不同于普通的浏览器上下文，因此不能访问 window 以及 window 相关的 `API`，也不能直接操作 `DOM`。`Worker` 中提供了 `WorkerNavigator` 和 `WorkerLocation` 接口，它们分别是 `window` 中 `Navigator` 和 `Location` 的子集。除此之外，`Worker` 还提供了涉及时间、存储、网络、绘图等多个种类的接口，以下列举了其中的一部分，更多的接口可以参考 `MDN` 文档。</span><br><span class="line"></span><br><span class="line">- 时间相关</span><br><span class="line"></span><br><span class="line">  - `clearInterval()`</span><br><span class="line">  - `clearTimeout()`</span><br><span class="line">  - `setInterval()`</span><br><span class="line">  - `setTimeout()`</span><br><span class="line"></span><br><span class="line">- **Worker** 相关</span><br><span class="line"></span><br><span class="line">  - `importScripts()`</span><br><span class="line">  - `close()`</span><br><span class="line">  - `postMessage()`</span><br><span class="line"></span><br><span class="line">- 存储相关</span><br><span class="line"></span><br><span class="line">  - `Cache`</span><br><span class="line">  - `IndexedDB`</span><br><span class="line"></span><br><span class="line">- 网络相关</span><br><span class="line"></span><br><span class="line">  - `Fetch`</span><br><span class="line">  - `WebSocket`</span><br><span class="line">  - `XMLHttpRequest`：可以发送`ajax`对象</span><br><span class="line">  </span><br><span class="line">- 作用域**globalWorkerScope**</span><br><span class="line"></span><br><span class="line">  - `navigator`：可以使用`navigator`中的一些对象</span><br><span class="line">  - 可以在`worker`文件中继续生成`worker`对象（`chrome`暂时不支持，浏览器支持情况不好）</span><br><span class="line"></span><br><span class="line">## 拖拽/ 读取文件 / WebSocket</span><br><span class="line"></span><br><span class="line">### drag &amp; drop（拖拽）</span><br><span class="line"></span><br><span class="line">- 常用于各种拖动操作中</span><br><span class="line">- 创建可拖动元素</span><br><span class="line">  - `&lt;div&gt; id=&#x27;drag&#x27; draggable=&#x27;true&#x27;&gt;&lt;/div&gt;`</span><br><span class="line"></span><br><span class="line">- 相关事件</span><br><span class="line"></span><br><span class="line">  - `dragstart`：被拖拽元素，开始被拖拽时触发</span><br><span class="line">  - `dragend`：被拖拽元素，拖拽完成时触发</span><br><span class="line">  - `dragenter`：目标元素，拖拽元素进入目标元素触发</span><br><span class="line">  - `dragover`：目标元素，拖拽元素在目标元素上移动触发</span><br><span class="line">  - `drop`：目标元素，被拖拽的元素在目标元素上同时鼠标放开触发</span><br><span class="line">  - 注意：需要阻止`dragover`的默认行为才会触发`drop`事件</span><br><span class="line"></span><br><span class="line">- **DragEvent**事件对象</span><br><span class="line"></span><br><span class="line">  - 传值</span><br><span class="line">    - `e.dataTransfer.setData(&quot;data&quot;,e.target.id)`</span><br><span class="line">  - 取值</span><br><span class="line">    - `e.dataTransfer.getData(&quot;data&quot;)`</span><br><span class="line"></span><br><span class="line">- 案例1：把元素拖入到目标元素</span><br><span class="line"></span><br><span class="line">  - ```html</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    #item1&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background:red;</span><br><span class="line">        &#125;</span><br><span class="line">        #item2&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background:green;</span><br><span class="line">        &#125;</span><br><span class="line">        #wrapper&#123;</span><br><span class="line">            width:500px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            background: orange;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div id=&quot;item1&quot; draggable=&#x27;true&#x27;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;item2&quot; draggable=&#x27;true&#x27;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;wrapper&quot;&gt;&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        //被拖拽对象</span><br><span class="line">        var oItem1 = document.getElementById(&quot;item1&quot;);</span><br><span class="line">        var oItem2 = document.getElementById(&quot;item2&quot;);</span><br><span class="line">        //目标对象</span><br><span class="line">        var oWrapper = document.getElementById(&quot;wrapper&quot;);</span><br><span class="line">        oItem1.addEventListener(&#x27;dragstart&#x27;,function(e)&#123;</span><br><span class="line">            e.dataTransfer.setData(&#x27;data&#x27;,this.id);</span><br><span class="line">    </span><br><span class="line">        &#125;,false);</span><br><span class="line">    </span><br><span class="line">        oItem2.addEventListener(&#x27;dragstart&#x27;,function(e)&#123;</span><br><span class="line">            e.dataTransfer.setData(&#x27;data&#x27;,this.id);</span><br><span class="line">        &#125;,false);</span><br><span class="line">    </span><br><span class="line">        //阻止dragover的默认行为</span><br><span class="line">        oWrapper.addEventListener(&#x27;dragover&#x27;,function(e)&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">        oWrapper.addEventListener(&#x27;drop&#x27;, function(e)&#123;</span><br><span class="line">            //调用PreventDefault()来避免浏览器对数据的默认处理（drop事件的默认行为是以链接形式打开）</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            //获取得到的对象，插入到目标对象</span><br><span class="line">            var data = e.dataTransfer.getData(&#x27;data&#x27;);</span><br><span class="line">            oWrapper.appendChild(document.getElementById(data));</span><br><span class="line">        &#125;, false)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>案例2：拖拽插入、<a href=""><strong>删除元素</strong></a></p><ul><li>```html <style>     *{         padding: 0;         margin: 0;         list-style: none;     }     ul{         margin: 35px;     }     li{         width: 200px;         height: 30px;         margin: 10px;         background:#ccc;         text-align: center;         line-height: 30px;         font-size: 25px;     }     .wrapper{         width:300px;         height: 300px;         background: black;     }</style><ul>    <li draggable='true'>1</li>    <li draggable='true'>2</li>    <li draggable='true'>3</li>    <li draggable='true'>4</li>    <li draggable='true'>5</li></ul><div class="wrapper"></div><script>    var oLi = document.getElementsByTagName('li'),        oUl = document.getElementsByTagName('ul')[0],        len = oLi.length,        oWrapper = document.getElementsByClassName('wrapper')[0];    function bindLiEvent(){        for(var i = 0;i < len;i ++){            oLi[i].addEventListener('dragstart',function(e){                //根据当前dom元素的顺序重新获取i值                var index = getIndex(this);                //添加参数                e.dataTransfer.setData('data',index);            },false);            oLi[i].addEventListener('dragover',function(e){                //取消dragover默认事件，让drop生效                e.preventDefault();            },false);            oLi[i].addEventListener('drop',function(e){                //取出参数i,把第i个元素插入到目标元素的前面                var i = e.dataTransfer.getData('data');                console.log(i);                oUl.insertBefore(oLi[i], this);            },false);        }      }    //查找当前这个元素拖拽的索引值    function getIndex(dom){        for(var i = 0;i < len;i++){            if(oLi[i] == dom){                return i;            }        }    }    bindLiEvent();    //删除元素    function removeLi(){        oWrapper.addEventListener('dragover',function(e){            e.preventDefault();        },false);        oWrapper.addEventListener('drop',function(e){            var index = e.dataTransfer.getData('data');            oLi[index].remove();        },false);    }    removeLi();</script><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 案例3，拖拽上传文件</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    var ele = document.getElementsByClassName(&#x27;wrapper&#x27;)[0];</span><br><span class="line">    </span><br><span class="line">    ele.addEventListener(&#x27;dragover&#x27;,function(e)&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    &#125;,false);</span><br><span class="line">    </span><br><span class="line">    ele.addEventListener(&#x27;drop&#x27;,function(e)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        console.log(e);</span><br><span class="line">        var dt = e.dataTransfer;</span><br><span class="line">        var files = dt.files;</span><br><span class="line">        console.log(files);</span><br><span class="line">    &#125;,false);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><a href="http://codepen.io/poetries/pen/XpbEOW">在线演示</a></p><h3 id="FileReader（读取文件）"><a href="#FileReader（读取文件）" class="headerlink" title="FileReader（读取文件）"></a>FileReader（读取文件）</h3><blockquote><p>用于读取文件</p></blockquote><ul><li><p>方法：</p><ul><li><code>abort()</code>：终止读取</li><li><code>readAsBinaryString(file)</code>：将文件读取为二进制编码</li><li><code>readAsDataURL(file)</code>：将文件读取为二进制编码</li><li><code>readAsText(file,[encoding])</code>：将文件读取为文本</li><li><code>readAsArrayBuffer(file)</code>：将文件读取为<code>arraybuffer</code></li></ul></li><li><p>事件：</p><ul><li><code>loadstart</code>：读取开始时触发</li><li><code>progress</code>：读取中</li><li><code>loadend</code>： 读取中完成触发，无论成功或失败</li><li><code>load</code>：文件读取成功完成时触发</li><li><code>abort</code>：中断时触发</li><li><code>error</code>：出错时触发</li></ul></li><li><p>获取读取的结果</p><ul><li>```js<br>fr.onload = function(){<pre><code>this.result;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Web Socket</span><br><span class="line"></span><br><span class="line">&gt;*WebSocket*对象提供了一组*API*，用于创建和管理*WebSocket*连接，以及通过连接发送和接收数据。</span><br><span class="line">&gt;</span><br><span class="line">&gt;*WebSocket*其实是一个新协议，跟*HTTP*协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，借用了*HTTP*的协议来完成握手</span><br><span class="line">&gt;</span><br><span class="line">&gt;&gt;  ![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111704365.png)</span><br><span class="line"></span><br><span class="line">- 产生原因</span><br><span class="line">  - 在`HTTP/1.0`中，大多实现为每个请求/响应交换使用新的连接</span><br><span class="line">  - 在`HTTP/1.1`中，一个连接可用于一次或多次请求/响应交换</span><br><span class="line">  - `HTTP`协议中，服务端不能主动联系客户端，只能有客户端发起</span><br><span class="line">  - `WebSocket`服务器和客户端均可主动发送数据</span><br><span class="line">- 建立连接的握手</span><br><span class="line">  - 当`Web`应用程序调用`new WebSocket(url)`接口时，`Browser`就开始了与地址为`url`的`WebServer`建立握手链接的过程</span><br><span class="line">  - 1.`Browser`与`WebSocket`服务器通过`TCP`握手建立连接，如果这个建立连接失败，那么后面的过程就不会执行，`Web`应用程序将收到错误消息通知</span><br><span class="line">  - 2.在`TCP`建立连接成功后，`Browser`通过`http`协议传送`WebSocket`支持的版本号，协议的字版本号，原始地址，主机地址等等一些列字段给服务器</span><br><span class="line">  - 3.`WebSocket`服务器收到`Browser`发送来的请求后，如果数据包数据和格式正确，客户端和服务器端协议版本号匹配等等，就接受本次握手链接，并给出相应的数据回复，同样回复的数据也是采用`http`协议传输</span><br><span class="line">  - 4.`Browser`收到服务器回复的数据包后，如果数据包内容、格式都没有问题的话，就表示本次连接成功，触发`onopen`消息，此时`Web`开发者就可以在此时通过`send`接口向服务器发送数据。否则，握手连接失败，`Web`应用程序会受到`onerror`消息，并且能知道连接失败的原因</span><br><span class="line">- 三次握手</span><br><span class="line">  - 第一次握手：建立连接时，客户端`A`发送`SYN`包`（SYN=j）`到服务器`B`，并进入`SYN_SEND`状态，等待服务器`B`确认。</span><br><span class="line">  - 第二次握手：服务器`B`收到`SYN`包，必须确认客户`A`的`SYN（ACK=j+1）`，同时自己也发送一个`SYN`包`（SYN=k）`，即`SYN+ACK`包，此时服务器B进入`SYN_RECV`状态。</span><br><span class="line">  - 第三次握手：客户端`A`收到服务器`B`的`SYN＋ACK`包，向服务器`B`发送确认包`ACK（ACK=k+1）`，此包发送完毕，客户端`A`和服务器`B`进入`ESTABLISHED`状态，完成三次握手。</span><br><span class="line">  - 完成三次握手，客户端与服务器开始传送数据</span><br><span class="line">  - `WebSocket`请求头/响应头</span><br><span class="line">    - ![请求头](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111704765.png)</span><br><span class="line">    - ![响应头](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111704159.png)</span><br><span class="line">  - `HTTP`请求头/响应头</span><br><span class="line">    - ![请求头](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111705946.png)</span><br><span class="line">    - ![响应头](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111705105.png)</span><br><span class="line">  </span><br><span class="line">- 创建**WebSocket**</span><br><span class="line">  - `var Socket = new WebSocket(url);`</span><br><span class="line"></span><br><span class="line">- 方法</span><br><span class="line"></span><br><span class="line">  - | 方法             | 方法         | 作用                 |</span><br><span class="line">    | ---------------- | ------------ | -------------------- |</span><br><span class="line">    | `Socket.send()`  | `send(data)` | 使用连接传输数据     |</span><br><span class="line">    | `Socket.close()` | `close()`    | 用于终止任何现有连接 |</span><br><span class="line"></span><br><span class="line">- 事件</span><br><span class="line"></span><br><span class="line">  - | 事件      | 事件处理程序       | 描述                         |</span><br><span class="line">    | --------- | ------------------ | ---------------------------- |</span><br><span class="line">    | `open`    | `Socket.onopen`    | 建立socket连接时触发这个事件 |</span><br><span class="line">    | `message` | `Socket.onmessage` | 客户端从服务器接收数据时触发 |</span><br><span class="line">    | `error`   | `Socket.onerror`   | 连接发生错误时触发           |</span><br><span class="line">    | `close`   | `Socket.onclose`   | 连接被关闭时触发             |</span><br><span class="line"></span><br><span class="line">- **WebSocket**的优点</span><br><span class="line"></span><br><span class="line">  - 客户端与服务器都可以主动传送数据给对方</span><br><span class="line">  - 不用频率创建`TCP`请求及销毁请求，减少网络带宽资源的占用，同时也节省服务器资源</span><br><span class="line"></span><br><span class="line">- 注:`WebSocket.org`提供了一个专门用来测试`WebSocket`的服务器`ws://echo.websocket.org`</span><br><span class="line"></span><br><span class="line">- ```javascript</span><br><span class="line">  //ws://echo.websocket.org是一个测试websocket的服务器接口，就是你发送什么，它返回什么</span><br><span class="line">  var Socket = new WebSocket(&quot;ws://echo.websocket.org&quot;);</span><br><span class="line">  </span><br><span class="line">  Socket.onopen = function() &#123;</span><br><span class="line">      Socket.send(&#x27;Hello&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Socket.onmessage = function(e) &#123;</span><br><span class="line">      console.log(&#x27;message&#x27;);</span><br><span class="line">      console.log(e);</span><br><span class="line">      console.log(e.data);</span><br><span class="line">      Socket.close(); //发送完之后需要关闭连接，否则会报错</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Socket.onclose = function(e) &#123;</span><br><span class="line">      console.log(&#x27;close&#x27;);</span><br><span class="line">      console.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Socket.onerror = function() &#123;</span><br><span class="line">      console.log(&#x27;error&#x27;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="HTML5新增JS方法"><a href="#HTML5新增JS方法" class="headerlink" title="HTML5新增JS方法"></a>HTML5新增JS方法</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111705422.png" alt="H5在JavaScript中新增的方法一览"></p><ul><li><p><strong>新增选择器</strong></p><ul><li><code>document.querySelector() </code> 选择单个元素</li><li><code>document.querySelectorAll() </code> 选择所有的</li><li><code>document.getElementsByClassName()</code> 通过类名选择</li></ul></li><li><p><strong>延迟加载JS</strong></p><ul><li><code>JS</code>的加载会影响后面的内容加载<ul><li>很多浏览器都采用了并行加载JS，但还是会影响其他内容</li></ul></li><li><code>Html5</code>的<code>defer</code>和<code>async</code><ul><li><code>defer=“defer ”</code>: 延迟加载，会按顺序执行，在<code>onload</code>执行前被触发</li><li><code>async =“async”</code>: 异步加载，加载完就触发，有顺序问题</li></ul></li><li>浏览器兼容性：<code>Labjs</code>库</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 动态加载script文件 （推荐方法） 只需请求一次 可加载多个JavaScript文件，减少请求次数以及页面的加载阻塞</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">script.type = <span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(script.readyState)&#123;<span class="comment">//IE</span></span><br><span class="line">script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(script.readyState == <span class="string">&quot;loaded&quot;</span> || script.readyState == <span class="string">&quot;complete&quot;</span>)&#123;</span><br><span class="line">onreadystatechange = <span class="literal">null</span>;</span><br><span class="line">callback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">callback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">script.src = url;</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">loadScript(<span class="string">&quot;js/defer.js&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;加载成功&quot;</span>);</span><br><span class="line">      <span class="comment">//  加载成功回调</span></span><br><span class="line">&#125;);</span><br><span class="line">loadScript(<span class="string">&quot;js/async.js&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;加载成功&quot;</span>);</span><br><span class="line">   <span class="comment">//  加载成功回调</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><strong>获取<code>class</code>列表属性</strong></p><ul><li><code>classList</code><ul><li><code>length</code> :  <code>class</code>的长度</li><li><code>add() </code> :  添加<code>class</code>方法</li><li><code>remove()</code>  :  删除<code>class</code>方法</li><li><code>toggle()</code> :  切换<code>class</code>方法 </li><li><code>contains()</code> : 判断类名是否存在返回<code>bool</code>值</li></ul></li></ul></li><li><p><strong><code>JSON</code>的新方法</strong></p><ul><li><p><code>parse()</code> : 把字符串转成<code>json</code></p><ul><li>字符串中的属性要严格的加上引号</li></ul></li><li><p><code>stringify()</code> : 把<code>json</code>转化成字符串</p><ul><li>会自动的把双引号加上</li></ul></li><li><p>与<code>eval</code>的区别</p><ul><li><code>eval()</code>：对任何的字符串进行解析变成js</li><li><code>parse()</code>：字符串中的属性要严格的加上引号</li></ul></li><li><p>其他浏览器兼容</p><ul><li><a href="http://www.json.org/">去下载json2.js</a></li></ul></li></ul></li><li><p><strong>历史管理</strong></p><ul><li><code>onhashchange</code> ：改变<code>hash</code>值来管理</li></ul></li></ul><h2 id="跨文档操作"><a href="#跨文档操作" class="headerlink" title="跨文档操作"></a>跨文档操作</h2><hr><ul><li><p><strong>跨文档请求</strong></p></li><li><p>同域跨文档</p><ul><li><code>iframe</code>内页：<ul><li>父页面操作子页面：<code>contentWindow</code></li><li>子页面操作父页面：<code>window.top</code>(找到最顶级的父页面)/<code>parent</code>(第一父页面)</li><li>新窗口页：<ul><li>父页面操作子页面：<code>window.open</code></li><li>子页面操作父页面：<code>window.opener</code></li></ul></li></ul></li></ul></li><li><p><strong>不同域跨文档</strong></p><ul><li><code>postMessage（“发送的数据”,”接收的域”）</code><ul><li><code>message</code>事件监听</li><li><code>ev.origin </code>发送数据来源的域</li><li><code>ev.data </code> 发送的数据</li></ul></li><li>通过判断发送的数据来执行相应的需求</li></ul></li><li><p><strong>ajax跨域</strong></p><ul><li><p><code>XMLHttpRequest</code> 新增功能</p><ul><li>跨域请求：修改服务端头信息<ul><li>I<code>E</code>兼容：<code>XDomaiRequest</code></li></ul></li></ul></li><li><p>进度事件：</p><ul><li><code>upload.onprogress(ev) </code> 上传进度(实现文件上传进度条)<ul><li><code>ev.total</code>  发送文件的总量</li><li><code>ev.loaded</code> 已发送的量</li></ul></li><li><code>FormData</code>  构建提交二进制数据</li></ul></li></ul></li><li><p>拓展阅读</p><ul><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0ODA2ODU2NQ==&mid=2651130595&idx=2&sn=3d0f546f1867992729b3ace5d03766fc&chksm=f257ca59c520434f08e215b3bdcec3764712f73301b738c18163359e5aa5e949ff019616ffca&mpshare=1&scene=23&srcid=11289XUSBAQzrCp3Io55aoS1#rd">HTML5 API 大盘点</a><h2 id="附录二-HTML5速查表"><a href="#附录二-HTML5速查表" class="headerlink" title="附录二　HTML5速查表"></a>附录二　HTML5速查表</h2></li></ul></li></ul><hr><ul><li><a href="http://caniuse.com/#search=canvas">可以查阅支持H5+CSS3的属性</a></li><li><a href="http://www.html5star.com/manual/html5label-meaning/">HTML5 标签含义之元素周期表</a></li><li><a href="https://raw.sevencdn.com/haodex/Note/master/Web/H5C3/15.png">HTML5标签速查表</a></li><li><a href="chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=http%3A%2F%2Fjonibologna.com%2Fcontent%2Fimages%2Fflexboxsheet.pdf">展示 flexbox 属性的作用–推荐</a></li><li><a href="https://demos.scotch.io/visual-guide-to-css3-flexbox-flexbox-playground/demos/">Flexbox 视觉指南–更好更容易地理解 Flexbox 某个属性的作用</a></li></ul><h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p><code>CSS3</code>发展史简介</p><ul><li><code>HTML</code>的诞生 20世纪90年代初</li><li><code>1996</code>年底，    <code>CSS</code>第一版诞生</li><li><code>1998</code>年<code>5</code>月     <code>CSS2</code>正式发布</li><li><code>2004</code>年     <code>CSS2.1</code>发布</li><li><code>CSS3</code>的发布    <code>2002 </code> <code>2003</code>  <code>2004</code> <code>2005</code>  <code>2007</code> <code>2009</code> <code>2010</code></li></ul></li><li><p><strong>what is CSS3？</strong></p><ul><li>CSS3是CSS2的升级版本，3只是版本号，它在CSS2.1的基础上增加了很多强大的新功能。目前主流浏览器chrome、safari、firefox、opera、甚至360、QQ浏览器都已经支持了CSS3的大部分功能了，IE10以后也开始全面支持CSS3了。</li><li>标准写法：</li></ul><table><thead><tr><th>前缀</th><th>浏览器</th></tr></thead><tbody><tr><td>-webkit-</td><td>chrome / safari</td></tr><tr><td>-moz-</td><td>firefox</td></tr><tr><td>-ms-</td><td>IE</td></tr><tr><td>-o-</td><td>opera-</td></tr></tbody></table></li></ul><ul><li><strong>CSS的功能</strong></li><li>提供了更加强大且精准的选择器，提供多种背景填充方案，可以实现渐变颜色，可以改变元素的形状、角度等，可以加阴影效果，报纸布局，弹性盒子，ie6混杂模式的盒模型，新的计量单位，动画效果等等……<ul><li>但是css3的兼容性的问题同样也显得格外重要，并不是所有的css3属性都通过了w3c标准，所以……我们需要全面性的查阅兼容性手册<ul><li><a href="http://www.runoob.com/cssref/css3-browsersupport.html">http://www.runoob.com/cssref/css3-browsersupport.html</a></li><li><a href="https://caniuse.com/">https://caniuse.com/</a></li></ul></li></ul></li><li><strong>模块化开发</strong></li><li><code>CSS1</code> 中定义了网页的基本属性：<ul><li>字体、颜色、基本选择器等</li><li><code>CSS2</code>中在<code>CSS1</code>的基础上添加了高级功能<ul><li>浮动和定位、高级选择器等(子选择器、相邻选择器、通用选择器)</li></ul></li><li><code>CSS3</code>遵循的是模块化开发。发布时间并不是一个时间点，而是一个时间段</li></ul></li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li><strong>伪元素选择器：</strong><ul><li><code>::first-line</code> ：匹配文本块的首行</li><li><code>::first-letter</code> ：选择文本块的首字母</li><li><code>::selection </code>：鼠标光标选择元素内容</li><li><code>::user-selection:none</code>：不让用户选中</li></ul></li></ul><ul><li><p><strong>CSS3结构选择器</strong></p><ul><li><code>nth-child(n)</code>：父元素下的第n个子元素</li><li><code>nth-child(odd)</code>：奇数子元素同<code>nth-child(2n-1)</code></li><li><code>nth-child(even)</code>：偶数子元素同<code>nth-child(2n)</code></li><li><code>nth-child(an+b)</code>：公式</li><li><code>nth-last-child(n)</code>：倒数第n个子元素</li><li><code>first-of-type</code>：父元素下指定类型的第一个元素</li><li><code>last-of-type</code>：父元素下指定类型的最后一个元素</li><li><code>nth-of-type(n)</code>：父元素下的指定类型的元素的第n个元素</li><li><code>nth-last-of-type</code>：父元素下的倒数第几个指定类型的子元素</li><li><code>first-child</code>：父元素下的第一个子元素、</li><li><code>last-child</code>：父元素下的最后一个子元素</li><li><code>only-child</code>：父元素下的唯一的子元素</li><li><code>only-of-type</code>：选择父元素下指定类型的唯一子元素</li><li><code>E &gt; F</code> E的第一代子元素中是F的</li><li><code>E + F</code>E后面紧挨着的F兄弟节点</li><li><code>E ~ F</code>E后面所有的兄弟节点</li></ul></li></ul><ul><li><p><strong><code>Css3</code> 属性选择器</strong></p><ul><li><code>E[attr]</code>：属性名，不确定具体值</li><li><code>E[attr=&#39;value&#39;]</code>：指定属性名，并指定对应属性值</li><li><code>E[attr~=&quot;value&quot;]</code>：指定属性名，其具有多个属性值空格隔开，并包含<code>value</code>值，意思就是在<code>class</code>属性中任意一个位置有<code>value</code>就可以，不必要第一个</li><li><code>E[attr^=&quot;value&quot;]</code>：指定属性名，属性值以<code>value</code>值开头</li><li><code>E[attr$=&quot;value&quot;]</code>：指定属性名，属性值以<code>value</code>值结束</li><li><code>E[attr*=&quot;value&quot;]</code>：指定了属性名，属性值中包含了<code>value</code></li><li><code>E[attr|=&quot;value&quot;]</code>：指定属性名，属性值以<code>value</code>开头</li></ul></li></ul><ul><li><strong><code>CSS3</code>伪类选择器</strong></li><li><code>:before</code>,<code>:after</code>在元素内容前面、后面添加内容(相当于行内元素)<ul><li><strong>UI状态伪类选择器：</strong></li><li><code>:enabled </code>选择启用状态元素<ul><li><code>:disabled</code> 选择禁用状态元素</li><li><code>:checked </code>选择被选中的<code>input</code>元素（单选按钮或复选框）</li><li><code>:default</code> 选择默认元素</li><li><code>:valid</code>、<code>invalid</code> 根据输入验证选择有效或无效的<code>input</code>元素</li><li><code>:in-range</code>、<code>out-of-range</code>选择指定范围之内或者之外受限的元素</li><li><code>:required</code>、<code>optional </code>根据是否允许:<code>required</code>属性选择<code>input</code>元素</li><li><code>:read-only</code>选择只读的元素</li><li><code>read-write</code>选择非只读的元素</li><li><strong>动态伪类选择器：</strong></li><li><code>:link </code>选择链接元素<ul><li><code>:visited</code> 选择用户以访问的元素</li><li><code>:hover</code> 鼠标悬停其上的元素</li><li><code>:active </code>鼠标点击时触发的事件</li><li><code>:focus</code> 当前获取焦点的元素</li></ul></li><li><strong>其他伪类选择器</strong>：<ul><li><code>root</code>：选择文档的根目录、返回<code>html</code></li><li><code>:not(&lt;选择器&gt;) </code>对括号内选择器的选择取反</li><li><code>:lang(&lt;目标语言&gt;)</code> 基于<code>lang</code>全局属性的元素</li><li><code>:target</code> <code>url</code>片段标识符指向的元素</li><li><code>:empty</code>选择内容为空的元素</li></ul></li></ul></li></ul></li></ul><h2 id="文本-1"><a href="#文本-1" class="headerlink" title="文本"></a>文本</h2><hr><ul><li><p><strong>CSS文本属性复习</strong></p><ul><li><p><strong>white-space</strong>：对象内空格的处理方式</p><ul><li><p><code>nowrap</code> 控制文本不换行</p></li><li><p><code>pre</code> 空白会被浏览器保留</p></li><li><p><code>pre-line</code> 合并空白  保留换行符</p></li><li><p><code>pre-wrap</code> 保留空白  正常换行</p></li></ul></li><li><p><strong>direction</strong>：文本流的方向</p><ul><li><code>ltr</code> 文本从左向右</li><li><code>rtl</code>  文本从右往左</li></ul></li><li><p><strong>unicode-bidi</strong>：用于同一个页面里存在从不同方向读进的文本显示。与<code>direction</code>属性一起使用</p></li></ul></li><li><p><strong>CSS3新增文本属性</strong></p><ul><li><code>color:rgba()</code>;</li><li><code>text-overflow</code>:是否使用一个省略标记（…）标示对象内文本的溢出</li><li><code>text-align</code>:文本的对齐方式</li><li><code>text-transform</code>:文字的大小写</li><li><code>text-decoration</code>:文本的装饰线，复合属性</li><li><code>text-shadow</code>:文本阴影</li><li><code>text-fill-color</code>:文字填充颜色</li><li><code>text-stroke</code>:复合属性。设置文字的描边</li><li><code>tab-size</code>:制表符的长度</li><li><code>word-wrap</code>:当前行超过指定容器的边界时是否断开转行</li><li><code>word-break</code>:规定自动换行的处理方法</li><li><code>font-face</code></li></ul></li></ul><ul><li><p><strong>text-overflow</strong>：是否使用一个省略标记（<code>...</code>）标示对象内文本的溢出</p><ul><li><code>clip</code>： 默认值 无省略号</li><li><code>ellipsis</code>：当对象内文本溢出时显示省略标记（<code>...</code>）。</li></ul></li><li><p><strong>注意</strong>：该属性需配合<code>over-flow:hidden</code>属性(超出处理)还有 <code>white-space:nowrap</code>(禁止换行)配合使用，否则无法看到效果</p></li><li><p><strong>text-align</strong>：文本的对齐方式</p><ul><li><code>left</code>:默认值 左对齐</li><li><code>right</code>:右对齐</li><li><code>center</code>:居中</li><li><code>justify</code>： 内容两端对齐。</li><li><code>start</code>:开始边界对齐</li><li><code>end</code>:结束边界对齐</li></ul></li><li><p><strong>text-transform</strong>：文字的大小写</p><ul><li><strong><code>css1</code></strong><ul><li><code>none</code>：    默认值 无转换 </li><li><code>capitalize</code>：     将每个单词的第一个字母转换成大写 </li><li><code>uppercase</code>：    转换成大写 </li><li><code>lowercase</code>：    转换成小写</li></ul></li><li><strong><code>css3</code></strong><ul><li><code>full-width</code>：    将左右字符设为全角形式。不支持</li><li><code>full-size-kana</code>：将所有小假名字符转换为普通假名。不支持</li><li>例如：土耳其语</li></ul></li></ul></li><li><p><strong>text-decoration</strong>：文本的装饰线，复合属性(只火狐支持)</p><ul><li><code>text-decoration-line </code>：<ul><li>指定文本装饰的种类。相当于<code>CSS1</code>时的<code>text-decoration</code>属性</li></ul></li><li><code>text-decoration-style</code> ：<ul><li>`指定文本装饰的样式。</li></ul></li><li><code>text-decoration-color</code>：<ul><li>`指定文本装饰的颜色。</li></ul></li><li><code>blink</code>： 指定文字的装饰是闪烁。  <code>opera</code>和<code>firefox</code></li></ul></li><li><p><code>text-decoration</code> : <code>#F00 double overline</code>   <code>CSS3</code>实例</p></li><li><p><strong>text-shadow</strong>：文本阴影</p><ul><li>取值：<code>x </code> <code>y</code>   <code>blur</code> <code>color</code>,……<ul><li><code>x  </code>      横向偏移</li><li><code>y </code>       纵向偏移</li><li><code>blur </code>     模糊距离(灰度)</li></ul></li><li><code>color</code>    阴影颜色</li></ul></li><li><p><strong>text-fill-color</strong>：文字填充颜色</p></li><li><p><strong>text-stroke</strong>：复合属性。设置文字的描边</p><ul><li><code>text-stroke-width</code>:文字的描边厚度 </li><li><code>text-stroke-color</code>:文字的描边颜色 </li></ul></li><li><p><strong>tab-size</strong>：制表符的长度   </p><ul><li>默认值为<code>8</code>(一个<code>tab</code>键的空格字节长度)，在    <code>pre</code>标签之内才会有显示</li></ul></li><li><p><strong>word-wrap</strong>：当前行超过指定容器的边界时是否断开转行</p><ul><li><code>normal</code>： 默认值</li><li><code>break-word</code>：在长单词或 URL 地址内部进行换行。</li><li>允许内容顶开或溢出指定的容器边界。 </li></ul></li><li><p><strong>break-word</strong>：内容将在边界内换行。如果需要，单词内部允许断行</p><ul><li><code>normal</code>： 使用浏览器默认的换行规则</li><li><code>break-all</code>：允许在单词内换行</li><li><code>keep-all</code>：只能在半角空格或连字符处换行</li></ul></li><li><p><strong>font-face</strong></p></li></ul><pre><code>- 自定义字体- ```css    @font-face &#123;        font-family:&#39;myFirstFamily&#39;; // 字体名字        src: url(&#39;./Christmas Day Personal Use.ttf&#39;); // 字体路径    &#125;        兼容    @font-face &#123;        font-family: &#39;diyfont&#39;;        src: url(&#39;diyfont.eot&#39;); /* IE9+ */        src: url(&#39;diyfont.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;), /* IE6-IE8 */             url(&#39;diyfont.woff&#39;) format(&#39;woff&#39;), /* chrome、firefox */             url(&#39;diyfont.ttf&#39;) format(&#39;truetype&#39;), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/             url(&#39;diyfont.svg#fontname&#39;) format(&#39;svg&#39;); /* iOS 4.1- */    &#125;        http://www.w3cplus.com/content/css3-font-face    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">    - `format`: 此值指的是你自定义的字体的格式，主要用来帮助浏览器识别浏览器对`@font-face`的兼容问题，这里涉及到一个字体`format`的问题，因为不同的浏览器对字体格式支持是不一致的，浏览器自身也无法通过路径后缀来判断字体</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 背景</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">- **CSS背景属性复习**</span><br><span class="line">  </span><br><span class="line">- `background`:</span><br><span class="line">  - `background-color`:背景颜色</span><br><span class="line">  - `background-image`:背景图片</span><br><span class="line">  - `background-repeat`:背景重复</span><br><span class="line">  - `background-position`:背景定位</span><br><span class="line">  - `background-attachment`:背景固定(`scroll/fixed)`</span><br><span class="line">  </span><br><span class="line">- **CSS3新增背景属性**</span><br><span class="line"></span><br><span class="line">- **bakground-size**：背景尺寸</span><br><span class="line"></span><br><span class="line">- 设置背景图片的大小，以长度值或百分值或百分比显示，还可以通过`cover`和`contain`来对图片进行伸缩</span><br><span class="line">- 语法：</span><br><span class="line">    - **background-size**:` auto `| `&lt;长度值&gt;` | `&lt;百分比&gt; `| `cover` | `contain`</span><br><span class="line">- 属性：</span><br><span class="line">  - `auto`：默认值，不改变背景图片的原始高度和宽度</span><br><span class="line">  - `&lt;长度值&gt;`: 成对出现如`200px` `50px`，将背景图片宽高一次设置为前面两个值，当设置一个值时，将其作为图片宽度值来等比缩放</span><br><span class="line">  - `&lt;百分比&gt;`: `0%~100%`之间的任何值，将背景图片宽高依次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时同上；</span><br><span class="line">  - `cover`: 用一张图片铺满整个背景，如果比例不符，则截断图片</span><br><span class="line">  - `contain`: 尽量让背景内，存在一整张图片</span><br><span class="line"></span><br><span class="line">- 多背景</span><br><span class="line">  </span><br><span class="line">  - `background-image:url(1.jpg),url(2.jpg)`;</span><br><span class="line">  </span><br><span class="line">- **background-origin** ：背景区域定位</span><br><span class="line">  </span><br><span class="line">  - 背景图片的起始位置</span><br><span class="line">  - 原来的背景图片是从`padding`区域开始引入的，可以使用这个属性来更改引入区域</span><br><span class="line">  - `border-box`： 从`border`区域开始显示背景。 </span><br><span class="line">  - `padding-box`： 从`padding`区域开始显示背景。 </span><br><span class="line">  - `content-box`： 从`content`内容区域开始显示背景。</span><br><span class="line">  </span><br><span class="line">- **background-clip** ：背景绘制区域</span><br><span class="line"></span><br><span class="line">  - 裁剪背景</span><br><span class="line"></span><br><span class="line">    - `border-box`： 从`border`区域向外裁剪背景。 </span><br><span class="line">    - `padding-box`： 从`padding`区域向外裁剪背景。 </span><br><span class="line">    - `content-box`： 从`content`区域向外裁剪背景。 </span><br><span class="line">    - 分别表示从边框、内边距和内容区域往外裁剪背景，`no-clip`表示不裁切和参数`border-box`显示同样的效果。`background-clip`默认值为`border-box`</span><br><span class="line"></span><br><span class="line">  - `text`:背景填充文本</span><br><span class="line"></span><br><span class="line">    - `background-clip: text`;</span><br><span class="line"></span><br><span class="line">    - 从前景内容的形状作为裁剪区域向外裁剪，如此即可实现使用背景作为填充色之类的遮罩效果</span><br><span class="line"></span><br><span class="line">    - 注意它是-webkit-独有的属性，且必须配合`-text-fill-color-`属性</span><br><span class="line"></span><br><span class="line">    - ```css</span><br><span class="line">        -webkit-background-clip: text;</span><br><span class="line">        -webkit-text-fill-color: transparent;</span><br><span class="line">        text-fill-color: -webkit-background-clip;</span><br></pre></td></tr></table></figure></code></pre><ul><li><strong>颜色渐变</strong><ul><li><strong>线性渐变</strong>：<code>linear-gradient</code>(起点/角度 半径，颜色 位置，…,)<ul><li>起点：<code>left/top/right/bottom/left top...... </code>默认<code>top</code></li><li>角度：逆时针方向 <code>0-360deg</code>（度），起点和角度一样</li><li>半径：可以控制渐变圆的大小</li><li>颜色 位置：<code>red 50%</code>, <code>blue 100%</code>(红色从50%渐变到100%为蓝色)</li><li><code>repeating-linear-gradient</code>  线性渐变重复平铺</li><li><code>IE</code>低版本渐变(滤镜)：</li><li><code>filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=&#39;#ffffff&#39;,endColorstr=&#39;#ff0000&#39;,GradientType=&#39;1&#39;);</code></li></ul></li><li><strong>径向渐变</strong>：<code>radial-gradient</code>(起点(圆心位置) at 形状/半径/大小,  颜色1,  颜色2)<ul><li>起点：<code>left/top/right/bottom</code>或具体值/百分比</li><li>形状：<code>ellipse</code>(椭圆)、<code>circle</code>(正圆)</li><li>形状\半径\大小：具体数值或百分比，也可以是关键字（<code>closest-side</code>(最近端), <code>closest-corner</code>最近角), <code>farthest-side</code>(最远端), f<code>arthest-corner</code>(最远角), <code>contain</code>(包含) ,<code>cover</code>(覆盖)）;</li><li>颜色 位置：<code>red 50%</code>, <code>blue 100%</code>(红色从50%渐变到100%为蓝色)</li></ul></li></ul></li></ul><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><hr><ul><li><strong>CSS颜色属性复习</strong><ul><li><code>color name </code>    颜色英文名称命名</li><li><code>HEX</code>方式         十六进制方式</li><li><code>rgb</code>方式           三原色配色方式</li></ul></li></ul><h3 id="rgba-颜色"><a href="#rgba-颜色" class="headerlink" title="rgba()颜色"></a>rgba()颜色</h3><ul><li><p><code>RGB</code>是一种色彩标准，是由红<code>(R)</code>、绿<code>(G)</code>、蓝<code>(B)</code>的变化以及相互叠加来得到各式各样的颜色。<code>RGBA</code>是在<code>RGB</code>的基础上增加了控制<code>alpha</code>透明度的参数。</p></li><li><p>语法：<code>color: rgba(R, G, B, A)</code></p><ul><li>以上<code>R</code>、<code>G</code>、<code>B</code>三个参数，正整数值的取值范围为：0 - 255。百分数值的取值范围为：0.0% - 100.0%。超出范围的数值将被截至其最接近的取值极限。并非所有浏览器都支持使用百分数值。<code>A</code>为透明度参数，取值在0~1之间，不可为负值。</li></ul></li><li><table><thead><tr><th>名称</th><th>颜色</th><th>颜色</th><th>取值</th></tr></thead><tbody><tr><td>r</td><td>red</td><td>红色</td><td>0-255</td></tr><tr><td>g</td><td>green</td><td>绿色</td><td>0-255</td></tr><tr><td>b</td><td>blue</td><td>蓝色</td><td>0-255</td></tr><tr><td>a</td><td>alpha</td><td>透明</td><td>0-1</td></tr></tbody></table></li></ul><h3 id="HSL模式-HSLA-模式"><a href="#HSL模式-HSLA-模式" class="headerlink" title="HSL模式  HSLA 模式"></a>HSL模式  HSLA 模式</h3><ul><li><p><code>H</code>： <code>Hue</code>(色调)。</p><ul><li>0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：<code>0 - 360</code> </li></ul></li><li><p><code>S</code>：<code> Saturation</code>(饱和度)。取值为：0.0% - 100.0% </p></li><li><p><code>L</code>： <code>Lightness</code>(亮度)。取值为：0.0% - 100.0%</p></li><li><p><code>A</code>:    <code>alpha  </code>   透明度   0~1之间</p></li><li><p>语法:<code>HSLA(H,S,L,A)</code></p></li><li><p>HSL色轮</p><ul><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111706388.png" alt="HSL色轮"></li></ul></li></ul><ul><li><p><strong>透明颜色：<code>transparent</code></strong></p><ul><li>实例：<code>border</code>实现三角箭头、风车等</li></ul></li><li><p><strong>透明度：</strong></p><ul><li><code>opacity</code></li><li>取值：<code>0-1</code>之间</li><li>注：低版本的<code>IE</code>浏览器不兼容,需用IE浏览器的滤镜实现相同效果，<code>filter:alpha(opacity=50)</code></li><li>对于低版本的火狐浏览器需添加内核前缀，<code>-moz-opacity</code></li></ul></li></ul><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><hr><h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><hr><ul><li>边框圆角<ul><li>在<code>CSS2</code>中添加圆角矩形需要技巧。我们必须为每个圆角使用不同的图片</li><li>在 <code>CSS3 </code>中，创建圆角是非常容易的</li><li>在<code>CSS3</code>中，<code>border-radius </code>属性用于创建圆角</li></ul></li><li><strong>border-radius</strong>：边框圆角写法<ul><li><code>border-radius: 2em 1em 4em / 0.5em 3em;</code></li><li>等价于<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top-left-radius</span>: <span class="number">2em</span> <span class="number">0.5em</span>;</span><br><span class="line"><span class="attribute">border-top-right-radius</span>: <span class="number">1em</span> <span class="number">3em</span>;</span><br><span class="line"><span class="attribute">border-bottom-right-radius</span>: <span class="number">4em</span> <span class="number">0.5em</span>;</span><br><span class="line"><span class="attribute">border-bottom-left-radius</span>: <span class="number">1em</span> <span class="number">3em</span>;</span><br></pre></td></tr></table></figure><h3 id="边框系列-图片"><a href="#边框系列-图片" class="headerlink" title="边框系列-图片"></a>边框系列-图片</h3></li></ul></li></ul><hr><ul><li><strong>border-image</strong>：语法</li></ul><table><thead><tr><th>属性</th><th>版本</th><th>简介</th></tr></thead><tbody><tr><td><code>border-image</code></td><td>CSS3</td><td>设置或检索对象的边框使用图像来填充</td></tr><tr><td><code>border-image-source</code></td><td>CSS3</td><td>设置或检索对象的边框是否用图像定义样式或图像来源路径</td></tr><tr><td><code>border-image-slice</code></td><td>CSS3</td><td>设置或检索对象的边框背景图的分割方式</td></tr><tr><td><code>border-image-width</code></td><td>CSS3</td><td>设置或检索对象的边框厚度</td></tr><tr><td><code>border-image-outset</code></td><td>CSS3</td><td>设置或检索对象的边框背景图的扩展</td></tr><tr><td><code>border-image-repeat</code></td><td>CSS3</td><td>设置或检索对象的边框图像的平铺方式</td></tr></tbody></table><ul><li><strong><code>border-image-slice</code></strong><ul><li>设置或检索对象的边框背景图的分割方式</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111706283.png" alt="Paste_Image.png"></p><ul><li><strong><code>border-image-repeat</code></strong><ul><li>用于指定边框背景图的重复方式</li><li>取值：<ul><li><code>stretch</code>： 指定用拉伸方式来填充边框背景图。 *默认的</li><li><code>repeat</code>： 指定用平铺方式来填充边框背景图。当图片碰到边界时，如果超过则被截断。 </li><li><code>round</code>： 指定用平铺方式来填充边框背景图。图片会根据边框的尺寸动态调整图片的大小    直至正好可以铺满整个边框。写本文档时仅Firefox能看到该效果 </li></ul></li></ul></li></ul><h2 id="布局-盒模型"><a href="#布局-盒模型" class="headerlink" title="布局/盒模型"></a>布局/盒模型</h2><hr><h3 id="columns"><a href="#columns" class="headerlink" title="columns"></a>columns</h3><ul><li><p>多列布局</p></li><li><p>为了能在<code>Web</code>页面中方便实现类似报纸、杂志那种多列排列的布局，<code>W3C</code>特意给<code>CSS3</code>增加了一个多列布局模块（<code>CSS Multi Column Layout Module</code>）。它主要应用在文本的多列布局方面，这种布局在报纸和杂志上都使用了几十年了，但要在Web页面上实现这样的效果还有有相当大的难度，庆幸的是，CSS3的多列布局可以轻松实现</p></li><li><p>语法</p><ul><li><p><strong>columns:</strong></p><ul><li><p><code>columns</code> ：宽度 列数; 混合属性</p><ul><li>例如：<code>columns:200px 3</code></li></ul></li><li><p><code>column-width</code>： 指的是每一列的宽度，根据容器宽度自适应</p></li><li><p><code>column-count</code> ：指定规定的列数，唯一精准的是列数</p><ul><li><em>column-width和column-count两个不要一起使用，会混乱</em></li></ul></li><li><p><strong>column-gap</strong>：列宽</p><ul><li>设置列与列之间的宽度，直接用数值表示即可</li><li>用来设置列与列的间距，如果没有显示设置column-gap值时，其值大小会根据浏览器默认的font-size来决定</li><li><code>column-width </code>= <code>(width - (n - 1) * font - size) / n</code><ul><li><code>n</code>是几列</li></ul></li></ul></li><li><p><strong>column-rule</strong>：列的边框 </p><ul><li><p><code>column-rule</code>: 宽度  线的类型  颜色</p><ul><li>例：<code>column-rule:1px solid #ccc</code></li></ul></li><li><p>不占用任何空间位置，在列与列之间改变其宽度不会改变任何列的位置。</p></li><li><p><code>column-rule-width </code></p><ul><li>用来定义列边框的宽度，其默认值为<code>medium</code></li><li>接收浮点数，但是不接受负值</li><li>属性值：<code>medium</code>、<code>thick</code>、<code>thin</code></li></ul></li><li><p><code>column-rule-style</code></p><ul><li>样式</li><li>定义列边框样式，其默认值为“none”</li><li><code>column-rule-style</code>：属性值与<code>border-style</code>属性值相同</li><li>属性值：<code>none</code>、<code>hidden</code>、<code>dotted</code>、<code>dashed</code>、<code>solid</code>、<code>double</code>、<code>groove</code>、<code>ridge</code>、<code>inset</code>、<code>outset</code></li></ul></li><li><p><code>column-rule-color</code> 颜色</p></li></ul></li><li><p><strong>column-span</strong>：<code>1</code> / <code>all</code></p><ul><li>只可以跨<code>1</code>列或者所有列</li><li>设置多列布局元素内的子元素，可以跨列，类似标题效果。即一个新闻标题要横跨所有内容列。</li><li>注：此属性要在子元素上设置</li></ul></li></ul></li></ul></li></ul><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><ul><li><p>在<code>CSS</code>中盒模型分为两种，第一种是W3C的标准盒模型，另一种是IE6混杂模式的传统模型。他们都是对元素计算尺寸的模型。但他们的不同是计算的方式不同。</p></li><li><p><strong>W3C标准盒模型</strong></p><ul><li><p><code>element</code>空间高度（盒子）= <code>width </code>+ <code>padding</code> + <code>border</code></p></li><li><p><code>width</code>为内容高度。即<code>width</code>不包括<code>padding</code>和<code>border</code></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111707818.jpg" alt="标准盒子模型"></p></li></ul></li><li><p><strong>IE6混杂模式盒模型</strong></p><ul><li>内容高度（盒子） = <code>width</code> - <code>padding</code> - <code>border</code></li><li><code>width</code>的数值就是<code>element</code>盒子的空间高度，<code>width</code>包括了<code>padding</code>和<code>border</code></li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111707578.jpg" alt="IE盒子模型"></li></ul></li><li><p><strong>box-shadow</strong>:<code>inset</code> <code>x</code> <code>y</code> <code>blur</code> <code>spread</code> <code>color</code></p><ul><li><code>inset</code>：投影方式</li><li><code>inset</code>：内投影</li><li><code>outset</code>：外投影 默认(不能设置)</li><li><code>x</code>、<code>y</code>：阴影偏移</li><li><code>blur</code>：模糊半径（灰度）</li><li><code>spread</code>：扩展阴影半径</li><li>先扩展原有形状，再开始画阴影</li><li><code>color</code></li></ul></li><li><p><strong>box-reflect</strong>：倒影</p><ul><li>方向 <code> above | below | left | right;</code></li><li>距离<ul><li>渐变（可选）</li></ul></li></ul></li></ul><h3 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h3><ul><li>有主轴<code>（x）</code>侧轴 / 交叉轴<code>（y）</code></li><li>给父级设置的<code>diaplay:flex</code>叫<code>flex</code>盒子，它里面的盒子叫做<code>flex</code>项目</li><li><code>display: flex</code>：给父级设置盒子属性</li><li><code>flex</code> 是一个复合属性，且必须配合父元素<code>display: flex</code>使用</li><li><strong>以下六个属性是设置在项目（子元素）上的：</strong><ul><li><strong>flex-grow</strong> ：放大比例<ul><li>进行比例的分配，定义项目的放大比例，默认为0，即如果存在剩余空间，也放大</li><li>根据所设置的比例分配盒子剩余的空间</li></ul></li><li><strong>flex-shrink</strong>：缩小比例<ul><li>定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</li><li>设置元素的收缩比例——多出盒子的部分，按照比例的大小砍掉相应的大小，即比例越大，被砍得越大，默认值<code>1</code></li><li>缩减的宽度 = <code>(flex-shrink1 * width1) / (flex-shrink2 * width1 + flex-shrink2 * width2) * moveWidth</code></li></ul></li><li><strong>flex-basis</strong>：伸缩基准值<ul><li>伸缩基准值，项目占据主轴空间</li><li>定义了在分配多余空间之前，项目占据的主轴空间（<code>main size</code>），浏览器根据这个属性，计算主轴是否有多余空间，他的默认值为<code>auto</code>，即项目本来大小</li><li>该属性设置元素的宽度或高度，当然<code>width</code>也可以用来设置元素宽度，如果元素上同时出现了<code>width</code>和<code>flex-basis</code>那么<code>flex-basis</code>会覆盖width的值</li><li>子元素宽度尽可能按照<code>basis</code>来如果基准值相加大于容器宽度那么下面由下面公式分配宽度给子元素</li><li><code>（flex-basis / (flex - basis 相加） * 容器的宽度)</code></li></ul></li><li><strong>flex</strong>：是<code>flex-frow</code>，<code>flex-shrink</code>，<code>flex-basis</code>的简写<ul><li>默认值为：<code>flex:0 1 auto</code></li><li>常用简化写法<ul><li><code>flex:1</code>;  ——  <code>flex:1 1 0%</code>;</li><li><code>flex:3</code>;  ——  <code>flex:3 1 0%</code>;</li><li><code>flex:auto</code>; —— <code>flex: 1 1 auto</code>;</li><li><code>flex:none</code>; —— <code>flex: 0 0 auto</code>;</li></ul></li><li><code>flexbox</code>布局和原来的布局是两个概念，部分<code>css</code>属性在<code>flexbox</code>盒子里面不起作用，<code>float</code>，<code>clear</code>，<code>column</code>，<code>vertical-align</code>等等</li><li>建议使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</li><li>真实情况<ul><li><code>son1</code> = (<code>flex-shrink</code>) * <code>flex-basis</code></li><li><code>son2</code> = (<code>flex-shrink</code>) * <code>flex-basis</code></li><li><code>sonN</code> = (<code>flex-shrink</code>) * <code>flex-basis</code></li><li>加权值 = <code>son1</code> + <code>son2</code> + …… + <code>sonN</code></li><li>压缩的宽度 <code>w</code> = (子元素<code>flex</code> - <code>basis</code>值  * （<code>flex-shrink</code>) / 加权值) * 溢出值</li><li>缩减值1：(<code>flex-basis1 * 1</code> / 加权值) * 溢出值</li><li>缩减值2：(<code>flex-basis2 * 2</code> / 加权值) * 溢出值</li><li>缩减值3：(<code>flex-basis3 * 3</code> / 加权值) * 溢出值</li><li>最后<code>son1</code>、<code>son2</code>、<code>son3</code>的实际宽度为：<ul><li><code>flex-basis</code> - 缩减值 <code>n</code> = <code>son n</code> 真实宽度</li></ul></li></ul></li></ul></li><li><strong>order</strong>：排列顺序<ul><li><code>number</code>定义项目的排列顺序。数值越小，排列越靠前，默认为<code>0</code></li></ul></li><li><strong>align-self</strong> ：单个项目对齐方式<ul><li><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性，默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></li><li><code>auto</code>：自动排序</li><li><code>flex-start</code>：最开始的位置排序</li><li><code>flex-end</code>：最后的位置排序</li><li><code>center</code>：中间排序</li><li><code>baseline</code>：以第一行文字的基准线对齐</li><li><code>stretch</code>：如果项目未设置高度或设置为<code>auto</code>，将占满整个父级容器的高度</li></ul></li></ul></li><li><strong>以下六个属性设置在容器上</strong><ul><li><strong>flex-direction</strong>：决定主轴方向<ul><li>决定主轴的方向，即项目的排列方向</li><li><code>row</code>：（默认值）主轴为水平方向，起点在左端</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端</li><li><code>column</code>：主轴为垂直方向，起点在上沿</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿</li></ul></li><li><strong>flex-wrap</strong> 是否换行<ul><li>默认情况下，项目都排在一条线（又称“轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</li><li><code>nowrap</code>：（默认）：不换行</li><li><code>wrap</code>：换行，第一行在上方</li><li><code>wrap-reverse</code>：换行，第一行在下方</li></ul></li><li><strong>flex-flow</strong>  <ul><li><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row</code> <code>nowrap</code></li></ul></li><li><strong>justify-content</strong><ul><li>定义了项目在主轴上的对齐方式</li><li><code>flex-start</code>：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>：居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</li></ul></li><li><strong>align-items</strong><ul><li>定义项目在侧轴上的对齐方式</li><li><code>flex-start</code>：交叉轴的起点对齐</li><li><code>flex-end</code>：交叉轴的中点对齐</li><li><code>center</code>：交叉轴的中点对齐</li><li><code>baseline</code>：项目的第一行文字的基线对齐</li><li><code>stretch</code>：（默认值）：如果项目未设置高度或设置为<code>auto</code>，将占满整个容器的高度</li></ul></li><li><strong>align-content</strong><ul><li>定义了多根轴线的对齐方式，如果项目只有一根轴线，该属性不起作用</li><li><code>flex-start</code>：与交叉轴的起点对齐</li><li><code>flex-end</code>：与交叉轴的终点对齐</li><li><code>center</code>：与交叉轴的中点对齐</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以轴线之间的间隔比轴线与边框的间隔大一倍</li><li><code>stretch</code>：（默认值）：轴线沾满整个交叉轴</li></ul></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111708239.png" alt="flex布局语法篇小结"></p><ul><li>拓展阅读<ul><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">flex布局语法篇</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">flex布局实例篇</a></li></ul></li></ul><h2 id="运动体系"><a href="#运动体系" class="headerlink" title="运动体系"></a>运动体系</h2><hr><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><hr><ul><li>过渡：给改变添加过程<ul><li>什么是过渡</li><li>过渡效果由哪几部分组成</li><li>过渡可以干些什么</li></ul></li><li><strong>transition</strong>： 过渡属性<ul><li><code>transition: property duration timing-function delay</code>;</li><li><strong>transition-property</strong>：过渡属性的名称<pre><code>- `none `  没有过渡属性- `all  `      所有属性都过渡(默认值)- `property `   具体属性名称(`property1`,`property2`...)</code></pre></li><li><strong>transition-duration</strong>：过渡属性花费的时间<ul><li><code>time </code>  秒或毫秒</li></ul></li><li><strong>transition-delay</strong>：过渡效果延迟时间</li><li><strong>transition-timing-function</strong>：过渡效果速度曲线<ul><li><code>time </code>  秒或毫秒</li><li><code>linear</code>:规定以相同速度开始至结束的过渡效果（等于 <code>cubic-bezier(0,0,1,1)</code>）。</li><li><code>ease</code>:规定慢速开始，然后变快，然后慢速结束的过渡效果（<code>cubic-bezier(0.25,0.1,0.25,1)</code>）。</li></ul></li><li><code>ease-in</code>:规定以慢速开始的过渡效果（等于 <code>cubic-bezier(0.42,0,1,1)</code>）。<ul><li><code>ease-out</code>    :规定以慢速结束的过渡效果（等于 <code>cubic-bezier(0,0,0.58,1)</code>）。</li><li><code>ease-in-out</code> :规定以慢速开始和结束的过渡效果（等于 <code>cubic-bezier(0.42,0,0.58,1)</code>）。</li><li><code>cubic-bezier(n,n,n,n)</code>:在 <code>cubic-bezier</code> 函数中定义自己的值。可能的值是 <code>0 </code>至 <code>1</code> 之间的数值。</li></ul></li><li>过渡完成事件   </li></ul></li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111708489.png" alt="过渡完成事件"><pre><code>  - `Webkit`内核：       <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj.addEventListener(<span class="string">&#x27;webkitTransitionEnd&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>    - 标准:         <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj.addEventListener(<span class="string">&#x27;transitionend&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><hr><ul><li>什么是<code>CSS3</code> 动画？<ul><li>通过 <code>CSS3</code>，我们能够创建动画，这可以在许多网页中取代动画图片、<code>Flash</code> 动画以及 <code>JavaScript</code></li></ul></li><li><code>animation</code> 动画会按照<code>keyframes</code>关键帧里面指定的帧状态而过渡执行。0% —— 100% 代表动画的时间过渡</li><li><strong>动画接口</strong></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了 animation-play-state 属性。</td></tr><tr><td>animation-name</td><td>规定 @keyframes 动画的名称。</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒。</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线（速率）。</td></tr><tr><td>animation-delay</td><td>规定动画延迟时间</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数。 infinite（无限次）number（有限次）</td></tr><tr><td>animation-direction</td><td>规定动画的方向。</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。running（播放）paused（暂停）</td></tr><tr><td>animation-fill-mode</td><td>规定对象动画时间之外的状态。</td></tr></tbody></table><ul><li><p><strong>animation-direction</strong>:  方向</p><ul><li><code>normal</code>：0%-100%）</li><li><code>reverse</code>：（100%-0%）</li><li><code>alternate</code>：（奇数次正向，偶数次反向）</li><li><code>alternate-reverse</code>：（奇数次反向，偶数次正向） </li></ul></li><li><p><strong>animation-timing-function速度曲线</strong></p><ul><li><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的。</td></tr><tr><td>ease</td><td>默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>cubic-bezier(n,n,n,n)</td><td>在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td></tr></tbody></table></li></ul></li><li><p><strong>animation-fill-mide</strong>:  定义在动画开始之前和结束之后发生的操作</p><ul><li><code>forwards</code>：动画在结束后停留在最后的关键帧的位置</li><li><code>backwards</code>：会在向元素应用动画样式时迅速应用动画的初始帧，意思是是否立即使用关键帧（结合延迟1s来看）</li><li><code>both</code>：元素动画同时拥有<code>forwards</code>和<code>backwards</code>效果</li><li><code>none</code>：默认值，表示动画按照预期进行，完成最后一帧时，反转到初始处</li></ul></li><li><p>在谷歌浏览器里面需要加上<code>-webkit-</code><br><code>IE6,7,8,9</code>不支持<code>css3</code>运动</p></li></ul><h3 id="transform-2D转换"><a href="#transform-2D转换" class="headerlink" title="transform 2D转换"></a>transform 2D转换</h3><hr><ul><li><strong><code>Css3</code>平面转换方法</strong><ul><li><code>translate() </code>：移动</li><li><code>rotate</code>：旋转</li><li><code>scale()</code>：缩放</li><li><code>skew()</code>：翻转</li><li><code>matrix()    </code>：矩阵</li></ul></li></ul><ul><li><strong>transform:</strong><ul><li><strong>rotate()</strong>  旋转函数/方法 (deg)</li><li>以x/y/z轴进行旋转，默认为z轴<ul><li><code>deg</code>  度数</li></ul></li><li>用于旋转元素角度</li><li>例：<code>rotate(30deg) </code> 把元素顺时针旋转 30 度<ul><li><code>rotatex()</code>，<code>rotatey()</code>，<code>rotatez()</code> ，<code>rotate3d(x, y, z, angle)</code></li></ul></li><li><code>angle</code>是旋转角度</li><li><strong>skew(X,Y)</strong> 倾斜函数 / 翻转方法 (deg) <pre><code> - `skewX()`</code></pre><ul><li><code>skewY()</code></li><li>通过 <code>skew() </code>方法，元素翻转给定的角度</li><li>例：<code>transform: skew(30deg,20deg);</code><ul><li>把元素围绕 <code>X </code>轴把元素翻转<code> 30</code> 度，围绕 <code>Y</code> 轴翻转 <code>20 </code>度</li></ul></li></ul></li><li>**scale(X,Y)**：缩放函数 / 尺寸方法 (正数、负数和小数)<ul><li><code>scaleX()</code></li><li><code>scaleY()</code></li><li>方法用于改变元素尺寸</li><li>例：<code>scale(2,4)</code> <ul><li>把宽度转换为原始尺寸的 2 倍，把高度转换为原始高度的 4 倍</li></ul></li><li><code>scalex()</code>, <code>scaley()</code>, <code>scalez()</code>值是数字表示倍数，不加任何单位</li><li><code>scale3d()</code> –&gt; <code>scale3d(x, y, z)</code></li></ul></li><li><strong>translate(X,Y)</strong> 位移函数 / 位置方法(px)<ul><li><code>translateX()</code></li><li><code>translateY()</code></li><li>用于移动元素位置<ul><li>例：<code>translate(50px,100px)</code></li></ul></li><li>把元素从左侧移动 50 像素，从顶端移动 100 像素。</li><li>其实有些类似于我们的相对定位</li><li><code>translatex()</code>,<code> translatey()</code>, <code>translatez()</code>, <code>translate3d(x, y, z)</code></li></ul></li><li><strong>transform-origin</strong><ul><li>变换原点</li><li>任何一个元素都有一个中心点，默认情况下，其中心点是居于元素x轴和y轴的50%处</li><li>取值<ul><li>也可以使用像素值</li><li><code>top</code> = <code>top</code> <code>center</code> = <code>center top</code> = <code>50% 0</code></li><li><code>right</code> = <code>right center</code> = <code>center right</code> = <code>100% | 100% 50%</code></li><li><code>bottom</code> = <code>bottom center</code> = <code>center bottom = 50% 100%</code></li><li><code>left</code> = <code>left center</code> = <code>center left = 0 | 0 50%</code></li><li><code>center</code> = <code>center center</code> = <code>50% | 50% 50%</code></li><li><code>top left</code> = <code>left top</code> = <code>0 0</code></li><li><code>right top</code> = <code>top right</code> = <code>100% 0</code></li><li><code>bottom right</code> = <code>right bottom</code> = <code>100% 100%</code></li><li><code>bottom left</code> = <code>left bottom</code> = <code>0 100%</code></li></ul></li></ul></li></ul></li></ul><h3 id="transform-3D转换"><a href="#transform-3D转换" class="headerlink" title="transform 3D转换"></a>transform 3D转换</h3><hr><ul><li><strong><code>Css3</code>立体转换</strong></li><li><strong>transform-style：</strong><ul><li><em>transform-style属性需要设置在父元素中，高于任何嵌套的变形元素，设置了transform-style的元素，就不能防止子元素溢出设置overflow:hidden，否则会导致preserve-3d失效</em></li><li><strong>flat</strong>：默认，子元素将不保留其<code>3D</code>位置</li><li><strong>preserve-3d</strong>：子元素保留其<code>3D</code>位置<ul><li>建立<code>3D</code>空间（指定元素的子元素展示的场景是在<code>3D</code>场景还是平面(投影)场景）</li><li><code>perspective</code> 视角（指定观察者与z=0平面的距离，从而让元素及子元素看起来有3D透视位置效果<br>值：集体的带单位数值）</li><li><code>Perspective- origin</code> 视角基点 / 视觉中心点<ul><li>值：取值类似于变换基准</li><li>默认值为50% 50%</li></ul></li></ul></li></ul></li><li><strong>backface-visibility：</strong><ul><li>在元素运动的过程中，能否展示元素的背面</li><li><code>visible</code>：可见</li><li><code>hidden</code>：隐藏</li></ul></li></ul><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li><p><strong>模拟移动端meta</strong></p></li><li><p><em><meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,use-scalable=no"></em></p><ul><li><code>name=&#39;viewport&#39;</code>：视口大小</li><li><code>content=&quot;width=device-width&quot;</code> ：<code>width</code>视口宽度等于设备的宽度</li><li><code>initial-scale=1.0</code>：占的比例大小，1.0就是不放不缩</li><li><code>minimum-scale = 1.0</code>：代表最小能缩到1.0</li><li><code>maximum-scale = 1.0</code>：代表最大能缩到1.0</li><li><code>use-scalable=no</code>：不允许用户进行缩放</li></ul></li><li><p><strong>为什么有媒体查询</strong></p><ul><li>移动端的快速普及完全颠覆了<code>Web</code>涉及领域</li><li>用户不再仅在传统桌面系统上查看<code>Web</code>内容，他们越来越多地使用具有各种尺寸的智能电话、平板电脑和其他设备</li><li><code>Web</code>设计人员的挑战是确保他们的网站不仅是在大屏幕上看起来不错，在小型的电话以及介于它们之间的各种设备上看起来不错</li></ul></li><li><p><strong>什么是媒体查询</strong></p><ul><li>媒体查询是向不同设备提供不同样式的一种方式，它为每种类型的用户提供了最佳的体验</li><li><code>CSS2</code>：<code>media type</code><ul><li><code>media type</code>（媒体类型）是<code>css2</code>中一个非常有用的属性，通过<code>media type</code>我们可以对不同的设备指定特定的样式，从而实现更丰富的界面</li></ul></li><li><code>CSS3</code>：<code>media query</code><ul><li><code>media query</code>是<code>CSS3</code>对<code>media type</code>的增强，事实上我们可以将media query看成是<code>media type+css</code>属性（媒体特征<code>Media features</code>）判断</li></ul></li></ul></li></ul><h3 id="如何使用媒体查询"><a href="#如何使用媒体查询" class="headerlink" title="如何使用媒体查询"></a><strong>如何使用媒体查询</strong></h3><ul><li><p>媒体查询的引用方法</p><ul><li><p><strong>link</strong>标签</p><ul><li><p>```css</p><link rel='stylesheet' media='screen and (max-width:800px)' href='index.css'> <p>媒体类型（Media Type）：all（全部）、screen（屏幕）、print（页面打印或打印预览模式）</p><p>媒体特性（Media features）：width（渲染区宽度）、device-width（设备宽度）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - `Media Query`是`CSS3`对`Media Type`的增强版，其实可以将`Media Query`堪称`Media Type`（判断条件）+ `CSS`（符合条件的样式规则）</span><br><span class="line"></span><br><span class="line">  - **@import**</span><br><span class="line"></span><br><span class="line">    - **@media**</span><br><span class="line"></span><br><span class="line">      - `@media screen and (max-width:800px) and (min-width:600px) &#123;&#125;`</span><br><span class="line"></span><br><span class="line">### **媒体类型（Media Type）**</span><br><span class="line"></span><br><span class="line">| 类型       | 解释                                   |</span><br><span class="line">| ---------- | -------------------------------------- |</span><br><span class="line">| all        | 所有设备                               |</span><br><span class="line">| braille    | 盲文                                   |</span><br><span class="line">| embossed   | 盲文打印                               |</span><br><span class="line">| handheld   | 手持设备                               |</span><br><span class="line">| print      | 文档打印或打印预览模式                 |</span><br><span class="line">| projection | 项目演示，比如幻灯                     |</span><br><span class="line">| screen     | 彩色电脑屏幕                           |</span><br><span class="line">| speech     | 演讲                                   |</span><br><span class="line">| tty        | 固定字母间距的网络媒体，比如电传打字机 |</span><br><span class="line">| tv         | 电视                                   |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### **媒体特性（Media features）**</span><br><span class="line"></span><br><span class="line">| 属性                | 值                     | Min/Max | 描述                     |</span><br><span class="line">| ------------------- | ---------------------- | ------- | ------------------------ |</span><br><span class="line">| color               | 整数                   | yes     | 每种色彩的字节数         |</span><br><span class="line">| color-index         | 整数                   | yes     | 色彩表中的色彩数         |</span><br><span class="line">| device-aspect-ratio | 整数/整数              | yes     | 宽高比例                 |</span><br><span class="line">| device-height       | length                 | yes     | 设备屏幕的输出高度       |</span><br><span class="line">| device-width        | length                 | yes     | 设备屏幕的输出宽度       |</span><br><span class="line">| grid                | 整数                   | no      | 是否基于格栅的设备       |</span><br><span class="line">| height              | length                 | yes     | 渲染界面的高度           |</span><br><span class="line">| monochrome          | 整数                   | yes     | 单色帧缓冲器中每像素字节 |</span><br><span class="line">| resolution          | 分辨率（dpi/dpcm）     | yes     | 分辨率                   |</span><br><span class="line">| scan                | Progresslve interlaced | no      | tv媒体类型的扫描方式     |</span><br><span class="line">| width               | length                 | yes     | 渲染界面的宽度           |</span><br><span class="line">| orientation         | Portrait/landscape     | no      | 横屏或竖屏               |</span><br><span class="line"></span><br><span class="line">### 其他   </span><br><span class="line"></span><br><span class="line">- **逻辑操作符**</span><br><span class="line"></span><br><span class="line">  - 合并多个媒体属性 `and`</span><br><span class="line">  - `@media screen and (min-width:600px) and (max-width:1000px)`</span><br><span class="line">  - 合并多个媒体属性或合并媒体属性与媒体类型，一个基本的媒体查询，即一个媒体属性与默认指定的screen媒体类型</span><br><span class="line"></span><br><span class="line">- **指定备用功能**</span><br><span class="line"></span><br><span class="line">  - 逗号 ,</span><br><span class="line">  - `@media screen and (min-width:769px), print and (min-width:6in)`</span><br><span class="line">  - 没有`or`关键字可用于指定备用的媒体功能。相反，可以将备用功能以逗号分隔列表的形式列出这才会将样式应用到宽度超过769像素的屏幕或使用至少6英寸宽的纸张的打印设备</span><br><span class="line"></span><br><span class="line">- **指定否定条件**</span><br><span class="line"></span><br><span class="line">  - `not`</span><br><span class="line">  - `@media not screen and (monochrome)`</span><br><span class="line">  - 要指定否定条件，可以在媒体声明中添加关键字not，不能再单个条件前使用not。该关键字必须位于声明的开头，而且它会否定整个声明。所以，上面的示例会应用于除单色屏幕外的所有设备</span><br><span class="line"></span><br><span class="line">- **向早期浏览器隐藏媒体查询**</span><br><span class="line"></span><br><span class="line">  - `only`</span><br><span class="line">  - `media=&#x27;only screen and (min-width:401px) and (max-width:600px)&#x27;`</span><br><span class="line">  - 媒体查询规范还提供了关键字`only`，它用于向早期浏览器隐藏媒体查询。类似于`not`，该关键字必须位于声明的开头</span><br><span class="line">  - 早期浏览器应该将以下语句`media=‘screen and (min-width:40px) and (max-width:600px)’ `解释为` media=&#x27;screen&#x27;; `换句话说，他应该将样式规则应用于所有屏幕设备，即使他不知道媒体查询的含义</span><br><span class="line">  - 无法识别媒体查询的浏览器要求获得逗号分隔的媒体类型列表，规范要求，它们应该在第一个不是连字符的非数字字母字符之前截断每个值。所以，早期浏览器应该将上面的实例解释为：`media=&#x27;only&#x27;`</span><br><span class="line">  - 因为没有`only`这样的媒体类型，所以样式表被忽略</span><br><span class="line"></span><br><span class="line">- **易混淆的宽度**</span><br><span class="line"></span><br><span class="line">  - `device-width`/`heighta``width`/`height`</span><br><span class="line">  - `device-width`/`height`是设备的宽度（比如电脑手机的宽度，不是浏览器的宽度）</span><br><span class="line">  - `width/height是documentElement.clinetWidth`/`Height`即`viewport`的值</span><br><span class="line">  </span><br><span class="line">- **尺寸单位**</span><br><span class="line"></span><br><span class="line">  - **px**</span><br><span class="line"></span><br><span class="line">    - 相对长度单位，相对于显示器屏幕分辨率而言的</span><br><span class="line">    - 特点</span><br><span class="line">      - IE无法调整那些使用px作为单位的字体大小</span><br><span class="line">      - 国外的大部分网站能够调整的原因在于其使用了`em`或`rem`作为字体单位</span><br><span class="line">      - firefox能够调整`px`和`em`，`rem`</span><br><span class="line"></span><br><span class="line">  - **em**</span><br><span class="line"></span><br><span class="line">    - `em`的值并不是固定的</span><br><span class="line"></span><br><span class="line">    - `em`会继承父级元素的字体大小</span><br><span class="line"></span><br><span class="line">    - ```javascript</span><br><span class="line">      注意：任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。</span><br><span class="line">      </span><br><span class="line">      所以我们在写CSS的时候，需要注意两点：</span><br><span class="line">      </span><br><span class="line">      1. body选择器中声明Font-size=62.5%；</span><br><span class="line">      2. 将你的原来的px数值除以10，然后换上em作为单位；</span><br><span class="line">      3. 重新计算那些被放大的字体的em数值。避免字体大小的重复声明。</span><br><span class="line">      </span><br><span class="line">      也就是避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了1em=12px。      </span><br></pre></td></tr></table></figure></li><li><p><code>1em</code> = <code>1 * font-size</code> = <code>1 * 16px</code></p></li><li><p><code>font-size</code>默认的是<code>16</code>像素</p></li></ul></li><li><p><strong>rem</strong></p><ul><li><p>相对单位，相对的只是<code>HTML</code>根元素的字体大小</p></li><li><p><code>font size of the root element </code>（根元素的字体大小)</p></li><li><p><code>rem</code>是一种相对长度单位。相对于根元素(即<code>html</code>元素)<code>font-size</code>计算值的倍数。</p></li><li><p>和<code>em</code>不同的是<code>rem</code>总是相对于根元素(如:<code>root</code>{})，而不像em一样使用级联的方式来计算尺寸。这种相对单位使用起来更简单。</p></li><li><p><code>rem</code>支持<code>IE9</code>及以上，意思是相对于根元素<code>html</code>（网页），不会像<code>em</code>那样，依赖于父元素的字体大小，而造成混乱。使用起来安全了很多。</p></li><li><p><strong>注意：</strong> <em>选择使用什么字体单位主要由你的项目来决定，如果你的用户群都使用最新版的浏览器，那推荐使用rem，如果要考虑兼容性，那就使用px,或者两者同时使用。</em></p></li><li><p>```javascript<br>html {</p><pre><code>font-size: 10px;</code></pre><p>}</p><p>.wrap {</p><pre><code>font-size: 1.5rem;// 这个时候，.wrap这个元素里面的字体大小就是1.5 * 10px，也就是1.5rem了</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 附录一 像素单位</span><br><span class="line"></span><br><span class="line">- **物理像素和设备独立像素**</span><br><span class="line"></span><br><span class="line">  - 一个物理像素是显示器（手机屏幕）上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值</span><br><span class="line"></span><br><span class="line">  - 设备独立像素（也叫目睹无关像素），可以认为是计算机坐标系统的一个点，这个点代表一个可以由程序使用的虚拟像素（`css`像素），然后由相关系统转换为物理像素</span><br><span class="line"></span><br><span class="line">  - 设备像素比（`device pixel ratio`）设备像素比（简称`dpr`）定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式得到 *设备像素值 = 物理像素 / 设备独立像素* `js`中可以通过`window.devicePixelRatio`</span><br><span class="line"></span><br><span class="line">  - `dpr`在一些屏幕上是2：1的比例，所以像素值在不同屏幕上的占比是不同的</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    1.设备宽高为375*667，可以理解为设备独立像素（或css像素）</span><br><span class="line">    2.dpr为2，根据上面的计算公式，其物理像素就应该 2 ，为750*1334.</span><br><span class="line">    </span><br><span class="line">    1css像素在PC端显示器需要用（1*1）个栅格点表示 在iPhone6中则需要4（2*2）个</span><br><span class="line">    </span><br><span class="line">    也就是在不同的屏幕上（普通屏幕 vs retina屏幕），css像素所呈现的大小（物理尺寸）是一致的，不同的是一个css像素所对象的物理像素个数是不一致</span><br><span class="line">    </span><br><span class="line">    在普通的屏幕下，1个css像素对应的1个物理像素 为1:1 。在retina屏幕下，1个css像素对应4个物理像素 1:4</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>位图像素</strong></p></li><li><p>1个位图像素是栅格图像（如：<code>png</code>，<code>jpg</code>，<code>gif</code>等）最小的数据单元，每一个位图像素都包括着一些资深的现实信息（如：显示位置，颜色值，透明度等）</p></li><li><p>在普通屏幕下是没有问题的，但是在<code>retina</code>屏幕下就会出现位图像素点不够，从而导致图片模糊的情况</p></li><li><p>```<br>对于dpr=2的，1个位图像素对应4个物理像素，由于单个位图像素不以再进一步分割，所以只能就近取色，从而导致图片模糊</p><p>解决办法，使用分辨率大两倍的图片，如200<em>300 img 标签，就需要提供400</em>600的图片.由此一来位图像素点的个数是原来的4倍，在retina屏幕下，位图像素点个数就可以物理像素点个数形成1:1 的比例，图片自然就清晰了。</p><p>如果普通屏幕下，也用了两倍的图片，会怎么样，很明显，在普通屏幕下，200<em>300(css pixel)img标签，所对应的物理像素个数就是200</em>300个，而两倍图片的位图像素个数则是200<em>300</em>4，所以就出现了一个像物理像素点对应4个为图像素点，所以它的取色也只能通过——定的算法（显示结果就是一张只有原图像素总数四分之一，我们称这个过程叫做downsampling），肉眼看上去这个图片不会模糊，但是会觉得图片缺少一些锐利度，或者是有点色差（还是可以接受的）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 附录二 浏览器渲染原理</span><br><span class="line"></span><br><span class="line">1. 处理`HTML` 生成`DOM`树</span><br><span class="line">2. 处理`CSS `生成`CSSDOM`树</span><br><span class="line">3. 将两个数合并成`render`树</span><br><span class="line">4. 对`render`树进行布局计算</span><br><span class="line">5. 将`render`树中的每一个节点绘制在屏幕上</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>细化分析：</p></li></ul></li></ul><p>1.浏览器把获取到的html代码解析成1个Dom树，html中的每个tag都是Dom树中的1个节点，根节点就是我们常用的document对象(<html> tag)，当然这里包含用js动态创建的dom节点</p><p>2浏览器把所有样式(主要包括css和浏览器的默认样式设置)解析成样式结构体，在解析的过程中会去掉浏览器不能识别的样式，生成CSSDOM树</p><p>3.DOM tree和CSSDOM tree 合并成 render tree，render tree中每个node都有自己的style，而且render tree不包含隐藏的节点(比如display:none的节点，还有无样式head节点)，因为这些节点不会用于呈现，而且不会影响呈现的，注意 visibility:hidden隐藏的元素还是会包含到render tree中的，因为visibility:hidden 会影响布局(layout)，会占有空间。</p><p>4.render tree构建完毕之后根据样式计算布局，布局阶段的输出结果称为 “盒模型”（box model）。盒模型精确表达了窗口中每个元素的位置和大小，而且所有的相对的度量单位都被转化成了屏幕上的绝对像素位置 (根据css2的标准，render tree中的每个节点都称为box(Box dimensions—-盒子模型)，box所有属性：width,height,margin,padding,left,top,border等。)</p><p>5.将这些信息渲染为屏幕上每个真实的像素点了。这个阶段称为“绘制”，或者“栅格化”（rasterizing）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111709570.png)</span><br><span class="line"></span><br><span class="line">- 重绘、重排</span><br><span class="line"></span><br><span class="line">  - 重排，我们在计算它们在当前设备中准确的位置和尺寸。这正是布局阶段要做的工作，该阶段在英语中也成为“回流”（`reflow`），当`render tree`中的一部分（或全部）因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。也会回流（其实我觉得叫重新布局更简单明了一些）。每个页面至少需要一次回流，就是在页面第一次加载的时候</span><br><span class="line"></span><br><span class="line">  - 重绘（`repaints`）当`render tree`中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如`background-color`,则就叫重绘</span><br><span class="line"></span><br><span class="line">  - 重绘，重排会影响性能</span><br><span class="line"></span><br><span class="line">    - 在`chrome`中有一个`Performance`面板，它可以计算从开始到绘制完成花费了多少时间</span><br><span class="line">    - 蓝色：网络通信和`HTML`解析</span><br><span class="line">    - 黄色：`JavaScript`执行</span><br><span class="line">    - 紫色：样式计算和布局，即重排</span><br><span class="line">    - 绿色：重绘</span><br><span class="line"></span><br><span class="line">  - 触发重排的方法：</span><br><span class="line"></span><br><span class="line">    - 以下这些属性和方法需要返回最新的布局信息，重新计算渲染树，就会造成回流，触发重排以返回正确的值，建议将她们合并到一起操作，可以减少回流次数，这些属性包括：</span><br><span class="line"></span><br><span class="line">    - `offsetTop`/`Left`、`offsetWidth`/`Height`、`scrollTop`/`Left`/`Width`/`Height`、`clientTop`/`Left`/`Width`/`Height`、`getComputedStyle()`、`currentStyle`</span><br><span class="line"></span><br><span class="line">    - 提高网页性能，就是要降低“重排”和重绘的频率和成本，尽量少触发重新渲染。DOM变动和样式变动，都会触发重新渲染。但是，浏览器已经很智能了，会尽量把所有的变动集中在一起，排成一个队列，然后一次性执行，尽量避免多次重新渲染</span><br><span class="line"></span><br><span class="line">    - ```js</span><br><span class="line">      div.style.color=&#x27;red&#x27;</span><br><span class="line">      div.style.background=&quot;yellow&quot;</span><br><span class="line">      div.style.left=&#x27;10px&#x27;</span><br><span class="line">      div.style.width=&#x27;20px&#x27;</span><br><span class="line">      </span><br><span class="line">      浏览器最低触发一次重排和重绘</span><br><span class="line">      </span><br><span class="line">      一般来说，样式的写操作之后，如果有上面那些属性的读操作，都会引发浏览器立即重排，这种重排，不会形成之前队列优化</span><br><span class="line">      </span><br><span class="line">      div.style.color = ‘red’;</span><br><span class="line">      var height = div.offseHeight;</span><br><span class="line">      div.style.height = height + ‘px’;</span><br><span class="line">      </span><br><span class="line">      Bad：</span><br><span class="line">      div.style.left = div.offsetLeft + ‘px’;</span><br><span class="line">      div.style.top = div.offsetTop + ‘px’;</span><br><span class="line">      重排重绘两次</span><br><span class="line">      Good:</span><br><span class="line">      Var left = div.offsetLeft + ‘px’;</span><br><span class="line">      Var top = div.offsetTop + ‘px’;</span><br><span class="line">      </span><br><span class="line">      div.style.left = left;</span><br><span class="line">      div.style.top = top;</span><br><span class="line">      放到队列，一起执行重排重绘一次</span><br><span class="line">      </span><br><span class="line">      我们来测试一下js动态添加10000个li 不同颜色而且设置宽度 所耗费render painting 的时间吧</span><br></pre></td></tr></table></figure><pre><code>- 理论上的结局优化方法  - 说到的`DOM`的多个读写操作，应该放在一起，不要两个读操作之间，加入一个写操作  - 离线操作`DOM`如使用隐藏元素 `document.createDocumentFragment()`/ `cloneNode() `  - 修改样式的时候添加类名，或一次性添加到`dom.style.cssText`上等  - 以上都是理论上的加速方法</code></pre><h2 id="附录三-css3响应式布局"><a href="#附录三-css3响应式布局" class="headerlink" title="附录三 css3响应式布局"></a>附录三 css3响应式布局</h2><hr><ul><li><p>媒体类型</p><ul><li> <code>*all</code> 所有媒体</li><li> <code>braille</code> 盲文触觉设备</li><li> <code>embossed</code> 盲文打印机</li><li> <code>*print</code> 手持设备 </li><li> <code>projection</code> 打印预览</li><li> <code>*screen</code> 彩屏设备</li><li> <code>speech</code> ‘听觉’类似的媒体类型</li><li> <code>tty </code>不适用像素的设备</li><li> <code>tv </code> 电视</li></ul></li><li><p>关键字</p><ul><li> <code>and </code></li><li> <code>not  </code>    <code>not</code>关键字是用来排除某种制定的媒体类型</li><li> <code>only</code>     <code>only</code>用来定某种特定的媒体类型</li></ul></li><li><p>媒体特性</p><ul><li> <code>(max-width:600px) </code></li><li> <code>(max-device-width: 480px) </code>     设备输出宽度</li><li> <code>(orientation:portrait)</code>          竖屏</li><li> <code>(orientation:landscape)</code>        横屏</li><li> <code>(-webkit-min-device-pixel-ratio: 2)</code> 像素比</li><li> <code>devicePixelRatio</code>             设备像素比 </li><li> <code>window.devicePixelRatio = 物理像素 / dips</code></li></ul></li><li><p>样式引入</p></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/index<span class="selector-class">.css</span>&quot; media=&quot;print&quot; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;css/demo.css&quot;</span>) screen;</span><br><span class="line"><span class="keyword">@media</span> screen&#123;    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=”stylesheet” media=”all and</span><br><span class="line"> (orientation:portrait)” href=”portrait.css”&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=”stylesheet” media=”all</span><br><span class="line"> and (orientation:landscape)”href=”landscape.css”&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">360px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">500px</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; </span><br><span class="line">href=&quot;indexA<span class="selector-class">.css</span>&quot;  media=&quot;screen and (<span class="attribute">min-width</span>: <span class="number">800px</span>)<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; </span><br><span class="line">href=&quot;indexB<span class="selector-class">.css</span>&quot; media=&quot;screen and (<span class="attribute">min-width</span>: <span class="number">600px</span>) and (max-width: <span class="number">800px</span>)<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; </span><br><span class="line">href=&quot;indexC<span class="selector-class">.css</span>&quot;    media=&quot;screen and (<span class="attribute">max-width</span>: <span class="number">600px</span>)<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;HTML5&quot;&gt;&lt;a href=&quot;#HTML5&quot; class=&quot;headerlink&quot; title=&quot;HTML5&quot;&gt;&lt;/a&gt;HTML5&lt;/h1&gt;&lt;h2 id=&quot;HTML5结构&quot;&gt;&lt;a href=&quot;#HTML5结构&quot; class=&quot;headerlink&quot; title=&quot;HTML5结构&quot;&gt;&lt;/a&gt;HTML5结构&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTML5&lt;/code&gt; 是新一代的 &lt;code&gt;HTML&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DTD&lt;/code&gt;声明改变    &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;新的结构标签            &lt;/li&gt;
&lt;/ul&gt;
  &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--文档申明 文档类型申明，html代表html5的文档类型--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;meta-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--字符编码，charset=&amp;#x27;utf-8&amp;#x27;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#x27;utf-8&amp;#x27;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	版本兼容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;		1.省略引号，当属性值（&amp;lt;、&amp;gt;、=、单引号、双引号、空字符串）时，属性两边的引号可以省略，如&amp;lt;input type=text&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;		2.省略属性值，具有布尔值的属性，比如disabled，readonly，致谢属性值代表true，如：&amp;lt;input type=checkbox checked&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="HTML and CSS" scheme="https://github.com/haodex/haodex.github.io.git/categories/HTML-and-CSS/"/>
    
    
    <category term="HTML and CSS" scheme="https://github.com/haodex/haodex.github.io.git/tags/HTML-and-CSS/"/>
    
  </entry>
  
  <entry>
    <title>网络</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/11/08/%E7%BD%91%E7%BB%9C/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/11/08/%E7%BD%91%E7%BB%9C/</id>
    <published>2021-11-08T07:35:53.000Z</published>
    <updated>2021-11-11T09:58:49.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p><strong>冯诺依曼式计算机–冯诺依曼（计算机之父）</strong></p><p><strong>运算器：</strong></p><ul><li>CPU，GPU（显卡）</li></ul><p><strong>存储器：</strong></p><ul><li>内存（断电数据清空，读写速度快）</li><li>硬盘（辅存）：（数据可以持久化，读写速度，相对较慢）</li></ul><p><strong>控制器：</strong></p><ul><li>主板上的一些器件</li></ul><p><strong>输入设备：</strong></p><ul><li>键盘，鼠标，麦克风，网口</li></ul><p><strong>输出设备：</strong></p><ul><li>显示器，耳机，网口</li></ul><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><h3 id="IP自动地址的格式："><a href="#IP自动地址的格式：" class="headerlink" title="IP自动地址的格式："></a>IP自动地址的格式：</h3><ul><li><code>IP</code>地址分为四个段：<code>xxx.xxx.xxx.xxx</code>，每个段0~255，每个段都是由8个0、1组成的。</li></ul><h3 id="IP地址的分类："><a href="#IP地址的分类：" class="headerlink" title="IP地址的分类："></a>IP地址的分类：</h3><ul><li><p>一个IP地址分为两个部分：网络<code>ID</code>，主机<code>ID</code></p></li><li><ul><li>A类：0.0.0.0 ~ 127.255.255.255（一个网络能有1600+万台）</li><li>B类：128.0.0.0 ~ 191.255.255.255（有的用户网络也可以是：172.16.0.0 ~ 172.31.255.255）</li><li>C类：192.0.0.0 ~ 223.255.255.255（C类为家用网络：192.168.xxx.xxx）</li><li>D类：（多播地址）</li><li>E类：</li></ul></li></ul><span id="more"></span><h2 id="五层网络模型"><a href="#五层网络模型" class="headerlink" title="五层网络模型"></a>五层网络模型</h2><ul><li>应用层：<code>HTTP</code>协议，<code>DNS</code>协议</li><li>运输层：<code>TCP</code>协议、<code>UDP</code>协议</li><li>网络层：<code>IP</code>地址 – <code>IP</code>协议</li><li>数据链路层：mac地址</li><li>物理层</li><li>*用户传输的自上而下的，浏览器解析是自下而上的</li></ul><h2 id="域名与DNS解析"><a href="#域名与DNS解析" class="headerlink" title="域名与DNS解析"></a>域名与DNS解析</h2><p><code>www.baidu.com</code> -&gt; <strong>域名</strong></p><p>问：能通过域名直接访问到一台机器吗？</p><p>答：不可以的。</p><h3 id="用域名和IP形成对应关系"><a href="#用域名和IP形成对应关系" class="headerlink" title="用域名和IP形成对应关系"></a>用域名和IP形成对应关系</h3><ul><li>首先，计算机是不知道域名对应的<code>IP</code>的。</li><li>问路由器，如果路由器认识这个域名，就返回一个<code>IP</code>，然后计算机访问这个<code>IP</code>。</li><li>如果路由器不认识，他就问上一层路由器。</li><li>如果问到了城市这个级别的路由器的时候，<code>DNS</code>服务器。</li><li>如果<code>DNS</code>服务器不认识这个域名，继续向上级<code>DNS</code>服务器查找。</li></ul><p>互联网建立的时候，全球有13台的<code>DNS</code>服务器。</p><h3 id="当向浏览器的地址栏中输入一个url按回车之后，网络中都会发生什么？"><a href="#当向浏览器的地址栏中输入一个url按回车之后，网络中都会发生什么？" class="headerlink" title="当向浏览器的地址栏中输入一个url按回车之后，网络中都会发生什么？"></a>当向浏览器的地址栏中输入一个url按回车之后，网络中都会发生什么？</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入`https://www.baidu.com`，这时`DNS`解析出`ip`地址，客户端发送http请求，经历三次握手，访问服务器，访问服务器过后，进行四次挥手，也就是断开连接，返回服务器的内容</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111658760.png" alt="url request.png (1208×446) (raw.githubusercontent.com)"></p><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><ul><li><p>当前在客户端当中输入了一个<code>www.baidu.com</code>，那么我们的这个客户端，当前会有一个<code>DNS</code>客户端，<code>DNS</code>客户端会获取当前我们输入的域名，向<code>DNS</code>服务器端发送一个检查报文，由这个<code>DNS</code>服务器根据这个域名解析出来这个唯一的<code>IP</code>地址</p></li><li><p>，然后这个<code>DNS</code>服务器，会把解析出来的<code>IP</code>地址发送给<code>DNS</code>客户端，也就是发送到我们本机上面，发送到本机上之后，一旦浏览器收取到了<code>DNS</code>解析出来的这个<code>IP</code>地址之后，就可以向该<code>IP</code>地址定位，给服务器发送<code>http</code>请求了。</p></li><li><p><code>DNS</code>域名服务器解析域名时，是倒着解析的，是一个树状图的一个形状，例如<code>www.baidu.com</code>，先解析<code>.com</code>，解析出来<code>.com</code>的<code>IP</code>地址，.com下面有很多的域名，找到baidu，然后解析<code>baidu</code>的<code>IP</code>地址，然后找<code>baidu</code>下面的<code>www</code>，然后解析<code>www</code>的域名，这三段<code>IP</code>地址构成了百度的绝对的<code>IP</code>地址，然后就可以根据这个<code>IP</code>地址给服务器发送请求了</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__________________________.com________________________________</span><br><span class="line">  |   |||</span><br><span class="line">  ____baidu____ tencent  alibaba……</span><br><span class="line"> |  |     |</span><br><span class="line">zhidao  www   ……</span><br></pre></td></tr></table></figure></li></ul><h2 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h2><blockquote><p><code>form</code>表单获取数据一次就会刷新一次，不会局部获取数据，所以就要通过ajax来弥补</p></blockquote><ul><li><strong><code>method</code>:<code>get</code>（获得数据） <code>post</code>（传入数据）等</strong></li><li><strong><code>action</code>: <code>address</code>(地址)</strong></li><li><code>entype</code>: 规定在发送表单数据之前如果对其进行编码<ul><li><code>application/x-www-form-urlencoded </code>（在发送前编码所有字符（默认）</li><li><code>multipart/form-data (&lt;input type=&#39;file&#39;&gt;)</code> 所有的字符都不编码，使用包含文件上传控件的表单时，必须使用该值</li></ul></li></ul><h3 id="Get与Post请求方式的区别"><a href="#Get与Post请求方式的区别" class="headerlink" title="Get与Post请求方式的区别"></a>Get与Post请求方式的区别</h3><ul><li>是基于什么前提的？如果什么前提都没有，不使用任何规范，只考虑语法和理论上的HTTP协议。<br>答：<code>GET</code>和<code>POST</code>几乎没有什么区别，只有名字不一样。</li><li>如果是基于<code>RFC</code>规范的。<br>（1）理论上（<code>Specification</code>）：<code>GET</code>和<code>POST</code>具有相同语法的，但是又不同的语义。<code>GET</code>是用来获取数据的，<code>POST</code>是用来发送数据的，其他方面没有区别。<br>（2）实现上的（<code>Implementation</code>）：各种浏览器，就是这个规范的实现者。<br>常见的那些不同</li><li>1）<code>GET</code>请求的数据在请求主体是看不到数据的，但是在URL是可见的。<code>POST</code>请求不显示在<code>URL</code>中，但是显示在请求主体中。</li><li>2）<code>GET</code>对长度是有限制的，<code>POST</code>可以传入很多数据。</li><li>3）<code>GET</code>请求的数据可以收藏为书签，<code>POST</code>请求到的数据不可收藏为书签。</li><li>4）<code>GET</code>请求后，按后退按钮、刷新按钮无影响，<code>POST</code>数据会被重新提交。</li><li>5）<code>GET</code>编码类型：<code>application/x-www-form-url</code>，<code>POST</code>的编码类型：有很多种：<code>encodeapplication/x-www-form-urlencoded、multipart/form-data</code></li><li>6）<code>GET</code>历史参数会被保留在浏览器里，<code>POST</code>不会保存在浏览器中的。</li><li>7）<code>GET</code>只允许<code>ASCII</code>，<code>POST</code>没有编码限制，允许发二进制的。</li><li>8）<code>GET</code>与<code>POST</code>相比，<code>GET</code>安全性较差，因为所发的数据是<code>URL</code>的一部分。</li></ul><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><h3 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h3><ul><li><p><code>Asynchronous Javascript And XML</code> （异步的<br> <code>JavaScript</code>和<code>XML</code>）</p></li><li><p> 它并不是一种单一的技术，而是有机利用一系列交互式网页应用相关的技术所形成的结合体</p></li><li><p><strong><code>Ajax</code>优势与不足</strong></p><ul><li><strong><code>Ajax</code>优势</strong><ul><li>优秀的用户体验<ul><li>这是<code>Ajax</code>下最大的优点，能在不刷新整个页面前提下更新数据</li></ul></li><li>提高<code>web</code>程序的性能<ul><li> 与传统模式相比，<code>Ajax</code>模式在性能上最大的区别在于传输数据的方式，在传统模式中，数据的提交时通过表单来实现的。<code>Ajax</code>模式只是通过<code>XMLHttpRequest</code>对象向服务器提交希望提交的数据，即按需发送</li></ul></li><li>减轻服务器和带宽的负担<ul><li> <code>Ajax</code>的工作原理相当于在用户和服务器之间加了一个中间层，似用户操作与服务器响应异步化。它在客户端创建<code>Ajax</code>引擎，把传统方式下的一些服务器负担的工作转移到客户端，便于客户端资源来处理，减轻服务器和带宽的负担</li></ul></li></ul></li><li><strong>Ajax的不足</strong><ul><li>浏览器对<code>XMLHttpRequest</code>对象的支持度不足</li><li>破坏浏览器前进、后退按钮的正常功能</li><li>对搜索引擎的支持的不足</li><li>开发和调试工具的缺乏</li></ul></li></ul></li></ul><h3 id="创建一个Ajax请求"><a href="#创建一个Ajax请求" class="headerlink" title="创建一个Ajax请求"></a>创建一个Ajax请求</h3><ul><li><p><strong><code>serialize()</code></strong> 方法</p><ul><li>串联表单对象，序列表表格内容为字符串，用于 Ajax 请求。</li></ul></li><li><p><strong><code>serializeArray()</code></strong> 方法</p><ul><li>把串联表单对象的形式用数组表示出来</li></ul></li><li><p><code>Ajax</code>的核心是<code>XMLHttpRequest</code>对象，它是<code>Ajax</code>实现的关键，发送异步请求、接受响应以及执行回调都是通过它来完成</p></li><li><p><strong>创建<code>ajax</code>对象 <code>var xhr = new XMLHttpRequest();</code></strong></p></li><li><p><strong>准备发送请求</strong></p><ul><li><p><strong><code>get</code> / <code>post</code></strong></p><ul><li><p><strong><code>get</code></strong></p><ul><li>传递的数据放在<code>URL</code>后面</li><li>中文编码 <code>encodeURI( &#39;&#39; )</code>;</li><li>缓存 在数据后面加上随机数或者日期对象或者……</li></ul></li><li><p><strong><code>post</code></strong></p><ul><li>传递的数据放在<code>send()</code>里面，并且一定要规定数据格式</li><li>没有缓存问题</li></ul></li><li><p><code>form</code>表单中:</p><ul><li><code>action</code>:<ul><li><code>method</code>: (默认是<code> get</code>)<ul><li><code>get</code>: 会在<code>url</code>里面以 <code>name=value</code> , 两个数据之间用 <code>&amp;</code> 连接</li></ul></li></ul></li><li><code>post</code>:</li></ul></li><li><p><code>enctype</code>: <code>&quot;application/x-www-form-urlencoded&quot;</code></p></li></ul></li><li><p> <code>url</code></p></li><li><p> 是否异步</p></li><li><p> 同步(<code>false</code>)：阻塞</p></li><li><p> 异步(<code>true</code>)：非阻塞</p></li></ul></li><li><p><strong>正式发送请求</strong></p></li><li><p><strong><code>ajax</code>请求处理过程</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">alert( xhr.responseText );</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><code>onreadystatechange</code> ：当处理过程发生变化的时候执行下面的函数</p></li><li><p><code>readyState</code> ：<code>ajax</code>处理过程</p><ul><li>0：请求未初始化（还没有调用 <code>open()</code>）。</li><li>1：请求已经建立，但是还没有发送（还没有调用 <code>send()</code>）。</li><li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</li><li>3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</li><li>4：响应已完成；您可以获取并使用服务器的响应了。</li></ul></li><li><p><code>responseText</code> ：请求服务器返回的数据存在该属性里面</p></li><li><p><code>status</code> : <code>http</code>状态码</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111648171.jpg" alt="HTTP状态码"></p></li></ul><p><strong>人类语言中的异步和机器语言的异步正好是相反的，同步也一样</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">举例：</span><br><span class="line">订外卖</span><br><span class="line">    <span class="number">1.</span> 需要一个设备：手机、电脑</span><br><span class="line">    <span class="number">2.</span> 设备里面要有app：美团外卖、饿了么、百度外卖</span><br><span class="line">    <span class="number">3.</span> 打开app ，选择商家---选择商品---张亮麻辣烫</span><br><span class="line"><span class="number">4.</span> 然后下单（不要麻辣不要汤）</span><br><span class="line">    <span class="number">5.</span> 监听外卖信息（就是查看外卖的情况，店家是否接单、骑手是否接单、外卖送到哪里）</span><br><span class="line">    <span class="number">6.</span> 开门---验货---处理</span><br><span class="line"></span><br><span class="line">ajax</span><br><span class="line">    <span class="number">1.</span> 设备：浏览器（必需，如果没有浏览器，ajax是发不出去的）</span><br><span class="line">    <span class="number">2.</span> 要有一个ajax对象</span><br><span class="line">    <span class="number">3.</span> ajax.open(method,url,flag)</span><br><span class="line"><span class="comment">/* ajax.open 初始化的意思，可以传入三个值</span></span><br><span class="line"><span class="comment">     method：请求的方式(get,post)</span></span><br><span class="line"><span class="comment">     url：你想请求谁家的数据</span></span><br><span class="line"><span class="comment">     flag：处理同步还是异步的方式（true为异步，false为同步）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="number">4.</span> ajax.send()</span><br><span class="line"><span class="comment">// 使用ajax.send()方法把数据发送出去</span></span><br><span class="line"><span class="number">5.</span> onreadystatechage</span><br><span class="line"><span class="comment">// 监听数据是否已经响应</span></span><br><span class="line">    <span class="comment">// 0 1 2 3 4，有一个响应过程，0为一开始的状态，4就是最后响应已经返回的状态</span></span><br><span class="line">    <span class="number">6.</span> 判断返回的状态，看一下是那种状态 status == <span class="number">200</span>（数据回来了），<span class="number">404</span>（数据没有），<span class="number">503</span>（服务器出问题了）</span><br></pre></td></tr></table></figure><h6 id="XMLHttpRequest（XHR）对象用于服务器交互。通过-XMLHttpRequest-可以在不刷新页面的情况下请求特点URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。XMLHttpRequest-在-AJAX-编程中被大量使用"><a href="#XMLHttpRequest（XHR）对象用于服务器交互。通过-XMLHttpRequest-可以在不刷新页面的情况下请求特点URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。XMLHttpRequest-在-AJAX-编程中被大量使用" class="headerlink" title="XMLHttpRequest（XHR）对象用于服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特点URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。XMLHttpRequest 在 AJAX 编程中被大量使用"></a><strong><code>XMLHttpRequest（XHR）</code>对象用于服务器交互。通过 <code>XMLHttpRequest</code> 可以在不刷新页面的情况下请求特点URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。<code>XMLHttpRequest</code> 在 AJAX 编程中被大量使用</strong></h6><p><strong><code>XMLHttpRequest</code>是<code>W3c</code>标准的，<code>ActiveXObject(&#39;Microsoft.XMLHttp&#39;)</code>是兼容IE的</strong></p><h3 id="ajax封装函数"><a href="#ajax封装函数" class="headerlink" title="ajax封装函数"></a>ajax封装函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装ajax</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">aJson</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> type = aJson.type || <span class="string">&quot;get&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> asyn = aJson.asyn || <span class="literal">true</span>; <span class="comment">//异步还是同步</span></span><br><span class="line">    <span class="keyword">var</span> url = aJson.url;<span class="comment">// url 接收 传输位置</span></span><br><span class="line">    <span class="keyword">var</span> success = aJson.success;<span class="comment">// success 接收 传输完成后的回调函数</span></span><br><span class="line">    <span class="keyword">var</span> data = aJson.data || <span class="string">&#x27;&#x27;</span>;<span class="comment">// data 接收需要附带传输的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;<span class="comment">//兼容处理</span></span><br><span class="line">        <span class="comment">//创建XMLHttpRequest对象，W3C标准</span></span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//一般浏览器</span></span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//IE标准</span></span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);<span class="comment">//IE6+</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="string">&quot;get&quot;</span> &amp;&amp; data)</span><br><span class="line">    &#123;</span><br><span class="line">        url += <span class="string">&quot;/?&quot;</span> + data +<span class="string">&quot;&amp;&quot;</span> + <span class="built_in">Math</span>.random();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化ajax请求</span></span><br><span class="line">    xhr.open( type , url , asyn );</span><br><span class="line">    <span class="comment">//规定传输数据的格式</span></span><br><span class="line">    xhr.setRequestHeader(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">    <span class="comment">//发送ajax请求（包括post数据的传输）</span></span><br><span class="line">    type == <span class="string">&quot;GET&quot;</span> ? xhr.send() : xhr.send(aJson.data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理请求</span></span><br><span class="line">    <span class="comment">//onreadystatechange 状态改变的事件触发器，就是改变一次触发一次</span></span><br><span class="line"></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">aJson</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//readyState 是状态值，0 1 2 3 4 逐个推进状态，分别是 未初始化 读取中 已读取 交互中 完成</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(xhr.readState == <span class="number">4</span>)&#123;</span><br><span class="line">            </span><br><span class="line"><span class="comment">//status 服务器返回的状态码，200（成功）、404（文件未找到）、500（服务器内部错误）、304（资源未被修改）</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (xhr.status == <span class="number">200</span> &amp;&amp; xhr.status&lt;<span class="number">300</span>)<span class="comment">//200是HTTP 请求成功的状态码</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//请求成功处理数据</span></span><br><span class="line">                success &amp;&amp; success(xhr.responseText);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                alert(<span class="string">&quot;请求出错&quot;</span>+xhr.status);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ajax对象方法"><a href="#ajax对象方法" class="headerlink" title="ajax对象方法"></a>ajax对象方法</h3><table><thead><tr><th>Ajax 对象方法</th><th></th></tr></thead><tbody><tr><td>方法</td><td>描述</td></tr><tr><td><code>abort()</code></td><td>如果请求已被发出，则立刻中止请求。</td></tr><tr><td><code>getAllResponseHeaders()</code></td><td>把http请求的所有响应首部作为键/值对返回,以字符串的形式返回所有用<code>CRLF</code>分隔的响应头，如果没有收到响应，则返回<code>null</code></td></tr><tr><td><code>getResponseHeader(&#39;server&#39;)</code></td><td>返回值指定首部的串值,返回包含指定响应头的字符串，如果响应尚未收到或响应中不存在该报头，则返回<code>null</code></td></tr><tr><td><code>open(&#39;method&#39;,&#39;url&#39;,flag)</code></td><td>建立对服务器的调用，初始化一个请求。该方法只能在 <code>JavaScript</code>代码中使用，若要在<code>native code</code>中初始化请求，请使用 <code>openRequest()</code>; <code>method</code>参数可以是<code>GET</code>，<code>POST</code>或<code>PUI</code>。<code>url</code>参数可以是相对<code>URL</code>或绝对<code>URL</code>。<code>flag</code>参数是同步或者异步，<code>true</code>为异步（一般为这个），<code>false</code>为同步，这个方法还包括3个可选参数</td></tr><tr><td><code>overrideMimeType</code></td><td>覆写由服务器返回的<code>MIME</code>类型</td></tr><tr><td><code>send(content)</code></td><td>向服务器发送请求,发送请求。如果请求是异步的（默认），那么该方法将在请求发送后立即返回</td></tr><tr><td><code>setRequestHeader(&#39;label&#39;,&#39;value&#39;)</code></td><td>设置 <code>HTTP</code> 请求头的值。必须在 <code>open()</code> 之后、<code>send()</code> 之前调用 <code>setRequestHeader()</code> 方法，把指定首部设置为所提供的值。在设置任何首部之前必须先调用<code>open()</code>,传的参数一般为<code>Content-type&#39;,&#39;application/x-www-form-urlencoded</code></td></tr><tr><td><code>init</code></td><td>在C++代码中初始一个XHR对象</td></tr><tr><td><code>openRequest</code></td><td>初始化一个请求。这个方法只能在原生<code>C++</code>代码中使用；如果用<code>JavaScript</code> 代码来初始化请求，使用<code>open()</code>代替。可参考<code>open()</code>的文档</td></tr><tr><td><code>sendAsBinary</code></td><td><code>send()</code>方法的变体，用来发送二进制的数据</td></tr></tbody></table><h3 id="ajax属性方法"><a href="#ajax属性方法" class="headerlink" title="ajax属性方法"></a>ajax属性方法</h3><table><thead><tr><th>Ajax 属性方法</th><th></th></tr></thead><tbody><tr><td>属性</td><td>描述</td></tr><tr><td><code>onreadystatechange</code></td><td>状态改变的事件触发器，就是状态改变一次触发一次，当<code>readyState</code>发生变化时，调用的<code>EventHandler</code></td></tr><tr><td><code>readyState</code></td><td>返回一个无符号短整型数字，代表请求的状态码，对象状态<code>（integer）</code>，状态值 <code>0</code> = 未初始化，未调用<code>send()</code>方法，<code>1</code> = 读取中，已调用<code>send()</code>，正在发送请求，<code>2</code> = 已读取，<code>send()</code>方法执行完成，接收到全部响应内容，<code>3</code> = 交互中，正在解析相应内容，<code>4</code> = 完成，相应内容解析完成</td></tr><tr><td><code>responseText</code></td><td>获得字符串形式的响应数据，返回一个<code>DOMString</code>，该<code>DOMString</code>包含对请求的响应，如果请求未成功或尚未成功或尚未发送，则返回<code>null</code></td></tr><tr><td><code>responseXML</code></td><td>获得XML形式的响应数据，返回一个 <code>Document</code>，其中包含该请求的响应，如果请求未成功、尚未发送或时不能被解析为 <code>XML</code> 或 <code>HTML</code>，则返回 <code>null</code></td></tr><tr><td><code>responseType</code></td><td>一个用于定义响应类型的枚举值（<code>enumerated value</code>）</td></tr><tr><td><code>responseURL</code></td><td>返回经过序列化的响应<code>URL</code>，如果该<code>URL</code>为空，则返回空字符串</td></tr><tr><td><code>statusText&#39;</code></td><td>服务器返回的状态文本信息，返回一个<code>DOMString</code>，其中包含<code>HTTP</code>服务器返回的响应状态。与<code>XMLHTTPRequest.status</code>不同的是，它包含完整的响应状态文本（例如，<code>&quot;200 OK&quot;</code>）</td></tr><tr><td><code>response</code></td><td>返回一个<code>ArrayBuffer</code>、<code>Blob</code>、<code>Document</code>或<code>DomString</code>，具体是哪种类型取决于<code>XMLHttpRequest.responseType</code>的值。其中包括整个响应实体（<code>response entity body</code>）</td></tr><tr><td><code>status</code></td><td>返回一个无符号短整形数字，代表请求的响应状态，服务器返回的响应状态，如：404 = “文件未找到”，200 = “成功”，500 = “服务器内部错误”，304 = “资源未被修改”</td></tr><tr><td><code>timeout</code></td><td>一个无符号长整形数字，表示该请求的最大请求时间（毫秒），若超出该事件，请求会自动终止</td></tr><tr><td><code>ontimeout</code></td><td>当请求超市调用的<code>EventHandler</code></td></tr><tr><td><code>upload</code></td><td>代表上传进度</td></tr><tr><td><code>withCredentials</code></td><td>一个布尔值，用来指定跨域<code>Access-Control</code>请求是否应当带有授权信息，如<code>cookie</code>或授权<code>header</code>头</td></tr><tr><td><code>channel</code></td><td>一个<code>nsIChannel</code>，对象在执行请求时使用的通道 （非标准属性）</td></tr><tr><td><code>mozAnon</code></td><td>一个布尔值，如果为真，请求将在没有<code>cookie</code>和身份验证<code>header</code>头的情况下发送 （非标准属性）</td></tr><tr><td><code>mozSystem</code></td><td>一个布尔值，如果为真，则在请求时不会执行同源策略 （非标准属性）</td></tr><tr><td><code>mozBackgroundRequest</code></td><td>一个布尔值，它指示对象是否是后台服务器端的请求 （非标准属性）</td></tr></tbody></table><blockquote><p>Ajax受同源策略的限制</p></blockquote><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><blockquote><p>浏览器有一个很重要的概念——同源策略（Same-Origin Policy）。所谓同源策略是指：协议，域名，端口相同才可读取服务器资源，不同源的客户端脚本（javascript、ActionScript）在没明确授权的情况下，不能读写对方的资源</p></blockquote><p><code>简单的来说，浏览器不允许包含在腾讯页面的脚本访问阿里巴巴页面的数据资源，会受到同源策略的限制</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">举例: https:<span class="comment">//www.baidu.com</span></span><br><span class="line">协议：http:<span class="comment">//</span></span><br><span class="line">域名：www.baidu.com</span><br><span class="line">端口：<span class="number">443</span>（默认端口可以省略）</span><br></pre></td></tr></table></figure><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li><p>协议：<code>http</code> / <code> https</code></p><ul><li><p><code>http</code>不加密，而<code>https</code>是加密传输数据的；</p></li><li><p><code>http</code>链接简单无状态，<code>https</code>是有<code>ssl+http</code>协议构建的可进行加密传输；</p></li><li><p><code>http</code>协议使用的端口是80，<code>https</code>使用的端口是443；</p></li><li><p><code>http</code>是免费申请的，<code>https</code>是需要到<code>CA</code>申请证书的。</p></li><li><p><code>localStorage</code>和<code>sessionStorage</code>的区别</p></li><li><p>  答：前者长期存放在浏览器中的，写入<code>localStorage</code>（无论窗口是否关闭都需要储存）。后者是这次会话临时需要存储的变量，每次窗口关闭的时候，都会自动清空。</p></li><li><p><code>localStorage</code>和<code>cookie</code>的区别</p></li><li><p><code>localStorage</code>在发送请求时不会把数据发送出去，<code>cookie</code>会把所有数据带出去；</p><pre><code>   - `cookie`存储的数据比较少`4k`，`localStorage`可以存放较多的内容，`5M`左右。</code></pre></li></ul></li></ul><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><ul><li><code>.com</code> —— 顶级域名，顶级域名分为两类，一类按照国家分类，一类是按照国际分类，<code>DNS</code>先根据顶级域名判断网络范围在根据域名查找主机<code>ip</code>地址<ul><li>国家域名分类：<ul><li>中国：<code>.cn</code></li><li>日本：<code>.jp</code></li><li>美国：<code>.us</code></li><li>法国：<code>.fr</code></li><li>……</li><li>国际域名分类：<ul><li>工商、金融、商业机构：<code>.com</code>，<code>.top</code></li><li>科研技术：<code>.tech</code></li><li>教育机构：<code>.edu</code></li><li>政府部门：<code>.gob</code></li><li>从事互联网服务的机构：<code>.net</code></li><li>非盈利性组织：<code>.org</code></li><li>国内商业机构：<code>.com.cn</code></li><li>国内互联网机构：<code>.net.cn</code></li><li>国内非盈利性组织：<code>.org.cn</code></li><li>……</li></ul></li></ul></li></ul></li><li><code>baidu.com</code> —— （一）二级域名<ul><li>为什么<code>baidu.com</code>是二级域名呢，因为中国在国际互联网网络中心正式注册且运行的顶级域名是<code>.cn</code>，在顶级域名之下，中国又分出了几个二级域名：<code>.com</code>，<code>.top</code>，<code>.net</code>，<code>.org</code>，<code>.edu</code>,<code>.tech </code>，<code>.gov</code>，他们在中国其实是<code>.com.cn</code>，在后面加了一个<code>.cn</code>，所以<code>baidu.com</code>是二级域名，如果说有一些地方没有把国家顶级域名设置为一级域名的话，那么<code>.com</code>也可以作为一级域名，如果<code>baidu.com</code>不是一个中国的网站，它又没有一个注册好的一级域名，那<code>baidu.com</code>就是一级域名</li></ul></li><li><code>zhidao.baidu.com</code> —— （二）三级域名</li><li><code>www</code>：二级域名的前缀，表示万维网维护的<ul><li><code>www</code>扩展：最开始<code>Internet</code>提供的主要服务有万维网（<code>WWW</code>）、文件传输（<code>FTP</code>）、电子邮件（<code>E-mail</code>）、远程登录（<code>Telnet</code>）等。也就是说，那个时候的<code>www</code> <code>(World Wide Web)</code>是标识这是一个需要你用浏览器来访问的网页服务，而不是需要你用<code>telnet</code>访问的<code>bbs</code>，或者<code>ftp</code>工具访问的文件传输服务。所以那个时候网站主页的域名前面要用<code>www</code>，现在还带有<code>www</code>的主要是遵循用户的习惯，当然还有一些技术上的原因，如果<code>www.baidu.com</code>，如果不带<code>www</code>，它可以被叫做一个裸域名，裸域名只能绑定<code>DNS</code>的<code>A</code>记录，不能绑定<code>CNAME</code>记录<ul><li><code>A</code>记录：通俗的来说就是服务器的一个<code>IP</code>，域名绑定<code>A</code>记录就是告诉<code>DNS</code>，当你输入域名的时候，给你引导向设置的<code>DNS</code>中的<code>A</code>记录所对应的服务器，简单来说就是A记录是指域名对应的<code>IP</code>地址，<code>A</code>记录就相当于<code>www.baidu.com</code>对应的<code>IP</code>地址。</li><li><code>CNAME</code>记录：<ul><li>除了<code>www.baidu.com</code>会解析出来一个<code>IP</code>地址之外，<code>baidu.com</code>也会解析出来一个<code>IP</code>地址，正常情况下，我们通常认为<code>baidu.com</code>和<code>www.baidu.com</code>是一个页面，，我们输入<code>baidu.com</code>也可以访问到<code>www.baidu.com</code>这一个页面，那是因为它把<code>baidu.com</code>和<code>www.baidu.com</code>这一个网址绑定到一起了，就相当于给<code>www.baidu.com</code>起了一个别名叫<code>baidu.com</code>，也就是不管输入<code>www.baidu.com</code>还是<code>baidu.com</code>都可以找到<code>www.baidu.com</code>的那个<code>IP</code>地址。像<code>www.baiduc.com</code>这样前面带有<code>www</code>的网址可以绑定这样的别名，但是如果没有<code>www</code>的网址，也就是裸域名不可以绑定别名，裸域名只能对应自己那唯一的<code>IP</code>，现在很多公司网址的网址都带有<code>www</code>，就是因为它们还有一些别的网址要和这个网址绑定，和他一样要对应着同一个<code>IP</code>地址。</li><li>裸域名的<code>cookie</code>作用域范围大</li></ul></li></ul></li><li><code>baidu</code>有多个服务区为它服务。不同的子域名对应处理不同服务的服务器现在，把任务分配到多台服务器，不需要通过子域名来区分了。<code>http://google.com</code>一个地址背后有多台服务器支持运作。还采用<code>www</code>只是尊重用户习惯，方便用户看。国外其实已经不用写<code>www</code>。</li></ul></li><li><code>www.baidu.com</code>： 属于特殊的三级域名</li></ul><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><ul><li>端口：<code>https</code>在默认情况下的端口是443，<code>http</code>的默认端口是80，端口是可以更改的<ul><li>常用端口：21、22、23、25、69、79、80、88、110、113、119、220、44</li></ul></li><li>如果把<code>IP</code>地址比作一间房子，端口就是出入这间房子的门。真正的房子只有几个门，但是这个<code>IP</code>地址的端口可以有多个，浏览网页服务<code>http</code>默认端口是80，<code>https</code>是443，因此只需要输入网址即可，不用输入“:80/443”</li></ul><h2 id="当你在浏览器输入一个url发生了什么-Depth"><a href="#当你在浏览器输入一个url发生了什么-Depth" class="headerlink" title="当你在浏览器输入一个url发生了什么(Depth)"></a>当你在浏览器输入一个url发生了什么(Depth)</h2><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111650914.png"></p><h3 id="简单归纳"><a href="#简单归纳" class="headerlink" title="简单归纳"></a>简单归纳</h3><ol><li><p>浏览器通过<code>DNS</code>域名解析到服务器<code>IP</code>（ping <a href="http://www.baidu.com)/">www.baidu.com）</a></p></li><li><p>客户端（浏览器）通过<code>TCP</code>协议建立到服务器的<code>TCP</code>连接（三次握手）</p></li><li><p>客户端（浏览器）向web服务器端（<code>HTTP</code>服务器）发送<code>HTTP</code>协议包，请求服务器里的资源文档（<code>telnet</code>模拟）</p></li><li><p>服务器向客户端发送<code>HTTP</code>协议应答包</p></li><li><p>客户端和服务器断开（四次挥手），客户端开始解释处理<code>HTML</code>文档</p></li></ol><h3 id="TCP-UDP-传输层协议"><a href="#TCP-UDP-传输层协议" class="headerlink" title="TCP/UDP(传输层协议)"></a>TCP/UDP(传输层协议)</h3><p><strong>面向连接的TCP</strong></p><p>TCP（<code>Transmission Control Protocol</code>，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个<code>TCP</code>连接必须要经过三次“对话”才能建立起来，其中的过程非常复杂，我们这里制作简单、形象的介绍，你只要做到能够理解这个过程即可。</p><p><strong>面对非连接的UDP协议</strong></p><p>“面向非连接”就是在正式通信前不必与对方先建立连接，不管对方状态就直接发送。与手机短信非常相似：你再发短信的时候，只需要输入对方手机号就OK了。</p><p><code>UDP</code>（<code>User Data Protocol</code>，用户数据报协议）是与<code>TCP</code>相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！</p><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><ul><li><p>三次握手</p><ul><li>第一次握手：建立连接时，客户端<code>A</code>发送<code>SYN</code>包<code>（SYN=j）</code>到服务器<code>B</code>，并进入<code>SYN_SEND</code>状态，等待服务器<code>B</code>确认。</li><li>第二次握手：服务器<code>B</code>收到<code>SYN</code>包，必须确认客户<code>A</code>的<code>SYN（ACK=j+1）</code>，同时自己也发送一个<code>SYN</code>包<code>（SYN=k）</code>，即<code>SYN+ACK</code>包，此时服务器B进入<code>SYN_RECV</code>状态。</li><li>第三次握手：客户端<code>A</code>收到服务器<code>B</code>的<code>SYN＋ACK</code>包，向服务器<code>B</code>发送确认包<code>ACK（ACK=k+1）</code>，此包发送完毕，客户端<code>A</code>和服务器<code>B</code>进入<code>ESTABLISHED</code>状态，完成三次握手。</li><li>完成三次握手，客户端与服务器开始传送数据</li></ul><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111651121.png"></p></li></ul><ol><li><p>先<code>Client</code>端发送链接，链接建立成功之后，请求报文</p></li><li><p><code>Server</code>端接受连接后恢复<code>ACK</code>报文，并未这次连接分配资源。</p></li><li><p><code>Client</code>端接收到<code>ACK</code>报文后也向Server端发送<code>ACK</code>报文，并分配资源，这样<code>TCP</code>连接就建立了</p></li></ol><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><ol><li><p><code>Client</code>端发起中断连接请求，也就是发送<code>FIN</code>报文。<code>Server</code>端接到<code>FIN</code>报文后，意思是说“我<code>Client</code>端没有数据要发给你了”，但是如果你还有数据没有发送完成，则不要急着关闭（<code>Socket</code>），可以继续发送数据。</p></li><li><p><code>server</code>这时发送一个<code>ACK</code>的应答包，“告诉<code>Client</code>端，你的请求我收到了，但是我还没准备好，请继续等我的消息”。</p><p><code>wait</code>：这个时候<code>Client</code>端就进入<code>FIN_WAIT</code>状态，继续等待<code>Server</code>端的<code>FIN</code>报文。</p></li><li><p>当<code>Server</code>端确定数据已经发送完成，则向<code>Client</code>端发送FIN报文，“告诉<code>Client</code>端，好了，我这边数据发完了，准备好关闭连接了。”</p></li><li><p><code>Client</code>端收到<code>FIN</code>报文后，“就知道可以关闭链接了，但是他还是不相信网络，怕<code>Server</code>不知道要关闭，所以发送<code>ACK</code>后进入<code>TIME_WAIT</code>状态，如果<code>Server</code>端没有收到<code>ACK</code>则可以重传”。<code>Server</code>端收到<code>ACK</code>后，就知道可以断开连接了，<code>Client</code>端等待了<code>2MSL</code>后依然没有收到回复，则证明<code>Server</code>端已正常关闭，那好，我<code>Client</code>端也可以关闭链接了。<code>Ok</code>，<code>TCP</code>链接就这样关闭了。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111653099.png"></p><h2 id="http报文"><a href="#http报文" class="headerlink" title="http报文"></a>http报文</h2><blockquote><p>请求报文、响应报文（通过报文进行沟通）</p></blockquote><p><strong>前端和后台在相互访问数据的时候一定要以一个规范来进行书写，这样前后端都可以识别出来你的需求是什么</strong></p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><ul><li><strong>请求头</strong><ul><li><a href="http://tools.jb51.net/table/http_header">http://tools.jb51.net/table/http_header</a> (请求头)</li></ul></li><li><strong>请求行</strong><ul><li>请求方法<ul><li><code>GET</code>/<code>POST</code>/<code>DELETE</code>/<code>HEAD</code>/<code>TRACE</code>/<code>OPTION</code></li><li>`<a href="http://tools.jb51.net/table/http_request_method">http://tools.jb51.net/table/http_request_method</a> (请求方法)</li></ul></li><li>请求资源（<code>URL</code>）</li><li>请求版本（<code>HTTP/1.1</code>）<ul><li>1.1版本可以长链接，发送多个请求，得到多个响应</li><li>1.0版本只可以发送一个请求，得到一个响应，然后断开链接</li></ul></li></ul></li><li><strong>请求主体</strong><ul><li>表单提交数据如：<code>name=aimee&amp;age=18</code>;</li></ul></li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111652916.jpg"></li></ul><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><ul><li><strong>响应头</strong><ul><li><a href="http://tools.jb51.net/table/http_header">http://tools.jb51.net/table/http_header</a> (响应头)</li></ul></li><li><strong>响应行</strong><ul><li>响应版本号（HTTP/1.1）</li><li>响应状态码（200）<a href="http://tool.oschina.net/commons?type=5">http://tool.oschina.net/commons?type=5</a></li><li>响应状态文字 （OK）<a href="http://tools.jb51.net/table/http_status_code">http://tools.jb51.net/table/http_status_code</a></li><li><strong>每一个状态码都有一个对应的响应文字，就如200的响应文字是OK，404的状态响应文字是No Found</strong></li></ul></li><li><strong>响应主体</strong><ul><li><code>sign success</code> (注册成功)</li></ul></li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111653368.jpg" alt="response-message.jpg (1099×650)"></li></ul><h3 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h3><ul><li><p><strong>304定向缓存</strong></p></li><li><p>304 上次缓存的资源没有改变—-浏览器如何知道是否直接取缓存的内容？</p></li><li><p>理解部分：请求头、响应头</p><ul><li><p>请求头：</p><ul><li><code>if-None-Match</code>：匹配<code>etag</code>，如果服务器中<code>etag</code>的值修改了，不取缓存，重新获取服务器资源</li></ul></li><li><p><code>if-Modified-Since</code>：将先前服务器端发过来的最后修改时间戳发送回去x</p></li><li><p>响应头：</p><ul><li><code>etag</code>：标记资源位置</li></ul></li><li><p><code>last-Modified</code>：服务器最后修改的事件，和<code>etag</code>配合使用&gt;**</p></li><li><p><strong>当客户端第一次请求改资源时，etag和if-None-Match<del><em>的工作原理</em></del>是在HTTP Response中添加该资源的etag信息。当客户端再次请求该资源时，将HTTP Request中加入if-None-Match信息（etag的值）。如果服务器验证资源的etag没有改变（该资源没有改变），将返回一个304的状态，读取缓存，如果服务器中的etag值发生了改变，则服务器将返回200状态，并重新返回该资源和新的etag值</strong></p></li></ul></li><li><p><strong>Date</strong>：服务器相应内容的日期</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111654681.png" alt="Date.png (1148×606) (raw.githubusercontent.com)"></p></li><li><p><strong>Cache-Control</strong>：内容缓存时间</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111654896.png" alt="CacheControl.png (645×345) (raw.githubusercontent.com)"></p></li><li><p><strong>no-cache</strong>：不被缓存的，每次在向客户端（浏览器）提供响应数据时，缓存都要向服务器评估缓存相应的有效性，就是每次拿到<code>if-None-Match</code>都不缓存，没有有效时间</p></li><li><p><strong>no-store</strong>：用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。根据缓存超时（就是如果有重要的信息，不会被缓存）</p></li><li><p><strong>max-age</strong>：指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应，意思是在规定的时间之内再次发送请求，不会去服务器请求了，而是会直接去请求缓存。</p></li><li><p><strong>min-fresh</strong>：指导客户机可以接收响应时间小于当前时间加上指定时间的响应，它可以接收<code>max-age</code>和<code>max-stale</code>之和的一个缓存对象</p></li><li><p><strong>max-stale</strong>：指示客户机可以接收超时期间的响应消息。如果指定<code>max-stale</code>消息的值，那么客户机可以接收超出超时期指定值之内的响应消息</p></li><li><p><strong>Expires</strong>：内容保质期，表示存在时间， 允许客户端在这个事件之前不去检查（发请求），等同于max-age的效果。但是如果同时存在，则会被<code>cache-control</code>的<code>max-age</code>覆盖。</p></li><li><p><strong>referer</strong>：用来判断我们从哪个网站点击过来的</p><ul><li><p>网站点击量统计</p></li><li><p>如果从浏览器地址栏输入地址请求头没有<code>referer</code></p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2></li></ul></li></ul><h3 id="关于跨域的一些问题"><a href="#关于跨域的一些问题" class="headerlink" title="关于跨域的一些问题"></a>关于跨域的一些问题</h3><h4 id="那些东西属于资源？JS算资源吗？"><a href="#那些东西属于资源？JS算资源吗？" class="headerlink" title="那些东西属于资源？JS算资源吗？"></a>那些东西属于资源？JS算资源吗？</h4><ul><li><code>js</code>文件肯定是算资源的，但是<code>js</code>文件是允许被跨域请求的。</li><li><code>css</code>文件，<code>jpg</code>，<code>png</code>等。<code>src</code>属性的资源都是可以被跨域请求的。<code>href</code>资源大部分都是可以被跨域请求的</li></ul><h4 id="哪些资源算跨域的资源"><a href="#哪些资源算跨域的资源" class="headerlink" title="哪些资源算跨域的资源"></a>哪些资源算跨域的资源</h4><ul><li>后端接口的数据</li><li>其它域的<code>cookie</code></li><li>其它域的缓存</li><li>什么是其他的域呢？怎么才算跨域<ul><li>页面本身：协议，域名，端口，有任何一个不同就算跨域</li><li>要请求的数据：<a href="http://www.baidu.com/">http://www.baidu.com:80</a></li></ul></li></ul><h4 id="跨域这种行为发生在哪里"><a href="#跨域这种行为发生在哪里" class="headerlink" title="跨域这种行为发生在哪里"></a>跨域这种行为发生在哪里</h4><ul><li>即使跨域了（协议、域名、端口不一样），请求也可以发出去</li><li>服务器端也可以接收、处理、返回数据的</li><li>浏览器也可以接收到这些数据</li><li>接收到之后，发现当前页面的域和请求的域不同，所以判定跨域</li><li>我们的代码会在这里等着结果，但是因为浏览器判定跨域了，不会把结果传递给我们的代码</li></ul><h4 id="有哪些方式可以在Web网络中发出一个请求"><a href="#有哪些方式可以在Web网络中发出一个请求" class="headerlink" title="有哪些方式可以在Web网络中发出一个请求"></a>有哪些方式可以在Web网络中发出一个请求</h4><ul><li><p>直接在地址栏填写地址</p></li><li><p>通过代码发送网络请求</p><ul><li><code>location.href=&#39;url&#39;</code>，可以发送网络请求，但是页面会跳转</li><li>带有<code>src</code>属性的标签，可以发送请求，服务器是可以正常处理的也是可以返回的。但是在返回之后，能够被应用，还得看浏览器。</li><li>带有<code>href</code>属性的标签，请求是可以发出的，服务器是可以处理的也是可以返回的。但是返回后是否能被应用，还得看浏览器。</li><li>带有<code>action</code>属性的标签，</li><li>例如<code>form</code>表单，也是可以向后端发出请求的。但是<code>form</code>表单发出请求后页面会跳转。</li></ul></li></ul><h3 id="解决跨域的几种方法"><a href="#解决跨域的几种方法" class="headerlink" title="解决跨域的几种方法"></a>解决跨域的几种方法</h3><h4 id="Flash（不做讨论）"><a href="#Flash（不做讨论）" class="headerlink" title="Flash（不做讨论）"></a>Flash（不做讨论）</h4><h4 id="服务器代理中转"><a href="#服务器代理中转" class="headerlink" title="服务器代理中转"></a>服务器代理中转</h4><ul><li>借助自己同源的服务器向别人的服务器去取资源</li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111655912.png">)</li><li>当浏览器发送了一个<code>ajax</code>请求，这个<code>ajax</code>请求指向的是别人服务器的一个文件<code>xxx.php</code>，那么可以请求成功吗？不能。浏览器可以请求成功的前提是域名、端口和协议都相同，但别人的服务器和我的同源策略都不相同，所以无法请求文件。</li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111656105.png"></li><li>我们向别的服务器请求不成功是因为同源策略的限制，这时，我们可以向自己的服务器请求文件<code>yy.php</code>，在<code>yy.php</code>文件链接到其他的服务器，由<code>yy.php</code>向<code>xx.php</code>发送请求，请求数据，这时，因为<code>yy.php</code>和<code>xx.php</code>都是在服务器中进行的数据交换，不存在浏览器（同源策略只是浏览器的一个安全策略），所以不受同源策略的限制，这时，我们的<code>yy.php</code>就可以向<code>xx.php</code>请求数据了，<code>xx,php</code>把数据返回给<code>localhost</code>服务器下面的<code>yy.php</code>，然后<code>yy.php</code>再把<code>xx.php</code>给它的数据返回给浏览器。</li></ul><h4 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h4><p><strong>针对基础域名相同的情况</strong></p><p><code>bj58.com    document.domain = &#39;58.com&#39;</code><br><code>tj58.com    document.domain = &#39;58.com&#39;</code></p><ul><li><p>这两个都是58同城的网页，<code>bj</code>代表北京，<code>tj</code>代表天津，这时两个不同的页面，服务器也不相同，如果从<code>bj58.com</code>向<code>tj58.com</code>获取数据，会受到同源策略的限制吗？会的，域名不相同。</p></li><li><p>但是，这两个域名都有一个相同的基础域名<code>58.com</code>，它要怎么跨域呢？在他们当前域名的脚本下都写上一句<code>document.domain = &#39;58.com&#39;</code>，意思是，<code>document</code>设置一个基础域名叫<code>58.com</code>，这样就可以相互访问数据了。</p></li><li><p>但是这样有一个前提，他们的基础域名必须是一样的。</p></li></ul><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h4><ul><li><code>jsonp</code>和<code>json</code>不一样，<code>json</code>是一种数据格式，<code>jsonp</code>算是一个技术，小应用，我们使用<code>jsonp</code>可以实现网络中的跨域拿、取数据。</li><li><code>ajax</code>会受同源策略的限制</li><li><strong>JSONP格式：callback + ( + JSON + )</strong></li><li><strong>JSONP跨域只能使用get请求方法</strong></li></ul><h5 id="jsonp原理"><a href="#jsonp原理" class="headerlink" title="jsonp原理"></a>jsonp原理</h5><ul><li><p><code>Web</code>页面上用<code>&lt;script&gt;</code>引入<code>js</code>文件则不受是否跨域影响，也就是不受同源策略的限制，不仅如此，我们还发现凡是拥有<code>&quot;src&quot;</code>这个属性的标签都拥有跨域的能力，比如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>。</p></li><li><p>于是我们把数据放到服务器，并且数据为<code>json</code>形式（因为<code>js</code>可以轻松处理<code>json</code>数据）</p></li><li><p>因为我们无法监控通过<code>&lt;script&gt;</code>的<code>src</code>属性是否把数据获取完成，所以我们需要做一个处理。</p></li><li><p>实现定义好处理跨域获取数据的函数，如<code>function ddoJSON(data)&#123;&#125;</code></p></li><li><p>用<code>src</code>获取数据的时候添加一个参数<code>cb=&#39;doJSON&#39;</code>（服务器端会根据参数<code>cb</code>的值返回对应的内容）此内容为以<code>cb</code>对应的值<code>doJSON</code>为函数真实要传递的数据为函数的参数的一串字符，如<code>doJSON</code>（’数据’）</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">判断请求与当前页面的域，是否同源，如果同源则发送正常的ajax，就没有跨域的事情了。</span><br><span class="line">如果不同源，生成一个script标签</span><br><span class="line">生成一个随机的callback名字，还得创建一个名为这个的方法。</span><br><span class="line">设置script标签的src，设置为要请求的接口。</span><br><span class="line">将callback作为参数拼接在后面。</span><br><span class="line">---------------------以上是前端部分---------------------</span><br><span class="line">后端接收到请求后，开始准备要返回的数据</span><br><span class="line">后端拼接数据，将要返回的数据用callback的值和括号包裹起来</span><br><span class="line">例如：callback=aa，要返回的数据为&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>, <span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">就要拼接为：aa(&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>, <span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;);</span><br><span class="line">将内容返回。</span><br><span class="line">---------------------以上是后端部分---------------------</span><br><span class="line">浏览器接收到内容，会当做js代码来执行。</span><br><span class="line">从而执行名为aa的方法。这样我们就接收到了后端返回给我们的对象。</span><br><span class="line"></span><br><span class="line">简易:</span><br><span class="line"><span class="keyword">var</span> oScript = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    oScript.src = <span class="string">&#x27;?cb=aa&#x27;</span>;</span><br><span class="line"> <span class="built_in">document</span>.body.appendChild(oScript);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">index.js里面的内容: aa(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;yzl&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">困难:</span><br><span class="line"><span class="keyword">var</span> $ = &#123;</span><br><span class="line">    <span class="attr">ajax</span>: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> url = options.url;</span><br><span class="line">        <span class="keyword">var</span> type = options.type;</span><br><span class="line">        <span class="keyword">var</span> dataType = options.dataType;</span><br><span class="line">        <span class="comment">//判断是否同源（协议，域名，端口号）</span></span><br><span class="line">        <span class="comment">//获取目标url的域</span></span><br><span class="line">        <span class="keyword">var</span> targetProtocol = <span class="string">&quot;&quot;</span>;<span class="comment">//目标接口的协议</span></span><br><span class="line">        <span class="keyword">var</span> targetHost = <span class="string">&quot;&quot;</span>;<span class="comment">//目标接口的host，host是包涵域名和端口的</span></span><br><span class="line">        <span class="comment">//如果url不带http，那么访问的一定是相对路径，相对路径一定是同源的。</span></span><br><span class="line">        <span class="keyword">if</span> (url.indexOf(<span class="string">&quot;http://&quot;</span>) == <span class="number">0</span> || url.indexOf(<span class="string">&quot;https://&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> targetUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">            targetProtocol = targetUrl.protocol;</span><br><span class="line">            targetHost = targetUrl.host;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetProtocol = location.protocol;</span><br><span class="line">            targetHost = location.host;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首先判断是否为jsonp，因为不是jsonp不用做其他的判断，直接发送ajax</span></span><br><span class="line">        <span class="keyword">if</span> (dataType == <span class="string">&quot;jsonp&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">//要看是否同源</span></span><br><span class="line">            <span class="keyword">if</span> (location.protocol == targetProtocol &amp;&amp; location.host == targetHost) &#123;<span class="comment">//表示同源</span></span><br><span class="line">                <span class="comment">//此处省略。因为同源，jsonp会当做普通的ajax做请求</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//不同源，跨域</span></span><br><span class="line">                <span class="comment">//随机生成一个callback</span></span><br><span class="line">                <span class="keyword">var</span> callback = <span class="string">&quot;cb&quot;</span> + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">1000000</span>);</span><br><span class="line">                <span class="comment">//给window上添加一个方法</span></span><br><span class="line">                <span class="built_in">window</span>[callback] = options.success;</span><br><span class="line">                <span class="comment">//生成script标签。</span></span><br><span class="line">                <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (url.indexOf(<span class="string">&quot;?&quot;</span>) &gt; <span class="number">0</span>) &#123;<span class="comment">//表示已经有参数了</span></span><br><span class="line">                    script.src = url + <span class="string">&quot;&amp;callback=&quot;</span> + callback;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//表示没有参数</span></span><br><span class="line">                    script.src = url + <span class="string">&quot;?callback=&quot;</span> + callback;</span><br><span class="line">                &#125;</span><br><span class="line">                script.id = callback;</span><br><span class="line">                <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line">             &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//http://developer.duyiedu.com/edu/testJsonp?callback</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://developer.duyiedu.com/edu/testJsonp&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>封装<strong>jsonp</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装jsonp</span></span><br><span class="line"><span class="comment">// jsonp请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//创建script标签并加入到页面中</span></span><br><span class="line">    <span class="keyword">var</span> callbackName = params.jsonp;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 设置传递给后台的回调参数名</span></span><br><span class="line">    params.data[<span class="string">&#x27;callback&#x27;</span>] = callbackName;</span><br><span class="line">    <span class="keyword">var</span> data = formatParams(params.data);</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    head.appendChild(script);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建jsonp回调函数</span></span><br><span class="line">    <span class="built_in">window</span>[callbackName] = <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">        head.removeChild(script);</span><br><span class="line">        <span class="built_in">clearTimeout</span>(script.timer);</span><br><span class="line">        <span class="built_in">window</span>[callbackName] = <span class="literal">null</span>;</span><br><span class="line">        params.success &amp;&amp; params.success(json);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    script.src = params.url + <span class="string">&#x27;?&#x27;</span> + data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//超时处理</span></span><br><span class="line">    <span class="keyword">if</span>(params.time) &#123;</span><br><span class="line">        script.timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">window</span>[callbackName] = <span class="literal">null</span>;</span><br><span class="line">            head.removeChild(script);</span><br><span class="line">            params.error &amp;&amp; params.error(&#123;</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;超时&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, time);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//格式化参数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">formatParams</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> data) &#123;</span><br><span class="line">            arr.push(<span class="built_in">encodeURIComponent</span>(name) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[name]));</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 添加一个随机数，防止缓存</span></span><br><span class="line">        arr.push(<span class="string">&#x27;v=&#x27;</span> + random());</span><br><span class="line">        <span class="keyword">return</span> arr.join(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取随机数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10000</span> + <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>使用<code>jsonp</code></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jsonp(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://music.qq.com/musicbox/shop/v3/data/hit/hit_all.js&#x27;</span>,</span><br><span class="line">    <span class="attr">jsonp</span>: <span class="string">&#x27;jsonpCallback&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;<span class="string">&#x27;callback&#x27;</span>: <span class="string">&#x27;jsonpCallback&#x27;</span>&#125;,</span><br><span class="line">    <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        JsonCallback(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><blockquote><p>Cookie是由服务器端生成，发送给User-Agent（一般是浏览器），（服务器告诉浏览器设置一下cookie），浏览器会把Cookie以key/value保存到某个目录下的文本文件内，下次请求同一网站时就发送该Cookie给服务器（前提是浏览器设置为启用cookie）。</p></blockquote><ul><li><code>Cookie</code>就是一个小型文件（浏览器对cookie的内存大小是有限制的——–用来记录一些信息）</li></ul><h3 id="跟踪记录用户的方式"><a href="#跟踪记录用户的方式" class="headerlink" title="跟踪记录用户的方式"></a>跟踪记录用户的方式</h3><ol><li><p>标记了用户身份<code>http</code>请求首部</p><ol><li><strong>form</strong>：<code>e-mail</code>（发送<code>e-mail</code>）<ol><li>不安全，可以根据<code>e-mail</code>发送垃圾邮件</li></ol></li><li><strong>user-agen</strong>：浏览器本身的一些信息<ol><li>只能看浏览器的一些信息，不完全</li></ol></li><li><strong>referer</strong>：跳转链接（上一次的访问内容）<ol><li>可以知道用户的习惯，但是也不完全</li></ol></li></ol></li><li><p><strong>IP</strong>地址（根据客户端的IP地址进行识别）</p><ol><li><code>ip</code>地址只能标记机器，不能标记用户</li><li><code>ip</code>地址不稳定，动态<code>ip</code>，容易伪造</li></ol></li><li><p>用户登录</p></li><li><p>胖<strong>URL</strong></p><ul><li><em>在原来的<code>url</code>中添加了一个特定字段（特殊标记）</em>*</li></ul><ol><li>字段过长</li><li>会对服务器产生额外的负载</li><li>无法共享</li><li>存在的生命周期过短（关闭窗口后就会消失，重新进入后会重新生成一段特定字段）</li></ol></li><li><p><strong>cookie</strong></p><ol><li>服务器在浏览器设置的一些信息，设置在本地文件中。</li><li>使用时自动发送给浏览器，接收时自动存储</li></ol></li></ol><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><h4 id="Cookie的分类："><a href="#Cookie的分类：" class="headerlink" title="Cookie的分类："></a>Cookie的分类：</h4><ul><li><p>会话<code>Cookie</code>（临时<code>Cookie</code>，在当前窗口中才有用）</p></li><li><p>永久<code>Cookie</code>（有保质期）</p><h4 id="Cookie使用的过程："><a href="#Cookie使用的过程：" class="headerlink" title="Cookie使用的过程："></a>Cookie使用的过程：</h4><ul><li>初始状态：没有登录</li><li>访问对方网站，输入用户名及密码</li><li>对方服务器响应后会在这个域名下设置一个<code>set-cookie</code>的值，<code>set-cookie</code>就是对方服务器对于你的id标识，会在这个<code>set-cookie</code>值中存储你的数据信息</li><li>响应成功后会在响应头中添加<code>set-cookie</code>值随着响应报文返回给你的浏览器，浏览器会把<code>set-cookie</code>的值存在本地cookie文件中。</li><li>当你再一次向对方网站发送请求，浏览器会自动在请求头中添加上<code>set-cookie</code>值，发送给对方服务器。</li><li>对方服务器会尝试获取<code>set-cookie</code>值，如果有，就说明这个用户以前登陆过，找到对应的<code>set-cookie</code>值对应的数据信息返回给你的浏览器。</li></ul></li><li><p><strong>Cookie</strong>内存大小受限制</p><ul><li><p><code>Cookie</code>有个数和大小的限制，大小一般是<code>4K</code></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111657089.png"></p><h4 id="Cookie的特点"><a href="#Cookie的特点" class="headerlink" title="Cookie的特点"></a>Cookie的特点</h4></li><li><p>满足同源策略</p><ul><li><p>虽然网站<code>images.google.com</code>与网站<code>www.google.com</code>同属于Google，但是域名不一样，二者同样不能互相操作彼此的Cookie。</p><p>问题来了 举个例子：</p><p>访问完<code>zhidao.baidu.com</code>再访问<code>wenku.baidu.com</code>还需要重新登陆百度账号吗？</p></li></ul></li><li><p>解决方法：</p><ul><li>设置<code>cookie</code>的<code>document.domain</code>，<code>document.domain=&#39;baidu.com&#39;</code></li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111657129.png"></li><li>当页面都属于<code>baidu.com</code>这个基础域名之下的话，那么只要是<code>baidu.com</code>这个基础域名之下的域名都可以相互<code>cookie</code>。</li></ul></li></ul><p><strong>Cookie在本地可以被更改文件，敏感的数据不要放在cookie。</strong></p></li></ul><h4 id="Cookie的增删改查"><a href="#Cookie的增删改查" class="headerlink" title="Cookie的增删改查"></a>Cookie的增删改查</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cookie的使用</span><br><span class="line">cookie常用的属性值：</span><br><span class="line">    name：cookie的名字</span><br><span class="line">        value：cookie的值</span><br><span class="line">        domain：cookie的域名</span><br><span class="line">        path：cookie的路径</span><br><span class="line">        Expires/max-age：cookie的保质期时间（Session就代表是临时cookie）</span><br><span class="line">Size：cookie的字符长度（一般不会设置）</span><br><span class="line">    </span><br><span class="line">通过<span class="built_in">document</span>.cookie 设置cookie</span><br><span class="line">    格式：<span class="string">&quot;属性=值;&quot;</span></span><br><span class="line">例如：</span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">&#x27;age=18;max-age=1000;path=/&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;name=amiee;expires=&#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>() + <span class="number">1</span> + <span class="string">&quot;;path=/&quot;</span>;</span><br><span class="line">   </span><br><span class="line"><span class="built_in">document</span>可以设置cookie，其中</span><br><span class="line">    <span class="string">&quot;age=18;&quot;</span> 是name=value</span><br><span class="line"><span class="string">&quot;max-age=1000;&quot;</span> 是这个Cookie的保质期时长是<span class="number">1000</span>秒，不设置就是Session</span><br><span class="line">    <span class="string">&quot;path=&#x27;/&#x27;&quot;</span> 是cookie的路径，不设置就是cookie原来的路径</span><br><span class="line">    </span><br><span class="line">    删除cookie就只需要把max-age或者expires的时间给改成负数就好了</span><br><span class="line">如：<span class="string">&quot;max-age=-1;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>虽然我们可以读取和更改cookie，但是一直用document.cookie来更改会很麻烦。所以封装一个增删改查的函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Cookie的增删改查封装函数</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> manageCookie = &#123;</span><br><span class="line">    <span class="comment">// 创建Cookie，name为名字，value是内容，time是时间，path是路径</span></span><br><span class="line">    <span class="attr">setCookie</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name,value,time,path</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.cookie = name + <span class="string">&#x27;=&#x27;</span> + value + <span class="string">&quot;;max-age=&quot;</span> + time +<span class="string">&quot;;path=&quot;</span> + path;</span><br><span class="line">    <span class="comment">// 返回this让它可以链式调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 删除cookie，name就是要删除的cookie的name</span></span><br><span class="line">    <span class="attr">removeCookie</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 返回this让它可以链式调用</span></span><br><span class="line">        <span class="comment">// 借用setCookie函数直接删除</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.setCookie(name,<span class="string">&#x27;&#x27;</span>,-<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 查找cookie，name是名字,callback是回调函数（处理最后返回来的数据）</span></span><br><span class="line">    <span class="attr">getCookie</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(allCookieArr); </span></span><br><span class="line">        <span class="comment">// 把cookie字符串按照 ;+空格 拆分</span></span><br><span class="line">        <span class="keyword">var</span> allCookieArr = <span class="built_in">document</span>.cookie.split(<span class="string">&#x27;; &#x27;</span>);</span><br><span class="line">        <span class="comment">// 循环遍历数组allCookieArr</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; allCookieArr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// console.log(itemCookieArr); 把已经变成数组的cookie字符串按照 =（等于号）拆分成一个一个的数组</span></span><br><span class="line">            <span class="keyword">var</span> itemCookieArr = allCookieArr[i].split(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">            <span class="comment">// 如果itemCookieArr的第0位等于我输入的name值</span></span><br><span class="line">            <span class="keyword">if</span>(itemCookieArr[<span class="number">0</span>] == name) &#123;</span><br><span class="line">                callback(itemCookieArr[<span class="number">1</span>]);</span><br><span class="line">                <span class="comment">// 如果找到了就返回this</span></span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果找不到cookie的name值，就返回一个undefined</span></span><br><span class="line">        callback(<span class="literal">undefined</span>);</span><br><span class="line">        <span class="comment">// 返回一个this让它可以链式调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用</span></span><br><span class="line">manageCookie.setCookie(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="number">1000</span>)</span><br><span class="line">            .setCookie(<span class="string">&#x27;teater&#x27;</span>,<span class="string">&#x27;aimee&#x27;</span>,<span class="number">2000</span>)</span><br><span class="line">            .removeCookie(<span class="string">&#x27;teater&#x27;</span>)</span><br><span class="line">            .getCookie(<span class="string">&#x27;color&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><ul><li><p><code>iframe</code>就是一个标签<code>dom</code>元素</p></li><li><p>可以在一个网页里嵌入另一个网页</p><ul><li>可以做导航栏tab切换页（古老的做法）、在线编辑器、广告植入</li></ul></li><li><p>历史记录管理，解决<code>ajax</code>化网站响应浏览器前进后退按钮的方法</p></li><li><p>跨域通信等</p></li></ul><h3 id="iframe利弊"><a href="#iframe利弊" class="headerlink" title="iframe利弊"></a>iframe利弊</h3><ul><li><strong>iframe</strong>阻塞页面加载</li><li>触发<code>window.onload</code>事件是非常重要的。<code>onload</code>事件触发使浏览器的”忙”指示器停止，告诉用户已经加载完毕。当<code>onload</code>事件加载延迟后，它给用户的感觉就是这个网页非常慢</li><li><code>window.onload</code>事件需要在所有的<code>iframe</code>标签加载完毕后（包含里面的元素）才会触发。通过<code>JavaScript</code>动态设置<code>iframe</code>的<code>src</code>属性可以避免这种阻塞情况</li><li>解决跨域问题（已经不怎么用了）</li></ul><h3 id="浏览器对于iframe的方法"><a href="#浏览器对于iframe的方法" class="headerlink" title="浏览器对于iframe的方法"></a>浏览器对于iframe的方法</h3><ul><li><p>获取<code>iframe</code>的<code>window</code>窗口：</p><ul><li><strong>W3C</strong>专用<ul><li><code>dom.contentWindow</code></li><li><code>contentWindow</code>就是来获取<code>iframe</code>的<code>window</code>对象的，只要选中<code>DOM</code>，用<code>DOM</code>来操作<code>contentWindow</code>。</li><li>简易写法：<code>window.iframe[iframe</code>标签的<code>name</code>属性]</li></ul></li><li><strong>IE</strong>专用<ul><li><code>document.iframe[iframe</code>标签的<code>name</code>属性]<code>.contentWindow</code></li><li><code>document.iframe[第i个iframe</code>标签<code>].contentWindow</code></li></ul></li></ul></li><li><p><strong>ifrmae</strong>父子页面窗口的关系</p><ul><li><code>window.self</code>——<code>window</code>自己</li><li><code>window.parent</code>——<code>iframe</code>父级窗口对象</li><li><code>window.top</code>——顶级窗口对象</li></ul></li><li><p>判断<strong>iframe</strong>是否加载完成</p><ul><li><p>非<code>ie</code>下使用<code>onload</code>事件</p><ul><li><code>iframe(dom元素).onload = function() &#123;&#125;</code></li></ul></li><li><p>IE下使用<code>onreadystatechange</code>事件</p><ul><li>```js<br>dom.onreadystatechange = function() {<pre><code>if(iframe.readyState == &#39;complete&#39; || iframe.readyState == &#39;loaded&#39;) &#123;    alert(&quot;Local iframe is now loaded&quot;);&#125;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `**iframe**跨域</span><br><span class="line"></span><br><span class="line">  - 可以使用哈希值跨域</span><br><span class="line"></span><br><span class="line">      - 解决子页面访问父页面数据问题</span><br><span class="line"></span><br><span class="line">      - **window.location.hash**</span><br><span class="line">  </span><br><span class="line">      - ```html</span><br><span class="line">          &lt;iframe src=&amp;quot;https:.../.../.../B.html#1&gt; // #1就是哈希值</span><br><span class="line">          </span><br><span class="line">          // 主页面</span><br><span class="line">          &lt;script&gt;</span><br><span class="line">          var oIframe = document.getElementsByTagName(&amp;#39;iframe&amp;#39;)[0];</span><br><span class="line">          var oldAge = 55;</span><br><span class="line">          </span><br><span class="line">          var oSrc = oIframe.src; // 单独获取出来方便更改哈希值</span><br><span class="line">          document.onclick = function() &#123;</span><br><span class="line">                  oIframe.src = oSrc + &amp;#39;#&amp;#39; + oldAge;</span><br><span class="line">                  oldAge++;</span><br><span class="line">              &#125;</span><br><span class="line">          &lt;/script&gt;</span><br><span class="line">          </span><br><span class="line">          // iframe子页面 B.html</span><br><span class="line">          &lt;script&gt;</span><br><span class="line">              var age = 20;</span><br><span class="line">          var lastHash = window.location.hash; // location.hash 可以取window下面的hash值</span><br><span class="line">          setInterval(function() &#123;</span><br><span class="line">                  if(lastHash != window.location.hash) &#123;</span><br><span class="line">                      console.log(location.hash.splice(1)) // 打印出来的值会有#号，用splice截取掉</span><br><span class="line">                      lastHash = window.location.hash;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;,10)</span><br><span class="line">          // 使用计时器来10毫秒捕获一次页面的哈希值，非常的耗费性能，所以现在基本上不用了</span><br><span class="line">        &lt;/script&gt;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>window.name</strong></p><ul><li><p>可以解决父页面访问子页面数据的问题</p></li><li><p>页面重载、刷新在本窗口<code>window.name</code>值不变，即使换了一个页面</p></li><li><p>用一个代理文件，和应用页面在同一个域中</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;iframe src=<span class="string">&quot;https:.../.../.../B.html#1&quot;</span>&gt; <span class="comment">// #1就是哈希值</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 主页面</span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">var</span> oIframe = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;iframe&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 给一个锁，不然会死循环</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> oIframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="keyword">if</span>(flag)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             <span class="comment">// 因为window.name的特性，所以iframe访问的页面完成后换成同一个域下的数据文件，这样符合同源策略，而且window.name还是不变的</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">             oIframe.src = <span class="string">&#x27;./C.html&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             flag = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             <span class="comment">// 等自己域下的数据文件代替了iframe的src后，获取自己数据文件的window.name属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="built_in">console</span>.log(oIframe.contentWindow.name);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// iframe子页面 B.html</span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> age = <span class="number">20</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">window</span>.name = age;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="防抖-amp-节流"><a href="#防抖-amp-节流" class="headerlink" title="防抖&amp;节流"></a>防抖&amp;节流</h2><blockquote><p>在前端开发中有一部分的用户行为会频繁的触发事件执行，而对于DOM操作、资源加载等耗费性能的处理，很可能导致界面卡顿，甚至浏览器的崩溃。函数节流（throttle）和函数防抖（debounce）就是为了解决类似需求应运而生的。</p></blockquote><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><ul><li><p>函数防抖就是在函数需要频繁出发情况时，只有足够空闲的时间，才执行一次。好像电梯会等人，当电梯等了几秒要关门时上来一个人，电梯会在等几秒，直到几秒后没人了在运行</p></li><li><p>场景</p><ul><li>实时搜索（<strong>keyup</strong>）<ul><li>等到指定时间，搜索区域没有动静了，再触发请求</li></ul></li><li>窗口调整（<strong>resize</strong>）<ul><li>等到指定时间，浏览器窗口不再移动或着改变大小了，再触发事件</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// func是回调函数，time是你想要多长时间响应一次时间，flag是你想要先触发后等待(true)，还是先等待后触发（false）;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func,time,falg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> debouced = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 把this定义为一个变量，方便dom元素访问</span></span><br><span class="line">        <span class="keyword">var</span> _this = <span class="built_in">this</span>,</span><br><span class="line">            <span class="comment">// 把所有形参当作参数</span></span><br><span class="line">            argu = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        <span class="comment">// 如果flag为true，那么先执行函数，后等待时间</span></span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            <span class="comment">// 当timer没有值的时候执行函数</span></span><br><span class="line">            <span class="keyword">if</span>(!timer) func.apply(_this,argu);</span><br><span class="line">            <span class="comment">// 当函数先执行了之后，立马给timer赋值，把timer清空，等time秒之后可以再次执行</span></span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;,time)</span><br><span class="line">        <span class="comment">// 如果flag是false，那么就还是等time秒触发</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 调换this指向和把所有形参传入回调函数</span></span><br><span class="line">                func.apply(_this,argu);</span><br><span class="line"><span class="comment">// time响应时间</span></span><br><span class="line">            &#125;,time)</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当如果调用这个方法的时候，立即停止计时器</span></span><br><span class="line">    debounced.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把计时器return出去了，这样每次执行的时候只有一个timer，闭包</span></span><br><span class="line">    <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><ul><li><p>函数节流就是预定一个函数只有在大于等于执行周期时才执行，周期内调用不执行。好像水滴攒到了一定重量才会落下一样。</p></li><li><p>场景：</p><ul><li>页面滚动（<strong>scroll</strong>）</li><li>抢购（<strong>mousedown</strong>）</li><li>拖拽（<strong>mousemove</strong>）</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 时间戳实现节流函数</span></span><br><span class="line"><span class="comment">// func是回调函数，wait是你想要多长时间响应一次时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func,wait</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 上一次事件响应的时间</span></span><br><span class="line">        <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 现在事件响应的时间,+new Date() 就相当于 new Date().getTime()</span></span><br><span class="line">            <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            <span class="keyword">if</span>(nowTime - lastTime &gt; wait) &#123;</span><br><span class="line">                <span class="comment">// 调换this指向和把所有形参传入参数</span></span><br><span class="line">                func.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">                <span class="comment">// 把这一次的时间赋给lastTime</span></span><br><span class="line">                lastTime = nowTime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计时器实现节流函数</span></span><br><span class="line"><span class="comment">// func是回调函数，wait是你想要多长时间响应一次时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func,wait</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 把计时器return出去了，这样每次执行的时候只有一个timer，闭包</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> _this = <span class="built_in">this</span>,</span><br><span class="line">                argu = <span class="built_in">arguments</span>;</span><br><span class="line">            <span class="comment">// 如果计时器没有值，是空的时候，才可以给他绑定计时器，如果有值就不会再绑定计时器</span></span><br><span class="line">           <span class="keyword">if</span>(!timer) &#123;</span><br><span class="line">                timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// 调换this指向和把所有形参传入参数</span></span><br><span class="line">                    func.apply(_this,argu);</span><br><span class="line">                    <span class="comment">// 调用完了之后再把计时器清空</span></span><br><span class="line">                    timer = <span class="literal">null</span>;</span><br><span class="line">                &#125;,wait)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;网络&quot;&gt;&lt;a href=&quot;#网络&quot; class=&quot;headerlink&quot; title=&quot;网络&quot;&gt;&lt;/a&gt;网络&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;冯诺依曼式计算机–冯诺依曼（计算机之父）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运算器：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU，GPU（显卡）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;存储器：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存（断电数据清空，读写速度快）&lt;/li&gt;
&lt;li&gt;硬盘（辅存）：（数据可以持久化，读写速度，相对较慢）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;控制器：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主板上的一些器件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;输入设备：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键盘，鼠标，麦克风，网口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;输出设备：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示器，耳机，网口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;IP地址&quot;&gt;&lt;a href=&quot;#IP地址&quot; class=&quot;headerlink&quot; title=&quot;IP地址&quot;&gt;&lt;/a&gt;IP地址&lt;/h2&gt;&lt;h3 id=&quot;IP自动地址的格式：&quot;&gt;&lt;a href=&quot;#IP自动地址的格式：&quot; class=&quot;headerlink&quot; title=&quot;IP自动地址的格式：&quot;&gt;&lt;/a&gt;IP自动地址的格式：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IP&lt;/code&gt;地址分为四个段：&lt;code&gt;xxx.xxx.xxx.xxx&lt;/code&gt;，每个段0~255，每个段都是由8个0、1组成的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;IP地址的分类：&quot;&gt;&lt;a href=&quot;#IP地址的分类：&quot; class=&quot;headerlink&quot; title=&quot;IP地址的分类：&quot;&gt;&lt;/a&gt;IP地址的分类：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个IP地址分为两个部分：网络&lt;code&gt;ID&lt;/code&gt;，主机&lt;code&gt;ID&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;A类：0.0.0.0 ~ 127.255.255.255（一个网络能有1600+万台）&lt;/li&gt;
&lt;li&gt;B类：128.0.0.0 ~ 191.255.255.255（有的用户网络也可以是：172.16.0.0 ~ 172.31.255.255）&lt;/li&gt;
&lt;li&gt;C类：192.0.0.0 ~ 223.255.255.255（C类为家用网络：192.168.xxx.xxx）&lt;/li&gt;
&lt;li&gt;D类：（多播地址）&lt;/li&gt;
&lt;li&gt;E类：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="网络" scheme="https://github.com/haodex/haodex.github.io.git/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="https://github.com/haodex/haodex.github.io.git/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/11/08/webpack/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/11/08/webpack/</id>
    <published>2021-11-08T07:35:53.000Z</published>
    <updated>2021-11-11T09:58:39.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="模块化简介"><a href="#模块化简介" class="headerlink" title="模块化简介"></a>模块化简介</h4><ul><li>具有相同属性和行为的事物的集合。在前端中，将一些属性比较类似和行为比较类似的内容放在同一个<code>js</code>文件里面，把这个<code>js</code>文件称为模块，为了每个<code>js</code>文件只关注与自身有关的事情，让每个<code>js</code>文件各行其职。</li><li>模块要有几个特点： 独立、完整、依赖关系</li><li>在最开始的阶段，<code>Js</code>并没有这些模块机制，各种<code>Js</code>到处飞，也就是你们现在的野生代码，得不到有效妥善的管理。后来前端圈开始制定规范，最耳熟能详的是<code>CommonJs</code>和<code>AMD</code>。</li></ul><span id="more"></span><h4 id="模块化的代码实现"><a href="#模块化的代码实现" class="headerlink" title="模块化的代码实现"></a>模块化的代码实现</h4><ul><li><p>函数</p><ul><li>```javascript<br>//1.函数，缺点：大型功能无法实现<br>//功能1<br>function add(a,b) {<pre><code>return a + b;</code></pre>}<br>//功能2<br>function a(a) {<pre><code>console.log(a);</code></pre>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 对象写法</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    //2.对象写法，缺点：外面可访问并改变ppt对象中变量</span><br><span class="line">    var ppt = &#123;</span><br><span class="line">        len:3,</span><br><span class="line">        init:function() &#123;</span><br><span class="line">    </span><br><span class="line">        &#125;,</span><br><span class="line">        crateDom: function()&#123; </span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>匿名函数、返回对象</p><ul><li>```javascript<br>//匿名函数，返回对象<br>var obj = (function(){ <pre><code>var len = 3;function add(a,b) &#123;    return a + b;&#125;return &#123;    add:add&#125;</code></pre>}())<br>console.log(obj.add(1,2));<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 依赖传入实参</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    var module1 = (function(m) &#123;</span><br><span class="line">        md.add = function(a,b) &#123;</span><br><span class="line">            return a + b;</span><br><span class="line">        &#125;,</span><br><span class="line">            return m;</span><br><span class="line">    &#125;)(window.module || &#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>以上缺点依赖关系不好处理，需要按顺序加载，会阻塞页面</p></li></ul><h4 id="CommonJs"><a href="#CommonJs" class="headerlink" title="CommonJs"></a>CommonJs</h4><ul><li><p>根<code>CommonJs</code>规范，每一个文件就是一个模块，其内部定义的变量是属于这个模块的，不会对外暴露，也就是说不会污染全局变量。</p></li><li><p>该规范最初是用在服务器端的node的，前端的<code>webpack</code>也是对<code>CommonJS</code>原生支持的。</p></li><li><p><code>CommonJS</code>的核心思想就是通过 require 方法来同步加载所要依赖的其他模块，然后通过 exports 或者 <code>module.exports</code> 来导出需要暴露的接口</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111729006.png"></p></li><li><p>浏览器不兼容<code>CommonJs</code>，原因是浏览器缺少<code>module</code>、<code>exports</code>、<code>require</code>、<code>global</code>四个环境变量。如要使用需要工具转换</p></li><li><p><code>CommonJS</code>采用同步加载不同模块文件，适用于服务器端的。因为模块文件都存放在服务器的各个硬盘上，读取加载时间快，适合服务器端，不适应浏览器。</p></li></ul><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><ul><li><p><code>CommonJs</code>为服务器端而生，采用的同步加载方式。因此不适用浏览器。因为浏览器需要到服务器加载文件，请求时间远大于本机读取的时间，倘若文件较多，网络迟缓就会导致页面瘫痪，所以浏览器更希望能够时间异步加载的方式。</p></li><li><p><code>AMD</code>规范则是异步加载模块，允许指定回调函数。等模块异步加载完成后即可调用回调函数。<code>AMD</code>得意的产出就是<code>require.js</code></p></li><li><p>AMD的核心思想就是通过<code>define</code>来定义一个模块，然后使用require来加载一个模块。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111730270.png"></p></li><li><p>使用<code>require.js</code>，提前加载所有依赖，方可使用</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111730026.png"></p></li></ul><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><ul><li><code>CMD</code>异步加载，跟<code>AMD</code>的主要区别在于，<code>AMD</code>依赖前置，提前加载依赖。而<code>CMD</code>就近加载，按需加载。</li><li>产物<code>seaJs</code>，跟<code>requireJs</code>使用有些相似。</li><li><code>CMD</code>的核心思想就是通过<code>define</code>来定义一个模块，然后使用<code>require</code>来加载一个模块。</li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111730812.png"></li></ul><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><ul><li><code>ES6</code>自带模块化，可以使用 <code>import</code> 关键字引入模块，通过 <code>export</code> 关键字导出模块，功能较之于前几个方案更为强大，也是我们所推崇的，但是由于<code>ES6</code>目前无法在浏览器中执行，所以，我们只能通过<code>babel</code>将不被支持的<code>import</code>编译为当前受到广泛支持的 <code>require</code>。</li><li>使用 <code>import</code> 关键字引入模块，通过 <code>export</code> 关键字导出模块</li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111730242.png"></li></ul><h4 id="模块化详细介绍"><a href="#模块化详细介绍" class="headerlink" title="模块化详细介绍"></a>模块化详细介绍</h4><p>本门课需要的前置知识：<code>ES6</code>、模块化、包管理器、<code>git</code></p><p>本门课的讲解特点：</p><ol><li>合适的深度：<code>webpack</code>使用层面很简单，但原理层面非常复杂</li><li>合适的广度：<code>webpack</code>生态圈极其繁荣，有海量的第三方库可以融入到<code>webpack</code></li></ol><h5 id="浏览器端的模块化"><a href="#浏览器端的模块化" class="headerlink" title="浏览器端的模块化"></a>浏览器端的模块化</h5><p>问题：</p><ul><li>效率问题：精细的模块划分带来了更多的<code>JS</code>文件，更多的<code>JS</code>文件带来了更多的请求，降低了页面访问效率</li><li>兼容性问题：浏览器目前仅支持<code>ES6</code>的模块化标准，并且还存在兼容性问题</li><li>工具问题：浏览器不支持<code>npm</code>下载的第三方包</li></ul><p>这些仅仅是前端工程化的一个缩影</p><p>当开发一个具有规模的程序，你将遇到非常多的非业务问题，这些问题包括：执行效率、兼容性、代码的可维护性可扩展性、团队协作、测试等等等等，我们将这些问题称之为工程问题。工程问题与业务无关，但它深刻的影响到开发进度，如果没有一个好的工具解决这些问题，将使得开发进度变得极其缓慢，同时也让开发者陷入技术的泥潭。</p><h5 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h5><p>思考：上面提到的问题，为什么在<code>node</code>端没有那么明显，反而到了浏览器端变得如此严重呢？</p><p>答：在node端，运行的JS文件在本地，因此可以本地读取文件，它的效率比浏览器远程传输文件高的多</p><p><strong>根本原因</strong>：在浏览器端，开发时态（<code>devtime</code>）和运行时态（runtime）的侧重点不一样</p><p><strong>开发时态，devtime：</strong></p><ol><li>模块划分越细越好</li><li>支持多种模块化标准</li><li>支持<code>npm</code>或其他包管理器下载的模块</li><li>能够解决其他工程化的问题</li></ol><p><strong>运行时态，runtime：</strong></p><ol><li>文件越少越好</li><li>文件体积越小越好</li><li>代码内容越乱越好</li><li>所有浏览器都要兼容</li><li>能够解决其他运行时的问题，主要是执行效率问题</li></ol><p>这种差异在小项目中表现的并不明显，可是一旦项目形成规模，就越来越明显，如果不解决这些问题，前端项目形成规模只能是空谈</p><h5 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h5><p>既然开发时态和运行时态面临的局面有巨大的差异，因此，我们需要有一个工具，这个工具能够让开发者专心的在开发时态写代码，然后利用这个工具将开发时态编写的代码转换为运行时态需要的东西。</p><p>说到构建工具，我往往会在前面加「自动化」三个字，因为构建工具就是用来让我们不再做机械重复的事情，解放我们的双手的。</p><p>要完成前端工程化，少不了工程化工具，<code>requireJS</code>与<code>grunt</code>的出现，改变了业界前端代码的编写习惯，同时他们也是推动前端工程化的一个基础。</p><p><code>requireJS</code>是一伟大的模块加载器，他的出现让<code>javascript</code>制作多人维护的大型项目变成了事实；<code>grunt</code>是一款<code>javascript</code>构建工具，主要完成编译、压缩、合并等一系列工作，后续又出了<code>yeoman</code>、<code>Gulp</code>、<code>webpack</code>等构建工具。</p><p><code>Webpack</code>具有<code>Grunt</code>、<code>Gulp</code>对于静态资源自动化构建的能力，但更重要的是，<code>Webpack</code>弥补了<code>requireJS</code>在模块化方面的缺陷，同时兼容<code>AMD</code>与<code>CMD</code>的模块加载规范，具有更强大的JS模块化的功能。</p><p>这样的工具，叫做<strong>构建工具</strong></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111731192.png"></p><p>这样一来，开发者就可以专注于开发时态的代码结构，而不用担心运行时态遇到的问题了。</p><h6 id="自动化构建工具的两种模式"><a href="#自动化构建工具的两种模式" class="headerlink" title="自动化构建工具的两种模式"></a>自动化构建工具的两种模式</h6><ul><li><p>开发模式</p><ul><li>开发模式比较简单，主要就是监听文件变化，自动进行打包、合并的操作。</li></ul></li><li><p>生产模式</p><ul><li>参考我们的技术栈与需求，我们的静态文件都要发布到<code>cdn</code>上，而且必须有<code>md5</code>版本号，方便快速发布(<code>cdn</code>更新极其缓慢，所以更新必须使用新的文件名)</li><li>生产模式主要增加了文件压缩、文件<code>md5</code>名修改、替换<code>html</code>等操作，这样的好处就是上线非常方便，一个命令即可更新线上，而且不存在缓存问题。</li></ul></li></ul><h6 id="常见的构建工具"><a href="#常见的构建工具" class="headerlink" title="常见的构建工具"></a>常见的构建工具</h6><ul><li><strong>webpack</strong></li><li><strong>grunt</strong></li><li><strong>gulp</strong></li><li><strong>browserify</strong></li><li><strong>fis</strong></li><li><strong>其他</strong></li></ul><h5 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h5><ul><li><code>CDN</code>是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。<code>CDN</code>的关键技术主要有内容存储和分发技术。</li><li><code>CDN</code>的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。</li><li><code>CDN</code>网络是在用户和服务器之间增加<code>Cache</code>层，如何将用户的请求引导到<code>Cache</code>上获得源服务器的数据，主要是通过接管<code>DNS</code>实现，这就是<code>CDN</code>的最基本的原理</li><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111731009.png"></li><li>1.用户向浏览器输入<code>www.web.com</code>这个域名，浏览器第一次发现本地没有<code>dns</code>缓存，则向网站的<code>DNS</code>服务器请求；</li><li>2.网站的<code>DNS</code>域名解析器设置了<code>CNAME</code>，指向了<code>www.web.51cdn.com</code>,请求指向了<code>CDN</code>网络中的智能<code>DNS</code>负载均衡系统；</li><li>3.智能<code>DNS</code>负载均衡系统解析域名，把对用户响应速度最快的IP节点返回给用户；</li><li>4.用户向该<code>IP</code>节点（<code>CDN</code>服务器）发出请求；</li><li>5.由于是第一次访问，<code>CDN</code>服务器会向原<code>web</code>站点请求，并缓存内容；</li><li>6.请求结果发给用户</li></ul><h4 id="模块化兼容性"><a href="#模块化兼容性" class="headerlink" title="模块化兼容性"></a>模块化兼容性</h4><p>由于<code>webpack</code>同时支持<code>CommonJS</code>和<code>ES6 module</code>，因此需要理解它们互操作时<code>webpack</code>是如何处理的</p><h5 id="同模块化标准"><a href="#同模块化标准" class="headerlink" title="同模块化标准"></a>同模块化标准</h5><p>如果导出和导入使用的是同一种模块化标准，打包后的效果和之前学习的模块化没有任何差异</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111731465.png"></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111731489.png"></p><h5 id="不同模块化标准"><a href="#不同模块化标准" class="headerlink" title="不同模块化标准"></a>不同模块化标准</h5><p>不同的模块化标准，<code>webpack</code>按照如下的方式处理</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111733508.png"></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111733185.png"></p><h5 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h5><p>代码编写最忌讳的是精神分裂，选择一个合适的模块化标准，然后贯彻整个开发阶段。</p><h3 id="为什么要用webpack"><a href="#为什么要用webpack" class="headerlink" title="为什么要用webpack"></a>为什么要用webpack</h3><ul><li><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111733729.png"></li></ul><p>前端需要模块化：<code>JS</code>模块化不仅仅为了提高代码复用性，多人协作开发项目，更是为了让资源文件更合理地进行缓存.</p><p>大家可以回头看下<code>Webpack</code>官方实例图，有一点不知道大家是否注意到：<code>Webpack</code>处理后，输出的静态文件只剩下<code>js</code>与<code>png</code>，而<code>css</code>、<code>less</code>、<code>jade</code>其他的文件都合并到了<code>js</code>中。</p><p>在<code>Webpack</code>当中，所有资源的都是模块，模块都需要通过<code>AMD</code>或者<code>CMD</code>规范加载，就像<code>css</code>样式文件，不再在<code>HTML</code>中以<code>&lt;link&gt;</code>标签加载。</p><ul><li>功能/特性<ul><li>支持<code>CommonJs</code>和<code>AMD</code>模块，意思也就是我们基本可以无痛迁移旧项目。</li><li>支持模块加载器和插件机制，可对模块灵活定制。特别是我最爱的<code>babel-loader</code>，有效支持<code>ES6</code>。</li><li>可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。</li><li>将样式文件和图片等静态资源也可视为模块进行打包。配合<code>loader</code>加载器，可以支持<code>less</code>等<code>CSS</code>预处理器。</li><li>内置有<code>source map</code>，即使打包在一起依旧方便调试</li></ul></li><li>总结：<ul><li>任何静态资源都可以视作模块，然后模块之间也可以相互依赖，通过<code>webpack</code>对模块进行处理后，可以打包成我们想要的静态资源。</li></ul></li></ul><h3 id="初探webpack"><a href="#初探webpack" class="headerlink" title="初探webpack"></a>初探webpack</h3><blockquote><p>webpack官网：<a href="https://www.webpackjs.com/">https://www.webpackjs.com/</a></p></blockquote><h4 id="webpack简介"><a href="#webpack简介" class="headerlink" title="webpack简介"></a>webpack简介</h4><p><code>webpack</code>是基于模块化的打包（构建）工具，它把一切视为模块</p><p>它通过一个开发时态的入口模块为起点，分析出所有的依赖关系，然后经过一系列的过程（压缩、合并），最终生成运行时态的文件。</p><p><code>webpack</code>的特点：</p><ul><li><strong>为前端工程化而生</strong>：<code>webpack</code>致力于解决前端工程化，特别是浏览器端工程化中遇到的问题，让开发者集中注意力编写业务代码，而把工程化过程中的问题全部交给<code>webpack</code>来处理</li><li><strong>简单易用</strong>：支持零配置，可以不用写任何一行额外的代码就使用<code>webpack</code></li><li><strong>强大的生态</strong>：<code>webpack</code>是非常灵活、可以扩展的，<code>webpack</code>本身的功能并不多，但它提供了一些可以扩展其功能的机制，使得一些第三方库可以融于到<code>webpack</code>中</li><li><strong>基于nodejs</strong>：由于<code>webpack</code>在构建的过程中需要读取文件，因此它是运行在<code>node</code>环境中的</li><li><strong>基于模块化</strong>：<code>webpack</code>在构建过程中要分析依赖关系，方式是通过模块化导入语句进行分析的，它支持各种模块化标准，包括但不限于<code>CommonJS</code>、<code>ES6</code>、<code>Module</code></li></ul><h4 id="webpack的安装"><a href="#webpack的安装" class="headerlink" title="webpack的安装"></a>webpack的安装</h4><p><code>webpack</code>通过<code>npm</code>安装，它提供了两个包：</p><ul><li><p><code>webpack</code>：核心包，包含了<code>webpack</code>构建过程中要用到的所有api</p></li><li><p><code>webpack-cli</code>：提供一个简单的<code>cli</code>命令，它调用了<code>webpack</code>核心包的<code>api</code>，来完成构建过程</p></li><li><p><strong>安装方式</strong>：</p><ul><li><strong>全局安装</strong>：可以全局使用<code>webpack</code>命令，但是无法为不同项目对应不同的<code>webpack</code>版本<ul><li><code>npm install webpack -global</code></li><li><code>npm install -global webpack-cli</code></li></ul></li><li><strong>本地安装</strong>：推荐，每个项目都使用自己的<code>webpack</code>版本进行构建<ul><li><code>npm install --save-dev webpack</code></li><li><code>npm install webpack webpack-cli --save-dev</code></li></ul></li></ul></li><li><p>初始化</p><ul><li>在<code>cmd</code>命令窗口进入项目文件夹</li><li>输入<code>npm init</code>，一路回车</li></ul></li><li></li></ul><h3 id="webpack-编译过程"><a href="#webpack-编译过程" class="headerlink" title="webpack 编译过程"></a>webpack 编译过程</h3><p><code>webpack</code> 的作用是将源代码编译（构建、打包）成最终代码</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111734811.png"></p><p>整个过程大致分为三个步骤</p><ol><li>初始化</li><li>编译</li><li>输出</li></ol><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111734083.png"></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>此阶段，<code>webpack</code>会将<strong>CLI参数</strong>、<strong>配置文件</strong>、<strong>默认配置</strong>进行融合，形成一个最终的配置对象。</p><p>对配置的处理过程是依托一个第三方库<code>yargs</code>完成的</p><p>此阶段相对比较简单，主要是为接下来的编译阶段做必要的准备</p><p>目前，可以简单的理解为，初始化阶段主要用于产生一个最终的配置</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><ol><li><strong>创建chunk</strong></li></ol><p><code>chunk</code>是<code>webpack</code>在内部构建过程中的一个概念，译为块，它表示通过某个入口找到的所有依赖的统称。</p><p>根据入口模块（默认为<code>https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/index.js</code>）创建一个chunk</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111734800.png"></p><p>每个<code>chunk</code>都有至少两个属性：</p><ul><li><code>name</code>：默认为<code>main</code></li><li><code>id</code>：唯一编号，开发环境和name相同，生产环境是一个数字，从<code>0</code>开始</li></ul><ol start="2"><li><strong>构建所有依赖模块</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111741933.png"></p><blockquote><p>AST在线测试工具：<a href="https://astexplorer.net/">https://astexplorer.net/</a></p></blockquote><p>简图</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111741536.png"></p><ol start="3"><li><strong>产生chunk assets</strong></li></ol><p>在第二步完成后，<code>chunk</code>中会产生一个模块列表，列表中包含了<strong>模块id</strong>和<strong>模块转换后的代码</strong></p><p>接下来，<code>webpack</code>会根据配置为<code>chunk</code>生成一个资源列表，即<code>chunk assets</code>，资源列表可以理解为是生成到最终文件的文件名和文件内容</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111741429.png"></p><blockquote><p>chunk hash是根据所有chunk assets的内容生成的一个hash字符串<br>hash：一种算法，具体有很多分类，特点是将一个任意长度的字符串转换为一个固定长度的字符串，而且可以保证原始内容不变，产生的hash字符串就不变</p></blockquote><p>简图</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111742646.png"></p><ol start="4"><li><strong>合并chunk assets</strong></li></ol><p>将多个<code>chunk</code>的<code>assets</code>合并到一起，并产生一个总的<code>hash</code></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111742987.png"></p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>此步骤非常简单，<code>webpack</code>将利用<code>node</code>中的<code>fs</code>模块（文件处理模块），根据编译产生的总的<code>assets</code>，生成相应的文件。</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111742982.png"></p><h4 id="总过程"><a href="#总过程" class="headerlink" title="总过程"></a>总过程</h4><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111742793.png"></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111742718.png"></p><p><strong>涉及术语</strong></p><ol><li><code>module</code>：模块，分割的代码单元，<code>webpack</code>中的模块可以是任何内容的文件，不仅限于<code>JS</code></li><li><code>chunk</code>：<code>webpack</code>内部构建模块的块，一个<code>chunk</code>中包含多个模块，这些模块是从入口模块通过依赖分析得来的</li><li><code>bundle</code>：<code>chunk</code>构建好模块后会生成<code>chunk</code>的资源清单，清单中的每一项就是一个<code>bundle</code>，可以认为<code>bundle</code>就是最终生成的文件</li><li><code>hash</code>：最终的资源清单所有内容联合生成的<code>hash</code>值</li><li><code>chunkhash</code>：<code>chunk</code>生成的资源清单内容联合生成的<code>hash</code>值</li><li><code>chunkname</code>：<code>chunk</code>的名称，如果没有配置则使用<code>main</code></li><li><code>id</code>：通常指<code>chunk</code>的唯一编号，如果在开发环境下构建，和<code>chunkname</code>相同；如果是生产环境下构建，则使用一个从<code>0</code>开始的数字进行编号</li></ol><h3 id="入口和出口"><a href="#入口和出口" class="headerlink" title="入口和出口"></a>入口和出口</h3><h4 id="入口和出口是什么"><a href="#入口和出口是什么" class="headerlink" title="入口和出口是什么"></a>入口和出口是什么</h4><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111742520.png"></p><blockquote><p>node内置模块 - path: <a href="https://nodejs.org/dist/latest-v12.x/docs/api/path.html">https://nodejs.org/dist/latest-v12.x/docs/api/path.html</a></p></blockquote><p><strong>出口</strong></p><p>这里的出口是针对资源列表的文件名或路径的配置</p><p>出口通过<code>output</code>进行配置</p><p><strong>入口</strong></p><p><strong>入口真正配置的是chunk</strong></p><p>入口通过entry进行配置</p><p>规则：</p><ul><li><code>name</code>：<code>chunkname</code></li><li><code>hash</code>: 总的资源<code>hash</code>，通常用于解决缓存问题</li><li><code>chunkhash</code>: 使用<code>chunkhash</code></li><li><code>id</code>: 使用<code>chunkid</code>，不推荐</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="comment">//属性名：chunk的名称， 属性值：入口模块（启动模块）</span></span><br><span class="line">        <span class="attr">main</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/index.js&quot;</span>, </span><br><span class="line">        <span class="comment">//启动模块有两个</span></span><br><span class="line">        <span class="attr">a</span>: [<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/a.js&quot;</span>, <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/index.js&quot;</span>] </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">//必须配置一个绝对路径，表示资源放置的文件夹，默认是dist</span></span><br><span class="line">        <span class="comment">//_dirname: 所有情况下，都表示当前运行的js文件所在的目录，它是一个绝对路径</span></span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;target&quot;</span>), </span><br><span class="line">        <span class="comment">//配置的合并的js文件的规则</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;[id].[chunkhash:5].js&quot;</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="入口和出口的最佳实践"><a href="#入口和出口的最佳实践" class="headerlink" title="入口和出口的最佳实践"></a>入口和出口的最佳实践</h4><p>具体情况具体分析</p><p>下面是一些经典场景</p><h5 id="一个页面一个JS"><a href="#一个页面一个JS" class="headerlink" title="一个页面一个JS"></a>一个页面一个JS</h5><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111742334.png"></p><p>源码结构</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|—— src</span><br><span class="line">    |—— pageA   页面A的代码目录</span><br><span class="line">        |—— index.js 页面A的启动模块</span><br><span class="line">        |—— ...</span><br><span class="line">    |—— pageB   页面B的代码目录</span><br><span class="line">        |—— index.js 页面B的启动模块</span><br><span class="line">        |—— ...</span><br><span class="line">    |—— pageC   页面C的代码目录</span><br><span class="line">        |—— main1.js 页面C的启动模块1 例如：主功能</span><br><span class="line">        |—— main2.js 页面C的启动模块2 例如：实现访问统计的额外功能</span><br><span class="line">        |—— ...</span><br><span class="line">    |—— common  公共代码目录</span><br><span class="line">        |—— ...</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code>配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>:&#123;</span><br><span class="line">        <span class="attr">pageA</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/pageA/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">pageB</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/pageB/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">pageC</span>: [<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/pageC/main1.js&quot;</span>, <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/pageC/main2.js&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;[name].[chunkhash:5].js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式适用于页面之间的功能差异巨大、公共代码较少的情况，这种情况下打包出来的最终代码不会有太多重复</p><h5 id="一个页面多个JS"><a href="#一个页面多个JS" class="headerlink" title="一个页面多个JS"></a>一个页面多个JS</h5><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111742598.png"></p><p>源码结构</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|—— src</span><br><span class="line">    |—— pageA   页面A的代码目录</span><br><span class="line">        |—— index.js 页面A的启动模块</span><br><span class="line">        |—— ...</span><br><span class="line">    |—— pageB   页面B的代码目录</span><br><span class="line">        |—— index.js 页面B的启动模块</span><br><span class="line">        |—— ...</span><br><span class="line">    |—— statistics   用于统计访问人数功能目录</span><br><span class="line">        |—— index.js 启动模块</span><br><span class="line">        |—— ...</span><br><span class="line">    |—— common  公共代码目录</span><br><span class="line">        |—— ...</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code>配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>:&#123;</span><br><span class="line">        <span class="attr">pageA</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/pageA/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">pageB</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/pageB/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">statistics</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/statistics/index.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;[name].[chunkhash:5].js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式适用于页面之间有一些<strong>独立</strong>、相同的功能，专门使用一个chunk抽离这部分JS有利于浏览器更好的缓存这部分内容。</p><blockquote><p>思考：为什么不使用多启动模块的方式？</p></blockquote><h5 id="单页应用"><a href="#单页应用" class="headerlink" title="单页应用"></a>单页应用</h5><p>所谓单页应用，是指整个网站（或网站的某一个功能块）只有一个页面，页面中的内容全部靠JS创建和控制。 <code>vue</code>和<code>react</code>都是实现单页应用的利器。</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111742157.png"></p><p>源码结构</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|—— src</span><br><span class="line">    |—— subFunc   子功能目录</span><br><span class="line">        |—— ...</span><br><span class="line">    |—— subFunc   子功能目录</span><br><span class="line">        |—— ...</span><br><span class="line">    |—— common  公共代码目录</span><br><span class="line">        |—— ...</span><br><span class="line">    |—— index.js</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code>配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/index.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;index.[hash:5].js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件-打包项目"><a href="#配置文件-打包项目" class="headerlink" title="配置文件/打包项目"></a>配置文件/打包项目</h4><ul><li><p>默认情况下，<code>webpack</code>会以<code>https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/index.js</code>作为入口文件分析依赖关系，打包到<code>https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/dist/main.js</code>文件中</p></li><li><p><code>webpack</code>提供的<code>cli</code>支持很多的参数，例如<code>--mode</code>，但更多的时候，我们会使用更加灵活的配置文件来控制<code>webpack</code>的行为</p></li><li><p>默认情况下，<code>webpack</code>会读取<code>webpack.config.js</code>文件作为配置文件，但也可以通过<code>CLI</code>参数<code>--config</code>来指定某个配置文件</p></li><li><p>配置文件中通过<code>CommonJS</code>模块导出一个对象，对象中的各种属性对应不同的<code>webpack</code>配置</p></li><li><p><code>mode</code>：编译模式，字符串，取值为<code>development</code>或<code>production</code>，指定编译结果代码运行的环境，会影响<code>webpack</code>对编译结果代码格式的处理</p><ul><li>通过<code>--mode</code>选项可以控制<code>webpack</code>的打包结果的运行环境<ul><li>在<code>package.json</code>文件的<code>scripts</code>中添加</li><li><code>&quot;dev&quot;: &quot;webpack --mode development&quot;</code>：开发模式</li><li><code>&quot;build&quot;: &quot;webpack --mode production&quot;</code>：生产模式</li><li>或</li><li>在<code>webpack.config.js</code>中添加</li><li><code>mode:&quot;development&quot;</code>：开发模式</li><li><code>mode:&quot;production&quot;</code>：生产模式</li></ul></li></ul></li><li><p><strong>基本配置：</strong></p></li></ul><ol><li><p>准备好项目文件夹</p></li><li><p>在<code>cmd</code>中进行项目初始化</p><ol><li><code>npm init</code></li></ol></li><li><p>准备好各种项目文件，新建<code>webpack.config.js</code>，进行配置</p><ol><li>```js<br>module.exports = {<pre><code>mode: &quot;production&quot;,//入口entry: &#123;    //属性名：chunk的名称， 属性值：入口模块（启动模块）    main: &quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/index.js&quot;,     //启动模块有两个    a: [&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/a.js&quot;, &quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/index.js&quot;] &#125;,//出口output: &#123;    //必须配置一个绝对路径，表示资源放置的文件夹，默认是dist    //_dirname: 所有情况下，都表示当前运行的js文件所在的目录，它是一个绝对路径    path: path.resolve(__dirname, &quot;target&quot;),     //配置的合并的js文件的规则    filename: &quot;[id].[chunkhash:5].js&quot; &#125;,devtool: &quot;source-map&quot;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. 配置完成后打包项目，在`cmd`文件夹路径上进行打包</span><br><span class="line"></span><br><span class="line">   1. 全局</span><br><span class="line">      1. 如：`D:\Desktop\webpack1 webpack`</span><br><span class="line">      2. 使用`webpack`命令进行打包，打包完成后，在`html`文件中引入打包好的文件名称</span><br><span class="line">   2. 本地</span><br><span class="line">      1. 如：`D:\Desktop\webpack1 npx webpack --config webpack.config.js`</span><br><span class="line">      2. 使用`webpack`命令进行打包，打包完成后，在`html`文件中引入打包好的文件名称</span><br><span class="line"></span><br><span class="line">### loader</span><br><span class="line"></span><br><span class="line">&gt; webpack做的事情，仅仅是分析出各种模块的依赖关系，然后形成资源列表，最终打包生成到指定的文件中。</span><br><span class="line">&gt; 更多的功能需要借助webpack loaders和webpack plugins完成。</span><br><span class="line"></span><br><span class="line">- `loader`意义：</span><br><span class="line">  - 这些加载器主要做一些预处理的工作：比如`less`，`sass`等</span><br><span class="line"></span><br><span class="line">#### loader是什么</span><br><span class="line"></span><br><span class="line">`webpack loader`： `loader`本质上是一个函数，它的作用是将某个源码字符串转换成另一个源码字符串返回。</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111742693.png)</span><br><span class="line"></span><br><span class="line">`loader`函数的将在模块解析的过程中被调用，以得到最终的源码。</span><br><span class="line"></span><br><span class="line">**全流程：**</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111743998.png)</span><br><span class="line"></span><br><span class="line">**chunk中解析模块的流程：**</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111743185.png)</span><br><span class="line"></span><br><span class="line">**chunk中解析模块的更详细流程：**</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111743967.png)</span><br><span class="line"></span><br><span class="line">**处理loaders流程：**</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111743796.png)</span><br><span class="line"></span><br><span class="line">#### 安装`loader`</span><br><span class="line"></span><br><span class="line">- 我们第一步就是先要安装好各个必须的`loader`，我们直接看看需要通过`npm`安装什么。</span><br><span class="line">- 安装常用loader的包</span><br><span class="line">  - `npm install babel-loader babel/runtime @babel/core css-loader style-loader url-loader file-loader less-loader less --save -dev` </span><br><span class="line"></span><br><span class="line">#### 配置</span><br><span class="line"></span><br><span class="line">- 我们主要看看`module`的`rules`。`rules`是一个数组，里面的每一个对象都用正则表达式，对应着一种配对方案。比如匹配到`js`后缀名就用`babel-loader`，匹配到`less`后缀名的就先用`less`，再用`css`，最后用`style`处理；不同的处理器`user`处理，`use: [&#x27;style-loader&#x27;,&#x27;css-loader&#x27;]`。</span><br><span class="line"></span><br><span class="line">- **完整配置**</span><br><span class="line">  </span><br><span class="line">  ```js</span><br><span class="line">  module.exports = &#123;</span><br><span class="line">      module: &#123; //针对模块的配置，目前版本只有两个配置，rules、noParse</span><br><span class="line">          rules: [ //模块匹配规则，可以存在多个规则</span><br><span class="line">              &#123; //每个规则是一个对象</span><br><span class="line">                  test: /\.js$/, //匹配的模块正则</span><br><span class="line">                  use: [ //匹配到后应用的规则模块</span><br><span class="line">                      &#123;  //其中一个规则</span><br><span class="line">                          //loader模块的路径，该字符串会被放置到require中</span><br><span class="line">                          loader: &quot;模块路径&quot;,  //如css-loader,url-loader...</span><br><span class="line">                          //向对应loader传递的额外参数</span><br><span class="line">                          options: &#123; </span><br><span class="line">                              </span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  ]</span><br><span class="line">              &#125;</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ul><li><p><strong>简化配置</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123; <span class="comment">//针对模块的配置，目前版本只有两个配置，rules、noParse</span></span><br><span class="line">        <span class="attr">rules</span>: [ <span class="comment">//模块匹配规则，可以存在多个规则</span></span><br><span class="line">            &#123; <span class="comment">//每个规则是一个对象</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="comment">//匹配的模块正则</span></span><br><span class="line">                use: [<span class="string">&quot;模块路径1&quot;</span>, <span class="string">&quot;模块路径2&quot;</span>]<span class="comment">//loader模块的路径，该字符串会被放置到require中，如css-loader,url-loader...</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="处理样式"><a href="#处理样式" class="headerlink" title="处理样式"></a>处理样式</h4><ul><li><p>安装样式的<code>loader</code></p><ul><li><code>npm install css-loader style-loader</code></li></ul></li><li><p>```js<br>module.exports = {</p><pre><code>mode: &quot;development&quot;,devtool: &quot;source-map&quot;,module: &#123;    rules: [&#123;        test: /\.css$/,        use: [&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/loaders/style-loader&quot;] //loader的路径    &#125;]&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 处理图片</span><br><span class="line"></span><br><span class="line">- 我们之前也说，`webpack`对与静态资源来说，也是看作模块来加载的。`CSS`我们是已经看过了，那图片是怎么作为模块打包加载进来呢？这里我们可以想到，图片我们是用`url-loader`加载的。我们在`css`文件里的`url`属性，其实就是一种封装处理过`require`操作。当然我们还有一种方式就是直接对元素的`src`属性进行`require`赋值。</span><br><span class="line"></span><br><span class="line">- 安装图片相关的`loader`</span><br><span class="line"></span><br><span class="line">  - `npm install url-loader file-loader`</span><br><span class="line"></span><br><span class="line">- ```javascript</span><br><span class="line">  &gt;entry.js</span><br><span class="line">  var oImg = new Image();</span><br><span class="line">  oImg.src = require(&#x27;.https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/img/2.png&#x27;);</span><br><span class="line">  document.body.appendChild(oImg);</span><br><span class="line">  </span><br><span class="line">  &gt;webpack.config.js</span><br><span class="line">  module.exports = &#123;</span><br><span class="line">      mode: &quot;development&quot;, //开发者模式</span><br><span class="line">      devtool: &quot;source-map&quot;, </span><br><span class="line">      module: &#123;</span><br><span class="line">          rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                  test: /\.(png)|(jpg)|(gif)$/, use: [&#123;</span><br><span class="line">                      loader: &quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/loaders/img-loader.js&quot;,</span><br><span class="line">                      options: &#123;</span><br><span class="line">                          limit: 3000, </span><br><span class="line">                          //3000字节以上使用图片，3000字节以内使用base64</span><br><span class="line">                          filename: &quot;img-[contenthash:5].[ext]&quot;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;]</span><br><span class="line">              &#125;</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>publicPath</strong></p><ul><li><p>是像图片这种静态资源 打包后的根路径，当浏览器需要引用输入静态资源文件时， 这个配置项指定输入文件的公共<code>URL</code>地址。在<code>loader</code>中它被嵌入到<code>script</code> 或者 <code>link</code> 标签或者对静态资源的引用里。当文件的<code>href</code> 或者 <code>url()</code>与它在磁盘 上的路径 不一致时就应当用<code>publicPath</code> (像<code>path</code>一样指定) ，这在你想定义把一些或者所有文件放在不同的主机或<code>CDN</code>上时会非常有用</p></li><li><p>```js<br>output: {</p><pre><code>filename: &#39;index.js&#39;, //输出文件名称path: __dirname + &#39;/out/&#39;,//当前文件夹的绝对路径publicPath: &#39;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/out&#39; //公共资源地址</code></pre><p>},// 输出文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### plugin</span><br><span class="line"></span><br><span class="line">`loader`的功能定位是转换代码，而一些其他的操作难以使用`loader`完成，比如：</span><br><span class="line"></span><br><span class="line">- 当`webpack`生成文件时，顺便多生成一个说明描述文件</span><br><span class="line">- 当`webpack`编译启动时，控制台输出一句话表示`webpack`启动了</span><br><span class="line">- 当`xxxx`时，`xxxx`</span><br><span class="line"></span><br><span class="line">这种类似的功能需要把功能嵌入到`webpack`的编译流程中，而这种事情的实现是依托于`plugin`的</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111743188.png)</span><br><span class="line"></span><br><span class="line">plugin`的**本质**是一个带有`apply`方法的对象</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">var plugin = &#123;</span><br><span class="line">    apply: function(compiler)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>通常，习惯上，我们会将该对象写成构造函数的模式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">apply</span>(<span class="params">compiler</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plugin = <span class="keyword">new</span> MyPlugin();</span><br></pre></td></tr></table></figure><p>要将插件应用到<code>webpack</code>，需要把插件对象配置到<code>webpack</code>的<code>plugins</code>数组中，如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> MyPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>apply</code>函数会在初始化阶段，创建好<code>Compiler</code>对象后运行。</p><p><code>compiler</code>对象是在初始化阶段构建的，整个<code>webpack</code>打包期间只有一个<code>compiler</code>对象，后续完成打包工作的是compiler对象内部创建的<code>compilation</code></p><p><code>apply</code>方法会在<strong>创建好compiler对象后调用</strong>，并向方法传入一个<code>compiler</code>对象</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111743591.png"></p><p><code>compiler</code>对象提供了大量的钩子函数（<code>hooks</code>，可以理解为事件），<code>plugin</code>的开发者可以注册这些钩子函数，参与<code>webpack</code>编译和生成。</p><p>你可以在<code>apply</code>方法中使用下面的代码注册钩子函数:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">apply</span>(<span class="params">compiler</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//在这里注册事件，类似于window.onload  $(function()&#123;&#125;)</span></span><br><span class="line">        compiler.hooks.事件名称.事件类型(name, <span class="function"><span class="keyword">function</span>(<span class="params">compilation</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//事件处理函数</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>事件名称</strong></p><p>即要监听的事件名，即钩子名，所有的钩子：<a href="https://www.webpackjs.com/api/compiler-hooks">https://www.webpackjs.com/api/compiler-hooks</a></p><p><strong>事件类型</strong></p><p>这一部分使用的是 <code>Tapable API</code>，这个小型的库是一个专门用于钩子函数监听的库。</p><p>它提供了一些事件类型：</p><ul><li><code>tap</code>：注册一个同步的钩子函数，函数运行完毕则表示事件处理结束</li><li><code>tapAsync</code>：注册一个基于回调的异步的钩子函数，函数通过调用一个回调表示事件处理结束</li><li><code>tapPromise</code>：注册一个基于<code>Promise</code>的异步的钩子函数，函数通过返回的<code>Promise</code>进入已决状态表示事件处理结束</li></ul><p><strong>处理函数</strong></p><p>处理函数有一个事件参数<code>compilation</code></p><h3 id="区分环境"><a href="#区分环境" class="headerlink" title="区分环境"></a>区分环境</h3><p>有些时候，我们需要针对生产环境和开发环境分别书写<code>webpack</code>配置</p><p>为了更好的适应这种要求，<code>webpack</code>允许配置不仅可以是一个对象，还可以是一个<strong>函数</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.base.js，入口/出口</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/index.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;scripts/[name]-[hash:5].js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack.dev.js，开发者环境配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack.pro.js，生产者环境配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;none&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack.config.js，主文件</span></span><br><span class="line"><span class="keyword">var</span> baseConfig = <span class="built_in">require</span>(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/webpack.base&quot;</span>) <span class="comment">//引入入口和出口</span></span><br><span class="line"><span class="keyword">var</span> devConfig = <span class="built_in">require</span>(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/webpack.dev&quot;</span>) <span class="comment">//引入两个环境配置文件</span></span><br><span class="line"><span class="keyword">var</span> proConfig = <span class="built_in">require</span>(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/webpack.pro&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">env</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果环境是production，就。。。</span></span><br><span class="line">    <span class="keyword">if</span> (env &amp;&amp; env.prod) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            ...baseConfig,</span><br><span class="line">            ...proConfig</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则。。。</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            ...baseConfig,</span><br><span class="line">            ...devConfig</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在开始构建时，<code>webpack</code>如果发现配置是一个函数，会调用该函数，将函数返回的对象作为配置内容，因此，开发者可以根据不同的环境返回不同的对象</p><p>在调用<code>webpack</code>函数时，<code>webpack</code>会向函数传入一个参数<code>env</code>，该参数的值来自于<code>webpack</code>命令中给<code>env</code>指定的值，例如</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx webpack --env abc # env: &quot;abc&quot;</span><br><span class="line"></span><br><span class="line">npx webpack --env.abc # env: &#123;abc:true&#125;</span><br><span class="line">npx webpack --env.abc=1  # env： &#123;abc:1&#125;</span><br><span class="line">npx webpack --env.abc=1 --env.bcd=2 # env: &#123;abc:1, bcd:2&#125;</span><br></pre></td></tr></table></figure><p>这样一来，我们就可以在命令中指定环境，在代码中进行判断，根据环境返回不同的配置结果。</p><h3 id="其他细节配置"><a href="#其他细节配置" class="headerlink" title="其他细节配置"></a>其他细节配置</h3><h4 id="context"><a href="#context" class="headerlink" title="context"></a>context</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">context: path.resolve(__dirname, <span class="string">&quot;app&quot;</span>)</span><br></pre></td></tr></table></figure><p>该配置会影响入口和<code>loaders</code>的解析，入口和loaders的相对路径会以context的配置作为基准路径，这样，你的配置会独立于<code>CWD</code>（<code>current working directory</code> 当前执行路径）</p><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><h5 id="library"><a href="#library" class="headerlink" title="library"></a>library</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">library: <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure><p>这样一来，打包后的结果中，会将自执行函数的执行结果暴露给abc </p><h5 id="libraryTarget"><a href="#libraryTarget" class="headerlink" title="libraryTarget"></a>libraryTarget</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">libraryTarget: <span class="string">&quot;var&quot;</span></span><br></pre></td></tr></table></figure><p>该配置可以更加精细的控制如何暴露入口包的导出结果</p><p>其他可用的值有：</p><ul><li><code>var</code>：默认值，暴露给一个普通变量</li><li><code>window</code>：暴露给window对象的一个属性</li><li><code>this</code>：暴露给this的一个属性</li><li><code>global</code>：暴露给global的一个属性</li><li><code>commonjs</code>：暴露给exports的一个属性</li><li>其他：<a href="https://www.webpackjs.com/configuration/output/#output-librarytarget">https://www.webpackjs.com/configuration/output/#output-librarytarget</a></li></ul><h4 id="target"><a href="#target" class="headerlink" title="target"></a>target</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">target:<span class="string">&quot;web&quot;</span> <span class="comment">//默认值</span></span><br></pre></td></tr></table></figure><p>设置打包结果最终要运行的环境，常用值有</p><ul><li><code>web</code>: 打包后的代码运行在web环境中</li><li><code>node</code>：打包后的代码运行在node环境中</li><li>其他：<a href="https://www.webpackjs.com/configuration/target/">https://www.webpackjs.com/configuration/target/</a></li></ul><h4 id="module-noParse"><a href="#module-noParse" class="headerlink" title="module.noParse"></a>module.noParse</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">noParse: <span class="regexp">/jquery/</span></span><br></pre></td></tr></table></figure><p>不解析正则表达式匹配的模块，通常用它来忽略那些大型的单模块库，以提高<strong>构建性能</strong></p><h5 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h5><p><code>resolve</code>的相关配置主要用于控制模块解析过程</p><h5 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">modules: [<span class="string">&quot;node_modules&quot;</span>]  <span class="comment">//默认值</span></span><br></pre></td></tr></table></figure><p>当解析模块时，如果遇到导入语句，<code>require(&quot;test&quot;)</code>，webpack会从下面的位置寻找依赖的模块</p><ol><li>当前目录下的<code>node_modules</code>目录</li><li>上级目录下的<code>node_modules</code>目录</li><li>…</li></ol><h5 id="extensions"><a href="#extensions" class="headerlink" title="extensions"></a>extensions</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">extensions: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.json&quot;</span>]  <span class="comment">//默认值</span></span><br></pre></td></tr></table></figure><p>当解析模块时，遇到无具体后缀的导入语句，例如<code>require(&quot;test&quot;)</code>，会依次测试它的后缀名</p><ul><li><code>test.js</code></li><li><code>test.json</code></li></ul><h5 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alias: &#123;</span><br><span class="line">  <span class="string">&quot;@&quot;</span>: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">  <span class="string">&quot;_&quot;</span>: __dirname</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了<code>alias</code>（别名）后，导入语句中可以加入配置的键名，例如<code>require(&quot;@/abc.js&quot;)</code>，<code>webpack</code>会将其看作是<code>require(src的绝对路径+&quot;/abc.js&quot;)</code>。</p><p>在大型系统中，源码结构往往比较深和复杂，别名配置可以让我们更加方便的导入依赖</p><h4 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">externals: &#123;    <span class="attr">jquery</span>: <span class="string">&quot;$&quot;</span>,    <span class="attr">lodash</span>: <span class="string">&quot;_&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>从最终的<code>bundle</code>中排除掉配置的配置的源码，例如，入口模块是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.jsrequire(&quot;jquery&quot;)require(&quot;lodash&quot;)</span></span><br></pre></td></tr></table></figure><p>生成的<code>bundle</code>是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    ...&#125;)(&#123;    <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/index.js&quot;</span>: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>)</span>&#123;        __webpack_require__(<span class="string">&quot;jquery&quot;</span>)        __webpack_require__(<span class="string">&quot;lodash&quot;</span>)    &#125;,    <span class="string">&quot;jquery&quot;</span>: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span></span>)</span>&#123;        <span class="comment">//jquery的大量源码    &#125;,    &quot;lodash&quot;: function(module, exports)&#123;        //lodash的大量源码    &#125;,&#125;)</span></span><br></pre></td></tr></table></figure><p>但有了上面的配置后，则变成了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">    <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/index.js&quot;</span>: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>)</span>&#123;</span><br><span class="line">        __webpack_require__(<span class="string">&quot;jquery&quot;</span>)</span><br><span class="line">        __webpack_require__(<span class="string">&quot;lodash&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;jquery&quot;</span>: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">module</span>.exports = $;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;lodash&quot;</span>: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">module</span>.exports = _;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这比较适用于一些第三方库来自于外部<code>CDN</code>的情况，这样一来，即可以在页面中使用<code>CDN</code>，又让<code>bundle</code>的体积变得更小，还不影响源码的编写</p><h4 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h4><p><code>stats</code>控制的是构建过程中控制台的输出内容</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stats: &#123;</span><br><span class="line">    <span class="attr">colors</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">modules</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">hash</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">builtAt</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="devtool-配置"><a href="#devtool-配置" class="headerlink" title="devtool 配置"></a>devtool 配置</h3><h4 id="source-map-源码地图"><a href="#source-map-源码地图" class="headerlink" title="source map 源码地图"></a>source map 源码地图</h4><blockquote><p>本小节的知识与 webpack 无关</p></blockquote><p>前端发展到现阶段，很多时候都不会直接运行源代码，可能需要对源代码进行合并、压缩、转换等操作，真正运行的是转换后的代码</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111744410.png"></p><p>这就给调试带来了困难，因为当运行发生错误的时候，我们更加希望能看到源代码中的错误，而不是转换后代码的错误</p><blockquote><p>jquery压缩后的代码：<a href="https://code.jquery.com/jquery-3.4.1.min.js">https://code.jquery.com/jquery-3.4.1.min.js</a></p></blockquote><p>为了解决这一问题，chrome浏览器率先支持了source map，其他浏览器纷纷效仿，目前，几乎所有新版浏览器都支持了<code>source map</code></p><p><code>source map</code>实际上是一个配置，配置中不仅记录了所有源码内容，还记录了和转换后的代码的对应关系</p><p>下面是浏览器处理<code>source map</code>的原理</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111744946.png"></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111744402.png"></p><p><strong>最佳实践</strong>：</p><ol><li><code>source map</code> 应在开发环境中使用，作为一种调试手段</li><li><code>source map</code> 不应该在生产环境中使用，<code>source map</code>的文件一般较大，不仅会导致额外的网络传输，还容易暴露原始代码。即便要在生产环境中使用<code>source map</code>，用于调试真实的代码运行问题，也要做出一些处理规避网络传输和代码暴露的问题。</li></ol><h4 id="webpack中的source-map"><a href="#webpack中的source-map" class="headerlink" title="webpack中的source map"></a>webpack中的source map</h4><p>使用 <code>webpack</code> 编译后的代码难以调试，可以通过 <code>devtool</code> 配置来<strong>优化调试体验</strong></p><p>具体的配置见文档：<a href="https://www.webpackjs.com/configuration/devtool/">https://www.webpackjs.com/configuration/devtool/</a></p><h2 id="常用拓展-plugin"><a href="#常用拓展-plugin" class="headerlink" title="常用拓展(plugin)"></a>常用拓展(plugin)</h2><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><h4 id="清除目录"><a href="#清除目录" class="headerlink" title="清除目录"></a>清除目录</h4><ul><li>安装：</li><li><code>npm install clean-webpack-plugin --save-dev</code></li></ul><h4 id="自动生成页面"><a href="#自动生成页面" class="headerlink" title="自动生成页面"></a>自动生成页面</h4><ul><li>该插件将为你生成一个 <code>HTML5</code> 文件， 其中包括使用 <code>script</code> 标签的 <code>body</code> 中的所有 <code>webpack</code> 包。 </li><li>安装：</li><li><code>npm install --svae-dev html-webpack-plugin</code></li></ul><h4 id="复制静态文件"><a href="#复制静态文件" class="headerlink" title="复制静态文件"></a>复制静态文件</h4><ul><li>安装</li><li><code>npm install --save-dev copy-webpack-plugin</code></li></ul><h4 id="打包文件分析工具"><a href="#打包文件分析工具" class="headerlink" title="打包文件分析工具"></a>打包文件分析工具</h4><ul><li>安装</li><li><code>npm install --save-dev webpack-bundle-analyzer</code></li></ul><h4 id="案例使用："><a href="#案例使用：" class="headerlink" title="案例使用："></a>案例使用：</h4><ul><li>```javascript<br>const {ClearWebpackPlugin} = require(‘clear-webpack-plugin’);<br>const HtmlWebpackPlugin = require(‘html-webpack-plugin’);<br>const CopyPlugin = require(“copy-webpack-plugin”);<br>const WebpackBundleAnalyzer = require(“webpack-bundle-analyzer”)<br>  .BundleAnalyzerPlugin;module.exports = {<pre><code>mode: &#39;development&#39;,devtool: &#39;source-map&#39;,output: &#123;    filename: &quot;scripts/[name].[chunkhash:5].js&quot;&#125;,plugins: [    //清除目录    new ClearWebpackPlugn(),    //生成页面    new HtmlWebpackPlugin(&#123;        template: &#39;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/public/index.html&#39;, //模板配置文件路径        filename: &#39;index.html&#39; //新建的文件名称    &#125;),    //复制静态文件    new CopyPlugin([        &#123;from: &#39;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/public&#39;, to:&#39;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/&#39;&#125;//从哪里复制到哪里    ]),    //打包文件分析工具    new WebpackBundleAnalyzer(&#123;        analyzerMode: &#39;server&#39;,        //  将在“服务器”模式下使用的主机启动HTTP服务器。        analyzerHost: &#39;127.0.0.1&#39;,        //  将在“服务器”模式下使用的端口启动HTTP服务器。        analyzerPort: 8888,         //  路径捆绑，将在`static`模式下生成的报告文件。        //  相对于捆绑输出目录。        logLevel: &#39;info&#39;         // 日志级别。可以是&#39;信息&#39;，&#39;警告&#39;，&#39;错误&#39;或&#39;沉默&#39;。    &#125;);]</code></pre>}//浏览器打开127.0.0.1:8888地址可以看到打包文件分析效果图：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 开发服务器</span><br><span class="line"></span><br><span class="line">在**开发阶段**，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程：</span><br><span class="line"></span><br><span class="line">1. 编写代码</span><br><span class="line">2. 控制台运行命令完成打包</span><br><span class="line">3. 打开页面查看效果</span><br><span class="line">4. 继续编写代码，回到步骤2</span><br><span class="line"></span><br><span class="line">并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境</span><br><span class="line"></span><br><span class="line">为了解决这些问题，`webpack`官方制作了一个单独的库：**webpack-dev-server**</span><br><span class="line"></span><br><span class="line">它**既不是plugin也不是loader**</span><br><span class="line"></span><br><span class="line">先来看看它怎么用</span><br><span class="line"></span><br><span class="line">1. 安装</span><br><span class="line"></span><br><span class="line">   1. `npm install --save-dev webpack-dev-server`</span><br><span class="line"></span><br><span class="line">2. 在`webpack.config.js`中添加`devServer`</span><br><span class="line"></span><br><span class="line">   1. ```javascript</span><br><span class="line">      devServer: &#123;</span><br><span class="line">          contentBase: &#x27;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/dist&#x27;, //静态资源目录</span><br><span class="line">          open: true,</span><br><span class="line">          openPage: &#x27;html/index.html&#x27;, //打开的主页面</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>执行<code>npm webpack server</code>命令</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这个命令是专门为开发阶段服务的，真正部署的时候还是得使用`webpack`命令</span><br><span class="line"></span><br><span class="line">当我们执行```webpack-dev-server```命令后，它做了以下操作：</span><br><span class="line"></span><br><span class="line">1. 内部执行`webpack`命令，传递命令参数</span><br><span class="line">2. 开启`watch`</span><br><span class="line">3. 注册`hooks`：类似于`plugin`，`webpack-dev-server`会向`webpack`中注册一些钩子函数，主要功能如下：</span><br><span class="line">   1. 将资源列表（`aseets`）保存起来</span><br><span class="line">   2. 禁止`webpack`输出文件</span><br><span class="line">4. 用`express`开启一个服务器，监听某个端口，当请求到达后，根据请求的路径，给予相应的资源内容</span><br><span class="line"></span><br><span class="line">**配置**</span><br><span class="line"></span><br><span class="line">针对`webpack-dev-server`的配置，参考：https://www.webpackjs.com/configuration/dev-server/</span><br><span class="line"></span><br><span class="line">常见配置有：</span><br><span class="line"></span><br><span class="line">- `port`：配置监听端口</span><br><span class="line">- `proxy`：配置代理，常用于跨域访问</span><br><span class="line">- `stats`：配置控制台输出内容</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: &#x27;development&#x27;,</span><br><span class="line">    devtools: &#x27;source-map&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &#x27;scripts/[name].[chunkhash:5].js&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    //开发服务器</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        //配置监听端口</span><br><span class="line">        port: 8000,</span><br><span class="line">        //配置代理，常用于跨域访问</span><br><span class="line">        open: true,</span><br><span class="line">        proxy: &#123; //代理规则</span><br><span class="line">        &quot;/api&quot;: &#123;</span><br><span class="line">                target: &#x27;http://open.duyiedu.com&#x27;,</span><br><span class="line">                changeOrigin: true //更改请求头中的host和origin</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决路径问题"><a href="#解决路径问题" class="headerlink" title="解决路径问题"></a>解决路径问题</h3><p>在使用<code>file-loader</code>或<code>url-loader</code>时，可能会遇到一个非常有趣的问题</p><p>比如，通过<code>webpack</code>打包的目录结构如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">dist</span></span><br><span class="line">    <span class="string">|——</span> <span class="string">img</span></span><br><span class="line">        <span class="string">|——</span> <span class="string">a.png</span>  <span class="comment">#file-loader生成的文件</span></span><br><span class="line">    <span class="string">|——</span> <span class="string">scripts</span></span><br><span class="line">        <span class="string">|——</span> <span class="string">main.js</span>  <span class="comment">#export default &quot;img/a.png&quot;</span></span><br><span class="line">    <span class="string">|——</span> <span class="string">html</span></span><br><span class="line">        <span class="string">|——</span> <span class="string">index.html</span> <span class="comment">#&lt;script src=&quot;.https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/scripts/main.js&quot; &gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>这种问题发生的根本原因：模块中的路径来自于某个<code>loader</code>或<code>plugin</code>，当产生路径时，<code>loader</code>或<code>plugin</code>只有相对于<code>dist</code>目录的路径，并不知道该路径将在哪个资源中使用，从而无法确定最终正确的路径</p><p>面对这种情况，需要依靠<code>webpack</code>的配置<code>publicPath</code>解决</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;scripts/[name].[chunkhash:5].js&quot;</span>,</span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span> <span class="comment">//用这个解决</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png)|(gif)|(jpg)$/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;file-loader&quot;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&quot;imgs/[name].[hash:5].[ext]&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/public/index.html&quot;</span>,</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;html/index.html&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">openPage</span>: <span class="string">&quot;html/index.html&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">stats</span>: &#123;</span><br><span class="line">        <span class="attr">modules</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">colors</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack内置插件"><a href="#webpack内置插件" class="headerlink" title="webpack内置插件"></a>webpack内置插件</h3><p>所有的<code>webpack</code>内置插件都作为<code>webpack</code>的静态属性存在的，使用下面的方式即可创建一个插件对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> webpack.插件名(options)</span><br></pre></td></tr></table></figure><h4 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h4><p>全局常量定义插件，使用该插件通常定义一些常量值，例如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">    <span class="attr">PI</span>: <span class="string">`Math.PI`</span>, <span class="comment">// PI = Math.PI</span></span><br><span class="line">    <span class="attr">VERSION</span>: <span class="string">`&quot;1.0.0&quot;`</span>, <span class="comment">// VERSION = &quot;1.0.0&quot;</span></span><br><span class="line">    <span class="attr">DOMAIN</span>: <span class="built_in">JSON</span>.stringify(<span class="string">&quot;duyi.com&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样一来，在源码中，我们可以直接使用插件中提供的常量，当<code>webpack</code>编译完成后，会自动替换为常量的值</p><h4 id="BannerPlugin"><a href="#BannerPlugin" class="headerlink" title="BannerPlugin"></a>BannerPlugin</h4><p>它可以为每个<code>chunk</code>生成的文件头部添加一行注释，一般用于添加作者、公司、版权等信息</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.BannerPlugin(&#123;</span><br><span class="line">  <span class="attr">banner</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  hash:[hash]</span></span><br><span class="line"><span class="string">  chunkhash:[chunkhash]</span></span><br><span class="line"><span class="string">  name:[name]</span></span><br><span class="line"><span class="string">  author:yuanjin</span></span><br><span class="line"><span class="string">  corporation:duyi</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="ProvidePlugin"><a href="#ProvidePlugin" class="headerlink" title="ProvidePlugin"></a>ProvidePlugin</h4><p>自动加载全局模块，而不必到处 <code>import</code> 或 <code>require</code> </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;  <span class="attr">$</span>: <span class="string">&#x27;jquery&#x27;</span>,  <span class="attr">_</span>: <span class="string">&#x27;lodash&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>然后在我们任意源码中：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#item&#x27;</span>); <span class="comment">// &lt;= 起作用_.drop([1, 2, 3], 2); // &lt;= 起作用</span></span><br></pre></td></tr></table></figure><h4 id="CommonsChunksPlugin"><a href="#CommonsChunksPlugin" class="headerlink" title="CommonsChunksPlugin"></a>CommonsChunksPlugin</h4><ul><li><code>webpack3</code>使用的，已过时</li></ul><p><code>CommonsChunkPlugin</code>是一个可选的用于建立一个独立文件(又称作 <code>chunk</code>)的功能，这个文件包括多个入口 <code>chunk</code> 的公共模块。通过将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存起来到缓存中供后续使用。我们只需在<code>webpack.config.js</code> 添加下面的代码即可。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;    <span class="attr">name</span>:<span class="string">&#x27;commons&#x27;</span>, <span class="comment">//模块名    filename:&#x27;commons.js&#x27;, //资源文件名    minChunks:3 //公共模块如果使用超过3次，就会打包到commons.js&#125;)</span></span><br></pre></td></tr></table></figure><p>创建之后，需要把<code>commons.js</code>引入到<code>html</code>文件中</p><p><a href="https://www.webpackjs.com/plugins/">Plugins | webpack 中文网 (webpackjs.com)更多内置插件</a></p><h2 id="css工程化"><a href="#css工程化" class="headerlink" title="css工程化"></a>css工程化</h2><h3 id="css工程化概述"><a href="#css工程化概述" class="headerlink" title="css工程化概述"></a>css工程化概述</h3><h4 id="css的问题"><a href="#css的问题" class="headerlink" title="css的问题"></a>css的问题</h4><h5 id="类名冲突的问题"><a href="#类名冲突的问题" class="headerlink" title="类名冲突的问题"></a>类名冲突的问题</h5><p>当你写一个<code>css</code>类的时候，你是写全局的类呢，还是写多个层级选择后的类呢？</p><p>你会发现，怎么都不好</p><ul><li>过深的层级不利于编写、阅读、压缩、复用</li><li>过浅的层级容易导致类名冲突</li></ul><p>一旦样式多起来，这个问题就会变得越发严重，其实归根结底，就是类名冲突不好解决的问题</p><h5 id="重复样式"><a href="#重复样式" class="headerlink" title="重复样式"></a>重复样式</h5><p>这种问题就更普遍了，一些重复的样式值总是不断的出现在css代码中，维护起来极其困难</p><p>比如，一个网站的颜色一般就那么几种：</p><ul><li><strong>primary</strong></li><li><strong>info</strong></li><li><strong>warn</strong></li><li><strong>error</strong></li><li><strong>success</strong></li></ul><p>如果有更多的颜色，都是从这些色调中自然变化得来，可以想象，这些颜色会到处充斥到诸如背景、文字、边框中，一旦要做颜色调整，是一个非常大的工程</p><h5 id="css文件细分问题"><a href="#css文件细分问题" class="headerlink" title="css文件细分问题"></a>css文件细分问题</h5><p>在大型项目中，<code>css</code>也需要更细的拆分，这样有利于<code>css</code>代码的维护。</p><p>比如，有一个做轮播图的模块，它不仅需要依赖<code>js</code>功能，还需要依赖<code>css</code>样式，既然依赖的<code>js</code>功能仅关心轮播图，那<code>css</code>样式也应该仅关心轮播图，由此类推，不同的功能依赖不同的<code>css</code>样式、公共样式可以单独抽离，这样就形成了不同于过去的<code>css</code>文件结构：文件更多、拆分的更细</p><p>而同时，在真实的运行环境下，我们却希望文件越少越好，这种情况和<code>JS</code>遇到的情况是一致的</p><p>因此，对于<code>css</code>，也需要工程化管理</p><p>从另一个角度来说，css的工程化会遇到更多的挑战，因为<code>css</code>不像<code>JS</code>，它的语法本身经过这么多年并没有发生多少的变化（<code>css3</code>也仅仅是多了一些属性而已），对于<code>css</code>语法本身的改变也是一个工程化的课题</p><h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><p>这么多年来，官方一直没有提出方案来解决上述问题</p><p>一些第三方机构针对不同的问题，提出了自己的解决方案</p><h5 id="解决类名冲突"><a href="#解决类名冲突" class="headerlink" title="解决类名冲突"></a>解决类名冲突</h5><p>一些第三方机构提出了一些方案来解决该问题，常见的解决方案如下：</p><p><strong>命名约定</strong></p><p>即提供一种命名的标准，来解决冲突，常见的标准有：</p><ul><li><strong>BEM</strong></li><li><strong>OOCSS</strong></li><li><strong>AMCSS</strong></li><li><strong>SMACSS</strong></li><li><strong>其他</strong></li></ul><p><strong>css in js</strong></p><p>这种方案非常大胆，它觉得，<code>css</code>语言本身几乎无可救药了，干脆直接用<code>js</code>对象来表示样式，然后把样式直接应用到元素的style中</p><p>这样一来，<code>css</code>变成了一个一个的对象，就可以完全利用到<code>js</code>语言的优势，你可以：</p><ul><li>通过一个函数返回一个样式对象</li><li>把公共的样式提取到公共模块中返回</li><li>应用<code>js</code>的各种特性操作对象，比如：混合、提取、拆分</li><li>更多的花样</li></ul><blockquote><p>这种方案在手机端的React Native中大行其道</p></blockquote><p><strong>css module</strong></p><p>非常有趣和好用的<code>css</code>模块化方案，编写简单，绝对不重名</p><p>具体的课程中详细介绍</p><h5 id="解决重复样式的问题"><a href="#解决重复样式的问题" class="headerlink" title="解决重复样式的问题"></a>解决重复样式的问题</h5><p><strong>css in js</strong></p><p>这种方案虽然可以利用js语言解决重复样式值的问题，但由于太过激进，很多习惯写css的开发者编写起来并不是很适应</p><p><strong>预编译器</strong></p><p>有些第三方搞出一套css语言的进化版来解决这个问题，它支持变量、函数等高级语法，然后经过编译器将其编译成为正常的css</p><p>这种方案特别像构建工具，不过它仅针对css</p><p>常见的预编译器支持的语言有：</p><ul><li><strong>less</strong></li><li><strong>sass</strong></li></ul><h5 id="解决css文件细分问题"><a href="#解决css文件细分问题" class="headerlink" title="解决css文件细分问题"></a>解决css文件细分问题</h5><p>这一部分，就要依靠构建工具，例如<code>webpack</code>来解决了</p><p>利用一些<code>loader</code>或<code>plugin</code>来打包、合并、压缩<code>css</code>文件</p><h3 id="利用webpack拆分css"><a href="#利用webpack拆分css" class="headerlink" title="利用webpack拆分css"></a>利用webpack拆分css</h3><p>要拆分css，就必须把<code>css</code>当成像<code>js</code>那样的模块；要把<code>css</code>当成模块，就必须有一个构建工具（<code>webpack</code>），它具备合并代码的能力</p><p>而<code>webpack</code>本身只能读取<code>css</code>文件的内容、将其当作<code>JS</code>代码进行分析，因此，会导致错误</p><p>于是，就必须有一个<code>loader</code>，能够将css代码转换为<code>js</code>代码</p><h4 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h4><p><code>css-loader</code>的作用，就是将<code>css</code>代码转换为js代码</p><p>它的处理原理极其简单：将<code>css</code>代码作为字符串导出</p><p>例如：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="string">&quot;#f40&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过css-loader转换后变成js代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">`.red&#123;</span></span><br><span class="line"><span class="string">    color:&quot;#f40&quot;;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的js代码是经过我简化后的，不代表真实的css-loader的转换后代码，css-loader转换后的代码会有些复杂，同时会导出更多的信息，但核心思想不变</p></blockquote><p>再例如：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="string">&quot;#f40&quot;</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/bg.png&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过css-loader转换后变成js代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> import1 = <span class="built_in">require</span>(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/bg.png&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">`.red&#123;</span></span><br><span class="line"><span class="string">    color:&quot;#f40&quot;;</span></span><br><span class="line"><span class="string">    background:url(&quot;<span class="subst">$&#123;import1&#125;</span>&quot;)</span></span><br><span class="line"><span class="string">&#125;`</span>;</span><br></pre></td></tr></table></figure><p>这样一来，经过webpack的后续处理，会把依赖<code>https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/bg.png</code>添加到模块列表，然后再将代码转换为</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> import1 = __webpack_require__(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/bg.png&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">`.red&#123;</span></span><br><span class="line"><span class="string">    color:&quot;#f40&quot;;</span></span><br><span class="line"><span class="string">    background:url(&quot;<span class="subst">$&#123;import1&#125;</span>&quot;)</span></span><br><span class="line"><span class="string">&#125;`</span>;</span><br></pre></td></tr></table></figure><p>再例如：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/reset.css&quot;</span>;</span><br><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="string">&quot;#f40&quot;</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/bg.png&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会转换为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> import1 = <span class="built_in">require</span>(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/reset.css&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> import2 = <span class="built_in">require</span>(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/bg.png&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">`<span class="subst">$&#123;import1&#125;</span></span></span><br><span class="line"><span class="string">.red&#123;</span></span><br><span class="line"><span class="string">    color:&quot;#f40&quot;;</span></span><br><span class="line"><span class="string">    background:url(&quot;<span class="subst">$&#123;import2&#125;</span>&quot;)</span></span><br><span class="line"><span class="string">&#125;`</span>;</span><br></pre></td></tr></table></figure><p>总结，<code>css-loader</code>干了什么：</p><ol><li>将<code>css</code>文件的内容作为字符串导出</li><li>将<code>css</code>中的其他依赖作为<code>require</code>导入，以便<code>webpack</code>分析依赖</li></ol><h4 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h4><p>由于<code>css-loader</code>仅提供了将<code>css</code>转换为字符串导出的能力，剩余的事情要交给其他<code>loader</code>或plugin来处理</p><p><code>style-loader</code>可以将<code>css-loader</code>转换后的代码进一步处理，将<code>css-loader</code>导出的字符串加入到页面的<code>style</code>元素中</p><p>例如：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="string">&quot;#f40&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过<code>css-loader</code>转换后变成<code>js</code>代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">`.red&#123;    color:&quot;#f40&quot;;&#125;`</span></span><br></pre></td></tr></table></figure><p>经过<code>style-loader</code>转换后变成：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">`.red&#123;    color:&quot;#f40&quot;;&#125;`</span><span class="keyword">var</span> style = <span class="built_in">module</span>.exports;<span class="keyword">var</span> styleElem = <span class="built_in">document</span>.createElement(<span class="string">&quot;style&quot;</span>);styleElem.innerHTML = style;<span class="built_in">document</span>.head.appendChild(styleElem);<span class="built_in">module</span>.exports = &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码均为简化后的代码，并不代表真实的代码<br>style-loader有能力避免同一个样式的重复导入</p></blockquote><h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h3><p><code>BEM</code>是一套针对<code>css</code>类样式的命名方法。</p><blockquote><p>其他命名方法还有：OOCSS、AMCSS、SMACSS等等</p></blockquote><p><code>BEM</code>全称是：<strong>B</strong>lock <strong>E</strong>lement <strong>M</strong>odifier</p><p>一个完整的<code>BEM</code>类名：<code>block__element_modifier</code>，例如：<code>banner__dot_selected</code>，可以表示：轮播图中，处于选中状态的小圆点</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111750919.png"></p><p>三个部分的具体含义为：</p><ul><li><strong>Block</strong>：页面中的大区域，表示最顶级的划分，例如：轮播图(<code>banner</code>)、布局(<code>layout</code>)、文章(<code>article</code>)等等</li><li><strong>element</strong>：区域中的组成部分，例如：轮播图中的横幅图片(<code>banner__img</code>)、轮播图中的容器（<code>banner__container</code>）、布局中的头部(<code>layout__header</code>)、文章中的标题(<code>article_title</code>)</li><li><strong>modifier</strong>：可选。通常表示状态，例如：处于展开状态的布局左边栏（<code>layout__left_expand</code>）、处于选中状态的轮播图小圆点(<code>banner__dot_selected</code>)</li></ul><p>在某些大型工程中，如果使用BEM命名法，还可能会增加一个前缀，来表示类名的用途，常见的前缀有：</p><ul><li><strong>l</strong>: <code>layout</code>，表示这个样式是用于布局的</li><li><strong>c</strong>: <code>component</code>，表示这个样式是一个组件，即一个功能区域</li><li><strong>u</strong>: <code>util</code>，表示这个样式是一个通用的、工具性质的样式</li><li><strong>j</strong>: <code>javascript</code>，表示这个样式没有实际意义，是专门提供给js获取元素使用的</li></ul><h3 id="css-in-js"><a href="#css-in-js" class="headerlink" title="css in js"></a>css in js</h3><p><code>css in js</code> 的核心思想是：用一个<code>JS</code>对象来描述样式，而不是<code>css</code>样式表</p><p>例如下面的对象就是一个用于描述样式的对象：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> styles = &#123;    <span class="attr">backgroundColor</span>: <span class="string">&quot;#f40&quot;</span>,    <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span>,    <span class="attr">width</span>: <span class="string">&quot;400px&quot;</span>,    <span class="attr">height</span>: <span class="string">&quot;500px&quot;</span>,    <span class="attr">margin</span>: <span class="string">&quot;0 auto&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>由于这种描述样式的方式<strong>根本就不存在类名</strong>，自然不会有类名冲突</p><p>至于如何把样式应用到界面上，不是它所关心的事情，你可以用任何技术、任何框架、任何方式将它应用到界面。</p><blockquote><p>后续学习的vue、react都支持css in js，可以非常轻松的应用到界面</p></blockquote><p><code>css in js</code>的特点：</p><ul><li><strong>绝无冲突的可能</strong>：由于它根本不存在类名，所以绝不可能出现类名冲突</li><li><strong>更加灵活</strong>：可以充分利用<code>JS</code>语言灵活的特点，用各种招式来处理样式</li><li><strong>应用面更广</strong>：只要支持<code>js</code>语言，就可以支持<code>css in js</code>，因此，在一些用<code>JS</code>语言开发移动端应用的时候非常好用，因为移动端应用很有可能并不支持css</li><li><strong>书写不便</strong>：书写样式，特别是公共样式的时候，处理起来不是很方便</li><li><strong>在页面中增加了大量冗余内容</strong>：在页面中处理<code>css in js</code>时，往往是将样式加入到元素的<code>style</code>属性中，会大量增加元素的内联样式，并且可能会有大量重复，不易阅读最终的页面代码</li></ul><h3 id="css-module"><a href="#css-module" class="headerlink" title="css module"></a>css module</h3><blockquote><p>通过命名规范来限制类名太过死板，而css in js虽然足够灵活，但是书写不便。<br>css module 开辟一种全新的思路来解决类名冲突的问题</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><code>css module</code> 遵循以下思路解决类名冲突问题：</p><ol><li><code>css</code>的类名冲突往往发生在大型项目中</li><li>大型项目往往会使用构建工具（<code>webpack</code>等）搭建工程</li><li>构建工具允许将<code>css</code>样式切分为更加精细的模块</li><li>同<code>JS</code>的变量一样，每个<code>css</code>模块文件中难以出现冲突的类名，冲突的类名往往发生在不同的<code>css</code>模块文件中</li><li>只需要保证构建工具在合并样式代码后不会出现类名冲突即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111744074.png"></p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>在<code>webpack</code>中，作为处理<code>css</code>的<code>css-loader</code>，它实现了<code>css module</code>的思想，要启用<code>css module</code>，需要将<code>css-loader</code>的配置<code>modules</code>设置为<code>true</code>。</p><p><code>css-loader</code>的实现方式如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111744020.png"></p><p>原理极其简单，开启了<code>css module</code>后，<code>css-loader</code>会将样式中的类名进行转换，转换为一个唯一的<code>hash</code>值。</p><p>由于<code>hash</code>值是根据模块路径和类名生成的，因此，不同的<code>css</code>模块，哪怕具有相同的类名，转换后的<code>hash</code>值也不一样。</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111744072.png"></p><h4 id="如何应用样式"><a href="#如何应用样式" class="headerlink" title="如何应用样式"></a>如何应用样式</h4><p><code>css module</code>带来了一个新的问题：源代码的类名和最终生成的类名是不一样的，而开发者只知道自己写的源代码中的类名，并不知道最终的类名是什么，那如何应用类名到元素上呢？</p><p>为了解决这个问题，<code>css-loader</code>会导出原类名和最终类名的对应关系，该关系是通过一个对象描述的</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111744659.png"></p><p>这样一来，我们就可以在<code>js</code>代码中获取到<code>css</code>模块导出的结果，从而应用类名了</p><p><code>style-loader</code>为了我们更加方便的应用类名，会去除掉其他信息，仅暴露对应关系</p><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><h5 id="全局类名"><a href="#全局类名" class="headerlink" title="全局类名"></a>全局类名</h5><p>某些类名是全局的、静态的，不需要进行转换，仅需要在类名位置使用一个特殊的语法即可：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">global</span>(.main)&#123;    ...&#125;</span><br></pre></td></tr></table></figure><p>使用了<code>global</code>的类名不会进行转换，相反的，没有使用<code>global</code>的类名，表示默认使用了<code>local</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">local</span>(.main)&#123;    ...&#125;</span><br></pre></td></tr></table></figure><p>使用了<code>local</code>的类名表示局部类名，是可能会造成冲突的类名，会被<code>css module</code>进行转换</p><h5 id="如何控制最终的类名"><a href="#如何控制最终的类名" class="headerlink" title="如何控制最终的类名"></a>如何控制最终的类名</h5><p>绝大部分情况下，我们都不需要控制最终的类名，因为控制它没有任何意义</p><p>如果一定要控制最终的类名，需要配置<code>css-loader</code>的<code>localIdentName</code></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两种实现方法,实现css-modules，需要使用构建工具</span></span><br><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="attr">module</span>: &#123;    </span><br><span class="line">    <span class="attr">rules</span>: [        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, use: [</span><br><span class="line">                <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">modules</span>: &#123;</span><br><span class="line">                            <span class="attr">localIdentName</span>: <span class="string">&quot;[local]-[hash:5]&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="attr">modules</span>:<span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],         </span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, use:[<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader?modules&quot;</span>]        </span><br><span class="line">&#125;    </span><br><span class="line">]</span><br><span class="line">&#125;,    </span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> style1 <span class="keyword">from</span><span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/assets/style1.css&quot;</span> <span class="comment">//引入css文件</span></span><br><span class="line"><span class="keyword">import</span> style2 <span class="keyword">from</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/assets/style2.css&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(style1)</span><br><span class="line"><span class="comment">//将元素div1的class类名更改为module之后的类名</span></span><br><span class="line"><span class="keyword">const</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);div1.className = style2.c1;</span><br></pre></td></tr></table></figure><h4 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h4><ul><li><code>css module</code>往往配合构建工具使用</li><li><code>css module</code>仅处理顶级类名，尽量不要书写嵌套的类名，也没有这个必要</li><li><code>css module</code>仅处理类名，不处理其他选择器</li><li><code>css module</code>还会处理id选择器，不过任何时候都没有使用id选择器的理由</li><li>使用了<code>css module</code>后，只要能做到让类名望文知意即可，不需要遵守其他任何的命名规范</li></ul><h3 id="CSS预编译器-less"><a href="#CSS预编译器-less" class="headerlink" title="CSS预编译器{less}"></a>CSS预编译器{less}</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>编写<code>css</code>时，受限于<code>css</code>语言本身，常常难以处理一些问题：</p><ul><li>重复的样式值：例如常用颜色、常用尺寸</li><li>重复的代码段：例如绝对定位居中、清除浮动</li><li>重复的嵌套书写</li></ul><p>由于官方迟迟不对<code>css</code>语言本身做出改进，一些第三方机构开始想办法来解决这些问题</p><p>其中一种方案，便是预编译器</p><p>预编译器的原理很简单，即使用一种更加优雅的方式来书写样式代码，通过一个编译器，将其转换为可被浏览器识别的传统<code>css</code>代码</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111744691.png"></p><p>目前，最流行的预编译器有<strong>LESS</strong>和<strong>SASS</strong>，由于它们两者特别相似，因此仅学习一种即可（本课程学习<code>LESS</code>）</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111744904.png"></p><blockquote><p>less官网：<a href="http://lesscss.org/">http://lesscss.org/</a><br>less中文文档1（非官方）：<a href="http://lesscss.cn/">http://lesscss.cn/</a><br>less中文文档2（非官方）：<a href="https://less.bootcss.com/">https://less.bootcss.com/</a><br>sass官网：<a href="https://sass-lang.com/">https://sass-lang.com/</a><br>sass中文文档1（非官方）：<a href="https://www.sass.hk/">https://www.sass.hk/</a><br>sass中文文档2（非官方）：<a href="https://sass.bootcss.com/">https://sass.bootcss.com/</a></p></blockquote><h4 id="LESS的安装和使用"><a href="#LESS的安装和使用" class="headerlink" title="LESS的安装和使用"></a>LESS的安装和使用</h4><p>从原理可知，要使用<code>LESS</code>，必须要安装LESS编译器</p><p><code>LESS</code>编译器是基于<code>node</code>开发的，可以通过<code>npm</code>下载安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -D less</span><br></pre></td></tr></table></figure><p>安装好了<code>less</code>之后，它提供了一个CLI工具<code>lessc</code>，通过该工具即可完成编译</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lessc less代码文件 编译后的文件</span><br></pre></td></tr></table></figure><p>试一试:</p><p>新建一个<code>index.less</code>文件，编写内容如下：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// less代码@red: #f40;.redcolor &#123;    color: @red;&#125;</span></span><br></pre></td></tr></table></figure><p>运行命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lessc index.less index.css</span><br></pre></td></tr></table></figure><p>可以看到编译之后的代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.redcolor</span> &#123;  <span class="attribute">color</span>: <span class="number">#f40</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="LESS的基本使用"><a href="#LESS的基本使用" class="headerlink" title="LESS的基本使用"></a>LESS的基本使用</h4><h5 id="什么是Less"><a href="#什么是Less" class="headerlink" title="什么是Less"></a>什么是Less</h5><ul><li><code>Less Css</code>是一种动态样式语言，属于<code>css</code>预处理语言的一种</li><li>它使用类似<code>css</code>的语法为<code>CSS</code>的赋予了动态的特性，</li><li>如变量，继承，运算，函数等，更方便<code>css</code>的编写和维护实现<code>css</code>模块化。</li><li>作为一种 <code>CSS</code> 扩展, <code>Less</code> 不仅向后兼容 <code>CSS</code>, 它还使用现有的 <code>CSS</code> 语法新增了额外的特性. 这使得学习 <code>Less</code> 更轻松, 一旦有任何问题，可以随时退回使用标准的 <code>CSS</code>.</li><li><code>less css</code>可以在多种语言，环境中使用，包括浏览器端，桌面客户端，服务端</li><li>配置<code>loader</code><ul><li>安装<code>npm install less-loader less --save-dev</code></li></ul></li></ul><h5 id="Less语法"><a href="#Less语法" class="headerlink" title="Less语法"></a>Less语法</h5><ul><li><p>注释：<code>//</code>不会被编译   <code>/**/</code>此注释会被编译</p></li><li><p>变量：声明变量 <code>@a:300px</code> 使用变量：<code>.box &#123;width:@a;&#125;</code></p></li><li><p>混合</p><ul><li>```less<br>@gr:yellow;<br>@height:100px;<br>.border(@width,@color);{ <pre><code>/*并没有这个DOM元素，但是可以把这个定义为一组变量*/   border:@width solid @color;//width和color属于参数，调用时可以传参</code></pre>}<br>body,html{    <pre><code>width:100%;    height:100%;    background:@gr;    img &#123;            width:100px;            height: @height;            .border(&#39;5px&#39;,green);    //给img添加border,并传参    &#125;</code></pre>}//小三角<br>.triangleStyle(@_,@color) { <pre><code>//@_代表公共样式，可以传入上下左右方向    border: 50px solid transparent;</code></pre>}<br>.triangleStyle(top,@color){<pre><code>border-bottom-color:@color;</code></pre>}<br>.triangleStyle(bottom,@color) {    <pre><code>border-top-color:@color;</code></pre>}<br>.triangleStyle(left,@color){    <pre><code>border-right-color:@color;</code></pre>}<br>.triangleStyle(right,@color){    <pre><code>border-left-color:@color;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 样式属性计算</span><br><span class="line"></span><br><span class="line">  - ```less</span><br><span class="line">    .box &#123;</span><br><span class="line">        width:300px;</span><br><span class="line">        .triangle&#123;        </span><br><span class="line">            //属性值可以进行计算,css3也有一个方法可以计算(calc())</span><br><span class="line">            width:100px + 50px;</span><br><span class="line">            height: 0;</span><br><span class="line">            .triangleStyle(bottom,blue)</span><br><span class="line">        &#125;</span><br><span class="line">        //需要使用伪元素的时候，使用&amp;，代表当前元素    </span><br><span class="line">        &amp;：hover &#123;</span><br><span class="line">            width:500px;</span><br><span class="line">            height:500px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h5><p>具体的使用见文档：<a href="https://less.bootcss.com/">https://less.bootcss.com/</a></p><ul><li>变量</li><li>混合</li><li>嵌套</li><li>运算</li><li>函数</li><li>作用域</li><li>注释</li><li>导入</li></ul><h3 id="PostCss"><a href="#PostCss" class="headerlink" title="PostCss"></a>PostCss</h3><blockquote><p>本节课的内容和webpack无关！！！</p></blockquote><h4 id="什么是PostCss"><a href="#什么是PostCss" class="headerlink" title="什么是PostCss"></a>什么是PostCss</h4><p>学习到现在，可以看出，<code>CSS</code>工程化面临着诸多问题，而解决这些问题的方案多种多样。</p><p>如果把<code>CSS</code>单独拎出来看，光是样式本身，就有很多事情要处理。</p><p>既然有这么多事情要处理，何不把这些事情集中到一起统一处理呢？</p><p><code>PostCss</code>就是基于这样的理念出现的。</p><p><code>PostCss</code>类似于一个编译器，可以将样式源码编译成最终的<code>CSS</code>代码</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111745786.png"></p><p>看上去是不是和<code>LESS</code>、<code>SASS</code>一样呢？</p><p>但<code>PostCss</code>和<code>LESS</code>、<code>SASS</code>的思路不同，它其实只做一些代码分析之类的事情，将分析的结果交给插件，具体的代码转换操作是插件去完成的。</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111745688.png"></p><p>官方的一张图更能说明<code>postcss</code>的处理流程：</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111745727.png"></p><blockquote><p>这一点有点像webpack，webpack本身仅做依赖分析、抽象语法树分析，其他的操作是靠插件和加载器完成的。</p></blockquote><p>官网地址：<a href="https://postcss.org/">https://postcss.org/</a><br>        github地址：<a href="https://github.com/postcss/postcss">https://github.com/postcss/postcss</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>PostCss</code>是基于<code>node</code>编写的，因此可以使用<code>npm</code>安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -D postcss</span><br></pre></td></tr></table></figure><p><code>postcss</code>库提供了对应的js api用于转换代码，如果你想使用postcss的一些高级功能，或者想开发<code>postcss</code>插件，就要<code>api</code>使用<code>postcss</code>，<code>api</code>的文档地址是：<a href="http://api.postcss.org/">http://api.postcss.org/</a></p><p>不过绝大部分时候，我们都是使用者，并不希望使用代码的方式来使用<code>PostCss</code></p><p>因此，我们可以再安装一个<code>postcss-cli</code>，通过命令行来完成编译</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -D postcss-cli</span><br></pre></td></tr></table></figure><p><code>postcss-cli</code>提供一个命令，它调用<code>postcss</code>中的<code>api</code>来完成编译</p><p>命令的使用方式为：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">postcss 源码文件 -o 输出文件</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>和<code>webpack</code>类似，<code>postcss</code>有自己的配置文件，该配置文件会影响<code>postcss</code>的某些编译行为。</p><p>配置文件的默认名称是：<code>postcss.config.js</code></p><p>例如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">map</span>: <span class="literal">false</span>, <span class="comment">//关闭source-map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>光使用postcss是没有多少意义的，要让它真正的发挥作用，需要插件</p><p><code>postcss</code>的插件市场：<a href="https://www.postcss.parts/">https://www.postcss.parts/</a></p><p>下面罗列一些<code>postcss</code>的常用插件</p><h5 id="postcss-preset-env"><a href="#postcss-preset-env" class="headerlink" title="postcss-preset-env"></a>postcss-preset-env</h5><p>过去使用<code>postcss</code>的时候，往往会使用大量的插件，它们各自解决一些问题</p><p>这样导致的结果是安装插件、配置插件都特别的繁琐</p><p>于是出现了这么一个插件<code>postcss-preset-env</code>，它称之为<code>postcss预设环境</code>，大意就是它整合了很多的常用插件到一起，并帮你完成了基本的配置，你只需要安装它一个插件，就相当于安装了很多插件了。</p><p>安装好该插件后，在<code>postcss</code>配置中加入下面的配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">        <span class="string">&quot;postcss-preset-env&quot;</span>: &#123;&#125; <span class="comment">// &#123;&#125; 中可以填写插件的配置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该插件的功能很多，下面一一介绍</p><h6 id="自动的厂商前缀"><a href="#自动的厂商前缀" class="headerlink" title="自动的厂商前缀"></a>自动的厂商前缀</h6><p>某些新的<code>css</code>样式需要在旧版本浏览器中使用厂商前缀方可实现</p><p>例如</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该功能在不同的旧版本浏览器中需要书写为</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">::-webkit-input-placeholder &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">::-moz-placeholder &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">:-ms-input-placeholder &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">::-ms-input-placeholder &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要完成这件事情，需要使用<code>autoprefixer</code>库。</p><p>而<code>postcss-preset-env</code>内部包含了该库，自动有了该功能。</p><p>如果需要调整<strong>兼容的浏览器</strong>范围，可以通过下面的方式进行配置</p><p><strong>方式1：在postcss-preset-env的配置中加入browsers</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">        <span class="string">&quot;postcss-preset-env&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">browsers</span>: [</span><br><span class="line">                <span class="string">&quot;last 2 version&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&gt; 1%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式2【推荐】：添加 .browserslistrc 文件</strong></p><p>创建文件<code>.browserslistrc</code>，填写配置内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">last 2 version</span><br><span class="line">&gt; 1%</span><br></pre></td></tr></table></figure><p><strong>方式3【推荐】：在package.json的配置中加入browserslist</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;browserslist&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;last 2 version&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt; 1%&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>browserslist</code>是一个多行的（数组形式的）标准字符串。</p><p>它的书写规范多而繁琐，详情见：<a href="https://github.com/browserslist/browserslist">https://github.com/browserslist/browserslist</a></p><p>一般情况下，大部分网站都使用下面的格式进行书写</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">last 2 version</span><br><span class="line">&gt; 1% in CN</span><br><span class="line">not ie &lt;= 8</span><br></pre></td></tr></table></figure><ul><li><code>last 2 version</code>: 浏览器的兼容最近期的两个版本</li><li><code>&gt; 1% in CN</code>: 匹配中国大于<code>1%</code>的人使用的浏览器， <code>in CN</code>可省略</li><li><code>not ie &lt;= 8</code>: 排除掉版本号小于等于8的IE浏览器</li></ul><blockquote><p>默认情况下，匹配的结果求的是并集</p></blockquote><p>你可以通过网站：<a href="https://browserl.ist/">https://browserl.ist/</a> 对配置结果覆盖的浏览器进行查询，查询时，多行之间使用英文逗号分割</p><blockquote><p>browserlist的数据来自于<a href="http://caniuse.com/">CanIUse</a>网站，由于数据并非实时的，所以不会特别准确</p></blockquote><h6 id="未来的CSS语法"><a href="#未来的CSS语法" class="headerlink" title="未来的CSS语法"></a>未来的CSS语法</h6><p>CSS的某些前沿语法正在制定过程中，没有形成真正的标准，如果希望使用这部分语法，为了浏览器兼容性，需要进行编译</p><p>过去，完成该语法编译的是<code>cssnext</code>库，不过有了<code>postcss-preset-env</code>后，它自动包含了该功能。</p><p>你可以通过<code>postcss-preset-env</code>的<code>stage</code>配置，告知<code>postcss-preset-env</code>需要对哪个阶段的css语法进行兼容处理，它的默认值为2</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;postcss-preset-env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">stage</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一共有5个阶段可配置：</p><ul><li><code>Stage 0</code>: <code>Aspirational</code> - 只是一个早期草案，极其不稳定</li><li><code>Stage 1</code>: <code>Experimental</code> - 仍然极其不稳定，但是提议已被<code>W3C</code>公认</li><li><code>Stage 2</code>: <code>Allowable</code> - 虽然还是不稳定，但已经可以使用了</li><li><code>Stage 3</code>: <code>Embraced</code> - 比较稳定，可能将来会发生一些小的变化，它即将成为最终的标准</li><li><code>Stage 4</code>: <code>Standardized</code> - 所有主流浏览器都应该支持的<code>W3C</code>标准</li></ul><p>了解了以上知识后，接下来了解一下未来的<code>css</code>语法，尽管某些语法仍处于非常早期的阶段，但是有该插件存在，编译后仍然可以被浏览器识别</p><ul><li><p><strong>变量</strong></p><ul><li><p>未来的<code>css</code>语法是天然支持变量的</p></li><li><p>在<code>:root&#123;&#125;</code>中定义常用变量，使用<code>--</code>前缀命名变量</p></li><li><p>```css<br>:root{<br>  –lightColor: #ddd;<br>  –darkColor: #333;<br>}<br>a{</p><pre><code>color: var(--lightColor);background: var(--darkColor);</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - &gt; 编译后，仍然可以看到原语法，因为某些新语法的存在并不会影响浏览器的渲染，尽管浏览器可能不认识</span><br><span class="line">    &gt; 如果不希望在结果中看到新语法，可以配置`postcss-preset-env`的`preserve`为`false`</span><br><span class="line"></span><br><span class="line">- **自定义选择器**</span><br><span class="line"></span><br><span class="line">  - ```css</span><br><span class="line">    @custom-selector :--heading h1, h2, h3, h4, h5, h6;</span><br><span class="line">    @custom-selector :--enter :focus,:hover;</span><br><span class="line">    </span><br><span class="line">    a:--enter&#123;</span><br><span class="line">        color: #f40;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    :--heading&#123;</span><br><span class="line">        font-weight:bold;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    :--heading.active&#123;</span><br><span class="line">        font-weight:bold;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>编译后</p></li><li><p>```css<br>a:focus,a:hover{</p><pre><code>color: #f40;</code></pre><p>}</p><p>h1,h2,h3,h4,h5,h6{</p><pre><code>font-weight:bold;</code></pre><p>}</p><p>h1.active,h2.active,h3.active,h4.active,h5.active,h6.active{</p><pre><code>font-weight:bold;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **嵌套**</span><br><span class="line"></span><br><span class="line">  - 与`LESS`相同，只不过嵌套的选择器前必须使用符号`&amp;`</span><br><span class="line"></span><br><span class="line">  - ```css</span><br><span class="line">    .a &#123;</span><br><span class="line">        color: red;</span><br><span class="line">        &amp; .b &#123;</span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        &amp; &gt; .b &#123;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            color: #000;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li><p>编译后</p></li><li><p>```css<br>.a {</p><pre><code>color: red</code></pre><p>}</p><p>.a .b {</p><pre><code>color: green;</code></pre><p>}</p><p>.a&gt;.b {</p><pre><code>color: blue;</code></pre><p>}</p><p>.a:hover {</p><pre><code>color: #000;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### postcss-apply</span><br><span class="line"></span><br><span class="line">该插件可以支持在`css`中书写属性集</span><br><span class="line"></span><br><span class="line">类似于`LESS`中的混入，可以利用`CSS`的新语法定义一个`CSS`代码片段，然后在需要的时候应用它</span><br><span class="line"></span><br><span class="line">```less</span><br><span class="line">:root &#123;</span><br><span class="line">  --center: &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translate(-50%, -50%);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item&#123;</span><br><span class="line">    @apply --center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>编译后</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际上，该功能也属于cssnext，不知为何<code>postcss-preset-env</code>没有支持</p></blockquote><h5 id="postcss-color-function"><a href="#postcss-color-function" class="headerlink" title="postcss-color-function"></a>postcss-color-function</h5><p>该插件支持在源码中使用一些颜色函数</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 使用颜色#aabbcc，不做任何处理，等同于直接书写 #aabbcc */</span></span><br><span class="line">    <span class="attribute">color</span>: color(<span class="number">#aabbcc</span>);</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc透明度设置为90% */</span></span><br><span class="line">    <span class="attribute">color</span>: color(<span class="number">#aabbcc</span> a(<span class="number">90%</span>));</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc的红色部分设置为90% */</span></span><br><span class="line">    <span class="attribute">color</span>: color(<span class="number">#aabbcc</span> red(<span class="number">90%</span>));</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc调亮50%（更加趋近于白色），类似于less中的lighten函数 */</span></span><br><span class="line">    <span class="attribute">color</span>: color(<span class="number">#aabbcc</span> tint(<span class="number">50%</span>));</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc调暗50%（更加趋近于黑色），类似于less中的darken函数 */</span></span><br><span class="line">    <span class="attribute">color</span>: color(<span class="number">#aabbcc</span> shade(<span class="number">50%</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 使用颜色#aabbcc，不做任何处理，等同于直接书写 #aabbcc */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">170</span>, <span class="number">187</span>, <span class="number">204</span>);</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc透明度设置为90% */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">170</span>, <span class="number">187</span>, <span class="number">204</span>, <span class="number">0.9</span>);</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc的红色部分设置为90% */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">230</span>, <span class="number">187</span>, <span class="number">204</span>);</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc调亮50%（更加趋近于白色），类似于less中的lighten函数 */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">213</span>, <span class="number">221</span>, <span class="number">230</span>);</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc调暗50%（更加趋近于黑色），类似于less中的darken函数 */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">85</span>, <span class="number">94</span>, <span class="number">102</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="扩展-postcss-import"><a href="#扩展-postcss-import" class="headerlink" title="[扩展]postcss-import"></a>[扩展]postcss-import</h5><p>该插件可以让你在<code>postcss</code>文件中导入其他样式代码，通过该插件可以将它们合并</p><blockquote><p>由于后续的课程中，会将postcss加入到webpack中，而webpack本身具有依赖分析的功能，所以该插件的实际意义不大</p></blockquote><h5 id="stylelint"><a href="#stylelint" class="headerlink" title="stylelint"></a>stylelint</h5><blockquote><p>官网：<a href="https://stylelint.io/">https://stylelint.io/</a></p></blockquote><p>在实际的开发中，我们可能会错误的或不规范的书写一些<code>css</code>代码，<code>stylelint</code>插件会即时的发现错误</p><p>由于不同的公司可能使用不同的<code>CSS</code>书写规范，<code>stylelint</code>为了保持灵活，它本身并没有提供具体的规则验证</p><p>你需要安装或自行编写规则验证方案</p><p>通常，我们会安装<code>stylelint-config-standard</code>库来提供标准的CSS规则判定</p><p>安装好后，我们需要告诉<code>stylelint</code>使用该库来进行规则验证</p><p>告知的方式有多种，比较常见的是使用文件<code>.stylelintrc</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.styleintrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;stylelint-config-standard&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，如果你的代码出现不规范的地方，编译时将会报出错误</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: #f4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111745671.png"></p><p>发生了两处错误：</p><ol><li>缩进应该只有两个空格</li><li>十六进制的颜色值不正确</li></ol><p>如果某些规则并非你所期望的，可以在配置中进行设置</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;stylelint-config-standard&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;indentation&quot;</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置为<code>null</code>可以禁用该规则，或者设置为4，表示一个缩进有4个空格。具体的设置需要参见<code>stylelint</code>文档：<a href="https://stylelint.io/">https://stylelint.io/</a></p><p>但是这种错误报告需要在编译时才会发生，如果我希望在编写代码时就自动在编辑器里报错呢？</p><p>既然想在编辑器里达到该功能，那么就要在编辑器里做文章</p><p>安装<code>vscode</code>的插件<code>stylelint</code>即可，它会读取你工程中的配置文件，按照配置进行实时报错</p><blockquote><p>实际上，如果你拥有了<code>stylelint</code>插件，可以不需要在postcss中使用该插件了</p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li><p>文件结构</p><ul><li><p>```json<br>│  .browserslistrc //兼容浏览器，配置文件(手动配置)<br>│  .stylelintrc //书写规范(自动配置)<br>│<br>│  package-lock.json //webpack的配置文件(自动生成)<br>│  package.json //webpack的初始化文件(自动生成)<br>│<br>│  postcss.config.js //postcss配置文件(手动配置)<br>│  webpack.config.js //webpack配置文件(手动配置)<br>│<br>├─public<br>│      index.html //html文件<br>│<br>└─src</p><pre><code>│  index.js //js文件│  └─assets        index.pcss //前瞻的css文件</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 配置</span><br><span class="line"></span><br><span class="line">  - ```json</span><br><span class="line">    ├─├─package.json</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;test&quot;,</span><br><span class="line">      &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;&quot;,</span><br><span class="line">      &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">      &quot;scripts&quot;: &#123;</span><br><span class="line">        &quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">        &quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;author&quot;: &quot;&quot;,</span><br><span class="line">      &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">      &quot;devDependencies&quot;: &#123;</span><br><span class="line">        &quot;css-loader&quot;: &quot;^3.4.2&quot;,</span><br><span class="line">        &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class="line">        &quot;postcss&quot;: &quot;^7.0.36&quot;,</span><br><span class="line">        &quot;postcss-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">        &quot;postcss-preset-env&quot;: &quot;^6.7.0&quot;,</span><br><span class="line">        &quot;style-loader&quot;: &quot;^1.1.3&quot;,</span><br><span class="line">        &quot;stylelint-config-standard&quot;: &quot;^19.0.0&quot;,</span><br><span class="line">        &quot;webpack&quot;: &quot;^4.41.5&quot;,</span><br><span class="line">        &quot;webpack-cli&quot;: &quot;^3.3.10&quot;,</span><br><span class="line">        &quot;webpack-dev-server&quot;: &quot;^3.11.2&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>```css<br>├─├─index.html<br>HTML5结构，没有内容</p><p>├─├─index.pcss<br>:root {<br>–dangerColor: #f40;<br>}</p><p>.danger {<br>color: var(–dangerColor);<br>}</p><p>├─├─index.js<br>import styles from  “<a href="https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/assets/index.pcss&quot;">https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/assets/index.pcss&quot;</a>;<br>console.log(styles)</p><p>├─├─webpack.config.js<br>module.exports = {</p><pre><code>map: false, //关闭source-mapplugins: &#123;    &quot;postcss-preset-env&quot;: &#123;        stage: 0, //哪怕是处于草案阶段的语法，也需要转换        preserve: false    &#125;&#125;</code></pre><p>}</p><p>├─├─webpack.config.js<br>const HtmlWebpackPlugin = require(“html-webpack-plugin”)<br>module.exports = {</p><pre><code>mode: &quot;development&quot;,devtool: &quot;source-map&quot;,module: &#123;    rules: [        &#123;            test: /\.pcss$/, use: [&quot;style-loader&quot;, &quot;css-loader?modules&quot;, &quot;postcss-loader&quot;]        &#125;    ]&#125;,devServer: &#123;    open: true&#125;,plugins: [    new HtmlWebpackPlugin(&#123;        template: &quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/public/index.html&quot;    &#125;)]</code></pre><p>}</p><p>├─├─.stylelintrc<br>{</p><pre><code>&quot;extends&quot;: &quot;stylelint-config-standard&quot;,&quot;rules&quot;: &#123;    &quot;indentation&quot;: 4 //空格为4个，标准，如果不是4个，就会报错&#125;</code></pre><p>}</p><p>├─├─.browserslistrc<br>last 3 version</p><blockquote><p>1%<br>not ie &lt;= 8</p></blockquote><p>然后使用webpack进行打包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 分离css文件</span><br><span class="line"></span><br><span class="line">目前，`css`代码被`css-loader`转换后，交给的是`style-loader`进行处理。</span><br><span class="line"></span><br><span class="line">`style-loader`使用的方式是用一段`js`代码，将样式加入到`style`元素中。</span><br><span class="line"></span><br><span class="line">而实际的开发中，我们往往希望依赖的样式最终形成一个css文件</span><br><span class="line"></span><br><span class="line">此时，就需要用到一个库：`mini-css-extract-plugin`</span><br><span class="line"></span><br><span class="line">该库提供了1个`plugin`和1个`loader`</span><br><span class="line"></span><br><span class="line">- `plugin`：负责生成`css`文件</span><br><span class="line">- `loader`：负责记录要生成的`css`文件的内容，同时导出开启`css-module`后的样式对象</span><br><span class="line"></span><br><span class="line">使用方式：</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/, </span><br><span class="line">                use: [</span><br><span class="line">                    MiniCssExtractPlugin.loader, </span><br><span class="line">                    &quot;css-loader?modules&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename:&#x27;css/[name].css&#x27;, //生成的css文件名</span><br><span class="line">        chunkFilename: &#x27;css/[id].css&#x27;</span><br><span class="line">        &#125;) //负责生成css文件</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>配置生成的文件名</strong></p><p>同<code>output.filename</code>的含义一样，即根据<code>chunk</code>生成的样式文件名</p><p>配置生成的文件名，例如<code>[name].[contenthash:5].css</code></p><p>默认情况下，每个<code>chunk</code>对应一个<code>css</code>文件</p><h2 id="JS兼容性"><a href="#JS兼容性" class="headerlink" title="JS兼容性"></a>JS兼容性</h2><h3 id="babel的安装和使用"><a href="#babel的安装和使用" class="headerlink" title="babel的安装和使用"></a>babel的安装和使用</h3><blockquote><p>官网：<a href="https://babeljs.io/">https://babeljs.io/</a><br>民间中文网：<a href="https://www.babeljs.cn/">https://www.babeljs.cn/</a></p></blockquote><h4 id="babel简介"><a href="#babel简介" class="headerlink" title="babel简介"></a>babel简介</h4><p><code>babel</code>一词来自于希伯来语，直译为巴别塔</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111745841.png"></p><p>巴别塔象征的统一的国度、统一的语言</p><p>而今天的<code>JS</code>世界缺少一座巴别塔，不同版本的浏览器能识别的<code>ES</code>标准并不相同，就导致了开发者面对不同版本的浏览器要使用不同的语言，和古巴比伦一样，前端开发也面临着这样的困境。</p><p><code>babel</code>的出现，就是用于解决这样的问题，它是一个编译器，可以把不同标准书写的语言，编译为统一的、能被各种浏览器识别的语言</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111745225.png"></p><p>由于语言的转换工作灵活多样，<code>babel</code>的做法和<code>postcss</code>、<code>webpack</code>差不多，它本身仅提供一些分析功能，真正的转换需要依托于插件完成</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111745908.png"></p><h4 id="babel的安装"><a href="#babel的安装" class="headerlink" title="babel的安装"></a>babel的安装</h4><p><code>babel</code>可以和构建工具联合使用，也可以独立使用</p><p>如果要独立的使用<code>babel</code>，需要安装下面两个库：</p><ul><li><code>@babel/core</code>：<code>babel</code>核心库，提供了编译所需的所有<code>api</code></li><li><code>@babel/cli</code>：提供一个命令行工具，调用核心库的<code>api</code>完成编译</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -D @babel/core @babel/cli</span><br></pre></td></tr></table></figure><h4 id="babel的使用"><a href="#babel的使用" class="headerlink" title="babel的使用"></a>babel的使用</h4><p><code>@babel/cli</code>的使用极其简单</p><p>它提供了一个命令<code>babel</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 按文件编译</span></span><br><span class="line">babel 要编译的文件 -o 编辑结果文件</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按目录编译</span></span><br><span class="line">babel 要编译的整个目录 -d 编译结果放置的目录</span><br></pre></td></tr></table></figure><h4 id="babel的配置"><a href="#babel的配置" class="headerlink" title="babel的配置"></a>babel的配置</h4><p>可以看到，<code>babel</code>本身没有做任何事情，真正的编译要依托于<strong>babel插件</strong>和<strong>babel预设</strong>来完成</p><blockquote><p>babel预设和postcss预设含义一样，是多个插件的集合体，用于解决一系列常见的兼容问题</p></blockquote><p>如何告诉<code>babel</code>要使用哪些插件或预设呢？需要通过一个配置文件<code>.babelrc</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babel预设"><a href="#babel预设" class="headerlink" title="babel预设"></a>babel预设</h3><p><code>babel</code>有多种预设，最常见的预设是<code>@babel/preset-env</code></p><p><code>@babel/preset-env</code>可以让你使用最新的<code>JS</code>语法，而无需针对每种语法转换设置具体的插件</p><p><strong>配置</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;@babel/preset-env&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>兼容的浏览器</strong></p><p><code>@babel/preset-env</code>需要根据兼容的浏览器范围来确定如何编译，和<code>postcss</code>一样，可以使用文件<code>.browserslistrc</code>来描述浏览器的兼容范围</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">last 3 version</span><br><span class="line">&gt; 1%</span><br><span class="line">not ie &lt;= 8</span><br></pre></td></tr></table></figure><p><strong>自身的配置</strong></p><p>和<code>postcss-preset-env</code>一样，<code>@babel/preset-env</code>自身也有一些配置</p><blockquote><p>具体的配置见：<a href="https://www.babeljs.cn/docs/babel-preset-env#options">https://www.babeljs.cn/docs/babel-preset-env#options</a></p></blockquote><p>配置方式是：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        [<span class="string">&quot;@babel/preset-env&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">&quot;配置项1&quot;</span>: <span class="string">&quot;配置值&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;配置项2&quot;</span>: <span class="string">&quot;配置值&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;配置项3&quot;</span>: <span class="string">&quot;配置值&quot;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中一个比较常见的配置项是<code>usebuiltins</code>，该配置的默认值是false</p><p>它有什么用呢？由于该预设仅转换新的语法，并不对新的API进行任何处理</p><p>例如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    resolve()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>转换的结果为</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果遇到没有<code>Promise</code>构造函数的旧版本浏览器，该代码就会报错</p><p>而配置<code>usebuiltins</code>可以在编译结果中注入这些新的<code>API</code>，它的值默认为<code>false</code>，表示不注入任何新的<code>API</code>，可以将其设置为<code>usage</code>，表示根据<code>API</code>的使用情况，按需导入<code>API</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        [<span class="string">&quot;@babel/preset-env&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;corejs&quot;</span>: <span class="number">3</span></span><br><span class="line">        &#125;]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babel插件"><a href="#babel插件" class="headerlink" title="babel插件"></a>babel插件</h3><blockquote><p>上节课补充：@babel/polyfill 已过时，目前被<code>core-js</code>和<code>generator-runtime</code>所取代</p></blockquote><p>除了预设可以转换代码之外，插件也可以转换代码，它们的顺序是：</p><ul><li>插件在 <code>Presets</code> 前运行。</li><li>插件顺序从前往后排列。</li><li><code>Preset</code> 顺序是颠倒的（从后往前）。</li></ul><p>通常情况下，<code>@babel/preset-env</code>只转换那些已经形成正式标准的语法，对于某些处于早期阶段、还没有确定的语法不做转换。</p><p>如果要转换这些语法，就要单独使用插件</p><p>下面随便列举一些插件</p><h4 id="babel-plugin-proposal-class-properties"><a href="#babel-plugin-proposal-class-properties" class="headerlink" title="@babel/plugin-proposal-class-properties"></a><code>@babel/plugin-proposal-class-properties</code></h4><p>该插件可以让你在类中书写初始化字段</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.b = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babel-plugin-proposal-function-bind"><a href="#babel-plugin-proposal-function-bind" class="headerlink" title="@babel/plugin-proposal-function-bind"></a><code>@babel/plugin-proposal-function-bind</code></h4><p>该插件可以让你轻松的为某个方法绑定this</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.loginId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">loginId</span>: <span class="string">&quot;abc&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj::Print(); <span class="comment">//相当于：Print.call(obj);</span></span><br></pre></td></tr></table></figure><blockquote><p>遗憾的是，目前vscode无法识别该语法，会在代码中报错，虽然并不会有什么实际性的危害，但是影响观感</p></blockquote><h4 id="babel-plugin-proposal-optional-chaining"><a href="#babel-plugin-proposal-optional-chaining" class="headerlink" title="@babel/plugin-proposal-optional-chaining"></a><code>@babel/plugin-proposal-optional-chaining</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: &#123;</span><br><span class="line">    <span class="attr">bar</span>: &#123;</span><br><span class="line">      <span class="attr">baz</span>: <span class="number">42</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baz = obj?.foo?.bar?.baz; <span class="comment">// 42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> safe = obj?.qux?.baz; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="babel-plugin-transform-remove-console"><a href="#babel-plugin-transform-remove-console" class="headerlink" title="babel-plugin-transform-remove-console"></a><code>babel-plugin-transform-remove-console</code></h4><p>该插件会移除源码中的控制台输出语句</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">&quot;bar&quot;</span>);</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="babel-plugin-transform-runtime"><a href="#babel-plugin-transform-runtime" class="headerlink" title="@babel/plugin-transform-runtime"></a><code>@babel/plugin-transform-runtime</code></h4><p>用于提供一些公共的<code>API</code>，这些<code>API</code>会帮助代码转换</p><h3 id="拓展-对类的转换"><a href="#拓展-对类的转换" class="headerlink" title="[拓展]对类的转换"></a>[拓展]对类的转换</h3><ul><li><strong>source.js</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    prop1 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    method2 = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">b = <span class="number">2</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.prop2 = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">method1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">method3</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;method3&quot;</span>, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> method4 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;method4&quot;</span>, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>target.js</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">target.js</span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_instanceof</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; right[<span class="built_in">Symbol</span>.hasInstance]) &#123;</span><br><span class="line">        <span class="keyword">return</span> !!right[<span class="built_in">Symbol</span>.hasInstance](left);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left <span class="keyword">instanceof</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断instance 是不是Constructor的实例</span></span><br><span class="line">    <span class="keyword">if</span> (!_instanceof(instance, Constructor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Cannot call a class as a function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//props: [&#123;key:&quot;xxx&quot;, value:&quot;xxxxxx&quot;&#125;, &#123;key:&quot;ccc&quot;, value:function()&#123;&#125;&#125;]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_defineProperties</span>(<span class="params">target, props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> descriptor = props[i];</span><br><span class="line">        descriptor.enumerable = descriptor.enumerable || <span class="literal">false</span>;</span><br><span class="line">        descriptor.configurable = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;value&quot;</span> <span class="keyword">in</span> descriptor)</span><br><span class="line">            descriptor.writable = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(target, descriptor.key, descriptor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_createClass</span>(<span class="params">Constructor, protoProps, staticProps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (protoProps)</span><br><span class="line">        _defineProperties(Constructor.prototype, protoProps);</span><br><span class="line">    <span class="keyword">if</span> (staticProps)</span><br><span class="line">        _defineProperties(Constructor, staticProps);</span><br><span class="line">    <span class="keyword">return</span> Constructor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_defineProperty</span>(<span class="params">obj, key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">            <span class="attr">value</span>: value, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A =</span><br><span class="line">    <span class="comment">//该立即执行函数的返回结果，应该是一个构造函数A</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造函数A，对应类中的constructor</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//转换：参数默认值</span></span><br><span class="line">            <span class="keyword">var</span> b = <span class="built_in">arguments</span>.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">arguments</span>[<span class="number">0</span>] !== <span class="literal">undefined</span> ? <span class="built_in">arguments</span>[<span class="number">0</span>] : <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//类调用检查</span></span><br><span class="line">            _classCallCheck(<span class="built_in">this</span>, A);</span><br><span class="line">            <span class="comment">//定义一个属性：给this定义一个属性prop1，赋值为1，类似于 this.prop1 = 1;</span></span><br><span class="line">            _defineProperty(<span class="built_in">this</span>, <span class="string">&quot;prop1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//将箭头函数方法，作为普通属性定义，箭头函数方法并不在原型上</span></span><br><span class="line">            _defineProperty(<span class="built_in">this</span>, <span class="string">&quot;method2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> _len = <span class="built_in">arguments</span>.length, args = <span class="keyword">new</span> <span class="built_in">Array</span>(_len), _key = <span class="number">0</span>; _key &lt; _len; _key++) &#123;</span><br><span class="line">                    args[_key] = <span class="built_in">arguments</span>[_key];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">console</span>.log(args);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.prop2 = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为构造函数A，定义原型方法，以及静态方法</span></span><br><span class="line">        _createClass(A, [&#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&quot;method1&quot;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;], [&#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&quot;method3&quot;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> <span class="title">method3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;method3&quot;</span>, <span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;();</span><br><span class="line"></span><br><span class="line">_defineProperty(A, <span class="string">&quot;method4&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;method4&quot;</span>, A);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="拓展-async和await的转换"><a href="#拓展-async和await的转换" class="headerlink" title="[拓展]async和await的转换"></a>[拓展]async和await的转换</h3><ul><li><strong>source</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="number">3</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> b = <span class="keyword">await</span> A();</span><br><span class="line">    <span class="keyword">const</span> c = <span class="keyword">await</span> A();</span><br><span class="line">    <span class="keyword">return</span> b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">B().then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><ul><li><strong>target</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncGeneratorStep</span>(<span class="params">gen, resolve, reject, _next, arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> info = gen.next(arg);</span><br><span class="line">        <span class="keyword">var</span> value = info.value;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (info.done) &#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve(value).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            _next(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve(<span class="number">3</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> b = <span class="keyword">yield</span> A();</span><br><span class="line">        <span class="keyword">const</span> c = <span class="keyword">yield</span> A();</span><br><span class="line">        <span class="keyword">return</span> b + c;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> gen = fn();</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">_next</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">            asyncGeneratorStep(gen, resolve, reject, _next, value);</span><br><span class="line">        &#125;</span><br><span class="line">        _next(<span class="literal">undefined</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B().then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="性能优化概述"><a href="#性能优化概述" class="headerlink" title="性能优化概述"></a>性能优化概述</h3><p>本章所讲的性能优化主要体现在三个方面：</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111746481.png"></p><p><strong>构建性能</strong></p><p>这里所说的构建性能，是指在<strong>开发阶段的构建性能</strong>，而不是生产环境的构建性能</p><p>优化的目标，<strong>是降低从打包开始，到代码效果呈现所经过的时间</strong></p><p>构建性能会影响开发效率。构建性能越高，开发过程中时间的浪费越少</p><p><strong>传输性能</strong></p><p>传输性能是指，打包后的<code>JS</code>代码传输到浏览器经过的时间</p><p>在优化传输性能时要考虑到：</p><ol><li>总传输量：所有需要传输的<code>JS</code>文件的内容加起来，就是总传输量，重复代码越少，总传输量越少</li><li>文件数量：当访问页面时，需要传输的<code>JS</code>文件数量，文件数量越多，<code>http</code>请求越多，响应速度越慢</li><li>浏览器缓存：<code>JS</code>文件会被浏览器缓存，被缓存的文件不会再进行传输</li></ol><p><strong>运行性能</strong></p><p>运行性能是指，<code>JS</code>代码在浏览器端的运行速度</p><p>它主要取决于我们如何书写高性能的代码</p><p><strong>永远不要过早的关注于性能</strong>，因为你在开发的时候，无法完全预知最终的运行性能，过早的关注性能会极大的降低开发效率</p><hr><p>性能优化主要从上面三个维度入手</p><p><strong>性能优化没有完美的解决方案，需要具体情况具体分析</strong></p><h3 id="减少模块解析"><a href="#减少模块解析" class="headerlink" title="减少模块解析"></a>减少模块解析</h3><h4 id="什么叫做模块解析？"><a href="#什么叫做模块解析？" class="headerlink" title="什么叫做模块解析？"></a>什么叫做模块解析？</h4><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111746351.png"></p><p>模块解析包括：抽象语法树分析、依赖分析、模块语法替换</p><h4 id="不做模块解析会怎样？"><a href="#不做模块解析会怎样？" class="headerlink" title="不做模块解析会怎样？"></a>不做模块解析会怎样？</h4><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111746331.png"></p><p>如果某个模块不做解析，该模块经过<code>loader</code>处理后的代码就是最终代码。</p><p>如果没有<code>loader</code>对该模块进行处理，该模块的源码就是最终打包结果的代码。</p><p>如果不对某个模块进行解析，可以缩短构建时间</p><h4 id="哪些模块不需要解析？"><a href="#哪些模块不需要解析？" class="headerlink" title="哪些模块不需要解析？"></a>哪些模块不需要解析？</h4><p>模块中无其他依赖：一些已经打包好的第三方库，比如<code>jquery</code></p><h4 id="如何让某个模块不要解析？"><a href="#如何让某个模块不要解析？" class="headerlink" title="如何让某个模块不要解析？"></a>如何让某个模块不要解析？</h4><p>配置<code>module.noParse</code>，它是一个正则，被正则匹配到的模块不会解析</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">noParse</span>: <span class="regexp">/test/</span> <span class="comment">//正则匹配，匹配到的模块不会被解析</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化loader性能"><a href="#优化loader性能" class="headerlink" title="优化loader性能"></a>优化loader性能</h3><h4 id="进一步限制loader的应用范围"><a href="#进一步限制loader的应用范围" class="headerlink" title="进一步限制loader的应用范围"></a>进一步限制loader的应用范围</h4><p>思路是：对于某些库，不使用<code>loader</code></p><p>例如：<code>babel-loader</code>可以转换<code>ES6</code>或更高版本的语法，可是有些库本身就是用<code>ES5</code>语法书写的，不需要转换，使用<code>babel-loader</code>反而会浪费构建时间</p><p><code>lodash</code>就是这样的一个库</p><blockquote><p>lodash是在ES5之前出现的库，使用的是ES3语法</p></blockquote><p>通过<code>module.rule.exclude</code>或<code>module.rule.include</code>，排除或仅包含需要应用loader的场景</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/lodash/</span>,</span><br><span class="line">                use: <span class="string">&quot;babel-loader&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果暴力一点，甚至可以排除掉<code>node_modules</code>目录中的模块，或仅转换<code>src</code>目录的模块</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                </span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//排除node_modules目录的模块</span></span><br><span class="line">                <span class="comment">//或</span></span><br><span class="line">                <span class="comment">// include: /src/, //只包含src目录的模块</span></span><br><span class="line">                </span><br><span class="line">                use: <span class="string">&quot;babel-loader&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种做法是对loader的范围进行进一步的限制，和noParse不冲突，想想看，为什么不冲突</p></blockquote><h4 id="缓存loader的结果"><a href="#缓存loader的结果" class="headerlink" title="缓存loader的结果"></a>缓存loader的结果</h4><p>我们可以基于一种假设：如果某个文件内容不变，经过相同的<code>loader</code>解析后，解析后的结果也不变</p><p>于是，可以将<code>loader</code>的解析结果保存下来，让后续的解析直接使用保存的结果</p><p><code>cache-loader</code>可以实现这样的功能</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;cache-loader&#x27;</span>, ...loaders]</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有趣的是，<code>cache-loader</code>放到最前面，却能够决定后续的<code>loader</code>是否运行</p><p>实际上，<code>loader</code>的运行过程中，还包含一个过程，即<code>pitch</code></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111746058.png"></p><p><code>cache-loader</code>还可以实现各自自定义的配置，具体方式见文档</p><h4 id="为loader的运行开启多线程"><a href="#为loader的运行开启多线程" class="headerlink" title="为loader的运行开启多线程"></a>为loader的运行开启多线程</h4><p><code>thread-loader</code>会开启一个线程池，线程池中包含适量的线程</p><p>它会把后续的<code>loader</code>放到线程池的线程中运行，以提高构建效率</p><p>由于后续的<code>loader</code>会放到新的线程中，所以，后续的<code>loader</code>不能：</p><ul><li>使用 <code>webpack api</code> 生成文件</li><li>无法使用自定义的 <code>plugin api</code></li><li>无法访问 <code>webpack options</code></li></ul><blockquote><p>在实际的开发中，可以进行测试，来决定<code>thread-loader</code>放到什么位置</p></blockquote><p><strong>特别注意</strong>，开启和管理线程需要消耗时间，在小型项目中使用<code>thread-loader</code>反而会增加构建时间</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="comment">// &#123;</span></span><br><span class="line">                    <span class="comment">//   loader: &quot;cache-loader&quot;,</span></span><br><span class="line">                    <span class="comment">//   options:&#123;</span></span><br><span class="line">                    <span class="comment">//       cacheDirectory: &quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/cache&quot;</span></span><br><span class="line">                    <span class="comment">//   &#125;</span></span><br><span class="line">                    <span class="comment">// &#125;,</span></span><br><span class="line">                    <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">//开启一个线程池</span></span><br><span class="line">                    <span class="string">&quot;babel-loader&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="热替换-HMR"><a href="#热替换-HMR" class="headerlink" title="热替换 HMR"></a>热替换 HMR</h3><blockquote><p>热替换并不能降低构建时间（可能还会稍微增加），但可以降低代码改动到效果呈现的时间</p></blockquote><p>当使用<code>webpack-dev-server</code>时，考虑代码改动到效果呈现的过程</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111746389.png" alt="|400"></p><p>而使用了热替换后，流程发生了变化</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111746339.png" alt="|400"></p><h4 id="使用和原理"><a href="#使用和原理" class="headerlink" title="使用和原理"></a>使用和原理</h4><ol><li>更改配置</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="attr">hot</span>:<span class="literal">true</span> <span class="comment">// 开启HMR</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>:[ </span><br><span class="line">    <span class="comment">// 可选</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>更改代码</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot)&#123; <span class="comment">// 是否开启了热更新</span></span><br><span class="line">  <span class="built_in">module</span>.hot.accept() <span class="comment">// 接受热更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，这段代码会参与最终运行！</p><p>当开启了热更新后，<code>webpack-dev-server</code>会向打包结果中注入<code>module.hot</code>属性</p><p>默认情况下，<code>webpack-dev-server</code>不管是否开启了热更新，当重新打包后，都会调用<code>location.reload</code>刷新页面</p><p>但如果运行了<code>module.hot.accept()</code>，将改变这一行为</p><p><code>module.hot.accept()</code>的作用是让<code>webpack-dev-server</code>通过<code>socket</code>管道，把服务器更新的内容发送到浏览器</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111747451.png" alt="|300"></p><p>然后，将结果交给插件<code>HotModuleReplacementPlugin</code>注入的代码执行</p><p>插件<code>HotModuleReplacementPlugin</code>会根据覆盖原始代码，然后让代码重新执行</p><p><strong>所以，热替换发生在代码运行期</strong></p><h4 id="样式热替换"><a href="#样式热替换" class="headerlink" title="样式热替换"></a>样式热替换</h4><p>对于样式也是可以使用热替换的，但需要使用<code>style-loader</code></p><p>因为热替换发生时，<code>HotModuleReplacementPlugin</code>只会简单的重新运行模块代码</p><p>因此<code>style-loader</code>的代码一运行，就会重新设置<code>style</code>元素中的样式</p><p>而<code>mini-css-extract-plugin</code>，由于它生成文件是在<strong>构建期间</strong>，运行期间并会也无法改动文件，因此它对于热替换是无效的</p><h3 id="手动分包"><a href="#手动分包" class="headerlink" title="手动分包"></a>手动分包</h3><h4 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h4><p>手动分包的总体思路是：</p><ol><li>先单独的打包公共模块</li></ol><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111747630.png" alt="单独打包公共模块"></p><p>公共模块会被打包成为动态链接库(<code>dll Dynamic Link Library</code>)，并生成资源清单</p><ol start="2"><li>根据入口模块进行正常打包</li></ol><p>打包时，如果发现模块中使用了资源清单中描述的模块，则不会形成下面的代码结构</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码，入口文件index.js</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&quot;jquery&quot;</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span></span><br><span class="line">_.isArray($(<span class="string">&quot;.red&quot;</span>));</span><br></pre></td></tr></table></figure><p>由于资源清单中包含<code>jquery</code>和<code>lodash</code>两个模块，因此打包结果的大致格式是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>)</span>&#123;  </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;)(&#123;  </span><br><span class="line">    <span class="comment">// index.js文件的打包结果并没有变化  </span></span><br><span class="line">    <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/src/index.js&quot;</span>:  <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>)</span>&#123;    <span class="keyword">var</span> $ = __webpack_require__(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/node_modules/jquery/index.js&quot;</span>)    <span class="keyword">var</span> _ = __webpack_require__(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/node_modules/lodash/index.js&quot;</span>)    _.isArray($(<span class="string">&quot;.red&quot;</span>));  &#125;,  </span><br><span class="line">    <span class="comment">// 由于资源清单中存在，jquery的代码并不会出现在这里  </span></span><br><span class="line">    <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/node_modules/jquery/index.js&quot;</span>:  <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>)</span>&#123;    <span class="built_in">module</span>.exports = jquery;  &#125;,  </span><br><span class="line">    <span class="comment">// 由于资源清单中存在，lodash的代码并不会出现在这里  </span></span><br><span class="line">    <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/node_modules/lodash/index.js&quot;</span>:  <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>)</span>&#123;    <span class="built_in">module</span>.exports = lodash;  &#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="打包公共模块"><a href="#打包公共模块" class="headerlink" title="打包公共模块"></a>打包公共模块</h4><p>打包公共模块是一个<strong>独立的</strong>打包过程</p><ol><li>单独打包公共模块，暴露变量名</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dll.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,  </span><br><span class="line">    <span class="attr">entry</span>: &#123;    </span><br><span class="line">        <span class="attr">jquery</span>: [<span class="string">&quot;jquery&quot;</span>],    </span><br><span class="line">        <span class="attr">lodash</span>: [<span class="string">&quot;lodash&quot;</span>]  &#125;,  </span><br><span class="line">    <span class="attr">output</span>: &#123;    </span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;dll/[name].js&quot;</span>,    </span><br><span class="line">        <span class="attr">library</span>: <span class="string">&quot;[name]&quot;</span>  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>利用<code>DllPlugin</code>生成资源清单</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dll.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">    <span class="attr">plugins</span>: [    </span><br><span class="line">        <span class="keyword">new</span> webpack.DllPlugin(&#123;     </span><br><span class="line">            <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dll&quot;</span>, <span class="string">&quot;[name].manifest.json&quot;</span>), </span><br><span class="line">            <span class="comment">//资源清单的保存位置      </span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;[name]&quot;</span></span><br><span class="line">            <span class="comment">//资源清单中，暴露的变量名    </span></span><br><span class="line">        &#125;)  </span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行后，即可完成公共模块打包</p><h4 id="使用公共模块"><a href="#使用公共模块" class="headerlink" title="使用公共模块"></a>使用公共模块</h4><ol><li>在页面中手动引入公共模块</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/dll/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/dll/lodash.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>重新设置<code>clean-webpack-plugin</code></li></ol><p>如果使用了插件<code>clean-webpack-plugin</code>，为了避免它把公共模块清除，需要做出以下配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> CleanWebpackPlugin(&#123;  </span><br><span class="line">    <span class="comment">// 要清除的文件或目录  </span></span><br><span class="line">    <span class="comment">// 排除掉dll目录本身和它里面的文件  </span></span><br><span class="line">    <span class="attr">cleanOnceBeforeBuildPatterns</span>: [<span class="string">&quot;**/*&quot;</span>, <span class="string">&#x27;!dll&#x27;</span>, <span class="string">&#x27;!dll/*&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>目录和文件的匹配规则使用的是<a href="https://github.com/sindresorhus/globby#globbing-patterns">globbing patterns</a></p></blockquote><ol start="3"><li>使用<code>DllReferencePlugin</code>控制打包结果</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">    <span class="attr">plugins</span>:[    </span><br><span class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;      </span><br><span class="line">            <span class="attr">manifest</span>: <span class="built_in">require</span>(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/dll/jquery.manifest.json&quot;</span>)    </span><br><span class="line">        &#125;),    </span><br><span class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;     </span><br><span class="line">            <span class="attr">manifest</span>: <span class="built_in">require</span>(<span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/dll/lodash.manifest.json&quot;</span>)    </span><br><span class="line">        &#125;)  </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>手动打包的过程</strong>：</p><ol><li>开启<code>output.library</code>暴露公共模块</li><li>用<code>DllPlugin</code>创建资源清单</li><li>用<code>DllReferencePlugin</code>使用资源清单</li></ol><p><strong>手动打包的注意事项</strong>：</p><ol><li>资源清单不参与运行，可以不放到打包目录中</li><li>记得手动引入公共<code>JS</code>，以及避免被删除</li><li>不要对小型的公共<code>JS</code>库使用</li></ol><p><strong>优点</strong>：</p><ol><li>极大提升自身模块的打包速度</li><li>极大的缩小了自身文件体积</li><li>有利于浏览器缓存第三方库的公共代码</li></ol><p><strong>缺点</strong>：</p><ol><li>使用非常繁琐</li><li>如果第三方库中包含重复代码，则效果不太理想</li></ol><h3 id="自动分包"><a href="#自动分包" class="headerlink" title="自动分包"></a>自动分包</h3><h4 id="基本原理-2"><a href="#基本原理-2" class="headerlink" title="基本原理"></a>基本原理</h4><p>不同与手动分包，自动分包是从<strong>实际的角度</strong>出发，从一个更加<strong>宏观的角度</strong>来控制分包，而一般不对具体哪个包要分出去进行控制</p><p>因此使用自动分包，不仅非常方便，而且更加贴合实际的开发需要</p><p>要控制自动分包，关键是要配置一个合理的<strong>分包策略</strong></p><p>有了分包策略之后，不需要额外安装任何插件，<code>webpack</code>会自动的按照策略进行分包</p><blockquote><p>实际上，webpack在内部是使用<code>SplitChunksPlugin</code>进行分包的<br>过去有一个库<code>CommonsChunkPlugin</code>也可以实现分包，不过由于该库某些地方并不完善，到了<code>webpack4</code>之后，已被<code>SplitChunksPlugin</code>取代</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111747606.png" alt="分包简单流程"></p><p>从分包流程中至少可以看出以下几点：</p><ul><li>分包策略至关重要，它决定了如何分包</li><li>分包时，<code>webpack</code>开启了一个<strong>新的chunk</strong>，对分离的模块进行打包</li><li>打包结果中，公共的部分被提取出来形成了一个单独的文件，它是新<code>chunk</code>的产物</li></ul><h4 id="分包策略的基本配置"><a href="#分包策略的基本配置" class="headerlink" title="分包策略的基本配置"></a>分包策略的基本配置</h4><p><code>webpack</code>提供了<code>optimization</code>配置项，用于配置一些优化信息</p><p>其中<code>splitChunks</code>是分包策略的配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">    <span class="attr">optimization</span>: &#123;    </span><br><span class="line">        <span class="attr">splitChunks</span>: &#123;      </span><br><span class="line">            <span class="comment">// 分包策略    </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上，分包策略有其默认的配置，我们只需要轻微的改动，即可应对大部分分包场景</p><ol><li><strong>chunks</strong></li></ol><p>该配置项用于配置需要应用分包策略的<code>chunk</code></p><p>我们知道，分包是从已有的<code>chunk</code>中分离出新的<code>chunk</code>，那么哪些<code>chunk</code>需要分离呢</p><p><code>chunks</code>有三个取值，分别是：</p><ul><li><code>all</code>: 对于所有的<code>chunk</code>都要应用分包策略</li><li><code>async</code>：【默认】仅针对异步<code>chunk</code>应用分包策略</li><li><code>initial</code>：仅针对普通<code>chunk</code>应用分包策略</li></ul><p>所以，你只需要配置<code>chunks</code>为<code>all</code>即可</p><ol start="2"><li><strong>maxSize</strong></li></ol><p>该配置可以控制包的最大字节数</p><p>如果某个包（包括分出来的包）超过了该值，则<code>webpack</code>会尽可能的将其分离成多个包</p><p>但是不要忽略的是，分包的<strong>基础单位是模块</strong>，如果一个完整的模块超过了该体积，它是无法做到再切割的，因此，尽管使用了这个配置，完全有可能某个包还是会超过这个体积</p><p>另外，该配置看上去很美妙，实际意义其实不大</p><p>因为分包的目的是<strong>提取大量的公共代码</strong>，从而减少总体积和充分利用浏览器缓存</p><p>虽然该配置可以把一些包进行再切分，但是实际的总体积和传输量并没有发生变化</p><blockquote><p>如果要进一步减少公共模块的体积，只能是压缩和<code>tree shaking</code></p></blockquote><h4 id="分包策略的其他配置"><a href="#分包策略的其他配置" class="headerlink" title="分包策略的其他配置"></a>分包策略的其他配置</h4><p>如果不想使用其他配置的默认值，可以手动进行配置：</p><ul><li><strong>automaticNameDelimiter</strong>：新<code>chunk</code>名称的分隔符，默认值~</li><li><strong>minChunks</strong>：一个模块被多少个<code>chunk</code>使用时，才会进行分包，默认值<code>1</code></li><li><strong>minSize</strong>：当分包达到多少字节后才允许被真正的拆分，默认值<code>30000</code></li></ul><h4 id="缓存组"><a href="#缓存组" class="headerlink" title="缓存组"></a>缓存组</h4><p>之前配置的分包策略是全局的</p><p>而实际上，分包策略是基于缓存组的</p><p>每个缓存组提供一套独有的策略，<code>webpack</code>按照缓存组的优先级依次处理每个缓存组，被缓存组处理过的分包不需要再次分包</p><p>默认情况下，<code>webpack</code>提供了两个缓存组：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">    <span class="attr">optimization</span>:&#123;    </span><br><span class="line">        <span class="attr">splitChunks</span>: &#123;      </span><br><span class="line">            <span class="comment">//全局配置      </span></span><br><span class="line">            <span class="attr">cacheGroups</span>: &#123;        </span><br><span class="line">                <span class="comment">// 属性名是缓存组名称，会影响到分包的chunk名        </span></span><br><span class="line">                <span class="comment">// 属性值是缓存组的配置，缓存组继承所有的全局配置，也有自己特殊的配置</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">vendors</span>: &#123;           </span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>, </span><br><span class="line">                <span class="comment">// 当匹配到相应模块时，将这些模块进行单独打包          </span></span><br><span class="line">                priority: -<span class="number">10</span> </span><br><span class="line">                <span class="comment">// 缓存组优先级，优先级越高，该策略越先进行处理，默认值为0        </span></span><br><span class="line">            &#125;,        </span><br><span class="line">            <span class="attr">default</span>: &#123;          </span><br><span class="line">                <span class="attr">minChunks</span>: <span class="number">2</span>,  </span><br><span class="line">                <span class="comment">// 覆盖全局配置，将最小chunk引用数改为2          </span></span><br><span class="line">                <span class="attr">priority</span>: -<span class="number">20</span>, <span class="comment">// 优先级          </span></span><br><span class="line">                <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span> </span><br><span class="line">                <span class="comment">// 重用已经被分离出去的chunk        </span></span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候，缓存组对于我们来说没什么意义，因为默认的缓存组就已经够用了</p><p>但是我们同样可以利用缓存组来完成一些事情，比如对公共样式的抽离</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">    <span class="attr">optimization</span>: &#123;    </span><br><span class="line">        <span class="attr">splitChunks</span>: &#123;      </span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,      </span><br><span class="line">            <span class="comment">// maxSize: 60000      </span></span><br><span class="line">            <span class="comment">// automaticNameDelimiter: &quot;.&quot;,      </span></span><br><span class="line">            <span class="comment">// minChunks: 1,      </span></span><br><span class="line">            <span class="comment">// minSize: 0      </span></span><br><span class="line">            <span class="attr">cacheGroups</span>: &#123;        </span><br><span class="line">                <span class="attr">styles</span>: &#123;          </span><br><span class="line">                    <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 匹配样式模块          </span></span><br><span class="line">                    minSize: <span class="number">0</span>, <span class="comment">// 覆盖默认的最小尺寸，这里仅仅是作为测试          </span></span><br><span class="line">                    <span class="attr">minChunks</span>: <span class="number">2</span> <span class="comment">// 覆盖默认的最小chunk引用数        </span></span><br><span class="line">                &#125;      </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;,  </span><br><span class="line">    <span class="attr">module</span>: &#123;    </span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123; </span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">                use: [MiniCssExtractPlugin.loader, <span class="string">&quot;css-loader&quot;</span>] </span><br><span class="line">            &#125;</span><br><span class="line">        ]  </span><br><span class="line">    &#125;,  <span class="attr">plugins</span>: [    </span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),    </span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;      </span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/public/index.html&quot;</span>,     </span><br><span class="line">            <span class="attr">chunks</span>: [<span class="string">&quot;index&quot;</span>]    &#125;),   </span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;      </span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;[name].[hash:5].css&quot;</span>,      </span><br><span class="line">            <span class="comment">// chunkFilename是配置来自于分割chunk的文件名      </span></span><br><span class="line">            <span class="attr">chunkFilename</span>: <span class="string">&quot;common.[hash:5].css&quot;</span>     </span><br><span class="line">        &#125;)  </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配合多页应用"><a href="#配合多页应用" class="headerlink" title="配合多页应用"></a>配合多页应用</h4><p>虽然现在单页应用是主流，但免不了还是会遇到多页应用</p><p>由于在多页应用中需要为每个<code>html</code>页面指定需要的<code>chunk</code>，这就造成了问题</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;  <span class="attr">template</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/public/index.html&quot;</span>,  <span class="attr">chunks</span>: [<span class="string">&quot;index~other&quot;</span>, <span class="string">&quot;vendors~index~other&quot;</span>, <span class="string">&quot;index&quot;</span>]&#125;)</span><br></pre></td></tr></table></figure><p>我们必须手动的指定被分离出去的chunk名称，这不是一种好办法</p><p>幸好<code>html-webpack-plugin</code>的新版本中解决了这一问题</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -D html-webpack-plugin@next</span><br></pre></td></tr></table></figure><p>做出以下配置即可：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;  <span class="attr">template</span>: <span class="string">&quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/public/index.html&quot;</span>,  <span class="attr">chunks</span>: [<span class="string">&quot;index&quot;</span>]&#125;)</span><br></pre></td></tr></table></figure><p>它会自动的找到被<code>index</code>分离出去的<code>chunk</code>，并完成引用</p><blockquote><p>目前这个版本仍处于测试解决，还未正式发布</p></blockquote><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>自动分包的原理其实并不复杂，主要经过以下步骤：</p><ol><li>检查每个<code>chunk</code>编译的结果</li><li>根据分包策略，找到那些满足策略的模块</li><li>根据分包策略，生成新的<code>chunk</code>打包这些模块（代码有所变化）</li><li>把打包出去的模块从原始包中移除，并修正原始包代码</li></ol><p>在代码层面，有以下变动</p><ol><li>分包的代码中，加入一个全局变量，类型为数组，其中包含公共模块的代码</li><li>原始包的代码中，使用数组中的公共代码</li></ol><h3 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ol><li><strong>为什么要进行代码压缩</strong></li></ol><p>减少代码体积；破坏代码的可读性，提升破解成本；</p><ol start="2"><li><strong>什么时候要进行代码压缩</strong></li></ol><p>生产环境</p><ol start="3"><li><strong>使用什么压缩工具</strong></li></ol><p>目前最流行的代码压缩工具主要有两个：<code>UglifyJs</code>和<code>Terser</code></p><p><code>UglifyJs</code>是一个传统的代码压缩工具，已存在多年，曾经是前端应用的必备工具，但由于它不支持<code>ES6</code>语法，所以目前的流行度已有所下降。</p><p><code>Terser</code>是一个新起的代码压缩工具，支持<code>ES6+</code>语法，因此被很多构建工具内置使用。<code>webpack</code>安装后会内置<code>Terser</code>，当启用生产环境后即可用其进行代码压缩。</p><p>因此，我们选择<code>Terser</code></p><p><strong>关于副作用 side effect</strong></p><p>副作用：函数运行过程中，可能会对外部环境造成影响的功能</p><p>如果函数中包含以下代码，该函数叫做副作用函数:</p><ul><li>异步代码</li><li><code>localStorage</code></li><li>对外部数据的修改</li></ul><p>如果一个函数没有副作用，同时，函数的返回结果仅依赖参数，则该函数叫做纯函数(pure function)</p><h4 id="Terser"><a href="#Terser" class="headerlink" title="Terser"></a>Terser</h4><p>在<code>Terser</code>的官网可尝试它的压缩效果</p><blockquote><p>Terser官网：<a href="https://terser.org/">https://terser.org/</a></p></blockquote><h4 id="webpack-Terser"><a href="#webpack-Terser" class="headerlink" title="webpack+Terser"></a>webpack+Terser</h4><p><code>webpack</code>自动集成了<code>Terser</code></p><p>如果你想更改、添加压缩工具，又或者是想对Terser进行配置，使用下面的<code>webpack</code>配置即可</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TerserPlugin = <span class="built_in">require</span>(<span class="string">&#x27;terser-webpack-plugin&#x27;</span>);<span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);<span class="built_in">module</span>.exports = &#123;  <span class="attr">optimization</span>: &#123;    <span class="comment">// 是否要启用压缩，默认情况下，生产环境会自动开启    minimize: true,     minimizer: [ // 压缩时使用的插件，可以有多个      new TerserPlugin(),       new OptimizeCSSAssetsPlugin()    ],  &#125;,&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree shaking"></a>tree shaking</h3><blockquote><p>压缩可以移除模块内部的无效代码<br>tree shaking 可以移除模块之间的无效代码</p></blockquote><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>某些模块导出的代码并不一定会被用到</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// myMath.jsexport function add(a, b)&#123;  console.log(&quot;add&quot;)  return a+b;&#125;export function sub(a, b)&#123;  console.log(&quot;sub&quot;)  return a-b;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.jsimport &#123;add&#125; from &quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/myMath&quot;console.log(add(1,2));</span></span><br></pre></td></tr></table></figure><p><code>tree shaking</code> 用于移除掉不会用到的导出</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p><code>webpack2</code>开始就支持了<code>tree shaking</code></p><p>只要是生产环境，<code>tree shaking</code>自动开启</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p><code>webpack</code>会从入口模块出发寻找依赖关系</p><p>当解析一个模块时，<code>webpack</code>会根据<code>ES6</code>的模块导入语句来判断，该模块依赖了另一个模块的哪个导出</p><p><code>webpack</code>之所以选择<code>ES6</code>的模块导入语句，是因为<code>ES6</code>模块有以下特点：</p><ol><li>导入导出语句只能是顶层语句</li><li><code>import</code>的模块名只能是字符串常量</li><li><code>import</code>绑定的变量是不可变的</li></ol><p>这些特征都非常有利于分析出稳定的依赖</p><p>在具体分析依赖时，<code>webpack</code>坚持的原则是：<strong>保证代码正常运行，然后再尽量tree shaking</strong></p><p>所以，如果你依赖的是一个导出的对象，由于<code>JS</code>语言的动态特性，以及<code>webpack</code>还不够智能，为了保证代码正常运行，它不会移除对象中的任何信息</p><p>因此，我们在编写代码的时候，<strong>尽量</strong>：</p><ul><li>使用<code>export xxx</code>导出，而不使用<code>export default &#123;xxx&#125;</code>导出</li><li>使用<code>import &#123;xxx&#125; from &quot;xxx&quot;</code>导入，而不使用<code>import xxx from &quot;xxx&quot;</code>导入</li></ul><p>依赖分析完毕后，<code>webpack</code>会根据每个模块每个导出是否被使用，标记其他导出为<code>dead code</code>，然后交给代码压缩工具处理</p><p>代码压缩工具最终移除掉那些<code>dead code</code>代码</p><h4 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h4><p>某些第三方库可能使用的是<code>commonjs</code>的方式导出，比如<code>lodash</code></p><p>又或者没有提供普通的<code>ES6</code>方式导出</p><p>对于这些库，<code>tree shaking</code>是无法发挥作用的</p><p>因此要寻找这些库的<code>es6</code>版本，好在很多流行但没有使用的<code>ES6</code>的第三方库，都发布了它的<code>ES6</code>版本，比如<code>lodash-es</code></p><h4 id="作用域分析"><a href="#作用域分析" class="headerlink" title="作用域分析"></a>作用域分析</h4><p><code>tree shaking</code>本身并没有完善的作用域分析，可能导致在一些<code>dead code</code>函数中的依赖仍然会被视为依赖</p><p>插件<code>webpack-deep-scope-plugin</code>提供了作用域分析，可解决这些问题</p><h4 id="副作用问题"><a href="#副作用问题" class="headerlink" title="副作用问题"></a>副作用问题</h4><p><code>webpack</code>在<code>tree shaking</code>的使用，有一个原则：<strong>一定要保证代码正确运行</strong></p><p>在满足该原则的基础上，再来决定如何<code>tree shaking</code></p><p>因此，当<code>webpack</code>无法确定某个模块是否有副作用时，它往往将其视为有副作用</p><p>因此，某些情况可能并不是我们所想要的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//common.jsvar n  = Math.random();//index.jsimport &quot;https://cdn.jsdelivr.net/gh/HAODEabcd/Note@master/Web/webpack/common.js&quot;</span></span><br></pre></td></tr></table></figure><p>虽然我们根本没用有<code>common.js</code>的导出，但<code>webpack</code>担心<code>common.js</code>有副作用，如果去掉会影响某些功能</p><p>如果要解决该问题，就需要标记该文件是没有副作用的</p><p>在<code>package.json</code>中加入<code>sideEffects</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;    <span class="attr">&quot;sideEffects&quot;</span>: <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure><p>有两种配置方式：</p><ul><li><strong>false</strong>：当前工程中，所有模块都没有副作用。注意，这种写法会影响到某些<code>css</code>文件的导入</li><li>数组：设置哪些文件拥有副作用，例如：<code>[&quot;!src/common.js&quot;]</code>，表示只要不是<code>src/common.js</code>的文件，都有副作用</li></ul><blockquote><p>这种方式我们一般不处理，通常是一些第三方库在它们自己的<code>package.json</code>中标注</p></blockquote><h4 id="css-tree-shaking"><a href="#css-tree-shaking" class="headerlink" title="css tree shaking"></a>css tree shaking</h4><p><code>webpack</code>无法对<code>css</code>完成<code>tree shaking</code>，因为<code>css</code>跟<code>es6</code>没有半毛钱关系</p><p>因此对<code>css</code>的<code>tree shaking</code>需要其他插件完成</p><p>例如：<code>purgecss-webpack-plugin</code></p><blockquote><p>注意：<code>purgecss-webpack-plugin</code>对<code>css module</code>无能为力</p></blockquote><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><p><code>ESLint</code>是一个针对<code>JS</code>的代码风格<strong>检查</strong>工具，当不满足其要求的风格时，会给予警告或错误</p><p>官网：<a href="https://eslint.org/">https://eslint.org/</a></p><p>民间中文网：<a href="https://eslint.bootcss.com/">https://eslint.bootcss.com/</a></p><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><p><code>ESLint</code>通常配合编辑器使用</p><ol><li>在<code>vscode</code>中安装<code>ESLint</code></li></ol><p>该工具会自动检查工程中的<code>JS</code>文件</p><p>检查的工作交给<code>eslint</code>库，如果当前工程没有，则会去全局库中查找，如果都没有，则无法完成检查</p><p>另外，检查的依据是<code>eslint</code>的配置文件<code>.eslintrc</code>，如果找不到工程中的配置文件，也无法完成检查</p><ol start="2"><li>安装<code>eslint</code></li></ol><p><code>npm i [-g] eslint</code></p><ol start="3"><li>创建配置文件</li></ol><p>可以通过<code>eslint</code>交互式命令创建配置文件</p><blockquote><p>由于windows环境中git窗口对交互式命名支持不是很好，建议使用powershell</p></blockquote><p><code>npx eslint --init</code></p><blockquote><p>eslint会识别工程中的<code>.eslintrc.*</code>文件，也能够识别<code>package.json</code>中的<code>eslintConfig</code>字段</p></blockquote><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><h5 id="env"><a href="#env" class="headerlink" title="env"></a>env</h5><p>配置代码的运行环境</p><ul><li><code>browser</code>：代码是否在浏览器环境中运行</li><li><code>es6</code>：是否启用<code>ES6</code>的全局<code>API</code>，例如<code>Promise</code>等</li></ul><h5 id="parserOptions"><a href="#parserOptions" class="headerlink" title="parserOptions"></a>parserOptions</h5><p>该配置指定<code>eslint</code>对哪些语法的支持</p><ul><li><code>ecmaVersion</code>: 支持的ES语法版本</li><li><code>sourceType</code><ul><li><code>script</code>：传统脚本</li><li><code>module</code>：模块化脚本</li></ul></li></ul><h5 id="parser"><a href="#parser" class="headerlink" title="parser"></a>parser</h5><p><code>eslint</code>的工作原理是先将代码进行解析，然后按照规则进行分析</p><p><code>eslint</code> 默认使用<code>Espree</code>作为其解析器，你可以在配置文件中指定一个不同的解析器。</p><h5 id="globals"><a href="#globals" class="headerlink" title="globals"></a>globals</h5><p>配置可以使用的额外的全局变量</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;globals&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;var1&quot;</span>: <span class="string">&quot;readonly&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;var2&quot;</span>: <span class="string">&quot;writable&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>eslint</code>支持注释形式的配置，在代码中使用下面的注释也可以完成配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global var1, var2 */</span></span><br><span class="line"><span class="comment">/* global var3:writable, var4:writable */</span></span><br></pre></td></tr></table></figure><h5 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h5><p>该配置继承自哪里</p><p>它的值可以是字符串或者数组</p><p>比如：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;eslint:recommended&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示，该配置缺失的位置，使用<code>eslint</code>推荐的规则</p><h5 id="ignoreFiles"><a href="#ignoreFiles" class="headerlink" title="ignoreFiles"></a>ignoreFiles</h5><p>排除掉某些不需要验证的文件</p><p><code>.eslintignore</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dist/**/*.js</span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure><h5 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h5><p><code>eslint</code>规则集</p><p>每条规则影响某个方面的代码风格</p><p>每条规则都有下面几个取值：</p><ul><li><code>off</code> 或 <code>0</code> 或 <code>false</code>: 关闭该规则的检查</li><li><code>warn</code> 或 <code>1</code> 或 <code>true</code>：警告，不会导致程序退出</li><li><code>error</code> 或 <code>2</code>：错误，当被触发的时候，程序会退出</li></ul><p>除了在配置文件中使用规则外，还可以在注释中使用：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* eslint eqeqeq: &quot;off&quot;, curly: &quot;error&quot; */</span></span><br></pre></td></tr></table></figure><h5 id="总配置"><a href="#总配置" class="headerlink" title="总配置"></a>总配置</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件名 .eslintrc.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;es6&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">  <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;ecmaVersion&quot;</span>: <span class="number">2018</span>,</span><br><span class="line">    <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;curly&quot;</span>: <span class="string">&quot;off&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://eslint.bootcss.com/docs/rules/">https://eslint.bootcss.com/docs/rules/</a></p></blockquote><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><p><code>gzip</code>是一种压缩文件的算法</p><h4 id="B-S结构中的压缩传输"><a href="#B-S结构中的压缩传输" class="headerlink" title="B/S结构中的压缩传输"></a>B/S结构中的压缩传输</h4><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111749067.png"></p><p>优点：传输效率可能得到大幅提升</p><p>缺点：服务器的压缩需要时间，客户端的解压需要时间</p><h4 id="使用webpack进行预压缩"><a href="#使用webpack进行预压缩" class="headerlink" title="使用webpack进行预压缩"></a>使用webpack进行预压缩</h4><p>使用<code>compression-webpack-plugin</code>插件对打包结果进行预压缩，可以移除服务器的压缩时间</p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111749071.png"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">//压缩</span></span><br><span class="line"><span class="keyword">const</span> CmpressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;compression-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> CmpressionWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js/</span>,</span><br><span class="line">      minRatio: <span class="number">0.5</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="补充和案例"><a href="#补充和案例" class="headerlink" title="补充和案例"></a>补充和案例</h2><ul><li><p><strong>搭建多页应用</strong></p><ul><li>见：<a href="https://github.com/yjisme/multi-static-pages-webpackproj">https://github.com/yjisme/multi-static-pages-webpackproj</a></li></ul></li><li><p><strong>搭建vue单页应用</strong></p><ul><li>见：<a href="https://github.com/yjisme/vue-webpack">https://github.com/yjisme/vue-webpack</a></li></ul></li><li><p><strong>搭建React单页应用</strong></p><ul><li>见：<a href="https://github.com/yjisme/react-webpack">https://github.com/yjisme/react-webpack</a></li></ul></li><li><p><strong>搭建Node应用</strong></p><ul><li>见：<a href="https://github.com/yjisme/node-webpack">https://github.com/yjisme/node-webpack</a></li></ul></li></ul><pre><code>1. 直接开发，直接部署   1. 搭建`node`工程，直接开发   2. 开发过程中使用`git`进行管理   3. 开发完成后，提交`git`   4. 进入部署服务器，从`git`中拉取最新代码，然后`npm install`问题：1. 服务器在`npm install`的过程中，会占用比较大的网络资源2. 代码没有压缩，拉取速度较慢3. 开发过程中，无法使用较新的语法4. 开发过程中，无法使用ES6模块化2. 直接开发，用`webpack`打包，然后部署   1. 搭建`node + webpack`工程   2. 开发后，使用`webpack`打包   3. 将打包结果上传到服务器，服务器直接运行生产环境的运行：1. 监控源代码目录，如果源代码有变动2. 将环境变量设置为`development`，然后进行打包3. 运行打包结果</code></pre><ul><li><strong>搭建全栈应用</strong><ul><li>见：<a href="https://github.com/yjisme/node-vue-webpack">https://github.com/yjisme/node-vue-webpack</a></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;webpack&quot;&gt;&lt;a href=&quot;#webpack&quot; class=&quot;headerlink&quot; title=&quot;webpack&quot;&gt;&lt;/a&gt;webpack&lt;/h1&gt;&lt;h2 id=&quot;核心功能&quot;&gt;&lt;a href=&quot;#核心功能&quot; class=&quot;headerlink&quot; title=&quot;核心功能&quot;&gt;&lt;/a&gt;核心功能&lt;/h2&gt;&lt;h3 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h3&gt;&lt;h4 id=&quot;模块化简介&quot;&gt;&lt;a href=&quot;#模块化简介&quot; class=&quot;headerlink&quot; title=&quot;模块化简介&quot;&gt;&lt;/a&gt;模块化简介&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;具有相同属性和行为的事物的集合。在前端中，将一些属性比较类似和行为比较类似的内容放在同一个&lt;code&gt;js&lt;/code&gt;文件里面，把这个&lt;code&gt;js&lt;/code&gt;文件称为模块，为了每个&lt;code&gt;js&lt;/code&gt;文件只关注与自身有关的事情，让每个&lt;code&gt;js&lt;/code&gt;文件各行其职。&lt;/li&gt;
&lt;li&gt;模块要有几个特点： 独立、完整、依赖关系&lt;/li&gt;
&lt;li&gt;在最开始的阶段，&lt;code&gt;Js&lt;/code&gt;并没有这些模块机制，各种&lt;code&gt;Js&lt;/code&gt;到处飞，也就是你们现在的野生代码，得不到有效妥善的管理。后来前端圈开始制定规范，最耳熟能详的是&lt;code&gt;CommonJs&lt;/code&gt;和&lt;code&gt;AMD&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="构建工具" scheme="https://github.com/haodex/haodex.github.io.git/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Webpack" scheme="https://github.com/haodex/haodex.github.io.git/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/11/08/JavaScript/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/11/08/JavaScript/</id>
    <published>2021-11-08T07:35:53.000Z</published>
    <updated>2021-11-26T01:10:21.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-历史及历程"><a href="#JavaScript-历史及历程" class="headerlink" title="JavaScript 历史及历程"></a>JavaScript 历史及历程</h1><h2 id="web-发展史"><a href="#web-发展史" class="headerlink" title="web 发展史"></a>web 发展史</h2><p>Mosaic,是互上第一个获普遍使用和能够显示图片的网页浏览器。于 1993 年问世。</p><p>1994 年 4 月，马克.安德森和 Silicon Graphics（简称为 SGI，中译为“视算科技”或“硅图”）公司的创始人吉姆·克拉克（Jim Clark）在美国加州设立了“Mosaic CommunicationCorporation”。</p><p>Mosaic 公司成立后，由于伊利诺伊大学拥有 Mosaic 的商标权，且伊利诺伊大学已将技术转让给 Spy Glass 公司，开发团队必须彻底重新撰写浏览器程式码，且浏览器名称更改为 NetscapeNavigator，公司名字于 1994 年 11 月改名为“NetscapeCommunication Corporation”，此后沿用至今，中译为“网景”。</p><p>微软的 Internet Explorer 及 Mozilla Firefox 等，其早期版本皆以 Mosaic 为基础而开发。微软随后买下 Spy Glass 公司的技术开发出 Internet Explorer 浏览器，而 Mozilla Firefox则是网景通讯家开放源代码后所衍生出的版本。</p><h2 id="JS-历史"><a href="#JS-历史" class="headerlink" title="JS 历史"></a>JS 历史</h2><p>JavaScript 作为 Netscape Navigator 浏览器的一部分首次出现在 1996 年。它最初的设计目标是改善网页的用户体验。</p><p>作者：Brendan Eich</p><p>期初 JavaScript 被命名为 LiveScript，后因和 Sun 公司合作，因市场宣传需要改名,JavaScript。后来 Sun 公司被 Oracle 收购，JavaScript 版权归 Oracle 所有。</p><h2 id="浏览器组成"><a href="#浏览器组成" class="headerlink" title="浏览器组成"></a>浏览器组成</h2><ol><li><p>shell 部分——用户能操作部分(壳)</p></li><li><p>内核部分——用户看不到的部分</p><p>1 ) 渲染引擎（语法规则和渲染）</p><p>2 ) JS 引擎</p><p>3 ) 其他模块（如异步)</p></li></ol><span id="more"></span><h2 id="JS-引擎"><a href="#JS-引擎" class="headerlink" title="JS 引擎"></a>JS 引擎</h2><p>2001 年发布 ie6，首次实现对 JS 引擎的优化。</p><p>2008 年 Google 发布最新浏览器 Chrome，它是采用优化后的 javascript 引擎，引擎代号 V8，因能把 JS 代码直接转化为机械码来执行，进而以速度快而闻名。</p><p>后 Firefox 也推出了具备强大功能的 JS 引擎</p><p>Firefox3.5 TraceMonkey（对频繁执行的代码做了路径优化）</p><p>Firefox4.0 JeagerMonkey</p><h2 id="JS-的逼格（特有特色）"><a href="#JS-的逼格（特有特色）" class="headerlink" title="JS 的逼格（特有特色）"></a>JS 的逼格（特有特色）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">编译型语言: 通篇翻译后，生成翻译完的文件，程序执行翻译后的文件</span><br><span class="line">代表语言 : C,C++</span><br><span class="line">优点 : 快(常用于系统，游戏)</span><br><span class="line">缺点 : 移植性不好（不跨平台，<span class="built_in">window</span> 和 Linux 不能混用）</span><br><span class="line"></span><br><span class="line">解释性语言 看一行翻译一行，不生成特定文件</span><br><span class="line">代表语言 : JS,PHP，python 带尖角号</span><br><span class="line">优点 : 可以跨平台</span><br><span class="line">缺点 : 稍微慢点</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">主流浏览器（必须有独立内核）市场份额大于 <span class="number">3</span>%</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内核名称:</span></span><br><span class="line">IE ：trident</span><br><span class="line"></span><br><span class="line">chrome ： webkit / blink</span><br><span class="line"></span><br><span class="line">firefox ： gecko</span><br><span class="line"></span><br><span class="line">opera ： presto / Blink</span><br><span class="line"></span><br><span class="line">safari ： webkit</span><br></pre></td></tr></table></figure><p>1、JS 是解释性语言：(不需要编译成文件）跨平台</p><p>java 先通过 javac，编译成.class 文件，通过 jvm（Java 虚拟机）进行解释执行<br>.java→java→ 编译 →.class→jvm→ 解释执行（java 可以跨平台）（java 是 oak 语言）</p><p><code>&lt;link rel = &quot;&quot;&gt;</code> 是异步加载</p><p>2、单线程：同一时间只能做一件事——JS 引擎是单线程（同一时间做很多事叫多线程）</p><p>ECMA（欧洲计算机制造联合会）标注：为了取得技术优势，微软推出了 JScript，</p><p>CEnvi 推出 ScriptEase，与 JavaScript 同样可在浏览器上运行。为了统一规格 JavaScript</p><p>兼容于 ECMA 标准，因此也称为 ECMAScript。</p><h1 id="开始学习-JS"><a href="#开始学习-JS" class="headerlink" title="开始学习 JS"></a>开始学习 JS</h1><blockquote><p>JS 三大部分 ECMAScript、DOM、BOM`</p></blockquote><h2 id="如何引入-JS"><a href="#如何引入-JS" class="headerlink" title="如何引入 JS"></a>如何引入 JS</h2><p>1、页面内嵌<code>&lt;script&gt;&lt;/script&gt;</code>标签,写 head 里面也行,写 body 里面也行</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//告诉浏览器我们是 js</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、外部 JS 文件，引入<code>&lt;script src=“location.js”&gt;&lt;/script&gt;</code></p><p>例如：以 lesson.js 保存文件，再引入到 html 中,为符合 web 标准（w3c 标准中的一项）结构（html）、行为（js）、样</p><p>式（css）相分离，通常会采用外部引入。</p><p>一个文件中可以包括多个 css，js——不混用特殊写页面，大部分写在外部——不混用,如果同时写了内部的 js 和外部的 js，那么是外部的 js 文件显示出来</p><h1 id="js-变量"><a href="#js-变量" class="headerlink" title="js 变量"></a>js 变量</h1><h2 id="变量-variable"><a href="#变量-variable" class="headerlink" title="变量(variable)"></a>变量(variable)</h2><p>HTML，css 不是编程语言，是计算机语言，编程语言需要有变量和函数<br>变量是存放东西，方便后续使用的框</p><h2 id="1）变量声明"><a href="#1）变量声明" class="headerlink" title="1）变量声明"></a>1）变量声明</h2><p>1、 声明、赋值分解</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> a; <span class="comment">//这个叫变量声明。我们向系统中申请了 var 这个框，命名叫 a,给 a 赋值 100，写作 a =100，这里不是等号是赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a ；a =<span class="number">100</span>；可以简化写成 <span class="keyword">var</span> a=<span class="number">100</span>；</span><br></pre></td></tr></table></figure><p>2、 单一 var 声明法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a,b,c,d;————单一 <span class="keyword">var</span> 模式</span><br><span class="line"></span><br><span class="line"><span class="comment">// var a = 100;                                            var a = 100;</span></span><br><span class="line"><span class="comment">// var a = 200;        var a,b,c,d,e;                          b = 100;</span></span><br><span class="line"><span class="comment">// var a = 300;   &gt;                       &gt;   标准写法:         c = 100;</span></span><br><span class="line"><span class="comment">// var a = 400;        a = 100;                                d = 100;</span></span><br><span class="line"><span class="comment">// var a = 500;                                                e = 100;</span></span><br><span class="line"></span><br><span class="line">如写做：<span class="keyword">var</span> a = <span class="number">10</span>；a=<span class="number">20</span>;那么后面的 <span class="number">20</span> 就会覆盖掉前面的 <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="命名规则（用接近的英文单词）————-起变量名一定要以英文语义化"><a href="#命名规则（用接近的英文单词）————-起变量名一定要以英文语义化" class="headerlink" title="命名规则（用接近的英文单词）———— 起变量名一定要以英文语义化"></a>命名规则（用接近的英文单词）———— 起变量名一定要以英文语义化</h2><ol><li>变量名必须以英文字母、_、$ 开头</li><li>变量名可以包括英文字母、_、$、数字</li><li>不可以用系统的关键字、保留字作为变量名</li></ol><h1 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h1><h2 id="关键字（有特殊语法含义的字）"><a href="#关键字（有特殊语法含义的字）" class="headerlink" title="关键字（有特殊语法含义的字）"></a>关键字（有特殊语法含义的字）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>       <span class="keyword">else</span>        <span class="keyword">new</span>         <span class="keyword">var</span></span><br><span class="line"><span class="keyword">case</span>        <span class="keyword">finally</span>     <span class="keyword">return</span>      <span class="keyword">void</span></span><br><span class="line"><span class="keyword">catch</span>       <span class="keyword">for</span>         <span class="keyword">switch</span>      <span class="keyword">while</span></span><br><span class="line"><span class="keyword">default</span>     <span class="keyword">if</span>          <span class="keyword">throw</span>       <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">in</span>          <span class="keyword">try</span>         <span class="keyword">do</span>          <span class="keyword">instanceof</span></span><br><span class="line"><span class="keyword">typeof</span></span><br></pre></td></tr></table></figure><h2 id="保留字（未来可能当做关键字的词）"><a href="#保留字（未来可能当做关键字的词）" class="headerlink" title="保留字（未来可能当做关键字的词）"></a>保留字（未来可能当做关键字的词）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">abstract    enum        int         short</span><br><span class="line"><span class="built_in">Boolean</span>     <span class="keyword">export</span>      interface   <span class="keyword">static</span></span><br><span class="line">byte        <span class="keyword">extends</span>     long        <span class="built_in">super</span></span><br><span class="line">char        final       native      synchronize</span><br><span class="line"><span class="class"><span class="keyword">class</span>       <span class="title">float</span>       <span class="title">package</span>     <span class="title">throws</span></span></span><br><span class="line"><span class="class"><span class="title">const</span>       <span class="title">goto</span>        <span class="title">private</span>     <span class="title">transient</span></span></span><br><span class="line"><span class="class"><span class="title">debugger</span>    <span class="title">implements</span>  <span class="title">pritected</span>   <span class="title">volatile</span></span></span><br><span class="line"><span class="class"><span class="title">double</span>      <span class="title">import</span>      <span class="title">public</span></span></span><br></pre></td></tr></table></figure><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面是变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">var</span> c;</span><br><span class="line">    c = a + b;</span><br></pre></td></tr></table></figure><p>先运算等号右边的 a+b，运算完后，再赋值给左边 c<br>先取值，再赋值</p><blockquote><p>运算大于赋值的优先级</p></blockquote><p>js 是动态语言，动态语言基本上都是解释性语言，解释性语言基本上都是脚本语言</p><p>js 是浮点型语言（带小数点）</p><h2 id="值类型（数据类型）"><a href="#值类型（数据类型）" class="headerlink" title="值类型（数据类型）"></a>值类型（数据类型）</h2><p>1、不可改变的原始值（栈数据）栈 stack<br>Number String Boolean undefined null<br>已经放进去的值不可改变，只会改房间编号为 null(硬盘原理)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Number 数字类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>; <span class="built_in">String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串类型,语言放双引号里</span></span><br><span class="line">例: <span class="keyword">var</span> a=”语言”，““是空串</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boolean 布尔数字</span></span><br><span class="line">就两个值，<span class="literal">false</span>，<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined：</span></span><br><span class="line">是没有定义的，表示还没赋值,仅一个值 underfined</span><br><span class="line"></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line">代表空，占位用，用空值来覆盖</span><br></pre></td></tr></table></figure><h2 id="栈、堆"><a href="#栈、堆" class="headerlink" title="栈、堆"></a>栈、堆</h2><p>array、Object、function、…date、RegExp</p><p>原始值存于 stack(栈) 里面的</p><p>引用值存于 heap(堆) 里面的;</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> b = a;</span><br><span class="line">    a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(b);</span><br><span class="line"></span><br><span class="line">    答案：<span class="number">10</span></span><br><span class="line">    原始值是我把一个值放到另一个值里面，改了第一个值，第二个值不变</span><br></pre></td></tr></table></figure><p>2、引用值（堆数据）大致上放堆 heap 里面</p><blockquote><p>array 数组, Object, function … data,RegExp 正则</p></blockquote><p>var arr = [1,2,3,4,5,false,”abc”]; //这是数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr;</span><br><span class="line">arr.push(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arr1);</span><br><span class="line"></span><br><span class="line">答案：arr 是 <span class="number">1</span>,<span class="number">2</span>。arr1 是 <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"></span><br><span class="line">引用值是把第一个值放到第二个值里面，改第一个值，第二个值也改变</span><br><span class="line">js 由值决定类型。原始值和引用值唯一的不同是赋值形式不同</span><br></pre></td></tr></table></figure><p>1、 栈 stack</p><p><code>先进去的东西最后出来，有底没有顶。</code></p><blockquote><p>在栈内存里面放东西，先放在底部</p></blockquote><p>2、 堆 heap</p><blockquote><p>怎么放怎么拿，散列结构</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;<span class="keyword">var</span> b = a；是 a 先取出 <span class="number">10</span>，copy 一份放到 b 里面，改变 a 的值，b 的值是不变的，再把 a=<span class="number">20</span>;时 b 的值还是 <span class="number">10</span>，不发生改变</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 =arr;</span><br><span class="line">arr.push(<span class="number">3</span>);</span><br><span class="line">答案：这往[<span class="number">1</span>,<span class="number">2</span>]放 <span class="number">3</span>，arr 和 arr1 都是[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">引用值是在栈内存里面放堆的地址，拷贝的也是地址，所以改变 arr，arr1 也改变了</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 =arr;</span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">document</span>.write(arr1);</span><br><span class="line">答案：arr = [<span class="number">1</span>,<span class="number">3</span>];是新建了一个新的房间。arr1 是 <span class="number">1</span>,<span class="number">2</span>,现在是插入新引入值”房间”,</span><br></pre></td></tr></table></figure><h2 id="js-语句基本规则"><a href="#js-语句基本规则" class="headerlink" title="js 语句基本规则"></a>js 语句基本规则</h2><ol><li><p>语句后面要用分号结束“；”但 function test(){}，for(){}，if(){}后面都不用加分号</p></li><li><p>js 语法错误会引发后续代码终止，但不会影响其它 js 代码块</p></li></ol><p>错误分为两种:</p><ol><li><p>低级错误（语法解析错误），不能写中文</p></li><li><p>逻辑错误（标准错误，情有可原，错的那个执行不了）</p></li><li><p>书写格式要规范，“= + / -”两边都应该有空格</p></li></ol><h2 id="js-输出"><a href="#js-输出" class="headerlink" title="js 输出"></a>js 输出</h2><p>console.log();是把信息展示（输出）在控制台</p><p>document.write();是把信息（输出）展示到网页</p><h1 id="js-运算符"><a href="#js-运算符" class="headerlink" title="js 运算符"></a>js 运算符</h1><h2 id="一、运算操作符"><a href="#一、运算操作符" class="headerlink" title="一、运算操作符"></a>一、运算操作符</h2><h3 id="“-”，“-”，“-“，“-”，”-“，“-”"><a href="#“-”，“-”，“-“，“-”，”-“，“-”" class="headerlink" title="“-”，“*”，“/“，“%”，”=“，“()”"></a>“-”，“*”，“/“，“%”，”=“，“()”</h3><blockquote><p>运算符除了 + 号两边的是转换为字符串，其他的运算符全部是转换为 Number 数字类型的</p></blockquote><h4 id="（加号）"><a href="#（加号）" class="headerlink" title="+（加号）"></a>+（加号）</h4><ol><li>“+”作用：数学运算、字符串链接</li></ol><blockquote><p>任何数据类型加字符串都等于字符串</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = “a”+ <span class="literal">true</span> + <span class="number">1</span>; <span class="comment">//打印 atrue1</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> + “a” + <span class="number">1</span> + <span class="number">1</span>; <span class="comment">//打印 1a11</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> + <span class="number">1</span> + “a” + <span class="number">1</span> + <span class="number">1</span>; <span class="comment">//打印 2a11，从左向右运算</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> + <span class="number">1</span> + “a” +( <span class="number">1</span> + <span class="number">2</span>); <span class="comment">//打印 2a3</span></span><br></pre></td></tr></table></figure><h4 id="（减号、乘号、除号）"><a href="#（减号、乘号、除号）" class="headerlink" title="- * /（减号、乘号、除号）"></a>- * /（减号、乘号、除号）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="number">0</span> – <span class="number">1</span>； <span class="comment">//等于-1</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">2</span> * <span class="number">1</span>； <span class="comment">//等于 2</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">0</span> / <span class="number">0</span>； <span class="comment">//答案是 NaN，应该得出一个数字类型的数，但是没法表达，</span></span><br><span class="line">就用 <span class="literal">NaN</span> (<span class="literal">NaN</span> 是 Not a <span class="built_in">Number</span> 非数，不是数，但是是数字类型</span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> / <span class="number">0</span>; <span class="comment">//是 infinity</span></span><br><span class="line">例 <span class="keyword">var</span> a = -<span class="number">1</span> / <span class="number">0</span>; <span class="comment">//是-infinity(无穷)</span></span><br></pre></td></tr></table></figure><h4 id="，（摩尔，模，是取余数的意思）"><a href="#，（摩尔，模，是取余数的意思）" class="headerlink" title="%，（摩尔，模，是取余数的意思）"></a>%，（摩尔，模，是取余数的意思）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a =<span class="number">5</span>%<span class="number">2</span> <span class="comment">//5%2 是五除二的余数，商二余一</span></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">5</span>%<span class="number">1</span> <span class="comment">//是五除一的余数，结果是 0</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> % <span class="number">5</span>; <span class="comment">//意思是 1 除以 5 的余数。商 0 余 1</span></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">4</span>%<span class="number">6</span> <span class="comment">//是四除六的余数，结果是 4</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">4</span>;a % = <span class="number">5</span>;<span class="built_in">document</span>.write(a); <span class="comment">// 4</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">0</span>;a % = <span class="number">5</span>;<span class="built_in">document</span>.write(a); <span class="comment">//0</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">10</span>;a %= <span class="number">2</span>;<span class="built_in">document</span>.write(a); <span class="comment">//0</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">3</span>;a % = <span class="number">4</span>; <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p><code>优先级”=“最弱【赋值符号优先级最低】，”()”优先级较高</code></p><h3 id="“-”，“-”，”-“，“-”，“-“，“-”，“-”"><a href="#“-”，“-”，”-“，“-”，“-“，“-”，“-”" class="headerlink" title="“++”，“- -”，”+=“，“-=”，“/=“，“*=”，“%=”"></a>“++”，“- -”，”+=“，“-=”，“/=“，“*=”，“%=”</h3><h4 id="（加加）"><a href="#（加加）" class="headerlink" title="++（加加）"></a>++（加加）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="number">10</span>; a = a + <span class="number">1</span>; <span class="comment">//结果 11</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a = a + <span class="number">1</span>;写成 a ++是一种简化形式 “++”，是自身加一，再赋值给自身</span><br><span class="line">a ++ 是 a = a + <span class="number">1</span> 的简化形式</span><br><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">10</span>；<span class="built_in">document</span>.write(++a );<span class="built_in">document</span>.write(a); <span class="comment">//答案 11；11</span></span><br><span class="line">是先执行++，再执行本条语句 <span class="built_in">document</span>.write(++a)</span><br><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">1</span>；<span class="built_in">document</span>.write(a ++);<span class="built_in">document</span>.write(a); <span class="comment">//答案 1；2。是先执行</span></span><br><span class="line">语句(<span class="built_in">document</span>.write(a))，再++，所以第一次打印的还是 a，第二次打印 a++后的值</span><br><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">10</span>；<span class="keyword">var</span> b=++a -<span class="number">1</span>+a++;<span class="built_in">document</span>.write(b + “ ” + a) <span class="comment">//答案 21 12</span></span><br><span class="line">先++a，这个时候 a=<span class="number">11</span>，再-<span class="number">1</span>，再加 a，b 就是 <span class="number">21</span>，最后++，a 就是 <span class="number">12</span></span><br><span class="line">赋值的顺序自右向左，计算的顺序自左向右（按数学来）</span><br><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">1</span>；<span class="keyword">var</span> b = a ++ + <span class="number">1</span>；<span class="built_in">document</span>.write(b)； <span class="comment">//答案 2，先执行 var b =a+1，</span></span><br><span class="line">再 a++</span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">1</span>；<span class="keyword">var</span> b = a ++ + <span class="number">1</span>；<span class="built_in">document</span>.write(a)；<span class="built_in">document</span>.write(b)； <span class="comment">//答案 2，2</span></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">1</span>；<span class="keyword">var</span> b = ++a + <span class="number">1</span>；<span class="built_in">document</span>.write(a)；<span class="built_in">document</span>.write(b)； <span class="comment">//答案 2，3</span></span><br><span class="line">例 <span class="keyword">var</span> i = <span class="number">1</span>;<span class="keyword">var</span> a = i++; <span class="comment">//答案 a = 1; 此时 i 先将值 1 赋给 a,然后自己+1，i=2;</span></span><br><span class="line"><span class="keyword">var</span> b = ++i; <span class="comment">//答案 b = 3；此时 i 先自己+1 为 3.再给 b 赋值，b=3;</span></span><br></pre></td></tr></table></figure><h4 id="–（减减）"><a href="#–（减减）" class="headerlink" title="–（减减）"></a>–（减减）</h4><p><code>“--”，是自身减一，在赋值给自身</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;<span class="keyword">var</span> b = a-- + -- a;<span class="built_in">document</span>.write(b); <span class="comment">//答案 0，先执行--a;此时 a 变成</span></span><br><span class="line"><span class="number">0</span>，然后第一个 a 也变成 <span class="number">0</span>，那么 b = <span class="number">0</span>-- + --a</span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;<span class="keyword">var</span> b = --a + --a;<span class="built_in">document</span>.write(b); <span class="comment">//答案-1</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;<span class="built_in">document</span>.write(a++);<span class="built_in">document</span>.write(a); <span class="comment">//答案 1；2</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;<span class="built_in">document</span>.write(++a);<span class="built_in">document</span>.write(a); <span class="comment">//答案 2；2</span></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">1</span>; <span class="keyword">var</span> b = a ++ +<span class="number">1</span>;<span class="built_in">document</span>.write(b); <span class="comment">//答案 2</span></span><br></pre></td></tr></table></figure><p>a 写在后面就后运行，先计算 a+1=2 赋值给 b 后再++</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;<span class="keyword">var</span> b = ++a + <span class="number">1</span>;<span class="built_in">document</span>.write(a);<span class="built_in">document</span>.write(b); <span class="comment">//答案 2；3</span></span><br></pre></td></tr></table></figure><h4 id="，-（加等于、减等于）"><a href="#，-（加等于、减等于）" class="headerlink" title="+= ， -=（加等于、减等于）"></a>+= ， -=（加等于、减等于）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a =<span class="number">10</span>;a ++;a ++;a ++;加十个      简化写法：a +=<span class="number">10</span>;也是 a = a+<span class="number">10</span>;</span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">10</span>;a += <span class="number">10</span> + <span class="number">1</span>; <span class="comment">//答案 21</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;a = a + <span class="number">10</span>;等于 a+=<span class="number">10</span></span><br><span class="line">a++是 a +=<span class="number">1</span> 的写法</span><br></pre></td></tr></table></figure><h4 id="（除等于）"><a href="#（除等于）" class="headerlink" title="/=（除等于）"></a>/=（除等于）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a /= <span class="number">2</span>; <span class="comment">//答案 5，是除二赋给自身的意思</span></span><br></pre></td></tr></table></figure><h4 id="（乘等于）"><a href="#（乘等于）" class="headerlink" title="*=（乘等于）"></a>*=（乘等于）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a =<span class="number">10</span>;a *=<span class="number">2</span>; <span class="comment">//答案：20，是乘二赋给自身的意思</span></span><br></pre></td></tr></table></figure><h4 id="（模等于）"><a href="#（模等于）" class="headerlink" title="%=（模等于）"></a>%=（模等于）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a=<span class="number">10</span>;a%=<span class="number">2</span>; <span class="comment">//答案：0， 10 能整除 2,余数是 0,取余，余数赋给自身。</span></span><br><span class="line">例 <span class="keyword">var</span> a=<span class="number">3</span>;a%=<span class="number">4</span>; <span class="comment">//答案：3，3 除以 4，余数为 3，余数赋给自身。</span></span><br><span class="line">例 <span class="keyword">var</span> a=<span class="number">0</span>;a%=<span class="number">4</span>; <span class="comment">//答案：0，0 除以 4，余数为 0，余数赋给自身。</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span>;a% =<span class="number">10</span>; <span class="comment">//答案：1，1 除以 10，余数为 1，余数赋给自身。</span></span><br></pre></td></tr></table></figure><p><strong>作业：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、写出打印结果</span><br><span class="line">    <span class="keyword">var</span> a =(<span class="number">10</span> * <span class="number">3</span> – <span class="number">4</span> / <span class="number">2</span> + <span class="number">1</span>)%<span class="number">2</span>,b=<span class="number">3</span>;b %= a + <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(a++);</span><br><span class="line">    <span class="built_in">document</span>.wtite(“&lt;br&gt;”);</span><br><span class="line">    <span class="built_in">document</span>.write(--b);</span><br><span class="line"><span class="number">2</span>、<span class="keyword">var</span> a =<span class="number">123</span>; <span class="keyword">var</span> b =<span class="number">234</span>;经过计算交换 a，b 的值</span><br><span class="line"></span><br><span class="line">作业答案</span><br><span class="line"><span class="number">1</span>、 <span class="built_in">document</span>.write(a++);是 <span class="number">1</span>（先打出 <span class="number">1</span> 再++）</span><br><span class="line">    <span class="built_in">document</span>.write(--b);是 <span class="number">2</span></span><br><span class="line">    b % =a + <span class="number">3</span>,的模等于 <span class="number">4</span>，除不开再赋值给 b，b 还是 <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、 方法一普通方法：<span class="keyword">var</span> c = a; a = b; b = c;<span class="built_in">document</span>.write(a ,b);</span><br><span class="line"></span><br><span class="line">    方法二 a = a + b; b = a – b; a = a – b; <span class="built_in">document</span>.write(a ,b);</span><br></pre></td></tr></table></figure><h2 id="二、比较运算符"><a href="#二、比较运算符" class="headerlink" title="二、比较运算符"></a>二、比较运算符</h2><blockquote><p>“&gt;”，”&lt;”，”==”，“&gt;=”，“&lt;=”，”!=”比较结果为 boolean 值</p></blockquote><p>但凡是运算符，都是要有运算的</p><p>用到布尔值，true 或 false</p><p>字符串的比较，比的是 ASCII 码（七位二进制 0000000）</p><h3 id="gt-，-lt-（大于、小于）"><a href="#gt-，-lt-（大于、小于）" class="headerlink" title="&gt;， &lt;（大于、小于）"></a>&gt;， &lt;（大于、小于）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="string">&quot;a&quot;</span>&gt;<span class="string">&quot;b&quot;</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案是 false</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> &gt; <span class="number">2</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案是 false</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> &lt; <span class="number">2</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案是 true</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="string">&quot;1&quot;</span>&gt;<span class="string">&quot;8&quot;</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案是 false</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="string">&quot;10&quot;</span>&gt;<span class="string">&quot;8&quot;</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案 false，不是十和八比，是字符串一</span></span><br><span class="line">零和八比，先用开头的一和八比，比不过就不看第二位了；一样的就拿零和八比</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案 false</span></span><br><span class="line">    运算结果为真实的值</span><br></pre></td></tr></table></figure><h3 id="，等于"><a href="#，等于" class="headerlink" title="==，等于"></a>==，等于</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> == <span class="number">2</span>; <span class="comment">//答案是说 1 等不等于 2，因为 1 肯定不等于 2，所以值为 false</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="literal">NaN</span> == <span class="literal">NaN</span>; <span class="comment">//答案是 false，NaN 不等于任何东西，包括他自己</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="literal">undefined</span> == underfined; <span class="comment">//答案是 true</span></span><br><span class="line">例 <span class="keyword">var</span> a = infinity == infinity; <span class="comment">//答案是 true</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="literal">NaN</span> == <span class="literal">NaN</span>; <span class="comment">//答案是 false。非数 NaN 是不等于自己的</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>NaN 得不出数，又是数字类型，就是 NaN</strong></p></blockquote><h3 id="gt-、-lt-、-（大于等于、小于等于、非等于）"><a href="#gt-、-lt-、-（大于等于、小于等于、非等于）" class="headerlink" title="&gt;=、&lt;=、!=（大于等于、小于等于、非等于）"></a>&gt;=、&lt;=、!=（大于等于、小于等于、非等于）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">比较结果为 boolean 值：<span class="literal">true</span> 和 <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="三、逻辑运算符：“-amp-amp-”，“-”，“-“运算结果为真实的值"><a href="#三、逻辑运算符：“-amp-amp-”，“-”，“-“运算结果为真实的值" class="headerlink" title="三、逻辑运算符：“&amp;&amp;”，“||”，“!“运算结果为真实的值"></a>三、逻辑运算符：“&amp;&amp;”，“||”，“!“运算结果为真实的值</h2><h3 id="“-amp-amp-”与运算符（与、并且）"><a href="#“-amp-amp-”与运算符（与、并且）" class="headerlink" title="“&amp;&amp;”与运算符（与、并且）"></a>“&amp;&amp;”与运算符（与、并且）</h3><blockquote><p>两个表达式：先看第一个表达式转换成布尔值的结果是否为真，如果结果为真，那么它会看第二个表达式转换为布尔值的结果，然后如果只有两个表达式的话，只看第二个表达式，就可以返回该表达式的值了，如果第一位布尔值为 false，不看后面的，返回第一个表达式的值就可以了</p></blockquote><p><code>运算符就是要求结果</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> &amp;&amp; <span class="number">2</span>;  <span class="comment">//答案 2，如果第一位 1 为真，结果就为第二位的值 2</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> &amp;&amp; <span class="number">2</span> + <span class="number">2</span>; <span class="comment">//答案 4，如果 1 为真，结果就为 4</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">0</span> &amp;&amp; <span class="number">2</span> + <span class="number">2</span>; <span class="comment">//答案 0</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="number">1</span> &amp;&amp; <span class="number">1</span> &amp;&amp; <span class="number">8</span>; <span class="comment">//答案 8，先看第一个是否为真，为真再看第二个，</span></span><br><span class="line"></span><br><span class="line">中途如果遇到 <span class="literal">false</span>，那就返回 <span class="literal">false</span> 的值</span><br><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> a =<span class="number">1</span> + <span class="number">1</span> &amp;&amp; <span class="number">1</span> – <span class="number">1</span>;<span class="built_in">document</span>.write(a); <span class="comment">//答案 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>如果是三个或多个表达式，会先看第一个表达式是否为真，如果为真，就看第二个表达式，如果第二个也为真，就看第三个表达式（如果为真就往后看，一旦遇到假就返回到假的值），如果第三个是最后一个表达式，那就直接返回第三个的结果</code></p><blockquote><p>如果第一个是假，就返回第一个值，当是真的时候就往后走，一旦遇到假，就返回被认定为 false(假) 的值：转换为布尔值会被认定为 false 的值 undefined， null， NaN， “”（空串）， 0， false</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="number">2</span> &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">document</span>.write(‘成哥很帅’) <span class="comment">//意思是如果 2 大于 1，那么就打印成哥很帅，如果前面真才能执行后面的（相当于短路语句使用）</span></span><br><span class="line">   &amp;&amp; 与 运算符是有中断作用的，当短路语句使用(如果。。那么。。)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = ...; <span class="comment">//执行一个语句，会用到 data</span></span><br><span class="line">    data&amp;&amp;执行一个语句全用到 data</span><br><span class="line">data &amp;&amp; <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="amp-与运算-我们一般不用"><a href="#amp-与运算-我们一般不用" class="headerlink" title="&amp;与运算 我们一般不用"></a>&amp;与运算 我们一般不用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> &amp; <span class="number">2</span>;<span class="built_in">document</span>.write(num); <span class="comment">//答案 0</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> &amp; <span class="number">1</span>;<span class="built_in">document</span>.write(num); <span class="comment">//答案 1</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> &amp; <span class="number">3</span>;<span class="built_in">document</span>.write(num); <span class="comment">//答案 1</span></span><br></pre></td></tr></table></figure><ol><li>上下一与，不同为 0，相同为 1</li></ol><ul><li>在二进制中，是 1（为了对齐补的 0） 0 1</li><li>在二进制中，是 11 1 1</li><li>运算结果 0 1</li></ul><h3 id="“-”或运算符（或者）"><a href="#“-”或运算符（或者）" class="headerlink" title="“||”或运算符（或者）"></a>“||”或运算符（或者）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> || <span class="number">3</span>; <span class="comment">//答案 1</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">0</span> || <span class="number">3</span>; <span class="comment">//答案 3</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">0</span> || <span class="literal">false</span>; <span class="comment">//答案是 false</span></span><br></pre></td></tr></table></figure><p><code>看第一个表达式是否为真，如果为真，则返回第一个值，碰到真就返回</code></p><p><code>如果第一个表达式是假，就看第二个表达式，如果第二个是最后一个，就返回第二个的值</code></p><p><code>关注真假的说法：全假才为假，有一个真就为真</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> num = <span class="number">0</span> || <span class="literal">false</span> || <span class="number">1</span>; <span class="built_in">document</span>.write(num); <span class="comment">//答案 1</span></span><br><span class="line">例:</span><br><span class="line">    div .onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    非 IE 浏览器直接取 e 值</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> event = e;</span><br><span class="line">    IE 浏览器存在 <span class="built_in">window</span>.event;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    写成下面这样就解决了兼容性。在所有的浏览器中都好使</span><br><span class="line">    div .onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;&#125;</span><br></pre></td></tr></table></figure><h3 id="“-“非运算符，否的意思"><a href="#“-“非运算符，否的意思" class="headerlink" title="“!“非运算符，否的意思"></a>“!“非运算符，否的意思</h3><p>先转成布尔值，再取反</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = !<span class="number">123</span>; <span class="built_in">document</span>.write(a); <span class="comment">//答案 false。123 的布尔值是 true，取反是 false</span></span><br><span class="line">例 <span class="keyword">var</span> a = !<span class="string">&quot;&quot;</span>;  <span class="built_in">document</span>.write(a); <span class="comment">//答案 true。空串””布尔值是 false，取反是 true</span></span><br><span class="line">例 <span class="keyword">var</span> a = !!<span class="string">&quot;&quot;</span>; <span class="built_in">document</span>.write(a); <span class="comment">//答案 false，取反后，再反过来，结果不变</span></span><br><span class="line">例 <span class="keyword">var</span> a = <span class="literal">true</span>; a =!a; <span class="built_in">document</span>.write(a) <span class="comment">//答案 false，自身取反，再赋值给自身</span></span><br></pre></td></tr></table></figure><p><code>!=（非等于）是表达它们不等于</code></p><p><code>被认定为 false 的值：转换为布尔值会被认定为 false 的值 undefined， null， NaN，&quot;&quot;（空串）， 0， false</code></p><h2 id="（逗号）操作符"><a href="#（逗号）操作符" class="headerlink" title=", （逗号）操作符"></a>, （逗号）操作符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> a = (<span class="number">1</span> - <span class="number">1</span>, <span class="number">1</span> + <span class="number">1</span>);</span><br><span class="line">    答案：<span class="number">2</span>；</span><br><span class="line"></span><br><span class="line">    逗号操作符，这种情况，会先看一眼<span class="number">1</span>，再看一眼<span class="number">2</span>，然后返回<span class="number">2</span>，就是<span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> f = (</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    )();</span><br><span class="line">    <span class="keyword">typeof</span> f;</span><br><span class="line">    <span class="comment">// 在控制器中输出：</span></span><br><span class="line">    <span class="comment">// &gt;  1,2</span></span><br><span class="line">    <span class="comment">// &lt;· 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var num = (1,2);</span></span><br><span class="line">    <span class="comment">// &lt;· 2</span></span><br><span class="line"></span><br><span class="line">，逗号 是一个运算符，由于有 括号() 的加持，所以先执行 (，逗号运算符)</span><br><span class="line"></span><br><span class="line">逗号 操作符的意思是先看前面的表达式，如果前面的表达式需要‘计算’的话，可以先计算，然后在计算后面的表达式(如果后面的表达式用计算的话)，都计算完之后，把后面的表达式计算结果返回回去。</span><br></pre></td></tr></table></figure><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><h2 id="一、If-语句-if、if-else-if-if-lt-—-gt-amp-amp-转换"><a href="#一、If-语句-if、if-else-if-if-lt-—-gt-amp-amp-转换" class="headerlink" title="一、If 语句 if、if else if if &lt;—&gt; &amp;&amp; 转换"></a>一、If 语句 if、if else if if &lt;—&gt; &amp;&amp; 转换</h2><p><code>if(条件判断)&#123; 当条件成立时，执行里面的执行语句 &#125; 当 if() 中的条件成立时，才能执行&#123;&#125;内的语句 当条件转化为布尔值，如果为 true 就执行；如果为 false 就不执行</code></p><h3 id="放在-if-中是或者的意思，有一个是真就可以了"><a href="#放在-if-中是或者的意思，有一个是真就可以了" class="headerlink" title="|| 放在 if 中是或者的意思，有一个是真就可以了"></a><strong>|| 放在 if 中是或者的意思，有一个是真就可以了</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">if</span>(<span class="number">1</span> &lt; <span class="number">2</span>)&#123;<span class="built_in">document</span>.write(“老邓很丑”);&#125;</span><br><span class="line">例 <span class="keyword">if</span> ( <span class="number">1</span> &gt; <span class="number">0</span> &amp;&amp; <span class="number">8</span> &gt; <span class="number">9</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="amp-amp-放在-if-中的，全真才为真，-amp-amp-是并且的意思"><a href="#amp-amp-放在-if-中的，全真才为真，-amp-amp-是并且的意思" class="headerlink" title="&amp;&amp;放在 if 中的，全真才为真，&amp;&amp;是并且的意思"></a><strong>&amp;&amp;放在 if 中的，全真才为真，&amp;&amp;是并且的意思</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">if</span> ( <span class="number">1</span> &gt; <span class="number">0</span> || <span class="number">8</span> &gt; <span class="number">9</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="if-和-amp-amp-的互相转化"><a href="#if-和-amp-amp-的互相转化" class="headerlink" title="if 和&amp;&amp;的互相转化"></a><strong>if 和&amp;&amp;的互相转化</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    90一100       alibaba</span></span><br><span class="line"><span class="comment">    80一90        tencent toutiao meituan 滴滴</span></span><br><span class="line"><span class="comment">    70一80        baidu eleme xiecheng 58赶集</span></span><br><span class="line"><span class="comment">    60一70        蘑菇街</span></span><br><span class="line"><span class="comment">    60以下        你肯定不是我教的!!!</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> score = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">&quot;input&quot;</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (score &gt; <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;alibaba&quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (score &gt; <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">90</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;tencent&quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (score &gt; <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">80</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;baidu&quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (score &gt; <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">70</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;mogujie&quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (score &lt; <span class="number">60</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;Oh my god!!! &quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>不能写 (90 &lt; score &lt; 100),这样写会先比 90 &lt; score,等于 true 以后再跟 100 比</code></p><p><code>else if 满足了第一条就不看第二条了，用 else if 要满足条件与条件之间互斥，不能有交叉点。除了上面所有以外的。else if 除了这个以外，满足第一个就不看了，不满足就看后面的</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    else if 除了这以外在看这个满不满足。满足条件后就不看了，上面的写法不够简洁</span></span><br><span class="line"><span class="comment">    下面 是 上面这个条件的补集</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> score = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">&quot;input&quot;</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (score &gt; <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;alibaba&quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">90</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;tencent&quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">80</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;baidu&quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">70</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;mogujie&quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">60</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;Oh my god!!! &quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="amp-amp-和-比较常用在条件判断中"><a href="#amp-amp-和-比较常用在条件判断中" class="headerlink" title="&amp;&amp;和 || 比较常用在条件判断中"></a><strong>&amp;&amp;和 || 比较常用在条件判断中</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">1</span> &gt; <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上面与右边效果完全一样 <span class="number">1</span> &gt; <span class="number">2</span> &amp;&amp; <span class="built_in">document</span>.write(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="二、for-循环-for-循环不固定，非常灵活"><a href="#二、for-循环-for-循环不固定，非常灵活" class="headerlink" title="二、for 循环(for 循环不固定，非常灵活)"></a>二、for 循环(for 循环不固定，非常灵活)</h2><blockquote><p>格式 for (var i = 0; i &lt; 10; i++) { }</p></blockquote><p><code>for 是关键字，（）括号里面三个语句用两个分号隔开，&#123;&#125;里面是循环体</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印十个 a，写成：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>执行顺序如下</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) <span class="keyword">if</span>(i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(‘a’)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把条件判断放到 if 里面,条件判断成立，就执行&#123;&#125;中间的执行体</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>) i ++</span><br><span class="line"><span class="comment">// 看 i++，此时 i 变成 1，i = 1；</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>) <span class="keyword">if</span>(i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(‘a’)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把条件判断放到 if 里面,条件判断成立，就执行&#123;&#125;中间的执行体</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>) i ++</span><br><span class="line"><span class="comment">// 看 i++，此时 i 变成 1，i=1；</span></span><br><span class="line">——————如此反复</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">先执行一遍(<span class="number">1</span>)，</span><br><span class="line">判断(<span class="number">2</span>)执行语句成不成立，条件成立就执行(<span class="number">3</span>),</span><br><span class="line">判断(<span class="number">2</span>)执行语句成不成立，条件成立就执行(<span class="number">3</span>),</span><br><span class="line">......当有一次判断不成立，就停止</span><br></pre></td></tr></table></figure><blockquote><p>因为看的是执行顺序，写外面也可以，执行顺序是一样，打印十个 a，也可以写成：</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印十个 a 也可以写成:</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> cout = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i; ) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; i; ) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  i++;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">11</span>) &#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例:打印 0-9:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求 0-9 的和</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  count += i;</span><br><span class="line">  <span class="built_in">document</span>.write(count + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印 100 以内能被 3 整除，或者能被 5 整除，或者能被 7 整除的数：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> || i % <span class="number">5</span> == <span class="number">0</span> || i % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;i&quot;</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用 for 循环打印一百个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for 循环中的三句只能写一句，打印 100 个数：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">100</span>; ) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for 循环中的函数体里面只能写一句，打印 100 个数：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (; i--; ) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、while-do-while"><a href="#三、while-do-while" class="headerlink" title="三、while, do while"></a>三、while, do while</h2><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p><code>while 循环是 for 循环的简化版 for( ； ； )&#123;&#125;，while 循环底层机制是 for 循环。</code></p><p><code>for ( ; 只在这一部分写，前后不写 ; )&#123;&#125;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上下这两个完全相等;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 死循环 never-ending loop 无限循环</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例打印一百以内，7 的倍数就输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;i&quot;</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例打印一百以内，7 的倍数或逢 7 就输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span> || i % <span class="number">10</span> == <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h3><p><code>do while 是不管满不满足条件都会先执行一次，再判断成不成立，如果成立才会执行 第二次，不成立就停止, 一般没人用</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ul><li><p>（先找规律，再写出来） 提示：var n = parseIn(window.prompt(‘input’));</p></li><li><p>JS 可以进行浮点计算</p></li></ul><ol><li>计算 2 的 n 次幂，n 可输入，n 为自然数。</li><li>计算 n 的阶乘，n 可输入。即 5！=5<em>4</em>3<em>2</em>1，最好写个 if</li><li>著名的斐波那契额数列(这个数列从第 3 项开始，每一项都等于前两项之和) 1 1 2 3 5 8 输出第 n 项</li><li>编写一程序，输入一个三位数的正整数，输出时反向输出。如：输入 456,输出 654</li><li>输入 a,b,c 三个数字，打印出最大的。</li><li>打印出 100 以内的质数（从 1 除到他本身，只能有两个因数）</li></ol><h2 id="作业答案"><a href="#作业答案" class="headerlink" title="作业答案"></a>作业答案</h2><p>1、原有结果 * 2,mul 是存上一个数的结果</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.promt(<span class="string">&quot;input&quot;</span>));</span><br><span class="line">    <span class="keyword">var</span> mul = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        mul *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(mul);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、计算 n 的阶乘，n 可输入。即 5！=5<em>4</em>3<em>2</em>1，最好写个 if</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.promt(<span class="string">&quot;input&quot;</span>));</span><br><span class="line">    <span class="keyword">var</span> mul = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n; i ++)&#123;</span><br><span class="line">        mul *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(mul);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3、斐不那契数列 第六位是四次运算，第七位是五次运算（第三位=第一位+第二位） 第一次计算的完整过程是把第一位和第二位相加，等于第三位，并且把游标向后挪 一位。下面 for（里面的 i 是控制循环圈数的）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">&quot;input&quot;</span>));</span><br><span class="line">    <span class="keyword">var</span> first = <span class="number">1</span>;</span><br><span class="line">        second = <span class="number">1</span>;</span><br><span class="line">        third;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n - <span class="number">2</span>; i ++)&#123;</span><br><span class="line">            third = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = third;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.write(third);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>4、取模除减。先把 456 提出出来，再反过来。6 是取模除减%10 余 6。再用 456 减 6， 剩下 450；450%100 是 50，50 除以 10，取出 5，450-50 剩下 400；400%100，再反着乘一遍，十位乘以 10，百位乘以 100。（中间的位数其实可以不动）</p><p>5、输入 a,b,c 三个数字，打印出最大的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">&quot;input&quot;</span>));</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.promot(<span class="string">&quot;input&quot;</span>));</span><br><span class="line"><span class="keyword">var</span> c = pars0eInt(<span class="built_in">window</span>.prompt(<span class="string">&quot;input&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; c) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(a);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (b &gt; c) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(b);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>, write(c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、有一个判断质数的算法,看看每一个 i 是不是质数,从自身开始除一直除到 1，只能被自己和 1 整除，只能整除 2 次</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 看一看每一个 i 是否是质数</span></span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (count == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>以下是最简单的方法：从 1 到 10 能整除，除平方数以下的</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 看一看每一个 i 是否是质数</span></span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="built_in">Math</span>.sqrt(i); j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="条件语句补充"><a href="#条件语句补充" class="headerlink" title="条件语句补充"></a>条件语句补充</h1><h2 id="一、switch-case-条件判断语句"><a href="#一、switch-case-条件判断语句" class="headerlink" title="一、switch case 条件判断语句"></a>一、switch case 条件判断语句</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(条件判断)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(条件)&#123;</span><br><span class="line">    <span class="keyword">case</span> 写条件：里面判是否相符：</span><br><span class="line">        如果相符合就执行 <span class="keyword">case</span> 后面的语句比如 <span class="built_in">console</span>.log(‘a’)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>switch 不负责任，如果判断了 a 是符合条件的，也会把后面的连带打印出来</code></p><p><code>加个 break，就可以终止语句</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;a&quot;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            condole.log(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">            condole.log(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>switch 找到满足要求的语句后，后面的语句虽然不判断了，但是也会执行出来</code></p><p><code>加个 break，就可以终止 swich case 语句</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;a&quot;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            condole.log(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">            condole.log(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>例 if( score == 90){}else if ( score == 100){}</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="built_in">window</span>.prompt(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span>(date)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;monday&quot;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;working&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;tuesday&quot;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;working&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;wednesday&quot;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;working&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;thursday&quot;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;working&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;friday&quot;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;working&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;周六&quot;</span>:</span><br><span class="line">            condole.log(<span class="string">&quot;relaxing&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;周日&quot;</span>:</span><br><span class="line">            condole.log(<span class="string">&quot;relaxing&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>简化写法:</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="built_in">window</span>.prompt(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span>(date)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;monday&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;tuesday&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;wednesday&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;thursday&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;friday&quot;</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;working&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;周六&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;周日&quot;</span>:</span><br><span class="line">            condole.log(<span class="string">&quot;relaxing&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="二、break-的标准定义是终止循环，break-必须要放在循环里面，switch-for-while-都是循环"><a href="#二、break-的标准定义是终止循环，break-必须要放在循环里面，switch-for-while-都是循环" class="headerlink" title="二、break 的标准定义是终止循环，break 必须要放在循环里面，switch, for,while 都是循环"></a>二、break 的标准定义是终止循环，break 必须要放在循环里面，switch, for,while 都是循环</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    i ++;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">100</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>break 终止的是 while，对 if 没有影响</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">从 <span class="number">0</span> 开始加，加到 <span class="number">100</span> 以上就停止</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="keyword">if</span>(sum &gt; <span class="number">100</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、continue-继续、终止本次循环，来进行下一次循环"><a href="#三、continue-继续、终止本次循环，来进行下一次循环" class="headerlink" title="三、continue 继续、终止本次循环，来进行下一次循环"></a>三、continue 继续、终止本次循环，来进行下一次循环</h2><p>终止本次循环，后面的都不执行了，来进行下一次的循环</p><p>js 里面是没有 goto 的，c 语言里面有</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">当 i 是 <span class="number">7</span> 的倍数，或尾数是 <span class="number">7</span> 的时候，不打印</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>( i % <span class="number">7</span> == <span class="number">0</span> || i % <span class="number">10</span> == <span class="number">7</span>)&#123;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下面写法更好</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span> || i % <span class="number">10</span> == <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="初识引用值"><a href="#初识引用值" class="headerlink" title="初识引用值"></a>初识引用值</h1><h2 id="一、数组（下面方括号的），arr-也是数组"><a href="#一、数组（下面方括号的），arr-也是数组" class="headerlink" title="一、数组（下面方括号的），arr =也是数组"></a>一、数组（下面方括号的），arr =也是数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,”abc”,<span class="literal">undefined</span>];</span><br><span class="line">arr [<span class="number">0</span>] 代表查数组的第一位，因为数字是从 <span class="number">0</span> 开始的算的</span><br><span class="line">arr [<span class="number">0</span>] = <span class="number">3</span>; 是指把数组的第一位改成 <span class="number">3</span>，显示 <span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>, ”abc”,<span class="literal">undefined</span></span><br><span class="line">arr.length;是数组的长度，有多少位就有多少</span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">//答案是 8 位</span></span><br></pre></td></tr></table></figure><p>1.<strong>利用 for 循环把数组中的每一位都拿出来——遍历</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="string">&quot;abc&quot;</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.letter; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<strong>把数组中的每一位都改成 1</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">45</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="string">&quot;abc&quot;</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  arr[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.<strong>把数组中的每一位都加 1</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, , <span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  arr[i] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、对象-object"><a href="#二、对象-object" class="headerlink" title="二、对象 object"></a>二、对象 object</h2><blockquote><p>面向对象的编程方法</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    里面存属性和方法</span><br><span class="line">    key 属性名：value 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>在&#123;&#125;面用。属性与属性之间用逗号隔开</code></p><p><code>属性值可以双引号或单引号；属性名是为了方便找到他，只是一个辅助</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deng = &#123;</span><br><span class="line">        <span class="attr">lastName</span> : <span class="string">&quot;Deng&quot;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">40</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">wife</span> : <span class="string">&quot;xiaoliu&quot;</span>,</span><br><span class="line">        <span class="attr">father</span> : <span class="string">&quot;dengdaye&quot;</span>,</span><br><span class="line">        <span class="attr">son</span> : <span class="string">&quot;xiaodeng&quot;</span>,</span><br><span class="line">        <span class="attr">handsome</span> :<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(deng.lastName); <span class="comment">//取值方式 deng.lastName</span></span><br><span class="line">赋值 deng.lastName = “old deng”;</span><br><span class="line">    <span class="built_in">console</span>.log(deng.lastName);</span><br></pre></td></tr></table></figure><h1 id="编程形式的区别"><a href="#编程形式的区别" class="headerlink" title="编程形式的区别"></a>编程形式的区别</h1><p><code>面向过程，如 c (第一步干嘛，第二步干嘛)</code></p><p><code>面向对象（对象 object） （现在 js 是一半面向过程，一半面向对象，前面学的都是面向过程）</code><br>``</p><h1 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h1><blockquote><p>typeof 能返回的六种数据类型（区分数字类型）</p></blockquote><p><code>number、string、boolean、undefined、object、function</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> num = <span class="number">123</span>;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">//返回 number</span></span><br></pre></td></tr></table></figure><p><code>写成 console.log(typeof num );也可以,不过最好加括号</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> num = &#123;&#125;; <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">//泛泛的引入值都返回 object</span></span><br><span class="line">例 <span class="keyword">var</span> num = [];<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">//泛泛的引入值都返回 object</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="literal">null</span>;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">//答案 null 返回 object，最早是代替空对象的</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="literal">undefined</span>;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">//答案返回 undefined</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="function"><span class="title">fuction</span>(<span class="params"></span>)</span>&#123;&#125;;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">// 答案返回 function</span></span><br></pre></td></tr></table></figure><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> +“<span class="number">1</span>”; <span class="comment">//显示 11</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> *“<span class="number">1</span>”;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num); <span class="comment">//显示 number:1</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">1</span> -“<span class="number">1</span>”;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num); <span class="comment">//显示 number:0</span></span><br><span class="line">例 <span class="keyword">var</span> num = “<span class="number">2</span>” -“<span class="number">1</span>”;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num); <span class="comment">//显示 number:1</span></span><br><span class="line">例 <span class="keyword">var</span> num = “<span class="number">2</span>” *“<span class="number">1</span>”;<span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num); <span class="comment">//显示 number:2</span></span><br></pre></td></tr></table></figure><blockquote><p>以上例子说明 js 有类型转换</p></blockquote><h2 id="一、显示类型转换"><a href="#一、显示类型转换" class="headerlink" title="一、显示类型转换"></a>一、显示类型转换</h2><h3 id="Number-mix-是想把里面的东西转换成数字"><a href="#Number-mix-是想把里面的东西转换成数字" class="headerlink" title="Number(mix) 是想把里面的东西转换成数字"></a>Number(mix) 是想把里面的东西转换成数字</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(‘<span class="number">123</span>’);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="number">123</span>，把字符串类型的 <span class="number">123</span> 转换成了 number 类型</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">123</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="number">123</span>，上面那一行的 <span class="built_in">Number</span> 是为了把()里面转换成数字类型</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="number">1</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="number">0</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="number">0</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="literal">NaN</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “abc”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="literal">NaN</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “-<span class="number">123</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:-<span class="number">123</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “123abc”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 <span class="built_in">Number</span>:<span class="literal">NaN</span></span><br></pre></td></tr></table></figure><h3 id="parseInt-string-radix"><a href="#parseInt-string-radix" class="headerlink" title="parseInt(string,radix)"></a>parseInt(string,radix)</h3><blockquote><p>parse 是转化，Int 是整型，整数，目的是把里面转换成整数</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo =”<span class="number">123</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number:<span class="number">123</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="literal">NaN</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="literal">NaN</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="number">123.9</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">123</span>，此处是直接去掉小数，不是四舍五入</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">10</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo ,<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">16</span></span><br></pre></td></tr></table></figure><blockquote><p>var num = parseInt(demo ,radix); //radix 是基底的意思</p></blockquote><p><strong>radix 写成 16，系统会认为是以 16 进制为基底， 10（一零）是 16 进制的一零，是<br>以 16 进制为基底，把他转成为 10 进制的数字（就是 16），上面是以目标进制为基底，<br>转换成十进制（radix 范围是 2-36）</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">3</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo ,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="literal">NaN</span></span><br><span class="line">例</span><br><span class="line">    <span class="keyword">var</span> demo = “b”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo ,<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">11</span></span><br><span class="line">例</span><br><span class="line">    <span class="keyword">var</span> demo = “123abc”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">123</span></span><br><span class="line">例</span><br><span class="line">    <span class="keyword">var</span> demo = “100px”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">100</span></span><br></pre></td></tr></table></figure><blockquote><p>parseInt 从数字类开始看，看到非数字类为止，返回原来的数</p></blockquote><h3 id="parseFloat-string"><a href="#parseFloat-string" class="headerlink" title="parseFloat(string)"></a>parseFloat(string)</h3><blockquote><p>parseFloat(string)转换成浮点数字，就是正常小数</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">100.2</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseFloat</span> (demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">100.2</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">100.2</span><span class="number">.3</span>”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseFloat</span> (demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">100.2</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “<span class="number">100.</span>2abc”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseFloat</span> (demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 number: <span class="number">100.2</span></span><br></pre></td></tr></table></figure><blockquote><p>parseFloat 从数字类开始看，看到除了第一个点以外的非数字类为截止，返回前面的数</p></blockquote><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><blockquote><p>把 谁 变成字符串类型 (以 10 为基底转换为目标进制)（undefined 和 null 不可以用 toString 方法）；</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">var</span> num = demo.toString();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 string: <span class="number">123</span>。相当于把 <span class="number">123</span> 转换字符串。</span><br></pre></td></tr></table></figure><blockquote><p>想把谁转换成字符串，就写成谁.toString，上面是想把 demo 转换成 toString，写成 demo.toString</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">var</span> num = demo.toString();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示报错，<span class="literal">undefined</span> 和 <span class="literal">null</span> 不能用 toString</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">var</span> num = demo.toString(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案 <span class="number">173</span>，把 <span class="number">123</span> 转成为八进制</span><br></pre></td></tr></table></figure><blockquote><p>这里的 radix 意思是以十进制为基底，转换成目标进制（即 8 进制）</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> num = demo.toString(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案 <span class="number">12</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">var</span> num = demo.toString(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案 <span class="number">24</span>。以十进制为基底，把 <span class="number">20</span> 转换成 <span class="number">8</span> 进制，就是 <span class="number">24</span></span><br><span class="line">例:</span><br><span class="line">    给你一个二进制的数，转换成十六进制，是先从二进制到十进制再到十六进制</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10101010</span>;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="built_in">parseInt</span>(num, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(test.toString(<span class="number">16</span>));</span><br><span class="line">    答案 aa</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="built_in">parseInt</span>(num, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(test.toString(<span class="number">16</span>));</span><br><span class="line">    答案 <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="String-mix"><a href="#String-mix" class="headerlink" title="String(mix)"></a>String(mix)</h3><blockquote><p>String(mix)转换成字符串，写什么都成了字符串</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="number">123.234</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">String</span> (demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 string: <span class="number">123.234</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">String</span> (demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 string: <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean()"></a>Boolean()</h3><blockquote><p>Boolean()转换成布尔值 false 和 true</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> demo = “”;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">String</span> (demo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “:” + num);</span><br><span class="line">    答案显示 boolean: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="toFixed"><a href="#toFixed" class="headerlink" title="toFixed"></a>toFixed</h3><blockquote><p>toFixed 就是保留小数点几位</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">var</span> num = <span class="number">123.456789</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">3</span>));</span><br><span class="line">效果：</span><br><span class="line">num = <span class="number">123.457</span>(四舍五入)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、隐式类型转换"><a href="#二、隐式类型转换" class="headerlink" title="二、隐式类型转换"></a>二、隐式类型转换</h2><ol><li><p>隐式类型转换是跟你转换了也不知道</p></li><li><p>隐式类型转换内部隐式调用的是显示的方法</p></li><li><p>隐式类型转换包括 isNaN () ，++，–， +/-（一元正负），+，*，% ，，&amp;&amp;，|| ，！，&lt;，&gt;，&lt;= ，&gt;= ，== ，!=</p></li></ol><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN ();"></a>isNaN ();</h3><blockquote><p>isNaN ();当你把一个数放到()里，它能判断是不是 NaN，先比括号里面的放到 number 里面转换，然后返回来</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">//答案 true</span></span><br><span class="line">例 <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(“<span class="number">123</span>”); <span class="comment">//答案 false</span></span><br><span class="line">例 <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(“abc”); <span class="comment">//答案 true。会调用 number，先把“abc”</span></span><br></pre></td></tr></table></figure><blockquote><p>放 number 里面转换，通过 number 的转换再和 NaN 比对，如果相等就是 true</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">null</span>); <span class="comment">//答案 false，在 number 里面放 null 是 0，不是 NaN</span></span><br><span class="line">例 <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">undefined</span>); <span class="comment">//答案 true</span></span><br></pre></td></tr></table></figure><h3 id="–（加加减减）-（一元正负）"><a href="#–（加加减减）-（一元正负）" class="headerlink" title="++/–（加加减减） +/-（一元正负）"></a>++/–（加加减减） +/-（一元正负）</h3><ol><li>++/–（加加减减）</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = “<span class="number">123</span>”;</span><br><span class="line">    a ++;</span><br><span class="line">    答案 <span class="number">124</span>，++这个符号放到这里，还没运算之前，先把前面的 a 转换成 number 的 <span class="number">123</span></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = “abc”;</span><br><span class="line">    a ++;</span><br><span class="line">    答案 <span class="literal">NaN</span></span><br></pre></td></tr></table></figure><ol start="2"><li>+/-（一元正负）</li></ol><blockquote><p>+a;-a;正 a 和负 a 都会变换成数字</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a =+<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">答案 <span class="literal">NaN</span>:number。</span><br></pre></td></tr></table></figure><blockquote><p>尽管转换不成数字，也会转换成数字类型，因为里面隐式的调用了一个 number</p></blockquote><h3 id=""><a href="#" class="headerlink" title="+"></a>+</h3><blockquote><p>+隐式类型会转换成 string，当加号两侧有一个是字符串，就用调用 string，把两个都变成字符串</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="keyword">var</span> a = <span class="string">&quot;a&quot;</span> +<span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(a + <span class="string">&quot;:&quot;</span> + <span class="keyword">typeof</span>(a));</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title="* , %"></a>* , %</h3><blockquote><p>*和% 乘和模都会转换成 number</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&quot;1&quot;</span> *<span class="number">1</span>; <span class="built_in">console</span>.log(a + <span class="string">&quot;:&quot;</span> + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案 <span class="number">1</span>：number</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&quot;:&quot;</span> *<span class="number">1</span>; <span class="built_in">console</span>.log(a + <span class="string">&quot;:&quot;</span> + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案 <span class="number">1</span>：number，先是 number(<span class="string">&quot;a&quot;</span>)的结果乘以 number(<span class="number">1</span>)的结果，最后是 <span class="literal">NaN</span>*<span class="number">1</span>，还是 <span class="literal">NaN</span>，但是数据类型是 number</span><br></pre></td></tr></table></figure><h3 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp; || !"></a>&amp;&amp; || !</h3><blockquote><p>与或非，都是有类型转换的，不过是返回的是表达式的值，不是隐式类型转换的值，但是判断是一个类型转换的值</p></blockquote><h3 id="lt-，-gt-，-lt-，-gt"><a href="#lt-，-gt-，-lt-，-gt" class="headerlink" title="&lt; ， &gt; ， &lt;= ， &gt;="></a>&lt; ， &gt; ， &lt;= ， &gt;=</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">1</span> &gt; “<span class="number">2</span>”; <span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案 <span class="literal">false</span>:boolean，有数字相比较的，就会隐士类型转换成数字类型</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a =”<span class="number">3</span>” &gt; “<span class="number">2</span>”; <span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案这个没类型转换，这个比的是 ASCⅡ</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a =”<span class="number">3</span>” &gt; <span class="number">2</span>; <span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案 <span class="literal">true</span>：boolean 会转换成数字，因为数字优先</span><br></pre></td></tr></table></figure><h3 id="，-，"><a href="#，-，" class="headerlink" title="== ， ! ， ="></a>== ， ! ， =</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span> == “<span class="number">1</span>”; <span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案 <span class="literal">true</span>:boolean，也有隐士类型转换</span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span> == <span class="literal">true</span>; <span class="built_in">console</span>.log(a + “:” + <span class="keyword">typeof</span>(a));</span><br><span class="line">    答案相等</span><br></pre></td></tr></table></figure><p>！= 也是这样<br>特殊东西，在控制台操作</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="literal">false</span> &gt; <span class="literal">true</span>; <span class="comment">//答案 false，会先转换成数字，0&gt;1 当然是错的</span></span><br><span class="line">例: <span class="number">2</span> &gt; <span class="number">1</span> &gt; <span class="number">3</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="number">2</span> &gt; <span class="number">3</span> &lt; <span class="number">1</span>; <span class="comment">//答案 true</span></span><br><span class="line">例: <span class="number">10</span> &gt; <span class="number">100</span> &gt; <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="number">100</span> &gt; <span class="number">10</span> &gt; <span class="number">0</span>; <span class="comment">//答案 true</span></span><br></pre></td></tr></table></figure><blockquote><p>以上都是挨个算的，先看前面的是 true 还是 false，再和后面的比，不是顺着下来</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="literal">undefined</span> &gt; <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="literal">undefined</span> == <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="literal">undefined</span> &lt; <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="literal">null</span> &gt; <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="literal">null</span> == <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="literal">null</span> &lt; <span class="number">0</span>; <span class="comment">//答案 false</span></span><br><span class="line">例: <span class="literal">undefined</span> == <span class="literal">null</span>; <span class="comment">//答案 true</span></span><br><span class="line">例: <span class="literal">NaN</span> == <span class="literal">NaN</span>; <span class="comment">//答案 false，NaN 是唯一一个连自己都不等于的</span></span><br></pre></td></tr></table></figure><h2 id="三、不发生类型转换"><a href="#三、不发生类型转换" class="headerlink" title="三、不发生类型转换"></a>三、不发生类型转换</h2><h3 id="绝对等于（三个等号）-绝对不等于"><a href="#绝对等于（三个等号）-绝对不等于" class="headerlink" title="===绝对等于（三个等号） !==绝对不等于"></a>===绝对等于（三个等号） !==绝对不等于</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例 <span class="number">1</span> === <span class="number">1</span> <span class="comment">//答案 true</span></span><br><span class="line">例 <span class="number">1</span> === “<span class="number">1</span>” <span class="comment">//答案 false</span></span><br><span class="line">例 <span class="number">1</span> !== “<span class="number">1</span>” <span class="comment">//答案 true</span></span><br><span class="line">例 <span class="number">1</span> !== <span class="number">1</span> <span class="comment">//答案 false</span></span><br><span class="line">例 <span class="literal">NaN</span> =<span class="literal">NaN</span> <span class="comment">//答案 false 特殊的</span></span><br><span class="line">例 <span class="built_in">console</span>.log(a); <span class="comment">//如果定量没定义就直接访问，就 a is not defined 报错；</span></span><br></pre></td></tr></table></figure><blockquote><p>有一种特殊情况，当且仅当把未定义的变量放到 console.log(typeof(a));里面就访问，<br>不报错，返回 undefined</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例 <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a)); <span class="comment">//答案 undefined，这个 undefined 是字符串</span></span><br><span class="line">例 <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="keyword">typeof</span>(a))); <span class="comment">//答案 string。console.log(typeof(typeof(a)));</span></span><br></pre></td></tr></table></figure><p><code>可以先解析成 console.log(typeof(“undefined”));再返回一次就是 string 字符串</code></p><p><code>上面考的是 typeof(a)返回的六种类型的值（number、string、boolean、undefined、object、function）都是 undefined 字符串</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">作业</span><br><span class="line">例 alert(<span class="keyword">typeof</span>(a)); <span class="comment">//返回 string</span></span><br><span class="line">例 alert(<span class="keyword">typeof</span>(<span class="literal">undefined</span>)); <span class="comment">//返回 string，undefined</span></span><br><span class="line">例 alert(<span class="keyword">typeof</span>(<span class="literal">NaN</span>)); <span class="comment">//返回 number</span></span><br><span class="line">例 alert(<span class="keyword">typeof</span>(<span class="literal">null</span>)); <span class="comment">//返回 object</span></span><br><span class="line">例 <span class="keyword">var</span> a = “123abc”; <span class="comment">//返回 string</span></span><br><span class="line">例 alert(<span class="keyword">typeof</span>(+a)); <span class="comment">//返回 number，NaN</span></span><br><span class="line">例 alert(<span class="keyword">typeof</span>(!!a)); <span class="comment">//返回 boolean</span></span><br><span class="line">例 alert(<span class="keyword">typeof</span>(a + “”)); <span class="comment">//返回 string</span></span><br><span class="line">例 alert(<span class="number">1</span> == “<span class="number">1</span>”); <span class="comment">//显示 true</span></span><br><span class="line">例 alert(<span class="literal">NaN</span> == <span class="literal">NaN</span>); <span class="comment">//显示 false</span></span><br><span class="line">例 alert(<span class="literal">NaN</span> == <span class="literal">undefined</span>); <span class="comment">//显示 false</span></span><br><span class="line">例 alert( “<span class="number">11</span>” + <span class="number">11</span>); <span class="comment">//显示 1111</span></span><br><span class="line">例 alert( <span class="number">1</span> === “<span class="number">1</span>”); <span class="comment">//显示 false</span></span><br><span class="line">例 alert(<span class="built_in">parseInt</span>(“123abc”)); <span class="comment">//显示 123【parseInt 是截断数字】</span></span><br><span class="line">例 <span class="keyword">typeof</span>(<span class="keyword">typeof</span>(a)); <span class="comment">//返回 string</span></span><br><span class="line">例 <span class="keyword">var</span> num = <span class="number">123123.345789</span>;alert(num.toFixed(<span class="number">3</span>));</span><br><span class="line">答案 <span class="number">123123.346</span>【toFixed(<span class="number">3</span>)是保留三位小数的意思，四舍五入】</span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line">alert(‘a’);就是弹出框，相当于 <span class="built_in">console</span>.log</span><br></pre></td></tr></table></figure><h1 id="函数-function"><a href="#函数-function" class="headerlink" title="函数 function"></a>函数 function</h1><blockquote><p>function 随便起个名(){}</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="keyword">if</span> (<span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    test();</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">3</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>以上情况就是偶合，偶合度非常高，偶合代码就是低效代码</strong></li><li><strong>编程讲究高内聚，弱偶合</strong></li><li>右上方是简便写法：可以用 test 调用执行，写几个 test 就调用执行几次</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line">        <span class="keyword">var</span> c = a + b;</span><br><span class="line">        <span class="built_in">document</span>.write(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">答案 <span class="number">357</span>。写了一个 test（）；就执行了一遍函数语句，如果不写 test（）；就相当于</span><br><span class="line">有一个框来存东西，但是不执行</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(‘hello world’);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br></pre></td></tr></table></figure><blockquote><p>函数 function 可以先定义功能，之后再去用</p></blockquote><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><blockquote><p>定义一个函数可以先写一个 function,函数就是另一个类型的变量</p></blockquote><p>我声明一个函数 test,test 是函数名。写成下面</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数名起名：开发规范要求，函数名和变量名如果由多个单词拼接，必须符合小驼峰原则（第一个单词首字母小写，后面的首字母大写）</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例 <span class="function"><span class="keyword">function</span> <span class="title">theFirstName</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">document</span>.write(theFirstName);</span><br><span class="line">答案 <span class="function"><span class="keyword">function</span> <span class="title">theFirstName</span>(<span class="params"></span>)</span>&#123;&#125;。打印出来的是函数体</span><br></pre></td></tr></table></figure><blockquote><p>这与 c 语言和 c++，他们打印指针，会输出指针的地址，而 js 这种弱数据语言（解释性语言）永远不输出地址，输出地址指向房间</p></blockquote><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a><strong>函数表达式</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> test = fuction test ()&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(‘a’);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">答案 a。这种方式像定义一个变量</span><br></pre></td></tr></table></figure><blockquote><p>上面这种方式，可以演变成第三种，匿名表达式【不写 test 这种函数名】</p></blockquote><h4 id="命名函数表达式"><a href="#命名函数表达式" class="headerlink" title="命名函数表达式"></a><strong>命名函数表达式</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例 <span class="keyword">var</span> demo = fuction <span class="function"><span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(‘a’);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>上面这个函数的函数名 name 是 abc</p></li><li><p>在控制台 console 直接输出 test 就会出现 →</p></li><li><p>在控制台 console 直接输出 abc 会报错，表达式就会忽略他的名字 abc。</p></li><li><p>在上面例子中，fuction abc(){document.write(‘a’);}这一部分叫表达式，是会忽略 abc 这个地方的名字，会变成匿名函数表达式，不如直接写成匿名函数</p></li></ul><h4 id="匿名函数表达式（常用，一般说的函数表达式就是匿名函数表达式）"><a href="#匿名函数表达式（常用，一般说的函数表达式就是匿名函数表达式）" class="headerlink" title="匿名函数表达式（常用，一般说的函数表达式就是匿名函数表达式）"></a><strong>匿名函数表达式（常用，一般说的函数表达式就是匿名函数表达式）</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="二、组成形式"><a href="#二、组成形式" class="headerlink" title="二、组成形式"></a>二、组成形式</h2><h3 id="函数名称"><a href="#函数名称" class="headerlink" title="函数名称"></a>函数名称</h3><p>function test(){}其中 function 是函数关键字，test 是函数名，必须有(){}，参数可有可<br>没有，参数是写在()括号里面的。</p><p>如果写成 function test(a，b){}，相当于隐式的在函数里面 var a，var b 申明了两个变<br>量，（）括号里面不能直接写 var</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">document</span>.write(a + b)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">答案 <span class="number">3</span>。</span><br></pre></td></tr></table></figure><blockquote><p>上面这个例子，1 就会到 a 里面去，2 就会到 b 里面去，这是传参的形式</p></blockquote><h3 id="参数-可有可没有，但是高级编程必有"><a href="#参数-可有可没有，但是高级编程必有" class="headerlink" title="参数(可有可没有，但是高级编程必有)"></a>参数(可有可没有，但是高级编程必有)</h3><p><code>形参（形式参数）：指的是 function sum（a，b）&#123;&#125;括号里面的 a 和 b</code></p><p><code>实参（实际参数）：指的是 sum（1，2）；里面的 1，2</code></p><p><code>天生不定参，形参可以比实参多，实参也可以比形参多</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = a + b;</span><br><span class="line">        <span class="built_in">document</span>.write(c);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    sum(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">答案 <span class="number">37</span>，参数把函数抽象了，可以组成很多形式</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    如果第一个实参的数大于 <span class="number">10</span>，就减第二个数的运算结果；如果第一个实参的数小于 <span class="number">10</span>，就加第二个数的运算结果</span><br><span class="line">    <span class="comment">//function test()&#123;&#125;</span></span><br><span class="line">    <span class="comment">// 形式参数 ———— 形参</span></span><br><span class="line">    funtion <span class="function"><span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(a - b);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(a + b);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实际参数 ———— 实参</span></span><br><span class="line">    sum(<span class="number">1</span>,<span class="number">2</span>）</span><br><span class="line">    答案：<span class="number">3</span></span><br><span class="line"></span><br><span class="line">    上面改成sum(<span class="number">11</span>,<span class="number">2</span>)    <span class="comment">//答案 9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(a);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">答案 <span class="number">11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, c,d</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(a);</span><br><span class="line">    <span class="built_in">document</span>.write(d);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">答案 <span class="number">11</span>,<span class="literal">undefined</span>，上面这道题是形参多，实参少</span><br></pre></td></tr></table></figure><p>js 参数不限制数量，天生不定参数</p><p>在每一个函数里面都有一个隐式的东西 arguments 这个是实参列表</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">答案[<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>]，<span class="number">3</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; argument.length; i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">答案 <span class="number">11</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum.length &gt;<span class="built_in">arguments</span>.length)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;形参多了&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum.length &lt; <span class="built_in">arguments</span>.length)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;实参多了&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;相等&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际参数 ———— 实参</span></span><br><span class="line">sum(<span class="number">11</span>,<span class="literal">undefined</span><span class="number">.3</span>,<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    形参长度求法</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(sum.length);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    答案 <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line">任意个数求和(不定参才能求出来)</span><br><span class="line"></span><br><span class="line">    funtion <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// arguments [1,2,3,4,5,6,7];</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length;i ++)&#123;</span><br><span class="line">            result += <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><blockquote><p>形参永远有尽头，要实现任意的数求和，无法定义形参。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// arguments [1,2]</span></span><br><span class="line">        <span class="comment">// var a = 1;</span></span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">答案是 <span class="number">2</span>。a 变，<span class="built_in">arguments</span> 跟着变化。有一个映射的关系。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// arguments [1,2]</span></span><br><span class="line">        <span class="comment">// var a = 1;</span></span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(argument[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">答案 <span class="number">3</span>。<span class="built_in">arguments</span> 里面一个变，一个跟着变，但是[<span class="number">1</span>,<span class="number">2</span>]是两个独立的人，相当于映射关系。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例:当形参两个，实参一个</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//arguments[1]没值</span></span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">1</span>);</span><br><span class="line">答案: <span class="literal">undefined</span>，实参列表出生时有几个，就有几个，在写 b=<span class="number">2</span>，也不加在 <span class="built_in">arguments</span>[<span class="number">1</span>]里面了，此处的 b 就当变量用，他和实参不映射。</span><br><span class="line"></span><br><span class="line">形参实参完全对应上才相互映射</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//arguments[1]没值</span></span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    sum(<span class="number">1</span>);</span><br><span class="line">答案 <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="返回值-return"><a href="#返回值-return" class="headerlink" title="返回值 return"></a>返回值 return</h3><p><code>结束条件和返回值 return，return 有终止函数的功能</code></p><p><code>没写 return，实际上是加上了一个隐式的 return</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘a’);</span><br><span class="line">    <span class="built_in">console</span>.log(‘b’);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    答案 a，b</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘a’);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(‘b’);</span><br><span class="line">    &#125;</span><br><span class="line">    答案 a</span><br></pre></td></tr></table></figure><blockquote><p>return 最常用的是返回值。本意是把一个值返回到函数以外</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">自己定义的函数也能返回,<span class="keyword">return</span> 空格 <span class="number">123</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(‘a’);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> num = sum();</span><br><span class="line">    答案这里的 num 就是 <span class="number">123</span>，而且 <span class="built_in">console</span>.log(‘a’);无效，这里的 <span class="keyword">return</span> 又终止函数，又返回变量</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    把 target 转成数字</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myNumber</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> + target; <span class="comment">//利用+隐式的转换成了数字类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> num = myNumber(‘<span class="number">123</span>’);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + “” + num);</span><br><span class="line">    答案 number <span class="number">123</span></span><br></pre></td></tr></table></figure><ol><li><p>一般函数处理完一个参数，是为了返回</p></li><li><p>typeof()也是返回值，也是函数</p></li><li><p>typeof(123)也可以写成 typeof 123【typeof 空格 123】，只是看起来不方便</p></li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a><strong>练习</strong></h3><ol><li>写一个函数，功能是告知你所选定的小动物的叫声。</li><li>写一个函数，实现加法计数器。</li><li>定义一组函数，输入数字，逆转并输出汉字形式。</li><li>写一个函数，实现 n 的阶乘。</li><li>写一个函数，实现斐波那契数列。</li></ol><p>一、写一个函数，功能是告知你所选定的小动物的叫声。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scream</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (animal) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;dog&quot;</span>:</span><br><span class="line">      <span class="built_in">document</span>.write(<span class="string">&quot;wang&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;cat&quot;</span>:</span><br><span class="line">      <span class="built_in">document</span>.write(<span class="string">&quot;miao!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;fish&quot;</span>:</span><br><span class="line">      <span class="built_in">document</span>.write(<span class="string">&quot;o~o~o~&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此处可以用 break , 也可以用 return</p></blockquote><p>二、写一个函数，实现加法计数器。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">任意个数求和(不定参才能求出来)</span><br><span class="line"></span><br><span class="line">    funtion <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// arguments [1,2,3,4,5,6,7];</span></span><br><span class="line">        <span class="keyword">var</span> resule = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length;i ++)&#123;</span><br><span class="line">            result += <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><p>三、定义一组函数，输入数字，逆转并输出汉字形式。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="built_in">window</span>.prompt(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = num.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    str += transfer(num[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.write(str);</span><br><span class="line">&#125;</span><br><span class="line">reverse();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (target) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;壹&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;贰&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;叁&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;肆&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;5&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;伍&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;6&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;陆&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;7&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;柒&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;8&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;捌&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;9&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;玖&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">属性补充：</span><br><span class="line"></span><br><span class="line">str.charAt(<span class="number">0</span>)意思是字符串的第零位</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = num.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>)这是倒着拿的意思</span><br><span class="line"></span><br><span class="line">一个字符串长度是 <span class="number">3</span>，他的第三位字符串是 <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以把第二个 <span class="function"><span class="keyword">function</span> 放第一个里面，但是一般单独写，因为 <span class="title">transfer</span> 是转换</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">str</span> += <span class="title">transfer</span>(<span class="params">num[i]</span>)</span>;是先执行后面的 transfer(num[i])，再赋值给前面</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><code>写一个函数，实现 n 的阶乘。</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">方法一: <span class="function"><span class="keyword">function</span> <span class="title">jc</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//n 的阶乘</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    num *= i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法二: <span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n * mul(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二叫递归</p><p>1、找规律，</p><p>2、找出口（找停的点）</p><blockquote><p>递归的优点是代码简洁，但是运行慢</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">导图: <span class="keyword">return</span> <span class="number">5</span> * mul(<span class="number">5</span> - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> (<span class="number">5</span> - <span class="number">1</span>) * mul(<span class="number">5</span> - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span> * mul(<span class="number">5</span> - <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> (<span class="number">5</span> - <span class="number">3</span>) * mul(<span class="number">5</span> - <span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>5、拿递归写斐波那契数列 fb(n)==fb(n - 1) + fb(n - 2);</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span> || n== <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fb(n - <span class="number">1</span>) + fb(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fb(<span class="number">5</span>) == &gt; fb(<span class="number">4</span>) + fb(<span class="number">3</span>);</span><br><span class="line">fb(<span class="number">4</span>) == &gt; fb(<span class="number">3</span>) + fb(<span class="number">2</span>);</span><br><span class="line">fb(<span class="number">3</span>) == &gt; fb(<span class="number">2</span>) + fb(<span class="number">1</span>);</span><br><span class="line">fb(<span class="number">2</span>) == &gt; fb(<span class="number">1</span>) + fb(<span class="number">0</span>);</span><br><span class="line">fb(<span class="number">1</span>) == &gt; fb(<span class="number">1</span>) + fb(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>递归返回的顺序：先执行的最后被返回，最后执行完（等最底层的一层层返回）</p></blockquote><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><blockquote><p>定义：此类函数没有声明，在一次执行过后即释放（被销毁）。适合做初始化工作。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">针对初始化功能的函数：只想让它执行一次的函数</span><br><span class="line"></span><br><span class="line">立即执行的函数也有参数，也有返回值，有预编译</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="comment">//写成(function abc()&#123;&#125;())也调用不到</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a + b);</span><br><span class="line"></span><br><span class="line">    &#125;())</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(a + b + c * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    &#125;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))         <span class="comment">//这一行里面的(1,2,3)是实参</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> num = (<span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> d = a + b + c * <span class="number">2</span> – <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">答案 num = <span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="立即执行函数的五种写法"><a href="#立即执行函数的五种写法" class="headerlink" title="立即执行函数的五种写法"></a>立即执行函数的五种写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">标准写法:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;()); <span class="comment">//在 W3C 建议使用这一种</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(‘a’);&#125;)()</span><br><span class="line"></span><br><span class="line">这个被()包起来的 <span class="function"><span class="keyword">function</span> 函数声明变表达式了，就能被外面的最后的(<span class="params"></span>)执行</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">(<span class="params"><span class="keyword">function</span> test()&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">console</span>.log(‘a’);</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;()</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">最外面的大括号是数学运算符号，是最先被执行，其余的括号都是有语法意义的，就把函数变表达式了</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">(<span class="params"></span>)也是数学执行符，能打印 <span class="title">a</span>，但是执行 <span class="title">test</span> 就报错，所以干脆就不写 <span class="title">test</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="keyword">var</span> num = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;();</span><br></pre></td></tr></table></figure><p>只有表达式才能被执行符号执行</p><p>能被执行符号执行的表达式，这个函数的名字就会被自动忽略（放弃名字）</p><p>能被执行符号执行的表达式基本上就是立即执行函数</p><p>函数声明和函数表达式是两个东西，虽然都能定义函数</p><p>函数声明：function test ( ){}</p><p>函数表达式：var test = function( ){}</p><p><code>其中 = function ()&#123;&#125;把 function 赋到 num 里面去叫表达式，var num 是声明在执行时，会放弃这个函数储存到 test 里面的储存引用，让这个 test 恢复到被声明的状态</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">4.</span> +、-、！ <span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line"></span><br><span class="line">    + <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    - <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    ! <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;()</span><br></pre></td></tr></table></figure><blockquote><p>加了个”正”，在趋势上要把他转换成数字，就是表达式了，既然是表达式就能被执行，就会放弃名字，此时 console.log (test)，就会报错；这就是立即执行函数，同样放了正号，负号，！就会放弃函数名字，转换成表达式；但是*和/不行，&amp;&amp;||前面放东西也行</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">5.</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c,d</span>)</span>&#123;<span class="built_in">console</span>.log(a + b + c + d)&#125;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a + b + c + d);</span><br><span class="line">    &#125;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>理论上坚决不能执行，如果括号里面没有数字的话,系统会认为这是一个执行符号，但是如果在里面写上数字，系统就不会给你当成执行符号，它会当成这样写：</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a + b + c + d);</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这样就不会报错了，因为 逗号（,）也是一个运算符，它会后面的位返回。所以它也是一个正常语法。但是它也不会执行,也不会报错,test还是函数体。</p></blockquote><h3 id="要点"><a href="#要点" class="headerlink" title="要点:"></a>要点:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例<span class="number">1.1</span>:</span><br><span class="line"></span><br><span class="line">先定义一个 <span class="number">10</span> 位数的数组，就是在 <span class="keyword">var</span> arr = [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(i);&#125;有十个[]并且把数组返回</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123; <span class="comment">//定义个函数 test</span></span><br><span class="line">    <span class="keyword">var</span> arr = []; <span class="comment">//定义一个空数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">    <span class="comment">//丰满空数组，让空数组添加十条数组</span></span><br><span class="line">        <span class="comment">// 每一条都是一个 function()&#123;&#125;</span></span><br><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//随着 for 循环 i 变，</span></span><br><span class="line">        <span class="comment">// 数组 i 也变，arr 每一次都等于一个全新的函数体</span></span><br><span class="line">        <span class="built_in">document</span>.write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr; <span class="comment">//把 arr 返回到外部</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j ++)&#123;</span><br><span class="line">    <span class="comment">//分别执行十个函数体，函数体里面定义了 document.write</span></span><br><span class="line">    myArr[j]();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案 10 10 10 10 10 10 10 10 10 10</span></span><br></pre></td></tr></table></figure><p>第二个 for 是为了打印这个数组，麻烦写法 myArr<a href="">0</a>; myArr<a href="">1</a>; 。。。myArr<a href="">9</a>;</p><p>过程 for (var i = 0; i &lt; 10; i ++){}执行了十次，产生了十个彼此独立的函数。并且把这十个函数放在数组里面去，还把数组返回了，这十个函数和 test 一起产生了一个闭包。</p><p>既然是闭包，那么访问 test 里面的变量时，实际上访问的是同一套，而 test 产生了<br>arr 和 i 变量（写在 for 循环里面的 i 变量），而这十个函数在外边要访问 i 变量，其实访问的是同一个 i。</p><p>什么时候访问的？在 test 执行完以后，在下面 for(j)访问的第一个 i=0，转到 9 的时候，i ++变 10 终止 for 循环，结束的时候 i=10，结束之后把return arr 返回，arr；</p><p>这十个函数都是为了打印 i 的，在外部访问 i 的时候 i=10，所以打印的是 10</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write( i + “ ”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解过程：</p><p>在这个函数体中，当<code>arr[0]</code>时<code>document.write(i)</code>的<code>i</code>是不变的，还是<code>i</code>，等函数保存到外部之后，等执行的时候，才会去找<code> i</code>的值。</p><p>这个赋值语句中<code>arr[0] = 函数;</code>把一个函数体或者说是一个函数引用赋给数组的当前位，数组的当前位需要马上被索取出来的（数组现在当前第几位，我们是知道的，因为这个是执行语句），当<code>for(var i = 0)</code>时，<code>arr[i]</code>会变成<code>arr[0]</code>但是这个 i 跟函数体里面的<code>document.write(i + &quot; &quot;）</code>里面的<code>i</code>是没有关系的，因为函数体 function(){}不是现在执行，不会在意函数里面写的是什么，不是现在执行那么里面的<code>document.write</code>不会变成现实的值，不是现在执行就是函数引用（函数引用就是被折叠起来的，系统不知道里面写的是什么）</p><p>在执行<code>myArr[j]();</code>的时候，系统才会读<code>document.write(i + &quot;&quot;)</code>里面的语句</p><p>在定义函数的时候是不看里面的，在执行的时候才看</p><h3 id="要点2"><a href="#要点2" class="headerlink" title="要点2:"></a>要点2:</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例<span class="number">1.2</span>:</span><br><span class="line">我们让上面这个变成打印 <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>，用立即执行函数解决</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span><br><span class="line">            arr[j] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write( j + “ ”);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(i));</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j ++)&#123;</span><br><span class="line"> myArr[j]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解过程：</p><p>相当于在 for 循环里面有十个立即执行函数<code>function(j)&#123;&#125;</code><br>在第一圈 i 是 0，j 也是 0，<code>function()&#123;document.write( j + “ ”)&#125;</code>拿着<code>j=0</code>进行循环的第二圈 <code>i </code>是 1，又有了一个新的 <code>j</code> 是 1，反复循环,形成了十个立即执行函数，有十个<code>j</code>对应</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">答案 <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span></span><br><span class="line"></span><br><span class="line">例</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">中间 <span class="function"><span class="keyword">function</span> 这个会执行 10 次</span></span><br></pre></td></tr></table></figure><h1 id="作用域初探"><a href="#作用域初探" class="headerlink" title="作用域初探"></a>作用域初探</h1><blockquote><p><strong>作用域定义：变量（变量作用于又称上下文）和函数生效（能被访问）的区域</strong></p></blockquote><p>全局、局部变量</p><p>作用域的访问顺序</p><p>作用域:函数里面的可以访问外面的全局变量</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="number">234</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(b);</span><br><span class="line">        <span class="built_in">document</span>.write(a);</span><br><span class="line">    &#125;</span><br><span class="line">    demo();</span><br><span class="line">    <span class="built_in">document</span>.write(c);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><blockquote><p>函数外面不能用函数里面的。里面的可以访问外面的，外面的不能访问里面的，彼此独立的区间不能相互访问</p></blockquote><ul><li>test{}和 demo{}不能互相访问，但是可以访问外面的全局变量</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line">彼此独立的区间不能相互访问 全局变量都可以访问</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(a);</span><br><span class="line">    &#125;</span><br><span class="line">    demo();</span><br><span class="line">    <span class="built_in">document</span>.write(b);</span><br><span class="line"></span><br><span class="line">上面的 <span class="built_in">document</span>.write(b);不能访问 <span class="keyword">var</span> b ;</span><br><span class="line">上面的 <span class="built_in">document</span>.write(a);可以访问 a ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>外层函数不能访问里层的，里层的可以访问外层的，越往里权限越大</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">作业:</span><br><span class="line"></span><br><span class="line">要求输入一串低于 <span class="number">10</span> 位的数字，输入这串数字的中文大写。</span><br><span class="line"></span><br><span class="line">例如：input :<span class="number">10000</span>     output:壹万 ;</span><br><span class="line"></span><br><span class="line">例如：input :<span class="number">1001010</span>   output:壹佰万壹仟零壹拾 ;</span><br><span class="line"></span><br><span class="line">千分位如果是 <span class="number">0</span>必须读零 ;</span><br></pre></td></tr></table></figure><h1 id="js-运行三部曲-预编译"><a href="#js-运行三部曲-预编译" class="headerlink" title="js 运行三部曲(预编译)"></a>js 运行三部曲(预编译)</h1><blockquote><p>语法分析 → 预编译 → 解释执行</p></blockquote><h2 id="预编译前奏"><a href="#预编译前奏" class="headerlink" title="预编译前奏"></a>预编译前奏</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘a’);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">上面能执行</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘a’);</span><br><span class="line">&#125;</span><br><span class="line">也能执行，因为有预编译的存在</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">答案 <span class="number">123</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">答案 <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"></span><br><span class="line">只写 <span class="built_in">console</span>.log(a);就会报错</span><br></pre></td></tr></table></figure><blockquote><p>函数声明整体提升：函数不管写到哪里，都会被提到逻辑的最前面。所以不管在哪里调用，本质上都是在后面调用变量 声明提升：把 var a 提升到最前面</p></blockquote><ul><li>var a = 123;这是变量声明再赋值。</li></ul><blockquote><p>变量声明提升是把他拆分成 var a; a = 123;然后把 var a 提升到最前面<br>上面这两句话没办法解决下面例子(全部)的问题</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">234</span>;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  a();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><blockquote><p>imply global 暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量就为全局对象(就是 window)所有。</p></blockquote><p><code>全局对象是 window</code></p><p>例 window.a = 10;</p><p>例 a = 10; ===&gt; windows.a = 10;</p><p>eg: var a = b = 123;</p><blockquote><p>一切声明的全局变量，全是 window 的属性。</p></blockquote><p>例 var a = 123; ===&gt; window.a = 123;</p><blockquote><p>window 就是全局的域</p></blockquote><p>如果在全局变量在 var a = 123；那么就会返回到 window</p><p>例 var a = 123<br>console.log(a) ===&gt; console.log(window.a)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = b = <span class="number">234</span>;</span><br><span class="line">是把 <span class="number">234</span> 的值赋给 b，在把 b 的值赋给 a</span><br><span class="line"></span><br><span class="line">例 :</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">    答案：<span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.b);</span><br><span class="line">    答案：<span class="number">123</span>；</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line">写 test()代表执行 test，赋值是自右向左的，上面先把 <span class="number">123</span> 赋给 b 的时候，b 未经声明，然后再声明 a，再 b 的值赋给 a，导致 b 未经声明，所以 b 归 <span class="built_in">window</span> 所有访问 <span class="built_in">window</span>.a 是 <span class="literal">undefined</span>，访问 <span class="built_in">window</span>.b 是 <span class="number">123</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b);</span><br><span class="line">答案 <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span> 就是全局</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); ==&gt; <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">345</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>&#123;</span><br><span class="line"> <span class="attr">a</span> : <span class="number">123</span>,</span><br><span class="line"> <span class="attr">b</span> : <span class="number">234</span>,</span><br><span class="line"> <span class="attr">c</span> : <span class="number">345</span></span><br><span class="line">&#125;</span><br><span class="line">如果 <span class="keyword">var</span> a 对应会有 <span class="built_in">window</span>.a,在<span class="built_in">window</span>中也会有a = <span class="number">123</span>,b = <span class="number">234</span>,c = <span class="number">345</span>;</span><br></pre></td></tr></table></figure><h2 id="预编译（解决执行顺序问题）"><a href="#预编译（解决执行顺序问题）" class="headerlink" title="预编译（解决执行顺序问题）"></a>预编译（解决执行顺序问题）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例 <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">答案是 <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125; 、<span class="number">123</span> 、<span class="number">123</span> 、<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">这个例子的形参是（a），变量声明也是 a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面的例子按四部曲变化如下:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>创建AO对象</span><br><span class="line"></span><br><span class="line">AO&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 找形参和变量声明，将变量和形参(a)名作为 AO 属性名，值为 <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 把实参值传到形参里</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 在函数体里面找函数声明，值赋予函数体</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;&#125;和 <span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params"></span>) </span>&#123;&#125;都是函数声明，但是 <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;不是。</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">d</span> : <span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行第一行 <span class="built_in">console</span>.log(a);时，用的是</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">d</span> : <span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="keyword">var</span> a =<span class="number">123</span>;改变的是</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">d</span> : <span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在 b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;时</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="attr">d</span> : <span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>预编译发生在函数即将执行的前一刻</p></blockquote><h2 id="（函数）预编译的四部曲"><a href="#（函数）预编译的四部曲" class="headerlink" title="（函数）预编译的四部曲"></a>（函数）预编译的四部曲</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 创建 AO 对象 Activation <span class="built_in">Object</span>(执行期上下文，作用是函数解的作用域，函数产生的执行空间库)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 找形参和变量声明，将变量和形参名作为 AO 属性名，值为 <span class="literal">undefined</span>,相当于</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 将实参值和形参统一（把实参值传到形参里）</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 在函数体里面找函数声明，值赋予函数体（先看自己的 AO，再看全局的 GO）</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> c;</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">答题过程：</span><br><span class="line"></span><br><span class="line">找形参和变量声明，将变量和形参名作为 AO 属性名，值为 <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">c</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">函数声明 <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;和 <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;，AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="attr">c</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">d</span> : <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(a);答案是 <span class="number">1</span></span><br><span class="line"></span><br><span class="line">执行 c = <span class="number">0</span>;变</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="attr">c</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">d</span> : <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c 不用管，因为 c 已经在 AO 里面了</span><br><span class="line"></span><br><span class="line">执行 a = <span class="number">3</span>;改</span><br><span class="line">AO&#123;</span><br><span class="line"> <span class="attr">a</span> : <span class="number">3</span>,</span><br><span class="line"> <span class="attr">b</span> : <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line"> <span class="attr">c</span> : <span class="number">0</span>,</span><br><span class="line"> <span class="attr">d</span> : <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 b = <span class="number">2</span>;改</span><br><span class="line">AO&#123;</span><br><span class="line"> <span class="attr">a</span> : <span class="number">3</span>,</span><br><span class="line"> <span class="attr">b</span> : <span class="number">2</span>,</span><br><span class="line"> <span class="attr">c</span> : <span class="number">0</span>,</span><br><span class="line"> <span class="attr">d</span> : <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(b);答案是 <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params"></span>) </span>&#123;&#125;和 <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;已经提过了，不用管执行 <span class="built_in">console</span>.log(b);答案是 <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a , b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// function a()&#123;&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// 234</span></span><br><span class="line"></span><br><span class="line">    a = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    b = <span class="number">234</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 123</span></span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// function b()&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">答题过程：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 将变量和形参名作为 AO 属性名</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 将实参值和形参统一</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 找函数声明 <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(a);答案是 <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">执行 <span class="built_in">console</span>.log(b);答案是 <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">执行 <span class="keyword">var</span> b = <span class="number">234</span>;变</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="attr">b</span> : <span class="number">234</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(b);答案是 <span class="number">234</span></span><br><span class="line"></span><br><span class="line">执行 a = <span class="number">123</span>;变</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="number">234</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(a);答案是 <span class="number">123</span></span><br><span class="line">然后 <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;;<span class="keyword">var</span> a ;都可以不看了</span><br><span class="line"></span><br><span class="line">执行 b = <span class="number">234</span>，b 值还是 <span class="number">234</span>，不变</span><br><span class="line">执行 <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;，变</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(a);答案是 <span class="number">123</span></span><br><span class="line">执行 <span class="built_in">console</span>.log(b);答案是 <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一旦有重名的，一但有 a 变量又有 a 函数【如 function a (){}】，又在第一条访问的是 a，一定是函数答题过程： 将变</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">下面开始讲全局的预编译</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">答案 <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">答案是打印 a 是 <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="全局的预编译三部曲"><a href="#全局的预编译三部曲" class="headerlink" title="全局的预编译三部曲"></a>全局的预编译三部曲</h2><ol><li><p>生成了一个 GO 的对象 Global Object（window 就是 GO）</p></li><li><p>找形参和变量声明，将变量和形参名作为 GO 属性名，值为 undefined</p></li><li><p>在函数体里面找函数声明，值赋予函数体</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">答案过程:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> GO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 函数声明 GO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 执行 <span class="keyword">var</span> a = <span class="number">123</span>;变 GO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line">执行 <span class="built_in">console</span>.log(a);就是 <span class="number">123</span></span><br></pre></td></tr></table></figure><blockquote><p>GO === window， GO 和 window 是一个东西</p></blockquote><p>console.log(a);和 console.log(window.a);和 console.log(go.a);是一样</p><blockquote><p>任何全局变量都是 window 上的属性 , 没有声明变量就赋值了，归 window 所有，就是在 GO 里面预编译</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.b);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">答案 <span class="built_in">window</span>.a 是 <span class="literal">undefined</span>，<span class="built_in">window</span>.b 是 <span class="number">123</span></span><br><span class="line"></span><br><span class="line">先生成 GO&#123;</span><br><span class="line"> <span class="attr">b</span> : <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line">再有 AO&#123;</span><br><span class="line"><span class="attr">a</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>先生成 GO 还是 AO</p></li><li><p>想执行全局，先生成 GO，在执行 test 的前一刻生成 AO</p></li><li><p>在几层嵌套关系，近的优先，从近的到远的，有 AO 就看 AO，AO 没有再看 GO</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">test</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(test);</span><br><span class="line">    <span class="keyword">var</span> test = <span class="number">234</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(test);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> test = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">答题过程:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 想执行全局,先有 GO,</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    <span class="attr">test</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span> 发现有函数声明</span><br><span class="line"></span><br><span class="line"> GO&#123;</span><br><span class="line">    <span class="attr">test</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;..... &#125;</span><br><span class="line">&#125;</span><br><span class="line">执行 <span class="built_in">console</span>.log(test),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 执行 test(<span class="number">1</span>)之前生成</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">test</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 执行 <span class="keyword">var</span> test = <span class="number">234</span>;变成</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">test</span> : <span class="number">234</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>AO 上面有就用 AO 的，没有就看 GO 的</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">global</span> = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">global</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"></span><br><span class="line">答题过程</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    <span class="attr">global</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">fn</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;.....&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="keyword">var</span> <span class="built_in">global</span> = <span class="number">100</span>;变</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    <span class="attr">global</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="attr">fn</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;.....&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">不看 <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;...&#125;里面的东西</span><br><span class="line">执行 fn()之前</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line"> 访问 GO的 <span class="built_in">global</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">global</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">global</span>);</span><br><span class="line">    <span class="built_in">global</span> = <span class="number">200</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">global</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">global</span> = <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">global</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">答题过程:</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    <span class="attr">global</span> : <span class="literal">undefined</span></span><br><span class="line">    <span class="attr">fn</span> : <span class="literal">undefined</span>(没用可以不写)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">变:</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    <span class="attr">global</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="attr">fn</span> : <span class="literal">undefined</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">执行 fn()之前，</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">global</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行结果是 <span class="literal">undefined</span>，<span class="number">200</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">//undefined</span></span><br><span class="line">    <span class="keyword">if</span>(a)&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">//undefined</span></span><br><span class="line">    c = <span class="number">234</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">//234</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">test();</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//234</span></span><br><span class="line"></span><br><span class="line">过程</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">test</span>:<span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span> <span class="comment">//不管 if(a)&#123;&#125;，可以提出 var b的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行到 c=<span class="number">234</span>，</span><br><span class="line">GO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">c</span> : <span class="number">234</span>,</span><br><span class="line">    <span class="attr">test</span>:<span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行到 a=<span class="number">10</span>，</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">10</span></span><br><span class="line">    <span class="attr">c</span> : <span class="number">234</span></span><br><span class="line">    <span class="attr">test</span>:<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">    foo = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bar());</span><br><span class="line"></span><br><span class="line">答案：<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">如果在第一行 <span class="keyword">return</span> foo，下面有 foo 这个函数，一定打印这个函数;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="built_in">console</span>.log(bar());</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    foo = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line">答案 <span class="number">11</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">答案是 <span class="literal">undefined</span> <span class="comment">// 因为var b = undefined 是函数表示，不是函数声明;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line">现在因为语法的改变 在 <span class="keyword">if</span> 里面定义函数声明 <span class="function"><span class="keyword">function</span> 是不允许的，但是过去可以，下面就是过去的旧题，可以按着来做一下</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">a</span> = 100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(e);</span><br><span class="line">    <span class="keyword">if</span>(a)&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">123</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> c;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="built_in">document</span>.write(b);</span><br><span class="line">    f = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(c);</span><br><span class="line">    <span class="built_in">document</span>.write(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">demo(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">document</span>.write(a);</span><br><span class="line"><span class="built_in">document</span>.write(f);</span><br><span class="line"></span><br><span class="line">GO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="literal">undefined</span></span><br><span class="line">    <span class="attr">demo</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">开始执行 a=<span class="number">100</span>，</span><br><span class="line">GO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">100</span>，</span><br><span class="line">    <span class="attr">demo</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">e</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">c</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">a</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line">形参实参相统一，AO&#123;</span><br><span class="line">    <span class="attr">e</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">c</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">a</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line">赋值 AO&#123;</span><br><span class="line">    <span class="attr">e</span> : <span class="function"><span class="keyword">function</span> <span class="title">e</span> (<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">c</span> : <span class="literal">undefined</span>, <span class="comment">//------旧规则里面可以提出 function()&#123;&#125;</span></span><br><span class="line">    <span class="attr">a</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line">执行 <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">2</span>;实参列表和传参是否相映射，变</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">e</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">c</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">a</span> : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(e);答案 <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span>(a)由于 a 在 AO 里面是 <span class="literal">undefined</span>，所以不运行</span><br><span class="line"></span><br><span class="line">执行 a = <span class="number">10</span>;变</span><br><span class="line">AO&#123;</span><br><span class="line">    <span class="attr">e</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">c</span> : <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">a</span> : <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(b)，答案 <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">执行 f = <span class="number">123</span>，变</span><br><span class="line">GO&#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="attr">demo</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="attr">f</span> : <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行 <span class="built_in">console</span>.log(c); 之前打印 <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;，改语法后打印 <span class="literal">undefined</span></span><br><span class="line">执行 <span class="built_in">console</span>.log(a); 答案 <span class="number">10</span></span><br><span class="line">执行 <span class="built_in">console</span>.log(a); 因为在外面是全局的，答案 <span class="number">100</span></span><br><span class="line">执行 <span class="built_in">console</span>.log(f); 答案 <span class="number">123</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>  <span class="keyword">var</span> str = <span class="literal">false</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(str);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>  <span class="keyword">var</span> demo = <span class="literal">false</span> == <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">document</span>.write(demo);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>  <span class="keyword">if</span>(<span class="keyword">typeof</span>(a) &amp;&amp; -<span class="literal">true</span> + (-<span class="literal">undefined</span>) + <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&#x27;基础扎实&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>  <span class="keyword">if</span>(<span class="number">11</span> + <span class="string">&quot;11&quot;</span> * <span class="number">2</span> == <span class="number">33</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&quot;基础扎实&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>  ！！<span class="string">&quot; &quot;</span> + !!<span class="string">&quot;&quot;</span> - !!<span class="literal">false</span> || <span class="built_in">document</span>.write(<span class="string">&quot;你觉得可以打印，你就是猪&quot;</span>)</span><br><span class="line"></span><br><span class="line">答题:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="literal">false</span> + <span class="number">1</span> 因为有 +，两边都不是字符串，就转换成数字,<span class="number">0</span> + <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="literal">false</span> 是 <span class="number">0</span> ，<span class="literal">false</span> <span class="literal">false</span> == <span class="number">1</span>，<span class="literal">false</span> 肯定不等于 <span class="number">1</span>，所以把 <span class="literal">false</span> 再赋给 demo</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span></span><br><span class="line">(<span class="number">1</span>) <span class="keyword">typeof</span>(a) 是 <span class="string">&quot;undefined&quot;</span> ;</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) -<span class="literal">true</span> 转换成数字是-<span class="number">1</span>;</span><br><span class="line">+<span class="literal">undefined</span> 显示“<span class="literal">NaN</span>”</span><br><span class="line">    -<span class="number">1</span> + <span class="literal">NaN</span> = <span class="literal">NaN</span></span><br><span class="line">    -<span class="number">1</span> + <span class="literal">NaN</span> + <span class="string">&quot;&quot;</span> = <span class="string">&quot;NaN&quot;</span></span><br><span class="line"><span class="comment">//&quot;undefined&quot; &amp;&amp;  &quot;NaN&quot; 转换成 boolean，就都是 true</span></span><br><span class="line"><span class="comment">//因为两边都是字符串，所以是true;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> <span class="string">&quot;11&quot;</span> * <span class="number">2</span> 是*把两边转换成了数字，所以 <span class="number">11</span> + <span class="string">&quot;11&quot;</span> * <span class="number">2</span> = <span class="number">33</span>，<span class="number">33</span> == <span class="number">33</span></span><br><span class="line"><span class="comment">// 两边相等</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span></span><br><span class="line">(<span class="number">1</span>) !! 非非 就是 正</span><br><span class="line">    <span class="string">&quot; &quot;</span> 这不是空串，是空格字符串</span><br><span class="line">    !!<span class="string">&quot; &quot;</span> 转换成 <span class="built_in">Boolean</span> 为 <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) !!<span class="string">&quot;&quot;</span> 非非空串，转换为 <span class="built_in">Boolean</span> 为 <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>) !!<span class="literal">false</span> 就是 <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>) <span class="literal">true</span> + <span class="literal">false</span> - <span class="literal">false</span> = <span class="number">1</span> + <span class="number">0</span> – <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>) <span class="number">1</span> || <span class="built_in">document</span>.write(‘你觉得能打印？’)</span><br><span class="line"></span><br><span class="line"><span class="comment">// || 运算符 遇到真就停，1 为真，所以返回 1</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">(<span class="built_in">window</span>.foo || (<span class="built_in">window</span>.foo = ‘bar’));</span><br><span class="line"></span><br><span class="line">求 <span class="built_in">window</span>.foo</span><br><span class="line"></span><br><span class="line">答案”bar”</span><br><span class="line"></span><br><span class="line">这道题要先看</span><br><span class="line"></span><br><span class="line">(<span class="built_in">window</span>.foo = ‘bar’)这一边的，再看左边的 <span class="built_in">window</span>.foo</span><br><span class="line"></span><br><span class="line">因为运算符的顺序问题，让这道题错误的读法（从左到右）也是 bar，所以怎样读，都是正确答案 : bar</span><br><span class="line"></span><br><span class="line">(<span class="built_in">window</span>.foo || <span class="built_in">window</span>.foo = ‘bar’);这么写就报错;</span><br><span class="line"><span class="comment">// 因为 ||或 运算符优先级高于 =等号 运算符 , 而 ()括号 运算符 则大于一切运算符</span></span><br><span class="line">所以，必须要写成：</span><br><span class="line">(<span class="built_in">window</span>.foo || (<span class="built_in">window</span>.foo = <span class="string">&quot;bar&quot;</span>));</span><br></pre></td></tr></table></figure><h1 id="作用域精解"><a href="#作用域精解" class="headerlink" title="作用域精解"></a>作用域精解</h1><p>每个 javascript 函数都是一个对象，对象中有些属性我们可以访问，但有些不可以，这些属性仅供 javascript 引擎存取，**[[scope]]<strong>就是其中一个。</strong>[[scope]]**指的就是我们所说的作用域,其中存储了运行期上下文的集合。</p><p><strong>作用域链</strong>：[[scope]]中所存储的执行期上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。</p><p><strong>运行期上下文</strong>:当函数在执行的前一刻，会创建一个称为执行期上下文的内部对象。<br>一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文，当函数执行完毕，执行上下文被销毁。</p><p><strong>查找变量</strong>：在哪个函数里面查找变量，就从哪个函数作用域链的顶端依次向下查找函数类对象</p><p>我们能访问 test.name</p><blockquote><p>test.[[scope]]隐式属性——作用域</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    …………</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第一次执行 test(); → AO&#123;&#125; <span class="comment">//AO 是用完就不要的</span></span><br><span class="line">第二次执行 test(); → AO&#123;&#125; <span class="comment">//这是另外的 AO</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> glob = <span class="number">100</span>;</span><br><span class="line">a();</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> 是最顶端，<span class="number">1</span> 是次顶端，查找顺序是从最顶端往下查</span><br></pre></td></tr></table></figure><p>执行顺序：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> a 函数刚刚被被定义时，它的[[scope]]就已经存入了信息，发生了以下过程</span><br><span class="line"></span><br><span class="line">                                    |   Global      <span class="built_in">Object</span>    |</span><br><span class="line">                                  / ———————————————————————————</span><br><span class="line">    a               scope chain  /  |    <span class="built_in">this</span>    |   <span class="built_in">window</span>   |</span><br><span class="line">————————           —————————————/   ———————————————————————————</span><br><span class="line">[[scope]]             <span class="number">0</span>  |          |   <span class="built_in">window</span>   |  (object)  |</span><br><span class="line">                                    ———————————————————————————</span><br><span class="line">                                    |  <span class="built_in">document</span>  |  (object)  |</span><br><span class="line">                                    ———————————————————————————</span><br><span class="line">                                    |     a      | (<span class="function"><span class="keyword">function</span>) |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |   <span class="title">global</span>   |     100    |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |            |            |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> a 函数被执行时，[[scope]]发生了以下过程</span><br><span class="line">                                    | Activation     <span class="built_in">Object</span>   |</span><br><span class="line">                                  / ———————————————————————————</span><br><span class="line">    a               scope chain  /  |    <span class="built_in">this</span>    |   <span class="built_in">window</span>   |</span><br><span class="line">————————           —————————————/   ———————————————————————————</span><br><span class="line">[[scope]]             <span class="number">0</span>  |          |  <span class="built_in">arguments</span> |     []     |</span><br><span class="line">                   —————————————    ———————————————————————————</span><br><span class="line">                      <span class="number">1</span>  |          |      a     |     <span class="number">123</span>    |</span><br><span class="line">                   ————————————\    ———————————————————————————</span><br><span class="line">                                \   |      b     | (<span class="function"><span class="keyword">function</span>) |</span></span><br><span class="line"><span class="function">                                 \  ———————————————————————————</span></span><br><span class="line"><span class="function">                                  \</span></span><br><span class="line"><span class="function">                                   \</span></span><br><span class="line"><span class="function">                                    |   <span class="title">Global</span>     <span class="title">Object</span>     |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |    <span class="title">this</span>    |   <span class="title">window</span>   |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |   <span class="title">window</span>   |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |  <span class="title">document</span>  |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |     <span class="title">a</span>      | (<span class="params"><span class="keyword">function</span></span>) |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |   <span class="title">global</span>   |     100    |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span> b 函数被创建并且被定义的时候，[[scope]]发生了以下的过程</span><br><span class="line"></span><br><span class="line">                                    | Activation     <span class="built_in">Object</span>   |</span><br><span class="line">                                  / ———————————————————————————</span><br><span class="line">    b               scope chain  /  |    <span class="built_in">this</span>    |   <span class="built_in">window</span>   |</span><br><span class="line">————————           —————————————/   ———————————————————————————</span><br><span class="line">[[scope]]             <span class="number">0</span>  |          |  <span class="built_in">arguments</span> |     []     |</span><br><span class="line">                   —————————————    ———————————————————————————</span><br><span class="line">                      <span class="number">1</span>  |          |      a     |     <span class="number">123</span>    |</span><br><span class="line">                   ————————————\    ———————————————————————————</span><br><span class="line">                                \   |      b     | (<span class="function"><span class="keyword">function</span>) |</span></span><br><span class="line"><span class="function">                                 \  ———————————————————————————</span></span><br><span class="line"><span class="function">                                  \</span></span><br><span class="line"><span class="function">                                   \</span></span><br><span class="line"><span class="function">                                    |   <span class="title">Global</span>     <span class="title">Object</span>     |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |    <span class="title">this</span>    |   <span class="title">window</span>   |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |   <span class="title">window</span>   |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |  <span class="title">document</span>  |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |     <span class="title">a</span>      | (<span class="params"><span class="keyword">function</span></span>) |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |   <span class="title">global</span>   |     100    |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">4.</span> b 函数被执行的时候，[[scope]]发生了以下的过程</span><br><span class="line"></span><br><span class="line">                                        | Activation     <span class="built_in">Object</span>   |</span><br><span class="line">                                      / ———————————————————————————</span><br><span class="line">                                     /  |    <span class="built_in">this</span>    |   <span class="built_in">window</span>   |</span><br><span class="line">                                    /   ———————————————————————————</span><br><span class="line">                                   /    |  <span class="built_in">arguments</span> |     []     |</span><br><span class="line">                                  /     ———————————————————————————</span><br><span class="line">    b               scope chain  /      |      b     |     <span class="number">234</span>    |</span><br><span class="line">————————           —————————————/       ———————————————————————————</span><br><span class="line">[[scope]]             <span class="number">0</span>  |             |            |            |</span><br><span class="line">                   —————————————        ———————————————————————————</span><br><span class="line">                      <span class="number">1</span>  |      \</span><br><span class="line">                   ————————————— \</span><br><span class="line">                      <span class="number">2</span>  |        \     | Activation     <span class="built_in">Object</span>   |</span><br><span class="line">                     /             \    ———————————————————————————</span><br><span class="line">                    /               \   |    <span class="built_in">this</span>    |   <span class="built_in">window</span>   |</span><br><span class="line">                   /                 \  ———————————————————————————</span><br><span class="line">                  /                   \ |  <span class="built_in">arguments</span> |     []     |</span><br><span class="line">                 /                     \———————————————————————————</span><br><span class="line">                /                       |     a      |     <span class="number">123</span>    |</span><br><span class="line">               /                        ———————————————————————————</span><br><span class="line">              /                         |     b      | (<span class="function"><span class="keyword">function</span>) |</span></span><br><span class="line"><span class="function">             /                          ———————————————————————————</span></span><br><span class="line"><span class="function">            /</span></span><br><span class="line"><span class="function">        |   <span class="title">Global</span>     <span class="title">Object</span>     |</span></span><br><span class="line"><span class="function">        ———————————————————————————</span></span><br><span class="line"><span class="function">        |    <span class="title">this</span>    |   <span class="title">window</span>   |</span></span><br><span class="line"><span class="function">        ———————————————————————————</span></span><br><span class="line"><span class="function">        |   <span class="title">window</span>   |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">        ———————————————————————————</span></span><br><span class="line"><span class="function">        |  <span class="title">document</span>  |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">        ———————————————————————————</span></span><br><span class="line"><span class="function">        |     <span class="title">a</span>      | (<span class="params"><span class="keyword">function</span></span>) |</span></span><br><span class="line"><span class="function">        ———————————————————————————</span></span><br><span class="line"><span class="function">        |   <span class="title">global</span>   |     100    |</span></span><br><span class="line"><span class="function">        ———————————————————————————</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> bb = <span class="number">234</span>;</span><br><span class="line">            aa = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> aa = <span class="number">123</span>;</span><br><span class="line">        b();</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">global</span> = <span class="number">100</span>;</span><br><span class="line">    a();</span><br><span class="line"></span><br><span class="line">答案：<span class="number">0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>理解过程：<br>bb 的 AO 是拿到 aa 的 AO，就是同一个 AO，bb 只是引用了 aa 的 AO，GO 也都是同一个。function b(){}执行完，干掉的是 b 自己的 AO（销毁执行期上下文）（去掉连接线），下次 function b 被执行时，产生的是新的 b 的 AO。b 执行完只会销毁自己的 AO，不会销毁 a 的 AO。function a(){}执行完，会把 a 自己的 AO 销毁【会把 function b 也销毁】，只剩 GO（回归到 a 被定义的时候），等下次 function a再次被执行时，会产生一个全新的 AO，里面有一个新的 b 函数。。。。。。周而复始</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        funcion <span class="function"><span class="title">c</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">        c();</span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line"></span><br><span class="line">理解过程：</span><br><span class="line"></span><br><span class="line">a 被定义 a.[[scope]] → <span class="number">0</span> : GO&#123;&#125;</span><br><span class="line"></span><br><span class="line">a 被执行 a.[[scope]] → <span class="number">0</span> : a.AO&#123;&#125;</span><br><span class="line">                       <span class="number">1</span> : GO&#123;&#125;</span><br><span class="line"></span><br><span class="line">b 被定义 b.[[scope]] →  <span class="number">0</span> : a.AO&#123;&#125;</span><br><span class="line">                        <span class="number">1</span> : GO&#123;&#125;</span><br><span class="line"></span><br><span class="line">b 被执行 b.[[scope]] → <span class="number">0</span> : b.AO&#123;&#125;</span><br><span class="line">                       <span class="number">1</span> : a.AO&#123;&#125;</span><br><span class="line">                       <span class="number">2</span> : GO&#123;&#125;</span><br><span class="line"></span><br><span class="line">c 被定义 c.[[scope]] → <span class="number">0</span> : b.AO&#123;&#125;</span><br><span class="line">                       <span class="number">1</span> : a.AO&#123;&#125;</span><br><span class="line">                       <span class="number">2</span> : GO&#123;&#125;</span><br><span class="line"></span><br><span class="line">c 被执行 c.[[scope]] → <span class="number">0</span> : c.AO&#123;&#125;</span><br><span class="line">                       <span class="number">1</span> : b.AO&#123;&#125;</span><br><span class="line">                       <span class="number">2</span> : a.AO&#123;&#125;</span><br><span class="line">                       <span class="number">3</span> : GO&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当 c 执行完后，会干掉自己的 cAO，回到 c 被定义的状态，当 c 再被执行时，会生成一个新的 newcAO&#123;&#125;，其余都一样，因为基础都是 c 的被定义状态 c 被执行</span><br><span class="line"></span><br><span class="line">c.[[scope]] → <span class="number">0</span> : <span class="keyword">new</span> c.AO&#123;&#125;</span><br><span class="line">              <span class="number">1</span> : b.AO&#123;&#125;</span><br><span class="line">              <span class="number">2</span> : a.AO&#123;&#125;</span><br><span class="line">              <span class="number">3</span> : GO&#123;&#125;</span><br></pre></td></tr></table></figure><p>如果<code>function a</code>不被执行，下面的<code>function b</code>和<code>function c</code>都是看不到的（也不会被执行，被折叠）。只有<code>function a</code>被执行，才能执行<code>function a 里面的内容</code>a()<code>; 如果不执行，根本看不到</code>function a (){}`里面的内容;</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> aa = <span class="number">345</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> bb = <span class="number">234</span>;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                cc = <span class="number">123</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            c();</span><br><span class="line">        &#125;</span><br><span class="line">        b();</span><br><span class="line">    &#125;</span><br><span class="line">    a();</span><br><span class="line"></span><br><span class="line">执行过程：</span><br><span class="line"></span><br><span class="line">先执行 <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; <span class="keyword">var</span> aa = <span class="number">345</span>;<span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params"></span>)</span>&#123;&#125;b();&#125;</span><br><span class="line">想要执行完上面的 b();就需要执行完 <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> bb = <span class="number">234</span>; <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;c();&#125;，</span><br><span class="line">想要执行 c();就要先执行完 <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> cc =<span class="number">123</span>;&#125;,</span><br><span class="line">b();是一个复合语句，执行完 b 里面的每一句话，才能执行 b();</span><br><span class="line"></span><br><span class="line">销毁顺序：</span><br><span class="line"></span><br><span class="line">哪个先被执行完，哪个先被销毁</span><br><span class="line">当 c 执行完，先销毁 c 自己的执行期的上下文，</span><br><span class="line">当 c();执行完，那么 b 也执行完了，就销毁 b 的执行期上下文；</span><br><span class="line">当 b();执行完，那么 a 也执行完了，就销毁 a 的执行期上下文</span><br></pre></td></tr></table></figure><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><blockquote><p>当内部函数被保存到外部时，将会生成闭包。闭包会导致原有作用域链不释放，造成内存泄露。</p></blockquote><p><code>内存泄漏就是内存占用，内存被占用的越多，内存就变得越来越少了，就像内存被泄露了一样</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(aaa);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> aaa = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> demo = a();</span><br><span class="line">    demo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> b 以后，就返回出去，再销毁 fn a。</span><br><span class="line"></span><br><span class="line">答案：<span class="number">123</span>;。因为没有 b();此时 b 还是被定义的状态，和 a 执行的状态是一样的。<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;是在 <span class="keyword">return</span> b 之后才执行完，才销毁。<span class="keyword">return</span> b 让 a 执行时的 AO 被保存到了外面。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       a执行                    | Activation     <span class="built_in">Object</span>   |</span><br><span class="line">                              / ———————————————————————————</span><br><span class="line">    a           scope chain  /  |    <span class="built_in">this</span>    |   <span class="built_in">window</span>   |</span><br><span class="line">————————       —————————————/   ———————————————————————————</span><br><span class="line">[[scope]]         <span class="number">0</span>  |     /    |  <span class="built_in">arguments</span> |     []     |</span><br><span class="line">               —————————————    ———————————————————————————</span><br><span class="line">                  <span class="number">1</span>  |          |    aaa     |     <span class="number">123</span>    |</span><br><span class="line">               —————————\———   / ———————————————————————————</span><br><span class="line">                         \    / |      b     | (<span class="function"><span class="keyword">function</span>) |</span></span><br><span class="line"><span class="function">                          \  /  ———————————————————————————</span></span><br><span class="line"><span class="function">                           \/</span></span><br><span class="line"><span class="function">                           /\</span></span><br><span class="line"><span class="function">                          /  \      |   <span class="title">Global</span>     <span class="title">Object</span>     |</span></span><br><span class="line"><span class="function">                         /    \    /———————————————————————————</span></span><br><span class="line"><span class="function">    <span class="title">b</span>被定义，并被保存出来./      \  / |    <span class="title">this</span>    |   <span class="title">window</span>   |</span></span><br><span class="line"><span class="function">                       /        \/  ———————————————————————————</span></span><br><span class="line"><span class="function">                      /         /\  |   <span class="title">window</span>   |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">   <span class="title">b</span>           <span class="title">scope</span> <span class="title">chain</span>     /  \ ———————————————————————————</span></span><br><span class="line"><span class="function">—————————     —————————————   /     |  <span class="title">document</span>  |  (<span class="params">object</span>)  |</span></span><br><span class="line"><span class="function">[[<span class="title">scope</span>]]        0  |        /      ———————————————————————————</span></span><br><span class="line"><span class="function">              ————————————— /       |     <span class="title">a</span>      | (<span class="params"><span class="keyword">function</span></span>) |</span></span><br><span class="line"><span class="function">                 1  |      /        ———————————————————————————</span></span><br><span class="line"><span class="function">              —————————————         |   <span class="title">global</span>   |     100    |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br><span class="line"><span class="function">                                    |    <span class="title">demo</span>    | (<span class="params"><span class="keyword">function</span></span>) |</span></span><br><span class="line"><span class="function">                                    ———————————————————————————</span></span><br></pre></td></tr></table></figure><p><code>return b</code>是把<code>b（包括 a 的 AO</code>保存到外部了（放在全局）<br>当 a 执行完砍掉自己的<code>AO</code>时，b 依然可以访问到<code>a</code>的<code>AO(因为 return b)</code></p><blockquote><p>但凡是内部的函数被保存到外部，一定生成闭包</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> = <span class="number">100</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            num ++;</span><br><span class="line">            <span class="built_in">console</span>.log(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> demo = a();</span><br><span class="line">    demo();</span><br><span class="line">    demo();</span><br><span class="line"></span><br><span class="line">答案 <span class="number">101</span>,<span class="number">102</span></span><br><span class="line"></span><br><span class="line">理解过程:</span><br><span class="line"></span><br><span class="line">    a 被执行 <span class="number">0</span> : a.AO: num = <span class="number">100</span>;</span><br><span class="line">             <span class="number">1</span> : GO: demo = a();</span><br><span class="line"></span><br><span class="line">    b 被执行 <span class="number">0</span> : b.AO :</span><br><span class="line">             <span class="number">1</span> : a.AO : num = <span class="number">100</span>;</span><br><span class="line">             <span class="number">2</span> : GO: demo = a();</span><br></pre></td></tr></table></figure><p>在第一次执行<code>function b</code>时，<code>num ++</code>就把<code>aAO</code>变成<code>&#123;num : 101&#125;</code>，当 <code>function b</code>执行完毕时，剪断的是<code>bAO</code>，而<code>aAO</code>不变，当执行<code>function a</code>的<code>return b</code>时就把<code>aAO,GO</code>都存在了外部，执行完<code>a</code>销毁<code>scope</code>时去掉 <code>a</code>的连接线，但是因为<code>return b</code>把<code>aAO,GO</code>存在了外部，所以依然还是可以访问值</p><p>在第二次执行<code>function b</code>时，<code>aAO&#123;num : 101&#125;</code>，<code>在</code>num ++<code>就是</code>102`</p><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><h3 id="一、实现公有变量"><a href="#一、实现公有变量" class="headerlink" title="一、实现公有变量"></a>一、实现公有变量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">函数累加器：</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            count ++;</span><br><span class="line">            <span class="built_in">console</span>.log(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> demo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> counter = add();</span><br><span class="line">    counter();</span><br><span class="line">    counter();</span><br><span class="line">    counter();</span><br><span class="line">    counter();</span><br><span class="line">    counter();</span><br><span class="line"></span><br><span class="line">每回调用 counter 就会在原有基础上加一次</span><br></pre></td></tr></table></figure><h3 id="二、可以做缓存（存储结构）"><a href="#二、可以做缓存（存储结构）" class="headerlink" title="二、可以做缓存（存储结构）"></a>二、可以做缓存（存储结构）</h3><blockquote><p>eg:eater。缓存是外部不可见的，但是确实有存储结构</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例<span class="number">1</span>：</span><br><span class="line">    fnction <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            num ++;</span><br><span class="line">            <span class="built_in">console</span>.log(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            num --;</span><br><span class="line">            <span class="built_in">console</span>.log(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [a,b];</span><br><span class="line">    &#125;</span><br><span class="line">    myArr = test();</span><br><span class="line">    myArr[<span class="number">0</span>]();</span><br><span class="line">    myArr[<span class="number">1</span>]();</span><br><span class="line"></span><br><span class="line">答案 <span class="number">101</span> 和 <span class="number">100</span>，思考过程：说明两个用的是一个 AO</span><br><span class="line"></span><br><span class="line">test doing test[[scope]] <span class="number">0</span> : test.AO</span><br><span class="line">                         <span class="number">1</span> : GO</span><br><span class="line">a defined a.[[scope]]    <span class="number">0</span> : test.AO</span><br><span class="line">                         <span class="number">1</span> : GO</span><br><span class="line">b defined b.[[scope]]    <span class="number">0</span> : test.AO</span><br><span class="line">                         <span class="number">1</span> : GO</span><br><span class="line"></span><br><span class="line">当执行 myArr[<span class="number">1</span>]();时:</span><br><span class="line"></span><br><span class="line">b doing b.[[scope]] <span class="number">0</span> : b.AO</span><br><span class="line">                    <span class="number">1</span> : a 运行后的 test.AO</span><br><span class="line">                    <span class="number">2</span> : GO</span><br><span class="line"></span><br><span class="line">a 运行后的 test.AO， 与 a doing 里面的 test.AO 一模一样</span><br><span class="line">a 和 b 连线的都是 test 环境，对应的一个闭包</span><br></pre></td></tr></table></figure><p><code>function a</code>和<code>function b</code>是并列的，不过因为<code>function a</code>在前，所以先执行<code>num ++</code>，在执行<code>num --</code></p><p><code>myArr[0]</code>是数组第一位的意思，即<code>a</code>，<code>myArr[0]()</code>;就是执行函数<code>a</code>的意思;</p><p><code>myArr[1]</code>是数组第二位的意思，即<code>b</code>，<code>myArr[1]()</code>; 就是执行函数<code>b</code>的意思;</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例<span class="number">2</span>:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">eater</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> food = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> obj = &#123;</span><br><span class="line">            <span class="attr">eat</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;I am eating&#x27;</span> + food);</span><br><span class="line">                food = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">push</span> : <span class="function"><span class="keyword">function</span>(<span class="params">myFood</span>)</span>&#123;</span><br><span class="line">                food = myFood;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> eater1 = eater();</span><br><span class="line"></span><br><span class="line">    eater1.push(<span class="string">&#x27;banner&#x27;</span>);</span><br><span class="line">    eater1.eat();</span><br><span class="line"></span><br><span class="line">答案: I am eating banana，eat 和 push 操作的是同一个 food;</span><br></pre></td></tr></table></figure><p>在<code>function eater()&#123;里面的 food&#125;</code>就相当于一个隐式存储的机构<code>obj</code>对象里面是可以有<code>function</code>方法的,也可以有属性，方法就是函数的表现形式</p><h3 id="三、可以实现封装，属性私有化"><a href="#三、可以实现封装，属性私有化" class="headerlink" title="三、可以实现封装，属性私有化"></a>三、可以实现封装，属性私有化</h3><p><code>例为什么在外部执行的 divorce 能用内部的变量？能换成 xiaozhang</code></p><p><code>因为 this.divorce 在对象上，由于对象被返回了，这个方法也被返回了。 因为闭包。这个函数被储存到了外部，所以储存了这个函数的执行期上下文。</code></p><p><code>所以可以用这个闭包。所以 var prepareWife 被下面的 this=fn 三个函数共用，这三个函数分别与 fn Deng 形成了闭包，共同用 Deng 的 AO,所以可以在外部随意存取。</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">Deng</span>(<span class="params">name,wife</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> prepareWife = <span class="string">&#x27;xiaozhang&#x27;</span>;</span><br><span class="line"></span><br><span class="line">         <span class="built_in">this</span>.name = name;</span><br><span class="line">         <span class="built_in">this</span>.wife = wife;</span><br><span class="line">         <span class="built_in">this</span>.divorce = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">this</span>.wife = prepareWife;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">this</span>.changePrepareWife = <span class="function"><span class="title">funtion</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">             prepareWife = target;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">this</span>.sayPrapreWife = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(prepareWife);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> deng = <span class="keyword">new</span> Deng(<span class="string">&#x27;Deng&#x27;</span>,<span class="string">&#x27;xiaoliu&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  从控制器输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  deng</span></span><br><span class="line">    <span class="comment">// &lt;· Deng</span></span><br><span class="line">    <span class="comment">//     &gt; changePrepareWife(target)</span></span><br><span class="line">    <span class="comment">//     &gt; divorce:()</span></span><br><span class="line">    <span class="comment">//         name : &quot;deng&quot;</span></span><br><span class="line">    <span class="comment">//     &gt; sayPrapreWife:()</span></span><br><span class="line">    <span class="comment">//         wife : &#x27;xiaoliu&#x27;</span></span><br><span class="line">    <span class="comment">//     &gt; __proto__ : Object</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  deng.divorce()</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  deng.wife</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;xiaozhang&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  deng.prepareWife</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br></pre></td></tr></table></figure><p>deng.prepareWife 是 undefined 的，表面上看起来不是自己的，但是<code>实际上只有对象自己通过对象自己设置的方法可以去操作他，外部用户通过对象，prepareWife 是看不到的</code>，只有自己能看到，就是闭包的私有化运用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">    F.prototype = Origin.prototype;</span><br><span class="line">    Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Target.prototype.constructor = Target;</span><br><span class="line">    Target.prototype.uber = Origin.prototype;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 执行完是这个样子</span></span><br><span class="line"><span class="keyword">var</span> inherit = <span class="function"><span class="keyword">function</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">  F.prototype = Origin.prototype;</span><br><span class="line">  Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">  Target.prototype.constructor = Target;</span><br><span class="line">  Target.prototype.uber = Origin.prototype;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>上面的 var F 这个 F 形成了闭包，成为了这个函数的私有化变量，而且变成私有化变量就更好</code></p><h3 id="四、模块化开发，防止污染全局变量"><a href="#四、模块化开发，防止污染全局变量" class="headerlink" title="四、模块化开发，防止污染全局变量"></a>四、模块化开发，防止污染全局变量</h3><h2 id="闭包的防范"><a href="#闭包的防范" class="headerlink" title="闭包的防范"></a>闭包的防范</h2><blockquote><p>闭包会导致多个执行函数共用一个公有变量，如果不是特殊需要，应尽量防止这种情况发生。</p></blockquote><h1 id="对象，包装类"><a href="#对象，包装类" class="headerlink" title="对象，包装类"></a>对象，包装类</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="1-用已学的知识点，描述一下你心目中的对象"><a href="#1-用已学的知识点，描述一下你心目中的对象" class="headerlink" title="1.用已学的知识点，描述一下你心目中的对象"></a>1.用已学的知识点，描述一下你心目中的对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mrDeng  = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;MrDeng&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">40</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">        <span class="attr">health</span> : <span class="number">100</span>,</span><br><span class="line">        <span class="attr">smoke</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;I am smoking ! cool !!! &#x27;</span>);</span><br><span class="line">            mrDeng.health --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">dring</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;I am drink&#x27;</span>);</span><br><span class="line">            mrDeng.health ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台返回</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.health</span></span><br><span class="line">    <span class="comment">// &lt;· 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.drink()</span></span><br><span class="line">    <span class="comment">//  I am drink</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.drink()</span></span><br><span class="line">    <span class="comment">//  I am dring</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.health</span></span><br><span class="line">    <span class="comment">// &lt;· 102</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.smoke()</span></span><br><span class="line">    <span class="comment">//  I am smiking ! cool !!!</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.health</span></span><br><span class="line">    <span class="comment">// &lt;· 99</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  mrDeng.dring()</span></span><br><span class="line">    <span class="comment">//  I am dring</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>灰色的 undefined 是返回值，因为没有设置返回值，所以就是灰色的 undefined</p></blockquote><h4 id="代表函数引用"><a href="#代表函数引用" class="headerlink" title="代表函数引用"></a>代表函数引用</h4><blockquote><p>改 mrDeng.health 为 this.health，此处 this 指代的是自己，是第一人称，指的就是 mrDeng。因为 this 是在一个方法里面，所以指的这个方法。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">smoke</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘I am good’)</span><br><span class="line">    <span class="built_in">this</span>.health --;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="2-属性的增、删、改、查"><a href="#2-属性的增、删、改、查" class="headerlink" title="2.属性的增、删、改、查"></a>2.属性的增、删、改、查</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例</span><br><span class="line"></span><br><span class="line">在上面的基础上 mrDeng.wife = <span class="string">&#x27;xiaoliu&#x27;</span></span><br><span class="line"></span><br><span class="line">也可以在控制台操作</span><br><span class="line"></span><br><span class="line">=<span class="string">&#x27;&#x27;</span>等号后面的引号里面需要有值才可以</span><br><span class="line"></span><br><span class="line">删除必须借助 <span class="keyword">delete</span> mrDeng.sex</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="增加一个属性"><a href="#增加一个属性" class="headerlink" title="增加一个属性"></a>增加一个属性</h4><p>给一个对象增加属性和方法，就直接给一个对象添加，如下:</p><blockquote><p>（对象.属性名 = 属性值） 如 ： mrDeng.wife = ‘xiaoliu’</p></blockquote><p><code>例 ：mrDeng.wife = &quot;xiaoliu&quot;</code></p><h4 id="查看一个属性"><a href="#查看一个属性" class="headerlink" title="查看一个属性"></a>查看一个属性</h4><blockquote><p>对象名.属性名</p></blockquote><h4 id="修改一个属性"><a href="#修改一个属性" class="headerlink" title="修改一个属性"></a>修改一个属性</h4><blockquote><p>直接在对象名外面或控制器里面写 （对象名.属性名 = “属性值”）</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="keyword">var</span> mrDeng = &#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">mrDeng.sex = <span class="string">&quot;female&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="删除一个属性"><a href="#删除一个属性" class="headerlink" title="删除一个属性"></a>删除一个属性</h4><p>删除一个属性，需要添加一个属性‘delete’,</p><blockquote><p>delete 对象名.属性名</p></blockquote><p>这样就会删除对应的属性</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="keyword">var</span> mrDeng = &#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">fring</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;I am dring&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> mrDeng.sex;</span><br></pre></td></tr></table></figure><h3 id="3-对象的创建方法"><a href="#3-对象的创建方法" class="headerlink" title="3.对象的创建方法"></a>3.对象的创建方法</h3><h4 id="1-var-obj-对象字面量-对象直接量-plainObject"><a href="#1-var-obj-对象字面量-对象直接量-plainObject" class="headerlink" title="1. var obj = {} 对象字面量 / 对象直接量 plainObject"></a>1. var obj = {} <code>对象字面量 / 对象直接量 plainObject</code></h4><h4 id="2-构造函数-系统自带的构造函数-Object-new-Object-Array-Number-Boolean-Date"><a href="#2-构造函数-系统自带的构造函数-Object-new-Object-Array-Number-Boolean-Date" class="headerlink" title="2. 构造函数 系统自带的构造函数 Object() new Object(); Array(); Number(); Boolean(); Date();"></a>2. 构造函数 <code>系统自带的构造函数 Object() new Object(); Array(); Number(); Boolean(); Date();</code></h4><p>一、系统自带的构造函数</p><blockquote><p>Object()可以批量生成对象，每一个对象都一样，但是彼此相互独立。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">在 <span class="built_in">Object</span>()前面加个 <span class="keyword">new</span>，变成 <span class="keyword">new</span> <span class="built_in">Object</span>()的执行，就会真正的返回一个对象，通过 <span class="keyword">return</span> 返回，拿变量接受。<span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();和 <span class="keyword">var</span> obj = &#123;&#125;;这样写区别不大</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">        obj.name = ‘abc’;</span><br><span class="line">        obj.sex = “male”;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>双引号和单引号都是表示的字符串，写双引号也可以写单引号，但是为了跟后端 php 配合最好写单引号。如果要打印一个单个的引号，用正则表达式转义字符<code>/* \&#39; */</code>注意 等号 和 冒号 的用法 <code>obj.say = function()&#123;&#125; var obj = &#123; name : &#39;abc&#39;&#125;</code></strong></p><p>二、自定义</p><blockquote><p>Object.create(原型)方法</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    Person 是可以随便写的，也是构造函数</span><br><span class="line">    构造函数跟函数结构上没有任何区别</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> person1 = <span class="keyword">new</span> person();</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>必须用 new 这个操作符，才能构造出对象</p></blockquote><p><code>构造函数必须要按照大驼峰式命名规则，但凡是构造函数就要大写，例如 TheFirNa</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;BMW&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.height = <span class="string">&#x27;1400&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.lang = <span class="string">&#x27;4900&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.weight = <span class="number">1000</span>;</span><br><span class="line">    <span class="built_in">this</span>.health = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.health --;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="keyword">var</span> car1 = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">car.name = <span class="string">&#x27;Maserati&#x27;</span>;</span><br><span class="line">car1.name = <span class="string">&#x27;Merz&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出时。显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  car</span></span><br><span class="line"><span class="comment">// &lt;· Car &#123;name : &#x27;Maserati&#x27;,height : &#x27;1400&#x27;,lang : &#x27;4900&#x27;,weight : 1000&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  car1</span></span><br><span class="line"><span class="comment">// &lt;· Car &#123;name : &#x27;Merz&#x27;,height : &#x27;1400&#x27;,lang : &#x27;4900&#x27;,weight : 1000&#125;</span></span><br></pre></td></tr></table></figure><p><code>car1 和 car 是长得一样，但是是不同的两个 car。方法名和对象名尽量不一样</code></p><p><code>a 和 A 变量是两个变量，var car = new Car 里面 car 和 Car 是两个变量</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.color = color;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;BMW&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.height = <span class="string">&quot;1400&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.lang = <span class="string">&quot;4900&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.weight = <span class="number">1000</span>;</span><br><span class="line">  <span class="built_in">this</span>.health = <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.health--;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">&quot;red&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> car1 = <span class="keyword">new</span> Car(<span class="string">&quot;green&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一行的 color 可以和上面的参数重复，通过参数，使参数发生变化，变成自定义</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sex = sex;</span><br><span class="line">  <span class="built_in">this</span>.grade = <span class="number">2017</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;male&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="构造函数内部原理"><a href="#构造函数内部原理" class="headerlink" title="构造函数内部原理"></a>构造函数内部原理</h3><blockquote><p>前提必须要加 new，以下三步都是隐式的：</p></blockquote><ol><li><p>在函数体最前面隐式的加上 var this = {} 空对象</p></li><li><p>执行 this.xxx = xxx;</p></li><li><p>隐式的返回 return this</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var this&#123;</span></span><br><span class="line">  <span class="comment">// name : &quot;&quot;;</span></span><br><span class="line">  <span class="comment">// age : &quot;&quot;;</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sex = sex;</span><br><span class="line">  <span class="built_in">this</span>.grade = <span class="number">2017</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//return this;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;male&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, height</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//隐式的 var this = &#123;&#125;，下面正常执行 this</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">        <span class="built_in">this</span>.say = funtion ()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.say);</span><br><span class="line">            <span class="comment">//此处的 this 和外面的 this 不同</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 隐式的 return this;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> Person(‘xiaowang’, <span class="number">180</span>).name);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例;</span><br><span class="line"><span class="comment">// 也可以这样显式的写出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = &#123;&#125;; <span class="comment">//显式写出来</span></span><br><span class="line">  that.name = name;</span><br><span class="line">  that.height = height;</span><br><span class="line">  <span class="keyword">return</span> that; <span class="comment">//显式写出来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, height</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var this = &#123;&#125;</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.height = height;</span><br><span class="line">  <span class="built_in">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.say);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">  <span class="comment">// return this;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;xiaowang&quot;</span>, <span class="number">180</span>);</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;xiaozhang&quot;</span>, <span class="number">175</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出时。显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person</span></span><br><span class="line"><span class="comment">// &lt;· Person&#123;name : &#x27;xiaowang&#x27;,height : 180&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person1</span></span><br><span class="line"><span class="comment">// &lt;· Person&#123;name : &#x27;xiaozhang&#x27;,height : 175&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案现在的 peson 和 person1 都是 Object&#123;&#125;</span></span><br><span class="line"><span class="comment">// 如果 return 写成 return 123，会使 return 失效，如上</span></span><br></pre></td></tr></table></figure><blockquote><p>有 new 了以后就不能返回原始值，例如 123</p></blockquote><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p><code>new String(); new Boolean(); new Number();</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">123</span>;  →  原始值数字</span><br><span class="line"></span><br><span class="line">只有原始值数字是原始值，原始值不能有属性和方法</span><br></pre></td></tr></table></figure><blockquote><p>属性和方法只有对象有，包括对象自己，数组，function</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台输出。显示</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num</span></span><br><span class="line">    <span class="comment">// &lt;· Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num.abc = &#x27;a&#x27;</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num.abc</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num</span></span><br><span class="line">    <span class="comment">// &lt;· Number&#123;abc:&#x27;a&#x27;,[[primitiveValue]]:123&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>); ——&gt; 构造函数。是对象<span class="number">123</span>，不是原始数字</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num</span></span><br><span class="line">    <span class="comment">// &lt;· Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num * 2</span></span><br><span class="line">    <span class="comment">// &lt;· 246</span></span><br></pre></td></tr></table></figure><p><strong>数字的对象如果参与运算，就会变回原始值，但如果不参与运算，加属性和方法，又可以当对象用，字符串 和<code>Boolean</code>类型完全一致。</strong></p><h3 id="字符串类型的对象"><a href="#字符串类型的对象" class="headerlink" title="字符串类型的对象"></a>字符串类型的对象</h3><ol><li><p>var num = new Nunber(123); <code>数字类型对象</code></p></li><li><p>var str = new String(‘abcd’); <code>字符串类型对象</code></p></li><li><p>var bol = new Boolean(‘true’); <code>布尔类型对象</code></p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &gt;  num</span></span><br><span class="line"><span class="comment">// &lt;· Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  str</span></span><br><span class="line"><span class="comment">// &lt;· String&#123;[[PrimitiveValue]]:abcd&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  Boolean</span></span><br><span class="line"><span class="comment">// &lt;· Boolean&#123;[[PrimitiveValue]]:true&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>undefined 和 null 不可以有属性</p></blockquote><p><code>不能写成 undefined.abc = 123;会报错</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    原始值不可能有属性和方法，但经过了包装类(加隐式)可以调用一些属性与方法</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">4</span>；</span><br><span class="line">    num.len = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//系统隐式的加上 new Number(4).len = 3; 然后 delete</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(num.len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//系统隐式的加上 new Number(4).len; 但是这个 new Number 和上面的 new Number不是同一个，所以返回 undefined</span></span><br><span class="line"></span><br><span class="line">    而上面这些隐式的过程就是包装类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line">    str.length = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//隐式的加上 new string(‘abcd’).length = 2; 然后delete</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="built_in">console</span>.log(str.length);</span><br><span class="line"></span><br><span class="line">    答案是 abcd，<span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    str += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="keyword">typeof</span>(str);</span><br><span class="line">    <span class="keyword">if</span>(test.length == <span class="number">6</span>)&#123;</span><br><span class="line">        test.sign = <span class="string">&#x27;typeof的返回结果可能是 Strings&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(test.sign);</span><br><span class="line"></span><br><span class="line">理解过程:</span><br><span class="line">    str += <span class="number">1</span>; <span class="comment">//abc1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> test = <span class="keyword">typeof</span>(str); <span class="comment">//test == “string”，返回 string，string 长度是 6</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(test.length == <span class="number">6</span>)&#123;</span><br><span class="line">        test.sign = “<span class="keyword">typeof</span> 的返回结果可能为 <span class="built_in">String</span>”;</span><br><span class="line">        <span class="comment">//这是原始值,原始值要赋属性值需要调用包装类，赋了跟没赋值是一样的，new String(test).sign=’xxx’;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    conlogo.log(test.sign); <span class="comment">//new String(test).sign</span></span><br><span class="line">    答案 <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例题<span class="number">1</span>:</span><br><span class="line">    <span class="comment">// 分析一下javasript代码段</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">emproyee</span>(<span class="params">name,code</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&#x27;wangli&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.code = <span class="string">&#x27;Aoo1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> newemp = <span class="keyword">new</span> emproyee(<span class="string">&#x27;zhangming&#x27;</span>,A002);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;雇员姓名&#x27;</span> + newemp.name + <span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;雇员代号&#x27;</span> + newemmp.code + <span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果是（）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// A. 雇员姓名：wangli 雇员代号 A001</span></span><br><span class="line">    <span class="comment">// B. 雇员姓名：zhangming 雇员代号 A002</span></span><br><span class="line">    <span class="comment">// C. 雇员姓名：null 雇员代号 null</span></span><br><span class="line">    <span class="comment">// D. 输出错误，无输出结果</span></span><br><span class="line"></span><br><span class="line">    答案 A，里面并没有用参数，被写死了，传参不成功</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">2</span>:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">sss</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            a ++;</span><br><span class="line">            <span class="built_in">document</span>.write(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.say = sss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> oPerson = <span class="keyword">new</span> Person();</span><br><span class="line">    oPerson.say();</span><br><span class="line">    oPerson.say();</span><br><span class="line">    <span class="keyword">var</span> oPerson1 = <span class="keyword">new</span> Person();</span><br><span class="line">    oPerson1.say();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 答案 ：1，2，1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">3</span>:</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>,y = z = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n = n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    y = add(x);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n = n + <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    z = add(x);</span><br><span class="line">    <span class="comment">// x  y  z</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 答案: 1, 4, 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">4</span>:</span><br><span class="line">    <span class="comment">// 下面代码中 console.log 的结果是[1,2,3,4,5]的选项是</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// A.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// B.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// C</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// D</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;bar.apply(<span class="literal">null</span>,<span class="built_in">arguments</span>)&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)&#125;</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 答案: ACD</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">5</span>:</span><br><span class="line">    <span class="comment">// 请问一下表达式的结果是什么？</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    答案:<span class="number">3</span>,<span class="literal">NaN</span>，<span class="number">3</span>(有的浏览器遇到 <span class="number">0</span> 进制 是报 <span class="literal">NaN</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">6</span>:</span><br><span class="line">    <span class="comment">// 一下那些是 javascript 语言 typeof 可能返回的结果</span></span><br><span class="line"></span><br><span class="line">    A.string     B. array    C.object    D.null</span><br><span class="line"></span><br><span class="line">    答案: A、C</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">7</span>:</span><br><span class="line">    <span class="comment">// 看看下面 alert 的结果是什么？</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params">x, y, a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">        alert( a );</span><br><span class="line">    &#125;</span><br><span class="line">    b(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 如果函数体改成下面，结果又会是什么？</span></span><br><span class="line">    a = <span class="number">10</span>；</span><br><span class="line">    alert(<span class="built_in">arguments</span>[ <span class="number">2</span> ]);</span><br><span class="line"></span><br><span class="line">    答案 <span class="number">10</span>，<span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例题<span class="number">8</span>:</span><br><span class="line">    写一个方法，求一个字符串的字节长度。(提示：字符串有一个方法 charCodeAt(); 一个中文占两个字节，一个英文占一个字节。)</span><br><span class="line"></span><br><span class="line">    定义和用法:</span><br><span class="line">    charCodeAt(); 方法可返回指定位置的字符的 Uncode 编码，这个返回值是<span class="number">0</span> - <span class="number">65535</span> 之间的整数。(当返回值是 &lt;=<span class="number">255</span>时为英文，当返回值 &gt;<span class="number">255</span>时为中文)</span><br><span class="line"></span><br><span class="line">    语法:</span><br><span class="line">    stringObject.charCodeAt(index)</span><br><span class="line"></span><br><span class="line">    <span class="attr">eg</span>:</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&#x27;javascrip/text&#x27;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> str = <span class="string">&quot;Hello word&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">document</span>.write(str.charCodeAt(<span class="number">1</span>))  <span class="comment">//输出101</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> str = <span class="string">&#x27;hello world 邓哥身体好&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        str.charCoeAt(<span class="number">0</span>); <span class="comment">// 输出 104</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> str = <span class="string">&#x27;hello world 邓哥身体好&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; str.length; i ++)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(str.charCodeAt(i));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    解题</span><br><span class="line"></span><br><span class="line">    方式<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;1111111111111&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">bytesLength</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; str.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str.charCodeAt(i) &gt; <span class="number">255</span>)&#123;</span><br><span class="line">                    count += <span class="number">2</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    count ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count; <span class="comment">// 闭包</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> Str = bytesLength(str); <span class="comment">//Str 接受闭包</span></span><br><span class="line"></span><br><span class="line">    方式<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&quot;222222222222&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">bytesLength</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> count = str.length;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str.charCodeAt(i) &gt; <span class="number">255</span>)&#123;</span><br><span class="line">                    count ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count; <span class="comment">// 闭包</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> Str = bytesLength(str); <span class="comment">//Str 接受闭包</span></span><br><span class="line"></span><br><span class="line">小于等于 <span class="number">255</span> 是一个字节，</span><br><span class="line">大于是两个字节</span><br><span class="line">返回值大于 <span class="number">255</span> 是中文</span><br><span class="line">上面 是两种方法 → Unicode 编码涵盖 asc 码</span><br></pre></td></tr></table></figure><h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><ol><li><p>定义：原型是 function 对象的一个属性，它定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法。原型也是对象。</p></li><li><p>利用原型特点和概念，可以提取共有属性。</p></li><li><p>对象属性的增删和原型上属性增删改查。</p></li><li><p>对象如何查看原型 ==&gt; 隐式属性 __proto__。</p></li><li><p>对象如何查看对象的构造函数 ==&gt; constructor。</p></li></ol><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><blockquote><p>原型，一种继承关系，出生（一开始）就被定义好了</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">person.prototype <span class="comment">//原型（描述一种继承关系），出生时就被定义好了</span></span><br><span class="line"></span><br><span class="line">person.prototype = &#123;&#125; <span class="comment">//是祖先</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Person.prototype  ————&gt;  原型</span></span><br><span class="line"><span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">Person.prototyp.name = <span class="string">&#x27;hehe&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person</span></span><br><span class="line"><span class="comment">// &lt;· Person&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.name</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;hehe&#x27;</span></span><br><span class="line"></span><br><span class="line">右上的 person 和 person1 都有一个共有的祖先 Person.prototype</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">     <span class="comment">// Person.prototype  ————&gt;  原型</span></span><br><span class="line">例<span class="number">1</span>: <span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">Person.prototype.LastName = <span class="string">&quot;Deng&quot;</span>;</span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.LastName = <span class="string">&quot;Ji&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.LastName</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;Ji&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">     <span class="comment">// person.prototype  ————&gt;  原型</span></span><br><span class="line">例<span class="number">2</span>: <span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">Person.prototype.LastName = <span class="string">&quot;Deng&quot;</span>;</span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;xuming&quot;</span>, <span class="number">35</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person</span></span><br><span class="line"><span class="comment">// &lt;· Person&#123;name:&#x27;xuming&#x27;,age:35,sex:&#x27;male&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.name</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;xuming&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.LastName</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;Deng&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>自己身上有需要的属性，原型上也有属性，取近的，用自己的</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">  <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// person.prototype  ————&gt;  原型</span></span><br><span class="line">    <span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color,owner</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.carName = <span class="string">&#x27;BMW&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.height = <span class="number">1400</span>;</span><br><span class="line">        <span class="built_in">this</span>.lang = <span class="number">4900</span>;</span><br><span class="line">        <span class="built_in">this</span>.owner = owner;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;prof.ji&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 1) 上面代码提取出来放在原型里面就如 2)</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// person.prototype  ————&gt;  原型</span></span><br><span class="line">    <span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">    Car.prototype.height = <span class="number">1400</span>;</span><br><span class="line">    Car.prototype.lang = <span class="number">4900</span>;</span><br><span class="line">    Car.prototype.carName = <span class="string">&#x27;BMW&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color,owner</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.owner = owner;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;prof.ji&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;laodeng&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// person.prototype  ————&gt;  原型</span></span><br><span class="line">例: <span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">Person.prototype.lastName = <span class="string">&quot;Deng&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;xuming&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台打印:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.lastName = &#x27;James&#x27;;</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;James&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person</span></span><br><span class="line"><span class="comment">// &lt;· Person&#123;name : &#x27;xuming&#x27;,lastName : &#x27;James&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.lastName</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;James&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面通过对象（后代）改原型（祖先）是不行的，在对象里面修改，只是作用给自己的，给自己加了一个属性。改原型都不行，增加肯定也不行。对象可以删除属性</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">  <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// person.prototype  ————&gt;  原型</span></span><br><span class="line">    <span class="comment">// Person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">    Person.prototype.height = <span class="number">1400</span>;</span><br><span class="line">    Person.prototype.lang = <span class="number">4900</span>;</span><br><span class="line">    Person.prototype.carName = <span class="string">&#x27;BMW&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pereson = <span class="keyword">new</span> Person(<span class="string">&#x27;xuming&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1) 的简化写法见 2):</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// person.prototype  ————&gt;  原型</span></span><br><span class="line">    <span class="comment">// person.prototype  ————&gt;  祖先（原型）</span></span><br><span class="line">    Car.prototype = &#123;</span><br><span class="line">        <span class="attr">height</span> : <span class="number">1400</span>,</span><br><span class="line">        <span class="attr">lang</span> : <span class="number">4900</span>,</span><br><span class="line">        <span class="attr">carName</span> : BMW</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br></pre></td></tr></table></figure><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p><code>constructor 是构造的意思</code></p><blockquote><p>原型内部自带 constructor，指的是 Car。通过 constructor 能找的谁构造的自己</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span>例<span class="number">1</span>:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台中输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  car.constructor</span></span><br><span class="line">    <span class="comment">// &lt;· function Car()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  Car.prototype</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;</span></span><br><span class="line">    <span class="comment">//        constructor:Car()  ————&gt;  粉色字体</span></span><br><span class="line">    <span class="comment">//        __proto__:Object   ————&gt;  粉色字体</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">construnctor 是构造的意思(隐式是浅粉色)</span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>:</span><br><span class="line">    <span class="comment">//Person.prototype  ————&gt; 原型</span></span><br><span class="line">    <span class="comment">//Person.prototype  ————&gt; 祖先（原型）</span></span><br><span class="line">    Car.prototype.abc = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台中输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  Car.prototype</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;</span></span><br><span class="line">    <span class="comment">//      abc : &#x27;123&#x27;  ————&gt;  紫色字体</span></span><br><span class="line">    <span class="comment">//      constructor:Car()  ————&gt;  粉色字体</span></span><br><span class="line">    <span class="comment">//      __proto__:Object   ————&gt;  粉色字体</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">粉红色是系统帮你设置的，深紫色是自己设置的</span><br></pre></td></tr></table></figure><blockquote><p>在原型内部自带 constructor，指的是 Car。通过 constructor 能找的谁构造的自己，也可以通过 constructor 来改变自己的构造对象</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="comment">// Person.prototype  ————&gt;  原型</span></span><br><span class="line">    <span class="comment">// Person.prototype=&#123;&#125;  ————&gt;  祖先(原型)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    Car.prototype = &#123;</span><br><span class="line">        <span class="attr">constructor</span> : Person</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  car.constructor</span></span><br><span class="line">    <span class="comment">// &lt;· function Person()&#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// car的构造对象本来是 function Car()&#123;&#125; 但是经过 constructor属性 的更改，car的构造对象变成了 function Person()&#123;&#125;, constructor属性也可以，找构造函数所对应的构造对象。</span></span><br><span class="line"></span><br><span class="line"><span class="title">constructor</span> 可以被人工手动更改</span><br></pre></td></tr></table></figure><h2 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: Person.prototype.name = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//var this = &#123;</span></span><br><span class="line">  <span class="comment">// __proto__: Person.prototype</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person</span></span><br><span class="line"><span class="comment">// &lt;· Person&#123;</span></span><br><span class="line"><span class="comment">//      __proto__ : Object&#123;</span></span><br><span class="line"><span class="comment">//          constructor:Person()</span></span><br><span class="line"><span class="comment">//          __protot__:Object</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.__proto__</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;</span></span><br><span class="line"><span class="comment">//          constructor : Person()  ————&gt; 粉色字体</span></span><br><span class="line"><span class="comment">//          name : &#x27;abc&#x27;            ————&gt; 紫色字体</span></span><br><span class="line"><span class="comment">//          __proto__ : Object      ————&gt; 粉色字体</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">浅粉色的__proto__是系统的隐式的属性,前面两个_后面两个_，可以修改，尽量不改。</span><br><span class="line"></span><br><span class="line">在开发的时候，如果很私人可以写成_private，告诉同事别动。</span><br><span class="line"></span><br><span class="line">上面的__proto__放的是原型。__proto__存的对象的原型</span><br><span class="line"></span><br><span class="line">上面的 <span class="keyword">var</span> <span class="built_in">this</span> =&#123;<span class="attr">__proto__</span>:person.prototype&#125;;这个对象并不是空的，这个 proto，当你访问这个对象的属性时，如果对象没有这个属性，那么就会访问 proto 索引，看看有没有。有一个连接的关系，原型和自己连接到一起</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: Person.prototype.name = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//var this = &#123;</span></span><br><span class="line">  <span class="comment">// __proto__ : Person.prototype</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;sunny&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.__proto__ = obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.__proto__</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;name : &#x27;abc&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.__proto__ = obj</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;name : &#x27;sunny&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.name</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;sunny&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>Person 的原型是可以被修改的</p></blockquote><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: Person.prototype.name = <span class="string">&quot;sunny&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype.name = <span class="string">&quot;cherry&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; person.name</span></span><br><span class="line"><span class="comment">//&lt;· &#x27;cherry&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: Person.prototype.name = <span class="string">&quot;sunny&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;cherry&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; person.name</span></span><br><span class="line"><span class="comment">//&lt;· &#x27;cherry&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: Person.prototype.name = <span class="string">&quot;sunny&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//var this = &#123;__proto : Person.prototype&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;cherry&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; person.name</span></span><br><span class="line"><span class="comment">//&lt;· &#x27;sunny&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.prototype.name 这种.的写法是在原有的基础上把值改了。改的是属性，也就是房间里面的东西。</span><br><span class="line"></span><br><span class="line">而 Person.prototype=&#123;<span class="attr">name</span>:<span class="string">&#x27;cherry&#x27;</span>&#125;是把原型改了，换了新的对象。改了个房间。</span><br><span class="line"></span><br><span class="line">上面在 <span class="keyword">new</span> 的时候 <span class="keyword">var</span> <span class="built_in">this</span> = &#123;<span class="attr">__proto__</span>:Person.prototype&#125;里面的指向 Person，此时Person.prototype 与__proto__指向的是一个空间，把他返回给 <span class="keyword">var</span> person。</span><br><span class="line"></span><br><span class="line">先 <span class="keyword">new</span> 再 Person.prototype=&#123;<span class="attr">name</span>:<span class="string">&#x27;cherry&#x27;</span>&#125;已经晚了</span><br><span class="line"></span><br><span class="line">在 Person.prototype=&#123;<span class="attr">name</span>:<span class="string">&#x27;cherry&#x27;</span>&#125;时，Person.prototype 空间改了，但是__proto指向的空间不变。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">上面的步骤实际（简化）上是→</span><br><span class="line"></span><br><span class="line">    Person.prototype = &#123;<span class="attr">name</span> : <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line">    __proto__ = Person.prototype;</span><br><span class="line">    Person.prototype = &#123;<span class="attr">name</span> : <span class="string">&#x27;b&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;a&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">var</span> obj1 = obj;</span><br><span class="line">    obj = &#123; <span class="attr">name</span>: <span class="string">&quot;b&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  obj1</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;name:&#x27;a&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  obj</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;name:&#x27;b&#x27;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    Person.prototype.name = <span class="string">&#x27;sunny&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//var this = &#123;__proto : Person.prototype&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;cherry&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    上面这种思考过程：程序执行顺序</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>先把 <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;在预编译的过程中提到最上面</span><br><span class="line"><span class="number">2.</span>再执行 Person.prototype.name = <span class="string">&#x27;sunny&#x27;</span>这一样行</span><br><span class="line"><span class="number">3.</span>再执行 Person.prototype = &#123;<span class="attr">name</span>:<span class="string">&#x27;cherry&#x27;</span>&#125;</span><br><span class="line"><span class="number">4.</span>最后执行 <span class="keyword">var</span> person = <span class="keyword">new</span> Person();执行到 <span class="keyword">new</span> 的时候，才会发生    <span class="comment">//var this=&#123;__proto__:Person.prototype&#125;</span></span><br><span class="line"><span class="number">5.</span>下面的把上面的覆盖了</span><br><span class="line"><span class="number">6.</span>答案是 cherry</span><br></pre></td></tr></table></figure><blockquote><p>铺垫原型链</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  Person.prototype</span></span><br><span class="line"><span class="comment">// &lt;· Object</span></span><br><span class="line"><span class="comment">//     &gt; constructor : Person()</span></span><br><span class="line"><span class="comment">//     &gt; __proto__ : Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这说明原型里面有原型</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: 原型链</span><br><span class="line"></span><br><span class="line">Grand.prototype.lastName = <span class="string">&quot;Deng&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">Father.prototype = grand;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;xuming&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">Son.prototype = father;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.hobbit = <span class="string">&quot;smoke&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出时:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  son.hobbit</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;smoke&#x27;</span></span><br><span class="line"><span class="comment">// &gt;  son.name</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;xuming&#x27;</span></span><br><span class="line"><span class="comment">// &gt;  son.lastName</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;Deng&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  Grand.prototype</span></span><br><span class="line"><span class="comment">// &lt;· Object</span></span><br><span class="line"><span class="comment">//     ·&gt; constructor : Gran()</span></span><br><span class="line"><span class="comment">//         lastName : &#x27;Deng&#x27;</span></span><br><span class="line"><span class="comment">//     ·&gt; __proto__ : Object</span></span><br><span class="line"><span class="comment">//         ·&gt; __defineGetter__;</span></span><br><span class="line"><span class="comment">//         ·&gt; __defineSetter__;</span></span><br><span class="line"><span class="comment">//         ·&gt; __lookupGetter__;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  Object.prototype</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;&#125;</span></span><br><span class="line"><span class="comment">// &gt;  Object.prototype.__proto__</span></span><br><span class="line"><span class="comment">// &lt;· null</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">执行 son.toString <span class="comment">//返回 function toString( )&#123; [native code] &#125;，这里返回的是原型链终端的 toString</span></span><br><span class="line"></span><br><span class="line">Grand.prototype.__proto__ = <span class="built_in">Object</span>.prototype <span class="comment">// Object.prototype 是原型链的终端</span></span><br></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、如何构成原型链?(如下)</span><br><span class="line"></span><br><span class="line">原型链</span><br><span class="line"></span><br><span class="line">    Grand.prototype.lastName = <span class="string">&#x27;Deng&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">    Father.prototype = grand;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&#x27;xuming&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">    Son.prototype = father;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.hobbit = <span class="string">&#x27;smoke&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出时:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  son.hobbit</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;smoke&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  son.name</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;xuming&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  son.lastName</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;Deng&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  Grand.prototype</span></span><br><span class="line">    <span class="comment">// &lt;· Object</span></span><br><span class="line">    <span class="comment">//     ·&gt; constructor : Gran()</span></span><br><span class="line">    <span class="comment">//         lastName : &#x27;Deng&#x27;</span></span><br><span class="line">    <span class="comment">//     ·&gt; __proto__ : Object</span></span><br><span class="line">    <span class="comment">//         ·&gt; __defineGetter__;</span></span><br><span class="line">    <span class="comment">//         ·&gt; __defineSetter__;</span></span><br><span class="line">    <span class="comment">//         ·&gt; __lookupGetter__;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  Object.prototype</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  Object.prototype.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· null</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、原型链上属性的增删改查，原型链上的增删改查和原型基本上是一致的。只有本人有的权限，子孙是没有的。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、谁调用的方法内部 <span class="built_in">this</span> 就是谁-原型案例</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、绝大多数对象的最终都会继承自 <span class="built_in">Object</span>.prototype</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、<span class="built_in">Object</span>.create(原型);</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、原型方法上的重写</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">     Grand.prototype.lastName = <span class="string">&#x27;Deng&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">    Father.prototype = grand;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&#x27;xuming&#x27;</span></span><br><span class="line">        <span class="built_in">this</span>.fortune = &#123;</span><br><span class="line">            <span class="attr">card1</span> : <span class="string">&#x27;visa&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">    Son.prototype = father;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.hobbit = <span class="string">&#x27;smoke&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  son.fortune</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;card1 : &#x27;visa&#x27;&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  son.fortune = 200;</span></span><br><span class="line">    <span class="comment">// &lt;· 200</span></span><br><span class="line">    <span class="comment">// &gt;  son</span></span><br><span class="line">    <span class="comment">// &lt;· Son&#123;hobbit : &#x27;smoke&#x27;,fortune : 200&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  father.fortune</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;card1 : &#x27;visa&#x27;&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  son.fortune.card2 = &#x27;master&#x27;</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;master&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  son</span></span><br><span class="line">    <span class="comment">// &lt;· Son&#123;hobbit : &#x27;smoke&#x27;&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  father</span></span><br><span class="line">    <span class="comment">// &lt;· Grand&#123;name : &#x27;xuming&#x27;,fortune : Object&#125;</span></span><br><span class="line">    <span class="comment">//     ·&gt; fortune : Object</span></span><br><span class="line">    <span class="comment">//         card1 : &#x27;visa&#x27;</span></span><br><span class="line">    <span class="comment">//         card2 : &#x27;master&#x27;</span></span><br><span class="line">    <span class="comment">//         __proto__ : Object</span></span><br><span class="line">    <span class="comment">//         name : &#x27;xuming&#x27;</span></span><br><span class="line">    <span class="comment">//     ·&gt; __proto__ : Grand</span></span><br><span class="line"></span><br><span class="line">son.fortune.card2=<span class="string">&#x27;master&#x27;</span>这种改，这是引用值自己的修改。属于 fortune.name 给自己修改，这是一种调用方法的修改</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    Grand.prototype.lastName = <span class="string">&#x27;Deng&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Fahter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&#x27;xuming&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.fortune = &#123;</span><br><span class="line">            <span class="attr">card1</span> : <span class="string">&#x27;visa&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">this</span>.num = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">    Son.prototype = father;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.hobbit = <span class="string">&#x27;smoke&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  son.num++</span></span><br><span class="line">    <span class="comment">// &lt;· 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  father.num</span></span><br><span class="line">    <span class="comment">// &lt;· 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  son.num</span></span><br><span class="line">    <span class="comment">// &lt;· 101</span></span><br><span class="line"></span><br><span class="line">son.num++ 是 son.num = son.num+<span class="number">1</span>，是先把父级的取过来再赋值+<span class="number">1</span>，所以父级的没变</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: Person.prototype = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Pereson();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  person.sayName()</span></span><br><span class="line"><span class="comment">//    a</span></span><br><span class="line"><span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">//如果写成 name 就会错，没有这个变量</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        sayName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Pereson</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person.sayName()</span></span><br><span class="line">    <span class="comment">//    b</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person.prototype.sayName()</span></span><br><span class="line">    <span class="comment">//    a</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a.sayName() 方法调用，就是 sayName 里面的 <span class="built_in">this</span> 指向，是谁调用的这个方法，<span class="built_in">this</span> 就指向谁</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">  <span class="number">1</span>)</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">        <span class="attr">height</span> : <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.height ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制台输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person.eat()</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person</span></span><br><span class="line">    <span class="comment">// &lt;· Person&#123;height : 101&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;height : 100&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.height ++; <span class="comment">//这后面默认有一个 return undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>)</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">        <span class="attr">height</span> : <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.height ++;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制器输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person.eat()</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;；也是有原型的</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;; 与 <span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>(); 的效果是一样的</span><br><span class="line">    写 <span class="keyword">var</span> obj = &#123;&#125;; 系统会在内部来一个 <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    obj1.__proto__  ————&gt;  <span class="built_in">Object</span>.prototype;</span><br><span class="line">    但是在构造对象的时候，能用对象自变量 <span class="keyword">var</span> obj = &#123;&#125;; 就不要用 <span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>)</span><br><span class="line">    Person.prototype = &#123;&#125;  ————&gt;  <span class="built_in">Object</span>.prototype</span><br><span class="line">    funtion <span class="function"><span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    对象自变量的原型就是 <span class="built_in">Object</span>.prototype;</span><br></pre></td></tr></table></figure><h2 id="Object-create-原型"><a href="#Object-create-原型" class="headerlink" title="Object.create 原型"></a>Object.create 原型</h2><p><code>var obj = Object.create(原型)</code></p><blockquote><p>Object.create 也能创建对象。var obj = Object.create(这里必须要有原型)</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//var obj = Object.create(原型)</span></span><br><span class="line">例: <span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;sunny&quot;</span>, <span class="attr">age</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="built_in">Object</span>.create(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  obj1</span></span><br><span class="line"><span class="comment">// &lt;· Object &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  obj1.name</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;sunny&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="comment">//var obj = Object.create(原型)</span></span><br><span class="line">    Person.prototype.name = <span class="string">&#x27;sunny&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">绝大多数对象的最终都会继承自 <span class="built_in">Object</span>.prototype</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如: 控制台输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// html 里面没有添加任何东西，这样就会报错</span></span><br><span class="line"><span class="comment">//     &gt;  Object.create()</span></span><br><span class="line"><span class="comment">//     &lt;· 报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// html里面没有添加任何东西，只在控制台加上null</span></span><br><span class="line"><span class="comment">//     &gt;  Object.create(null)</span></span><br><span class="line"><span class="comment">//     &lt;· Object</span></span><br><span class="line"><span class="comment">//         No Properties</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// var obj = Object.create(null);</span></span><br><span class="line"><span class="comment">//     &gt;  obj.name = 123;</span></span><br><span class="line"><span class="comment">//     &lt;· 123</span></span><br><span class="line"><span class="comment">//     &gt;  obj</span></span><br><span class="line"><span class="comment">//     &lt;· Object</span></span><br><span class="line"><span class="comment">//         name : 123</span></span><br><span class="line"><span class="comment">//     &gt;  obj.__proto__ = &#123;name : &#x27;sunny&#x27;&#125;</span></span><br><span class="line"><span class="comment">//     &lt;· Object&#123;name : &#x27;sunny&#x27;&#125;</span></span><br><span class="line"><span class="comment">//     &gt;  obj</span></span><br><span class="line"><span class="comment">//     &lt;· Object&#123;&#125;</span></span><br><span class="line"><span class="comment">//     &gt;  obj.name</span></span><br><span class="line"><span class="comment">//     &lt;· undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &gt;  obj.toString()</span></span><br><span class="line"><span class="comment">//     &lt;· 报错</span></span><br></pre></td></tr></table></figure><p><code>原型是隐式的内部属性，你加是没有用的</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="comment">//var obj = Object.create(原型)</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="number">123</span>); <span class="comment">// 在控制台中会报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.create() 在括号里面只能放 <span class="literal">null</span> 或者 <span class="built_in">Object</span>,其余会报错</span><br><span class="line"><span class="literal">undefined</span> 和 <span class="literal">null</span> 没有原型，也就不可能有 toString 方法,如下:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制器输出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  undefined.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· 报错</span></span><br><span class="line">    <span class="comment">// &gt;  null.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· 报错</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例<span class="number">1</span>:</span><br><span class="line">下面 <span class="number">123.</span>toString 首先会识别成浮点型，所以在后面直接加.toString 是不行的</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  true.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;true&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  123.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· 报错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var num = 123;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  num.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var obj = &#123;&#125;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  obj.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;[object Object]&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数字想用 toString 方法，要经过包装类包装 <span class="keyword">new</span> <span class="built_in">Number</span>(num) 然后.toString</span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>:加深上面的理解</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="comment">//num.toString(); ————&gt;  new Number(num).toString();</span></span><br><span class="line">    <span class="built_in">Number</span>.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Number.prototype.__proto__ = Object.prototype</span></span><br><span class="line"></span><br><span class="line">而 <span class="keyword">new</span> <span class="built_in">Number</span>(num). toString 的原型是 Nunber.prototype，而 <span class="built_in">Number</span>.prototype 上面有一个.toString 方法，<span class="built_in">Number</span>.prototype 也有原型 <span class="built_in">Number</span>.prototype.__proto__，原型是<span class="built_in">Object</span>.prototype</span><br><span class="line"></span><br><span class="line">假如 <span class="keyword">new</span> <span class="built_in">Number</span> 上面的 prototype 上面有这个 toString，那么就不用<span class="built_in">Object</span>.prototype的 toString。而这个 number 上面有这个 toString。</span><br><span class="line"></span><br><span class="line">然后 number 上面的 toString 调用的是自己重写的 toString。</span><br><span class="line"></span><br><span class="line">原型上有这个方法，我自己又写了一个和原型上同一名字，但不同功能的方法，叫做重写（同一名字的函数，不同重写方式）</span><br><span class="line"></span><br><span class="line">通过返回值，形参列表不同传参</span><br><span class="line"></span><br><span class="line">同样的名实现不同功能的，就是重写</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="comment">// num.toString();  ————&gt;  new Number(num).toString();</span></span><br><span class="line">    <span class="built_in">Number</span>.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Number.prototype.__proto__ = Object.prototype</span></span><br><span class="line">    <span class="comment">// Object.prototype.toString = function()&#123;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">  <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// var obj = Object.create(原型)</span></span><br><span class="line">    <span class="comment">// Object.prototype.toString = function()&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制台输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  person.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;[object Object]&#x27;</span></span><br><span class="line"></span><br><span class="line">和原型链上终端方法名字一样，但实现不同的功能，叫做方法的重写。也就是覆盖</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// var obj = Object.create(原型);</span></span><br><span class="line">    <span class="comment">//Object.prototype.toString = function()&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">        <span class="attr">toString</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;hehe&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pereson = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制台输出:</span></span><br><span class="line"></span><br><span class="line">    &gt;  person.toString()</span><br><span class="line">    &lt;· <span class="string">&#x27;hehe&#x27;</span></span><br><span class="line"></span><br><span class="line">下面这个也是重写:</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>)</span><br><span class="line">    <span class="comment">// var obj = Object.create(原型);</span></span><br><span class="line"></span><br><span class="line">    object.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;haha&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制器输出:</span></span><br><span class="line"></span><br><span class="line">    &gt;  person.toString()</span><br><span class="line">    &lt;· <span class="string">&#x27;haha&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">让上面的 <span class="number">1</span>)、<span class="number">2</span>)、<span class="number">3</span>) 中的 object 上面的 toString 重写了。</span><br><span class="line">所以num.toString()调用的是 number.prototype.toString。</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.prototype.toString</span><br><span class="line">    <span class="built_in">Number</span>.prototype.toString</span><br><span class="line">    <span class="built_in">Array</span>.prototype.toString</span><br><span class="line">    <span class="built_in">Boolean</span>.prototype.toString</span><br><span class="line">    <span class="built_in">String</span>.prototype.toString</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制器输出:</span></span><br><span class="line">    <span class="comment">// &gt;  var num = 123;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  num.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">如果调用的是 object. prototype.toString 结果会不一样。</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  Object.prototype.toString.call(123)</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;[object Number]&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  Object.prototype.toStrin.call(true)</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;[object Boolean]&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">  <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">Number</span>.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;老大身体好&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制台输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var num = 123;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  num.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;老邓身体好&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>)</span><br><span class="line">     <span class="keyword">var</span> obj = <span class="number">123</span>;</span><br><span class="line">     <span class="built_in">document</span>.write(obj);</span><br><span class="line"><span class="comment">// 答案:123</span></span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="built_in">document</span>.write(obj);</span><br><span class="line"><span class="comment">// 答案:[object Object]</span></span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(obj);</span><br><span class="line"><span class="comment">//  答案:报错</span></span><br><span class="line"><span class="comment">// 解析: document.write 会隐式的调用 toString 方法，其实打印的是 toString的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(obj.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有原型就不能 toString</span></span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    obj.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;老大身体好&#x27;</span>；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(obj);</span><br><span class="line"><span class="comment">// 答案: 老邓身体好</span></span><br></pre></td></tr></table></figure><blockquote><p>上面这个例子表示：我要打印的是 obj，实际上打印出来的是 toString 方法，也证明了 document.write 调用的是 toString 方法</p></blockquote><h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call / apply"></a>call / apply</h2><blockquote><p>作用，改变 this 指向。 <code>区别，后面传的参数不一样</code></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toFixed 是保留两位有效数字</span><br><span class="line"></span><br><span class="line">例:有一个 bug,在控制台 <span class="number">0.14</span> * <span class="number">100</span></span><br><span class="line"><span class="comment">// 答案 : 1400000000000002,是js开发精度不精准</span></span><br><span class="line"></span><br><span class="line">例:向上取整 <span class="built_in">Math</span>.ceil(<span class="number">123.234</span>)</span><br><span class="line"><span class="comment">// 答案 124</span></span><br><span class="line"></span><br><span class="line">例:向下取整 <span class="built_in">Math</span>.floor(<span class="number">123.999</span>)</span><br><span class="line"><span class="comment">// 答案 123</span></span><br><span class="line"></span><br><span class="line">例: <span class="built_in">Math</span>.random()是产生一个 <span class="number">0</span> 到 <span class="number">1</span> 区间的开区间 随机数</span><br><span class="line"></span><br><span class="line">例: <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i ++)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Math</span>.random().toFixed(<span class="number">2</span>) * <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;<span class="comment">//所以一般在这种情况下，我们不用 toFixed，因为精度不准确</span></span><br><span class="line"></span><br><span class="line">例:用这种方法取整更好，就不会精度不准确</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">注意：之前 js 在小数点后面最多能容纳 <span class="number">15</span>-<span class="number">17</span> 位，但是升级后能用科学计数法表示</span><br><span class="line">如 <span class="number">2e-17</span>（是 <span class="number">2</span> 乘以 <span class="number">10</span> 的负 <span class="number">17</span> 次方）</span><br><span class="line">而小数点前面只能容纳 <span class="number">16</span> 位的运算， 可正常计算的范围是小数点前后 <span class="number">16</span> 位</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 任何一个方法都可以 .call ,.call 才是一个方法执行的真实面目</span></span><br><span class="line"></span><br><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Persom</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this == obj</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;deng&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">Person.call(obj, <span class="string">&quot;Yu&quot;</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// test() ————&gt; test.call()</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">直接执行 Person.call ( )和 Person ( )没有区别</span><br><span class="line"></span><br><span class="line">Person.call( );括号里面可以传东西</span><br><span class="line"></span><br><span class="line">如果 Person.call( obj );里面的 call 让 person 所有的 <span class="built_in">this</span> 都变成 obj</span><br><span class="line"></span><br><span class="line">不 <span class="keyword">new</span> 的话，<span class="built_in">this</span> 默认指向 <span class="built_in">window</span>。call 的使用必须要 <span class="keyword">new</span></span><br><span class="line"></span><br><span class="line">call 的第一位参数用于改变 <span class="built_in">this</span> 指向，第二位实参（对应第一个形参）及以后的参数都当做正常的实参，传到形参里面去借用别人的方法，实现自己的功能。</span><br></pre></td></tr></table></figure><blockquote><p>例写 test（）和写 test.call（）是一样的</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,sex,tel,grade</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.tel = tel;</span><br><span class="line">        <span class="built_in">this</span>.grae = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">&#x27;sunny&#x27;</span>,<span class="number">123</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">139</span>,<span class="number">2019</span>);</span><br><span class="line"></span><br><span class="line">call 改变 <span class="built_in">this</span> 指向，借用别人的函数，实现自己的功能。</span><br><span class="line">只能在你的需求完全涵盖别人的时候才能使用</span><br><span class="line">如果不想要 age 这个，就不能使用这种方法：如下</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,sex,tel,grade</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//var this = &#123;name : &#x27;&#x27;,age : &#x27;&#x27;,sex : &#x27;&#x27;&#125;;</span></span><br><span class="line">        Person.call(<span class="built_in">this</span>,name,age,sex);</span><br><span class="line">        <span class="built_in">this</span>.tel = tel;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> student = <span class="keyword">new</span> Studnet(<span class="string">&#x27;sunny&#x27;</span>,<span class="number">123</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">139</span>,<span class="number">2019</span>);</span><br><span class="line"></span><br><span class="line">Person.call(<span class="built_in">this</span>, name, age, sex);里面的 <span class="built_in">this</span> 现在是 <span class="keyword">new</span> 了以后的 <span class="keyword">var</span> <span class="built_in">this</span>=&#123;&#125;</span><br><span class="line">利用 Person 方法，实现了 Student 自己的封装</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Wheel</span>(<span class="params">wheelSize,style</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style = style;</span><br><span class="line">    <span class="built_in">this</span>.wheelSize = wheelSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sit</span>(<span class="params">c,sitColor</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.c = c;</span><br><span class="line">    <span class="built_in">this</span>.sitColor = sitColor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Model</span>(<span class="params">height,widht,len</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.height = height;</span><br><span class="line">    <span class="built_in">this</span>.widht = widht;</span><br><span class="line">    <span class="built_in">this</span>.len = len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">wheelSize,style,c,sitColor,height,widht,len</span>)</span>&#123;</span><br><span class="line">    Wheel.call(<span class="built_in">this</span>,wheelSize,style);</span><br><span class="line">    Sit.call(<span class="built_in">this</span>,c,sitColor);</span><br><span class="line">    Model.call(<span class="built_in">this</span>,height,widht,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="number">100</span>,<span class="string">&#x27;花里胡哨&#x27;</span>,<span class="string">&#x27;真皮&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="number">1800</span>,<span class="number">1900</span>,<span class="number">4900</span>);</span><br></pre></td></tr></table></figure><p><code>apply 也是改变 this 指向的，只是传参列表不同，第一位也是改变 this 指向的人，第二位，apply 只能传一个实参，而且必须传数组 argunments</code></p><p><code>call 需要把实参按照形参的个数传进去</code></p><p><code>new以后才有意义</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Wheel</span>(<span class="params">wheelSize,style</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.style = style;</span><br><span class="line">        <span class="built_in">this</span>.wheelSize = wheelSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Sit</span>(<span class="params">c,sitColor</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">        <span class="built_in">this</span>.sitColor = sitColor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Model</span>(<span class="params">height,widht,len</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">        <span class="built_in">this</span>.widht = widht;</span><br><span class="line">        <span class="built_in">this</span>.len = len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">wheelSize,style,c,sitColor,height,widht,len</span>)</span>&#123;</span><br><span class="line">        Wheel.apply(<span class="built_in">this</span>.[wheelSize,style]);</span><br><span class="line">        Sit.apply(<span class="built_in">this</span>,[c,sitColor]);</span><br><span class="line">        Model.apply(<span class="built_in">this</span>,[height,widht,len]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="number">100</span>,<span class="string">&#x27;花里胡哨&#x27;</span>,<span class="string">&#x27;真皮&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="number">1800</span>,<span class="number">1900</span>,<span class="number">4900</span>);</span><br></pre></td></tr></table></figure><h2 id="继承发展史"><a href="#继承发展史" class="headerlink" title="继承发展史"></a>继承发展史</h2><h3 id="一、-传统形式-gt-原型链"><a href="#一、-传统形式-gt-原型链" class="headerlink" title="一、 传统形式 ==&gt; 原型链"></a>一、 传统形式 ==&gt; 原型链</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: Grand.prototype.lastName = <span class="string">&quot;Ji&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"></span><br><span class="line">Father.prototype = grand;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;hehe&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">Son.prototype = father;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure><h3 id="二、借用构造函数-gt-利用-call、apply"><a href="#二、借用构造函数-gt-利用-call、apply" class="headerlink" title="二、借用构造函数 ==&gt; 利用 call、apply"></a>二、借用构造函数 ==&gt; 利用 call、apply</h3><p><code>所以不算标准的集成模式</code></p><p><code>1）不能继承借用构造函数的原型</code></p><p><code>2）每次构造函数都要多走一个函数 ==&gt; 浪费效率</code></p><p>this 放进去的前提，这个函数必须是 new 来的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex, grade</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="built_in">this</span>, name, age, sex);</span><br><span class="line">  <span class="built_in">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><h3 id="三、共享原型（比较好的继承方法，不能随便改动自己的原型）"><a href="#三、共享原型（比较好的继承方法，不能随便改动自己的原型）" class="headerlink" title="三、共享原型（比较好的继承方法，不能随便改动自己的原型）"></a>三、共享原型（比较好的继承方法，不能随便改动自己的原型）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: Father.prototype.lastName = <span class="string">&quot;Deng&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Son.prototype = Father.prototype;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  son.lastName</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;Deng&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  father.lastName</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;Deng&#x27;</span></span><br></pre></td></tr></table></figure><p><code>例:可以用上面的方式封装函数，实现一个继承</code></p><p><code>extend 和 inherit 都是继承的意思</code></p><p><code>inherit 是 css 的一个值，也是继承的意思。</code></p><p><code>文字类属性都有要给传递的特性:子元素没有设置文字类属性，子元素默认继承父元素的属性。</code></p><p><code>font-size:inherit(我没有继承父亲的)</code></p><p><code>在 inherit（Target，Origin）里面传进去的值是构造函数，需要大驼峰式书写，origin是（原始）的意思，让 target（目标）继承 origin</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    Father.prototype.lastName = <span class="string">&#x27;Deng&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        Target.prototype = Orign.prototype</span><br><span class="line">    &#125;</span><br><span class="line">    inherit(Son,Father);</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出:</span></span><br><span class="line">    <span class="comment">// &gt;  son.lastName</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;Deng&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面这种方式，让 son 里面有了 father 原型的属性</span></span><br><span class="line"><span class="comment">// 应该是inherit继承，后使用</span></span><br><span class="line"><span class="comment">// 下面这种情况就是先继承了，后改变原型已经晚了，因为他继承的还是原来的空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Father.prototype.lastName = <span class="string">&#x27;Deng&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        Target.prototype = Origin.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">    inherit(Son,Father);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这种写法，son.prototype 和 father.prototype 指向的是一个房间，改 son 就改了father。我们希望 son 用的 father 的原型，但是改变 son 自己的属性不影响 father</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Father.prototype.lastName = <span class="string">&#x27;Deng&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        Target.prototype = Origin.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">    inherit(Son,Father);</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Fahter();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出:</span></span><br><span class="line">    <span class="comment">// &gt;  son.sex</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;male&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  father.sex</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;male&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="四、圣杯模式"><a href="#四、圣杯模式" class="headerlink" title="四、圣杯模式"></a>四、圣杯模式</h3><p><code>圣杯模式是在方法三的共有原型的基础上有所改变</code></p><p><code>共享原型是：son.prototype = father.prototype</code></p><p>圣杯模式是：另外加个构造函数 function F(){} 当作中间层，然后让 F 和 father 共有一个原型 F.prototype = father.prototype,然后 son.prototype = new F();使用原型链形成了继承关系，现在改 son.prototype 就不会影响 father.prototype</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Father.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">F.prototype  = Father.prototype;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> F();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    &#125;</span><br><span class="line">    Father.prototype.lastName = <span class="string">&quot;Deng&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    inherit(Son, Father);</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt; father.lastName</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;Deng&#x27;</span></span><br><span class="line"><span class="comment">// &gt; son.lastName</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;Deng&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; Son.prototype.sex = &#x27;male&#x27;;</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;male&#x27;</span></span><br><span class="line"><span class="comment">// &gt; son.sex</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;male&#x27;</span></span><br><span class="line"><span class="comment">// &gt; father.sexx</span></span><br><span class="line"><span class="comment">// &lt;· undefined</span></span><br><span class="line"><span class="comment">// &gt; Father.prototype</span></span><br><span class="line"><span class="comment">// &lt;· Object&#123;lastName:&#x27;Deng&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p><code>son.__proto__ --&gt; new F().__proto__ --&gt; Father.prototype</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    原型上默认有个 <span class="title">constructor</span>，<span class="title">constructor</span> 默认值指向他的构造函数，<span class="title">son</span>.<span class="title">constructor</span> 应该指向 <span class="title">Son</span></span><br><span class="line"></span><br><span class="line">    // &gt; <span class="title">son</span>.<span class="title">constructor</span></span><br><span class="line">    // &lt;· <span class="title">function</span> <span class="title">Father</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    所以指向了 father 就是混乱了，所以指一下，如下:</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        Target.prototype.constructor = Target; <span class="comment">//----&gt; 让它的 constructor 可以指向自己</span></span><br><span class="line">        Target.prototype.uber = Origin.prototype; <span class="comment">//----&gt; 让它可以知道自己继承自谁</span></span><br><span class="line">    &#125;</span><br><span class="line">    Father.prototype.lastName = <span class="string">&#x27;Deng&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    inherit(Son,Father);</span><br><span class="line">    <span class="keyword">var</span> father = <span class="keyword">new</span> Fahter();</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target.prototype.uber = Origin.prototype;</span></span><br></pre></td></tr></table></figure><p><strong>我们希望我们构造出的对象，能找到自己的超类，超级父级（究竟继承自谁）应该起名为super 但这个是保留字，我们就以 uber 命名。</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 左下这种方法就不好使了，相当于右下。还是原型指向有问题，new 的时候用的是原来的原型，再 F.prototype =father.prototype 没用，son.prototype 没发生改变</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = Origin.prototype();</span><br><span class="line">    Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Target.prototype.constructor = Target;</span><br><span class="line">    Target.prototype.uber = Origin.prototype;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.lastName = <span class="string">&quot;Deng&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">inherit(Son, Father);</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例，在雅虎时代，封装了 YUI3 库来解决方法三的不足，与圣杯模式相似。现在不用</span></span><br><span class="line"><span class="comment">// YUI3 库，现在用 jquery</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    F.prototype = Origin.prototype;</span><br><span class="line">    Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Target.prototype.constructor = Target;</span><br><span class="line">    Target.prototype.uber = Origin.prototype;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 雅虎：</span></span><br><span class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)&#x27;</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        Target.prototype.constructor = Target;</span><br><span class="line">        Target.prototype.uber = Origin.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的 var inherit 与右边的 var inherit 是一样的意思,建议写上面的这种</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        Target.prototype.constructor = Target;</span><br><span class="line">        Target.prototypu.uber = Origin.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> demo;</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><h3 id="闭包、属性私有化、封装"><a href="#闭包、属性私有化、封装" class="headerlink" title="闭包、属性私有化、封装"></a>闭包、属性私有化、封装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例为什么在外部执行的 divorce 能用内部的变量？能换成 xiaozhang？</span><br><span class="line"></span><br><span class="line">因为 <span class="built_in">this</span>.divorce 在对象上，由于对象被返回了，这个方法也被返回了。</span><br><span class="line">因为闭包。这个函数被储存到了外部，所以储存了这个函数的执行期上下文。</span><br><span class="line"></span><br><span class="line">所以可以用这个闭包。所以 <span class="keyword">var</span> prepareWife 被下面的 <span class="built_in">this</span> = fn 三个函数共用，这三个函数分别与 fn Deng 形成了闭包，共同用 Deng 的 AO,所以可以在外部随意存取。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">Deng</span>(<span class="params">name,wife</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> prepareWife = <span class="string">&#x27;xiaozhang&#x27;</span>;</span><br><span class="line"></span><br><span class="line">         <span class="built_in">this</span>.name = name;</span><br><span class="line">         <span class="built_in">this</span>.wife = wife;</span><br><span class="line">         <span class="built_in">this</span>.divorce = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">this</span>.wife = prepareWife;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">this</span>.changePrepareWife = <span class="function"><span class="title">funtion</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">             prepareWife = target;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">this</span>.sayPrapreWife = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(prepareWife);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> deng = <span class="keyword">new</span> Deng(<span class="string">&#x27;Deng&#x27;</span>,<span class="string">&#x27;xiaoliu&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  从控制器输出:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  deng</span></span><br><span class="line">    <span class="comment">// &lt;· Deng</span></span><br><span class="line">    <span class="comment">//     &gt; changePrepareWife(target)</span></span><br><span class="line">    <span class="comment">//     &gt; divorce:()</span></span><br><span class="line">    <span class="comment">//         name : &quot;deng&quot;</span></span><br><span class="line">    <span class="comment">//     &gt; sayPrapreWife:()</span></span><br><span class="line">    <span class="comment">//         wife : &#x27;xiaoliu&#x27;</span></span><br><span class="line">    <span class="comment">//     &gt; __proto__ : Object</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  deng.divorce()</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  deng.wife</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;xiaozhang&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  deng.prepareWife</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br></pre></td></tr></table></figure><p>deng.prepareWife 是 undefined 的，表面上看起来不是自己的，但是<code>实际上只有对象自己通过对象自己设置的方法可以去操作他，外部用户通过对象，prepareWife 是看不到的</code>，只有自己能看到，就是闭包的私有化运用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: <span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">    F.prototype = Origin.prototype;</span><br><span class="line">    Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Target.prototype.constructor = Target;</span><br><span class="line">    Target.prototype.uber = Origin.prototype;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 执行完是这个样子</span></span><br><span class="line"><span class="keyword">var</span> inherit = <span class="function"><span class="keyword">function</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">  F.prototype = Origin.prototype;</span><br><span class="line">  Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">  Target.prototype.constructor = Target;</span><br><span class="line">  Target.prototype.uber = Origin.prototype;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>上面的 var F 这个 F 形成了闭包，成为了这个函数的私有化变量，而且变成私有化变量就更好</code></p><h1 id="命名空间（对象模块化开发-其实就是对象）"><a href="#命名空间（对象模块化开发-其实就是对象）" class="headerlink" title="命名空间（对象模块化开发,其实就是对象）"></a>命名空间（对象模块化开发,其实就是对象）</h1><blockquote><p>管理变量，防止污染全局，适用于模块化开发</p></blockquote><p><code>多人开发，对象命名容易重复，就要解决命名空间的问题</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">以前的命名空间老旧的解决方法，如下：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> org = &#123;</span><br><span class="line">        <span class="attr">department1</span> : &#123;</span><br><span class="line">            <span class="attr">jicheng</span> : &#123;</span><br><span class="line">                <span class="attr">name</span> : <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span> : <span class="number">123</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">xuming</span> : &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;，</span><br><span class="line">        <span class="attr">departmeng2</span> : &#123;</span><br><span class="line">            <span class="attr">zhangsan</span> : &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">lisi</span> : &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是用的写法</span></span><br><span class="line">    <span class="keyword">var</span> jicheng = org.department1.jicheng;</span><br><span class="line">    jicheng.name</span><br></pre></td></tr></table></figure><p><code>下面是现在公司最常见的方法：用闭包来解决（也可用 webpack），返回方法的调用。init 是初始化，入口函数，入口名字。init 调用了这个函数的功能</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;bcd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> init = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        callName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initDeng = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        callName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line">initDeng();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出:</span></span><br><span class="line"><span class="comment">// &gt;  init()</span></span><br><span class="line"><span class="comment">//    abc</span></span><br><span class="line"><span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  initDeng()</span></span><br><span class="line"><span class="comment">// &lt;· 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  initDeng()</span></span><br><span class="line"><span class="comment">//    123</span></span><br><span class="line"><span class="comment">// &lt;· undefined</span></span><br></pre></td></tr></table></figure><h1 id="思考问题（连续调用）"><a href="#思考问题（连续调用）" class="headerlink" title="思考问题（连续调用）"></a>思考问题（连续调用）</h1><blockquote><p>如何实现调用模式（模仿 jquery）</p></blockquote><p><code>obj.eat().smoke().drink().eat().sleep;</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  $(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="javascript">    .css(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;red&quot;</span>)</span></span><br><span class="line"><span class="javascript">    .width(<span class="number">100</span>)</span></span><br><span class="line"><span class="javascript">    .height(<span class="number">100</span>)</span></span><br><span class="line"><span class="javascript">    .html(<span class="number">123</span>)</span></span><br><span class="line"><span class="javascript">    .css(<span class="string">&quot;postion&quot;</span>, <span class="string">&quot;absolute&quot;</span>)</span></span><br><span class="line"><span class="javascript">    .css(<span class="string">&quot;left&quot;</span>, <span class="string">&quot;100px&quot;</span>)</span></span><br><span class="line"><span class="javascript">    .css(<span class="string">&quot;top&quot;</span>, <span class="string">&quot;100px&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> deng = &#123;</span><br><span class="line">        <span class="attr">smoke</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Smoke,…… xuan cool!!!&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">drink</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;drinking……,ye cool!&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">perm</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;preming……，cool&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    deng.smoke();</span><br><span class="line">    deng.drink();</span><br><span class="line">    deng.prem();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能连续调用 deng.smoke().drink();</span></span><br><span class="line"></span><br><span class="line">上面改成下面的写法:用<span class="keyword">return</span> <span class="built_in">this</span>，就可以连续调用和执行了。deng.smoke().drink()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deng = &#123;</span><br><span class="line">        <span class="attr">smoke</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Smoke,... xuan cool!!!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">drink</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;drinking...,ye cool!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">prem</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;preming..., cool!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    deng.smoke().drink().perm().smoke().drink();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面使用 return this 连续的调用</span></span><br></pre></td></tr></table></figure><h1 id="属性的表示方法（查看属性）"><a href="#属性的表示方法（查看属性）" class="headerlink" title="属性的表示方法（查看属性）"></a>属性的表示方法（查看属性）</h1><p><code>obj.prop 查看就用 .prop</code></p><p><code>obj[&quot;prop&quot;] 中括号也是访问属性的方法</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">想要传出去序号几，就会调用几</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的是老旧办法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deng = &#123;</span><br><span class="line">        <span class="attr">wife1</span> : &#123;<span class="attr">name</span> : <span class="string">&#x27;xioaliu&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">wife2</span> : &#123;<span class="attr">name</span> : <span class="string">&#x27;xiaozhang&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">wife3</span> : &#123;<span class="attr">name</span> : <span class="string">&#x27;xiaomeng&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">wife4</span> : &#123;<span class="attr">name</span> : <span class="string">&#x27;xiaowang&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">sayWife</span> : <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">switch</span>(num)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.wife1;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.wife1;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.wife1;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.wife1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    deng.switch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面用 switch 的方法不是很好，下面的方法比较完善一些</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var obj = &#123;name : &#x27;abc&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用方括号来访问属性也是一样的（里面必须是字符串）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两种基本上完全相同 obj.name  ---&gt;   obj[&#x27;name&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 想要实现属性名的拼接，只能用方括号的形式</span></span><br><span class="line">    <span class="comment">// &gt;  obj.name</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;abc&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  obj[&#x27;name&#x27;]</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;abc&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deng = &#123;</span><br><span class="line">        <span class="attr">wife1</span> : &#123;<span class="attr">name</span> : <span class="string">&#x27;xiaoliu&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">wife2</span> : &#123;<span class="attr">name</span> : <span class="string">&#x27;xiaozhang&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">wife3</span> : &#123;<span class="attr">name</span> : <span class="string">&#x27;xiaomeng&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">wife4</span> : &#123;<span class="attr">name</span> : <span class="string">&#x27;xiaownag&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">sayWife</span> : <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>[<span class="string">&#x27;wife&#x27;</span> + num];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="对象的枚举（enumeration）"><a href="#对象的枚举（enumeration）" class="headerlink" title="对象的枚举（enumeration）"></a>对象的枚举（enumeration）</h1><p><code>for in 循环（简化版 for 循环），目的是遍历对象，通过对象属性的个数来控制循环圈数，这个对象有多少属性循环多少圈，而且在每一圈的时候，都把对象的属性名放到 Prop 里面，在枚举面前，一定要写成 obj[prop]不能加字符串</code></p><p><code>1. hasOwnProperty</code></p><p><code>2. in</code></p><p><code>3. instanceof</code></p><blockquote><p>枚举也就是遍历，挨个知道信息的过程就叫这个数据组的遍历</p></blockquote><h2 id="for-变量-in-对象"><a href="#for-变量-in-对象" class="headerlink" title="for(变量 in 对象)"></a>for(变量 in 对象)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例<span class="number">1</span>: <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="comment">// 遍历 枚举 enumeration</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for( in ) 循环</span></span><br><span class="line">例<span class="number">2</span>: <span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;13&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">  <span class="attr">weight</span>: <span class="number">75</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prop + <span class="string">&quot; &quot;</span> + <span class="keyword">typeof</span> prop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// name     string</span></span><br><span class="line"><span class="comment">// age      string</span></span><br><span class="line"><span class="comment">// sex      string</span></span><br><span class="line"><span class="comment">// height   string</span></span><br><span class="line"><span class="comment">// weight   string</span></span><br></pre></td></tr></table></figure><p><code>上面就是 for in 循环，就是遍历用的。通过对象的属性个数来控制循环圈数，有多少个属性就会循环多少圈。</code></p><p><code>for（var prop in obj）在循环每一圈的时候，他会把对象的属性名放在 prop 里面。</code></p><p><code>想遍历谁就 in 谁，prop 可以写别的，obj 就是我们想要遍历的对象。</code></p><p><code>for(XX in XX) 的格式是固定的。</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 也可以写在外面，写成 var key; for(key in obj1) 效果是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="number">123</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="number">234</span>,</span><br><span class="line">    <span class="attr">c</span> : <span class="number">345</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> key;</span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> obj1)&#123;</span><br><span class="line">    obj.key ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">写成下面会出错</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;                         <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;13&#x27;</span>,                        <span class="attr">name</span> : <span class="string">&#x27;13&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">123</span>,                          <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="string">&#x27;male&#x27;</span>,                       <span class="attr">sex</span> : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">        <span class="attr">height</span> : <span class="number">180</span>,                       <span class="attr">height</span> : <span class="number">180</span>,</span><br><span class="line">        <span class="attr">weight</span> : <span class="number">75</span>                         weight : <span class="number">75</span></span><br><span class="line">                                            <span class="attr">prop</span> : <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;               <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj.prop);              <span class="built_in">console</span>.log(obj.prop);</span><br><span class="line">    &#125;                                   &#125;</span><br><span class="line">    <span class="comment">// 答案：undefined * 5              答案：123*6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的 console.log(obj.prop); 系统以为我们写的是 console.log(obj[&#x27;prop&#x27;]);，系统会以为我们是在让他访问 prop 这个属性，不会把 prop 当成一个变量来使用。写成 obj[prop]就可以成功访问了。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;13&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">        <span class="attr">height</span> : <span class="number">180</span>,</span><br><span class="line">        <span class="attr">weight</span> : <span class="number">75</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="comment">// console.log(obj.prop  ----&gt;   obj[&#x27;prop&#x27;]);</span></span><br><span class="line">        <span class="built_in">console</span>.log(obj[prop]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写对象时用方括号的形式不容易犯错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;13&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">        <span class="attr">height</span> : <span class="number">180</span>,</span><br><span class="line">        <span class="attr">weight</span> : <span class="number">75</span>,</span><br><span class="line">        <span class="attr">__proto__</span> : &#123;</span><br><span class="line">            <span class="attr">lastName</span> : <span class="string">&#x27;Deng&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj[prop])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 答案：13、123、male、180、75、deng</span></span><br></pre></td></tr></table></figure><h2 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h2><p><code>如果在遍历的时候，我们不想把原型上面的属性拿出来，可以用 hasOwnProperty,一般与 for in 循环成套出现</code></p><p><code>hasOwnProperty 是一个方法，来判断这个对象是你自己的还是原型的，任何要给对象里面都有 hasOwnProperty，里面是需要传参的，把属性传进去（如 prop），下面达到了如果不是自己的属性，是原型上的属性，就不会返回</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;13&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">        <span class="attr">height</span> : <span class="number">180</span>,</span><br><span class="line">        <span class="attr">weight</span> : <span class="number">75</span>,</span><br><span class="line">        <span class="attr">__proto__</span> : &#123;</span><br><span class="line">            <span class="attr">lastName</span> : <span class="string">&#x27;deng&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(prop))&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(obj[prop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 答案:  13、123、male、180、75</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注明：for in 循环理论上可以返回原型和原型链上的东西，一旦这个原型链延展到了的 object.prototype 上，不会打印系统的，只会打印自带的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">__proto__</span>:&#123;</span><br><span class="line">        <span class="attr">lastName</span> : <span class="string">&#x27;deng&#x27;</span>,</span><br><span class="line">        <span class="attr">__proto__</span> : <span class="built_in">Object</span>.prototype    <span class="comment">// 不会打印这个 object.prototype</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">加 <span class="built_in">Object</span>.prototype.abc = <span class="string">&#x27;123&#x27;</span>; 加个 ！变成只有不是它的才打印</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;13&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">        <span class="attr">height</span> : <span class="number">180</span>,</span><br><span class="line">        <span class="attr">weight</span> : <span class="number">75</span>,</span><br><span class="line">        <span class="attr">__proto__</span> : &#123;</span><br><span class="line">            <span class="attr">lastName</span> : <span class="string">&#x27;deng&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!obj.hasOwnProperty(prop))&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(obj[prop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="in"><a href="#in" class="headerlink" title="in"></a>in</h2><p><code>in 操作符：很少用</code></p><blockquote><p>in 操作符，你的也是你的，你父亲的也是你的，只能判断这个对象能不能访问到这个属性，包括原型上，不是判断属性属不属于这个对象的</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;13&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">        <span class="attr">height</span> : <span class="number">180</span>,</span><br><span class="line">        <span class="attr">weight</span> : <span class="number">75</span>,</span><br><span class="line">        <span class="attr">__proto__</span> : &#123;</span><br><span class="line">            <span class="attr">lastName</span> : <span class="string">&#x27;deng&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!obj.hasOwnProperty(prop))&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(obj[prop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    &gt;  height <span class="keyword">in</span> obj</span><br><span class="line">    &lt;· 报错</span><br><span class="line">    &gt;  <span class="string">&#x27;height&#x27;</span> <span class="keyword">in</span> obj</span><br><span class="line">    &lt;· <span class="literal">true</span></span><br><span class="line">    &gt;  <span class="string">&#x27;lastName&#x27;</span> <span class="keyword">in</span> obj</span><br><span class="line">    &lt;· <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个属性属不属于这个对象的只能用 hasOwnProperty</span></span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><blockquote><p>instanceof 操作符类似于 in，但是完全不同</p></blockquote><p><code>A instanceof B 的意思是 A 的对象是不是 B 构造函数构造函数构造出来的，记住是：看 Ａ 对象的原型链上有没有 B 的原型</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解决了</span></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制器输出 :</span></span><br><span class="line">    <span class="comment">// &gt;  pereson instanceof Object</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line">    <span class="comment">// &gt;  [] instanceof Array</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line">    <span class="comment">// &gt;  [] instanceof Object</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  obj instanceof Person</span></span><br><span class="line">    <span class="comment">// &lt;· false</span></span><br><span class="line">    <span class="comment">// &gt;  typeof([])</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;object&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  typeof(&#123;&#125;)</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;object&#x27;</span></span><br><span class="line"></span><br><span class="line">例:区别传的变量是数组还是对象的方法：一是 <span class="title">constructor</span>，二是 <span class="title">instanceof</span></span><br><span class="line">    <span class="title">var</span> <span class="title">arr</span> = &#123;&#125;;<span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出:</span></span><br><span class="line">    <span class="comment">// &gt;  obj.constructor</span></span><br><span class="line">    <span class="comment">// &lt;· function Object()&#123;[native code]&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  [] instanceof Array</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var obj = &#123;&#125;;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  obj instanceof Array</span></span><br><span class="line">    <span class="comment">// &lt;· false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例:第三种区分数组还是对象的方法：想让数组调用他的 toString 方法</span><br><span class="line">    <span class="built_in">Object</span>.prototype.toString.call([]);    <span class="comment">//[] 会替换this</span></span><br><span class="line">    <span class="built_in">Object</span>.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 识别this(谁调的它，这个 this 就是谁）就返回相应的及如果)</span></span><br><span class="line">    &#125;</span><br><span class="line">    obj.toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出:</span></span><br><span class="line">    &gt;  <span class="built_in">Object</span>.prototype.toString.call([]);</span><br><span class="line">    &lt;· <span class="string">&#x27;[object Array]&#x27;</span></span><br><span class="line">    &gt;  <span class="built_in">Object</span>.prototype.toString.call(<span class="number">123</span>);</span><br><span class="line">    &lt;· <span class="string">&#x27;[object Number]&#x27;</span></span><br><span class="line">    &gt;  <span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;);</span><br><span class="line">    &lt;· <span class="string">&#x27;[object Object]&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="this-笔试真题-进制"><a href="#this-笔试真题-进制" class="headerlink" title="this,笔试真题,进制"></a>this,笔试真题,进制</h1><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p><code>十六进制 0 1 2 3 4 5 6 7 8 9 a b c d e f</code></p><p><code>十六进制的中 10 是十进制的 16， 1f = 16 + 15</code></p><p><code>二进制中的 10是十进制的 2，11 是十进制的3</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">|    在十进制中：    |    在二进制中：   |</span><br><span class="line">————————————————————————————————————————</span><br><span class="line">|  <span class="number">1</span> = <span class="number">1</span>            |   <span class="number">1</span> = <span class="number">1</span>          |</span><br><span class="line">————————————————————————————————————————</span><br><span class="line">|  <span class="number">10</span> = <span class="number">10</span>          |   <span class="number">10</span> = <span class="number">2</span>         |</span><br><span class="line">————————————————————————————————————————</span><br><span class="line">|  <span class="number">100</span> = <span class="number">10</span> ^ <span class="number">2</span>     |   <span class="number">100</span> = <span class="number">2</span> ^ <span class="number">2</span>    |</span><br><span class="line">————————————————————————————————————————</span><br><span class="line">|  <span class="number">1000</span> = <span class="number">10</span> ^ <span class="number">3</span>    |   <span class="number">1000</span> = <span class="number">2</span> ^ <span class="number">3</span>   |</span><br><span class="line">————————————————————————————————————————</span><br><span class="line">|  <span class="number">10000</span> = <span class="number">10</span> ^ <span class="number">4</span>   |   <span class="number">10000</span> = <span class="number">2</span> ^ <span class="number">4</span>  |</span><br><span class="line">————————————————————————————————————————</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p><code>函数预编译过程 this ---&gt; 指向 window</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// var this = Object.creat(test.prototype);</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">// __proto__ : test.prototype</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// AO&#123;</span></span><br><span class="line">    <span class="comment">//     arguments : [1],</span></span><br><span class="line">    <span class="comment">//     this : window,</span></span><br><span class="line">    <span class="comment">//     c : 1,</span></span><br><span class="line">    <span class="comment">//     a : undefined,</span></span><br><span class="line">    <span class="comment">//     b : function()&#123;&#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    test(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">new</span> test();</span><br><span class="line">    <span class="comment">// 前面的 var this = Object.creat(test.prototype);是最标准的写法</span></span><br><span class="line">    <span class="comment">// new test();就会让 var this = Object.creat(test.prototype);如果不 new this 就会指向 window</span></span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// &gt;  window</span></span><br><span class="line">    <span class="comment">// &lt;· Window&#123;</span></span><br><span class="line">        <span class="comment">// .........</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p><code>全局作用域里 this ---&gt; 指向 window</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt;  <span class="built_in">this</span></span><br><span class="line"></span><br><span class="line">&lt;· Window&#123;......&#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>call / apply 可以改变函数运行时的 this 指向</code></p></li><li><p><code>obj.func(); func()里面的 this 就指向谁</code></p></li></ol><blockquote><p>总结</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">    <span class="keyword">var</span> name : <span class="string">&#x27;222&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;111&#x27;</span>,</span><br><span class="line">        <span class="attr">say</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> fun = a.say;</span><br><span class="line">    fun() <span class="comment">// 222</span></span><br><span class="line">    a.say() <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;333&#x27;</span>,</span><br><span class="line">        <span class="attr">say</span> : <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">            fun();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    b.say(a.say); <span class="comment">// 222</span></span><br><span class="line">    b.say = a.say;</span><br><span class="line">    b.say(); <span class="comment">// 333</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分析：</span></span><br><span class="line">        <span class="comment">// a.say 是 function 函数体</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// this  --&gt;   b</span></span><br><span class="line">            <span class="comment">// console.log(this) --&gt; b</span></span><br><span class="line">            fun();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// fun()空执行，走预编译</span></span><br><span class="line">        <span class="comment">// 在 b.say(a.say)中</span></span><br><span class="line">        <span class="comment">// a.say 当作参数传进来了</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">obj.a();</span><br></pre></td></tr></table></figure><h2 id="笔试真题"><a href="#笔试真题" class="headerlink" title="笔试真题"></a>笔试真题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例<span class="number">1</span>：下面这段代码执行完毕后，x,y,z的值分别是多少？</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>, y = z = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n = n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    y = add(x);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n = n + <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    z = add(x);</span><br><span class="line"><span class="comment">// 答案：1，4，4; 同一个函数，后面的肯定会覆盖前面的，因为预编译会覆盖</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：下面代码中 <span class="built_in">console</span>.log 的结果是[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]的选项是：</span><br><span class="line">    A. <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    B. <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        &#125;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    C. (<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    D. <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            bar.apply(<span class="literal">null</span>,<span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 答案：A、C、D 其中b执行不了，但是不报错，bar里面传了一下参数。bar.apply(null,arguments); 写成 bar(arguments);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>：一行文本，水平垂直居中</span><br><span class="line">    <span class="comment">// 答案：height = line height;     text-align:center</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">4</span>：请问以下表达式的结果是什么？</span><br><span class="line">    <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">8</span>)       <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">2</span>)       <span class="built_in">parseInt</span>(<span class="number">3</span>,<span class="number">0</span>)</span><br><span class="line">    A<span class="number">.3</span>,<span class="number">3</span>,<span class="number">3</span>     B<span class="number">.3</span>,<span class="number">3</span>,<span class="literal">NaN</span>     C<span class="number">.3</span>,<span class="literal">NaN</span>,<span class="literal">NaN</span>     D.other</span><br><span class="line">    <span class="comment">// 答案:C 或 D（有的浏览器 0 进制报错，有的不报错）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">5</span>：以下那些是 javascript 语言 <span class="keyword">typeof</span> 可能返回的结果</span><br><span class="line">    A. string   B.array    C.object    D.null</span><br><span class="line">    <span class="comment">//答案：A、C (typeof 只能返回 number、string、undefined、boolean、object、function)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">6</span>：javascript 的 call 和 apply 方法是做什么的？两者有什么区别</span><br><span class="line"></span><br><span class="line">    Wheel.apply(<span class="built_in">this</span>,[wheelSize,style]);</span><br><span class="line">    Wheel.call(<span class="built_in">this</span>,wheelSize,style);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//答案：call 和 apply 的作用都是改变 this 指向的，不过两个的传参列表不同，apply 只能传一个实参，而且必须传数组 arguments</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">7</span>：看看下面 alert 的结果是什么？</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">x,y,a</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">        alert(a);</span><br><span class="line">    &#125;</span><br><span class="line">    b(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 如果函数体改成下面，结果会是怎么样</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    alert(<span class="built_in">arguments</span>[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//答案：10，10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">8</span>：逗号操作符，这种情况，会先看一眼<span class="number">1</span>，再看一眼<span class="number">2</span>，然后返回<span class="number">2</span>，就是<span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> f = (</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    )();</span><br><span class="line">    <span class="keyword">typeof</span> f;</span><br><span class="line">    <span class="comment">// 在控制器中输出：</span></span><br><span class="line">    <span class="comment">// &gt;  1,2</span></span><br><span class="line">    <span class="comment">// &lt;· 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var num = (1,2);</span></span><br><span class="line">    <span class="comment">// &lt;· 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">9</span>：</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        x += <span class="keyword">typeof</span> f;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="comment">// 分析：用括号把 function f()&#123;&#125; 转换成一个表达式，就会被立即执行了，就找不到了，因为 function f() &#123;&#125; 肯定是 true，所以会执行 &#123;&#125;，但是 typeof 中的 f 已经找不到了</span></span><br><span class="line">    <span class="comment">// 答案：1undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">10</span>：以下哪些表达式的结果为<span class="literal">true</span>的</span><br><span class="line">    A.undefined == <span class="literal">null</span>     B.undefined === <span class="literal">null</span>     C.isNaN(<span class="string">&#x27;100&#x27;</span>)     D.parseInt(<span class="string">&#x27;1a&#x27;</span>) == <span class="number">1</span></span><br><span class="line">    <span class="comment">// 答案：A、C、D    isNaN(&#x27;100&#x27;)意思是这个数经过 number 转换后是不是NaN</span></span><br><span class="line"></span><br><span class="line">    C。<span class="function"><span class="keyword">function</span> <span class="title">myIsNaN</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = <span class="built_in">Number</span>(num);</span><br><span class="line">        ret += <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="string">&#x27;NaN&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  myIsNaN(&#x27;123&#x27;)</span></span><br><span class="line">    <span class="comment">// &lt;· false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  myIsNaN(&#x27;NaN&#x27;)</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">10</span>：引用值比的是地址</span><br><span class="line">    &gt;  &#123;&#125; == &#123;&#125;</span><br><span class="line">    &lt;· <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    &gt;  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    &lt;· <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    &gt;  <span class="keyword">var</span> obj1 = obj</span><br><span class="line">    &lt;· <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    &gt;  obj1 == obj</span><br><span class="line">    &lt;· <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &gt;  obj1 == obj</span><br><span class="line">    &lt;· <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">11</span>：</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> foo = <span class="string">&#x27;456&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.foo = <span class="string">&#x27;789&#x27;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(foo);</span><br><span class="line">    &#125;</span><br><span class="line">    print();</span><br><span class="line">    <span class="comment">// 456</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把上面的题变形</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.foo = <span class="number">234</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(foo);</span><br><span class="line">    &#125;</span><br><span class="line">    print();</span><br><span class="line">    <span class="comment">// 答案打印 234，要 console.log(foo);是全局的 foo，但是这里 this.foo 的 this是指向全局 window 的，相当于就把外面的 123 改成了 234</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在变形一下</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// var this = Object.creat(print.prototype)</span></span><br><span class="line">        <span class="built_in">this</span>.foo = <span class="number">234</span>;</span><br><span class="line">        <span class="built_in">console</span>.logf(foo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> print();</span><br><span class="line">    <span class="comment">// 答案:123</span></span><br><span class="line">    <span class="comment">//，new 了以后，隐式 var this = Object.create(print.prototype)这时候 this.foo 不 再指向 window，转而指向 var this，所以打印的时候找不到 234，就到全局找到 123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">12</span>：运行 test() 和 <span class="keyword">new</span> test() 的结果分别是什么？</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">        alert(a);</span><br><span class="line">        alert(<span class="built_in">this</span>.a);</span><br><span class="line">        <span class="keyword">var</span> a;</span><br><span class="line">        alert(a);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// 答案：0，5，0</span></span><br><span class="line">    <span class="comment">// new test() 之后是 0，undefined，0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分析: 【之前其中 this.a 指代的是 window，所以是 0，5，0】</span></span><br><span class="line">    <span class="comment">//       【之后，因为 this 上没有 a ,所以打印 undefined】</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">13</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(foo);</span><br><span class="line">        <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(foo);</span><br><span class="line">        <span class="built_in">console</span>.log(hello);</span><br><span class="line">    &#125;</span><br><span class="line">    print();</span><br><span class="line">    <span class="comment">// 答案：undefiend,2,hello is no defined(报错，因为hello 没有被定义，所以报错)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">14</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> test;</span><br><span class="line">        test();</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    print();</span><br><span class="line">    <span class="comment">// 答案 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">15</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> x= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;One!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x === <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Two!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 答案：One</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">16</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> marty = &#123;</span><br><span class="line">            <span class="attr">name</span> : <span class="string">&#x27;marty&#x27;</span>,</span><br><span class="line">            <span class="attr">printName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> test1 = &#123;<span class="attr">name</span> : <span class="string">&quot;test1&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> test2 = &#123;<span class="attr">name</span> : <span class="string">&#x27;test2&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> test3 = &#123;<span class="attr">name</span> : <span class="string">&#x27;test3&#x27;</span>&#125;;</span><br><span class="line">        test3.printName = marty.printName;</span><br><span class="line">        <span class="keyword">var</span> printName2 = marty.printName.bind(&#123;<span class="attr">name</span>:<span class="number">123</span>&#125;);<span class="comment">//做不了</span></span><br><span class="line">        marty.printName.call(test1);</span><br><span class="line">        marty.printName.apply(test2);</span><br><span class="line">        marty.printName();</span><br><span class="line">        printName2();</span><br><span class="line">        test3.printName();</span><br><span class="line">    &#125;</span><br><span class="line">    print();</span><br><span class="line">    <span class="comment">// 答案：test1，test2，marty，做不了有bind，test3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">17</span>：</span><br><span class="line">    <span class="keyword">var</span> bar = &#123;<span class="attr">a</span> : <span class="string">&#x27;002&#x27;</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        bar.a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="built_in">Object</span>.prototype.b = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(bar.a);</span><br><span class="line">            <span class="built_in">console</span>.log(bar.b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    print()();</span><br><span class="line">    <span class="comment">// 答案：a,b</span></span><br><span class="line">    <span class="comment">// print()() 第一个括号返回的是一个函数，第二个再来函数执行</span></span><br></pre></td></tr></table></figure><h1 id="arguments-callee、function-caller"><a href="#arguments-callee、function-caller" class="headerlink" title="arguments.callee、function.caller"></a>arguments.callee、function.caller</h1><p><code>arguments.callee 指向函数的引用(函数自己)</code></p><p><code>function.caller 返回本执行程序的坏境名称</code></p><h2 id="一、callee"><a href="#一、callee" class="headerlink" title="一、callee"></a>一、callee</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// 答案：test</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee == test);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// 答案:true</span></span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>：我们要初始化数据，是<span class="number">100</span>以内的阶乘，用立即执行函数找自己的引用来解决</span><br><span class="line">    <span class="keyword">var</span> num = (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n * arguemtns.callee(n - <span class="number">1</span>);</span><br><span class="line">    &#125;)(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">例<span class="number">4</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(arguemtns.callee);</span><br><span class="line">        &#125;</span><br><span class="line">        demo(); <span class="comment">// demo</span></span><br><span class="line">    &#125;</span><br><span class="line">    test(); <span class="comment">// test</span></span><br><span class="line">    <span class="comment">// 在那个函数里面的 argument.callee 就指代了哪个函数</span></span><br></pre></td></tr></table></figure><h2 id="二、caller"><a href="#二、caller" class="headerlink" title="二、caller"></a>二、caller</h2><p><code>caller 是他在哪个环境执行，就返回哪个环境的名字，不能再arguments里面</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    demo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(demo.caller);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo 被调用的环境是 test</span></span><br><span class="line"><span class="comment">// 所以这个 caller 指代的 test</span></span><br></pre></td></tr></table></figure><h1 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h1><p><code>浅层克隆</code></p><p><code>深层克隆</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例<span class="number">1</span>：这个是做的浅层克隆</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="string">&#x27;female&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin,target</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> origin)&#123;</span><br><span class="line">            target[prop] = origin[prop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clone(obj,obj1);</span><br><span class="line">    <span class="comment">// 在控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  obj</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;name : &#x27;abc&#x27;,age : 123,sex : &#x27;female&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj1</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;name : &#x27;abc&#x27;,age : 123,sex : &#x27;female&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">把上面的改一下，写一个兼容性的写法，为了防止用户不传 target（容错），给了参数就直接用，不给就当空对象，见下方：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="string">&#x27;female&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin,target</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> target = target || &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> origin)&#123;</span><br><span class="line">            target[prop] == origin[prop];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    clone(obj,obj1);</span><br><span class="line">    <span class="comment">// 在控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  obj</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;name : &#x27;abc&#x27;,age : 123,sex : &#x27;female&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj1</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;name : &#x27;abc&#x27;,age : 123,sex : &#x27;female&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj.name = &#x27;bcd&#x27;;</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;bcd&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj1.name</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;abc&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">        <span class="attr">card</span> : [<span class="string">&#x27;visa&#x27;</span>,<span class="string">&#x27;unionpay&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin,target</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> target = target || &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> origin)&#123;</span><br><span class="line">            target[prop] == origin[prop];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    clone(obj,obj1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  obj1</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;name : &#x27;abc&#x27;,age : 123,sex : &#x27;female&#x27;&#125;</span></span><br><span class="line">    <span class="comment">//    card : Array[2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj1.card.push(&#x27;master&#x27;)</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj1.crad</span></span><br><span class="line">    <span class="comment">// &lt;· &#123;&#x27;visa&#x27;,&#x27;unionpay&#x27;,&#x27;master&#x27;sss&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;name : &#x27;abc&#x27;,age : 123,sex : &#x27;female&#x27;,card : Array[3]&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  obj.card</span></span><br><span class="line">    <span class="comment">// &lt;· [&#x27;visa&#x27;,&#x27;unionpay&#x27;,&#x27;master&#x27;]</span></span><br><span class="line"></span><br><span class="line">现在我们想实现深度克隆（只考虑数组和对象），copy过去后，我改，但是你不会改， 引用值不能直接拷贝</span><br></pre></td></tr></table></figure><p><code>思考上一道题做深度克隆，分析它是什么，建立是什么，收尾需要要给递归，提示：</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例: obj = &#123;</span><br><span class="line">  <span class="attr">card</span>: [<span class="string">&quot;visa&quot;</span>, <span class="string">&quot;unionpay&quot;</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">card</span>: [obj.card[<span class="number">0</span>], obj.card[<span class="number">1</span>], []]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>作业：做一个深度克隆（copy后，各自独立，互不影响）</code></p><p><code>思路：需要一个分析环节，分析是什么，是原始值就按原来的方法拷贝过来，是引 用值就分析是数组还是对象。如果是数组，就新建一个数组；如果是对象，就新建一个对象。再一层层看，里面有一个递归。引用值不能直接拷贝，引用值拷贝的是 地址</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">    <span class="attr">card</span> : [<span class="string">&#x27;visa&#x27;</span>,<span class="string">&#x27;master&#x27;</span>],</span><br><span class="line">    <span class="attr">wife</span> : &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;bcd&#x27;</span>,</span><br><span class="line">        <span class="attr">son</span> : &#123;</span><br><span class="line">            <span class="attr">name</span> : <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = target || &#123;&#125;, <span class="comment">// 有就用你的，没有就用后面的</span></span><br><span class="line">        toStr = <span class="built_in">Object</span>.prototype.toString, <span class="comment">// 引用，目的是简化</span></span><br><span class="line">        arrStr = <span class="string">&#x27;[Object Array]&#x27;</span>; <span class="comment">// 引用，目的是简化比对</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> origin) &#123; <span class="comment">// 从原始 origin 拷贝到 target</span></span><br><span class="line">        <span class="keyword">if</span> (origin.hasOwnProperty(prop)) &#123; <span class="comment">// 先判断是不是原型上的属性，如果是 false 就是原型上的</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> (origin[prop]) !== <span class="string">&#x27;null&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> (origin[prop]) == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((toStr.call(origin[prop])) == arrStr) &#123;</span><br><span class="line">                    target[prop] = [];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    target[prop] = &#123;&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                deepClone(origin[prop], target[prop]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// else 后面是原始值</span></span><br><span class="line">                target[prop] = origin[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析：</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">agfe</span> : <span class="number">123</span>,</span><br><span class="line">    <span class="attr">card</span> : [<span class="string">&#x27;visa&#x27;</span>,<span class="string">&#x27;master&#x27;</span>] <span class="comment">//原始对象</span></span><br><span class="line">    <span class="attr">wife</span> : &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;bcd&#x27;</span>,</span><br><span class="line">        <span class="attr">son</span> : &#123;</span><br><span class="line">            <span class="attr">name</span> : <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">    <span class="attr">card</span> : [obj.card[<span class="number">0</span>],obj.card[<span class="number">1</span>]],</span><br><span class="line">    <span class="comment">// 要拷贝的对象，进行 obj 里面的数组，对这个数组的拷贝再一次拷贝</span></span><br><span class="line">    <span class="attr">wife</span> : &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;bcd&#x27;</span>,</span><br><span class="line">        <span class="attr">son</span> : &#123;</span><br><span class="line">            <span class="attr">name</span> : <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">深度克隆的步骤：</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span> 先把所有的值都遍历一遍（看是引用值和原始值）</span><br><span class="line">       用<span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj),对象和数组都可以使用</span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span> 判断是原始值，还是引用值？用<span class="keyword">typeof</span>判断是不是object</span><br><span class="line">        <span class="number">1</span>) 如果是原始值就直接拷贝</span><br><span class="line">        <span class="number">2</span>) 如果是引用值，判断是数组还是对象</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span> 判断是数组还是对象？（方法 intanceof 【看 a 的原型链上有没有 b 的原型链】、toString、<span class="title">constructor</span>,建议用 <span class="title">toString</span>，另外两个有个小 <span class="title">bug</span> ———— 跨父子域不行）</span><br><span class="line">        1）如果是数组，就新建一个空数组</span><br><span class="line">        2）如果是对象，就新建一个空对象</span><br><span class="line"></span><br><span class="line">    4. 建立了数组以后，如果是挨个看原始对象里面是什么，都是原始值就可以直接拷过来了；或者，建立了对象以后，挨个判断对象里面的每一个值，看是原始值还是引用值</span><br><span class="line"></span><br><span class="line">    5. 递归</span><br></pre></td></tr></table></figure><h1 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h1><p><code>形式：?（问号）前面是一个条件判断，判断true就执行:（冒号）前面的；false就执行:（冒号）后面的，并且返回值</code></p><p><code>条件判断 ? 是 : 否 并且会返回值</code></p><p><code>三木运算符是 简化 版的if（条件判断）&#123;是在这里&#125;else&#123;否在这里&#125;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> &gt; <span class="number">0</span> ? <span class="number">2</span> + <span class="number">2</span> : <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 答案：4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> &lt; <span class="number">0</span> ? <span class="number">2</span> + <span class="number">2</span> : <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 答案：2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> &gt; <span class="number">0</span> ? (<span class="string">&#x27;10&#x27;</span> &gt; <span class="number">9</span> ? <span class="number">1</span> : <span class="number">0</span>) : <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 答案：1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> &gt; <span class="number">0</span> ? (<span class="string">&#x27;10&#x27;</span> &gt; <span class="string">&#x27;9&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>) : <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 答案：0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析：因为 &#x27;10&#x27; &gt; &#x27;9&#x27; 比的是 ASCII 码，一位位比，10（一零）小于 9 ，先用 1 和 9 比，在 ASCII 码里面 1 小于 9；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当“10” &gt;  9 字符串和数字比，会先转换成数字再比较</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 可利用三木运算符简化克隆代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;yu&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">18</span>,</span><br><span class="line">    <span class="attr">card</span> : [<span class="string">&#x27;visa&#x27;</span>,<span class="string">&#x27;master&#x27;</span>],</span><br><span class="line">    <span class="attr">wife</span> : &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;Long&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">18</span>,</span><br><span class="line">        <span class="attr">son</span> : &#123;</span><br><span class="line">            <span class="attr">lastName</span> : <span class="string">&#x27;YU&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin,target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = target || &#123;&#125;,</span><br><span class="line">        toStr = <span class="built_in">Object</span>.prototype.toString,</span><br><span class="line">        arrStr = <span class="string">&#x27;[Object Array]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> origin)&#123;</span><br><span class="line">        <span class="keyword">if</span>(origin.hasOwnProperty(prop))&#123;</span><br><span class="line">            <span class="keyword">if</span>(origin[prop] !== <span class="string">&#x27;null&#x27;</span> &amp;&amp; <span class="keyword">typeof</span>(origin[prop]) == <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">                target[prop] = (toStr.call(origin[prop]) == arrStr) ? [] : &#123;&#125;;</span><br><span class="line">                deepClone(target[prop],origin[prop]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                target[prop] = origin[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">deepClone(obj,obj1);</span><br></pre></td></tr></table></figure><h1 id="数组-预习"><a href="#数组-预习" class="headerlink" title="(数组)预习"></a>(数组)预习</h1><p><code>定义对象方式：自变量，构造函数，自定义的构造函数，Object.create</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">定义数组的方式：</span><br><span class="line"></span><br><span class="line">  <span class="number">1.</span> <span class="keyword">var</span> arr = [];   数组自变量（自定义）；</span><br><span class="line"></span><br><span class="line">  <span class="number">2.</span> <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();  系统提供</span><br><span class="line"></span><br><span class="line">    两者区别就只一位数的情况</span><br><span class="line"></span><br><span class="line">    数组能用的方法来源于 <span class="built_in">Array</span>.prototype</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">如果写出 <span class="keyword">var</span> arr = [<span class="number">1</span>,,<span class="number">1</span>],出来就是 <span class="number">1</span>,<span class="literal">undefined</span>*<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">数组不是每一位都有值，稀疏数组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);和自定义数组显示效果一样</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统提供的数组和自定义的数组有一点不同，如下</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line">长度为<span class="number">10</span>的稀疏数组，括号里面只有一位数，就代表着长度，并且里面每一位都没有值，<span class="built_in">console</span> 里面会是 <span class="literal">undefined</span> * <span class="number">10</span>。并且里面不能写小数，会报错。</span><br></pre></td></tr></table></figure><p><code>数组的读和写，基本上没有报错的情况，除非是引用了没有的方法</code></p><p><code>js数组是基于对象的，数组是一种特殊的对象</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt;  arr[<span class="number">10</span>] = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">&lt;  <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"></span><br><span class="line">&gt;  arr</span><br><span class="line">&lt;  [<span class="literal">undefined</span> * <span class="number">10</span>,<span class="string">&#x27;abc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&gt;  arr.length</span><br><span class="line">&lt;  <span class="number">11</span></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一、数组的定义（来源于-Array-prototype）"><a href="#一、数组的定义（来源于-Array-prototype）" class="headerlink" title="一、数组的定义（来源于 Array.prototype）"></a>一、数组的定义（来源于 Array.prototype）</h2><p><code>1）系统提供 new Array(length / content) var arr = new Array(1,2,3,4,5)</code></p><p><code>2）自变量 var arr = [1,2,3,4,5];</code></p><h2 id="二、数组的-‘读’-和-‘写’"><a href="#二、数组的-‘读’-和-‘写’" class="headerlink" title="二、数组的 ‘读’ 和 ‘写’"></a>二、数组的 ‘读’ 和 ‘写’</h2><p><code>arr[num] // 不可以溢出读，结果 undefiend</code></p><p><code>arr[num] = XXX; // 不可以溢出读</code></p><p><code>arr[num] = xxx; // 可以溢出读</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">es3<span class="number">.0</span> 最标准最基础</span><br><span class="line"></span><br><span class="line">es5<span class="number">.0</span>  es6<span class="number">.0</span>，最新的 es7<span class="number">.0</span>还没有普及，今天讲的都是 es3<span class="number">.0</span></span><br><span class="line"></span><br><span class="line">对象的定义方式</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> 自变量</span><br><span class="line"><span class="number">2</span> 构造函数</span><br><span class="line"><span class="number">3</span> 自定义构造函数</span><br><span class="line"><span class="number">4</span> object.create 数组是一种特殊的对象，在本质上两者没有太大的区别</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">可以写 <span class="keyword">var</span> arr = [,]    <span class="comment">// 稀松数组，相当于定义了两个位置，console(控制台 结果是 undefiend)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,,,,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">    <span class="comment">// 答案[1, 2, undefiend * 3, 3, 4]</span></span><br><span class="line">    <span class="comment">// arr.length = 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = []; 和 <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(); 唯一的区别实在 <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(); 只传了一个参数的情况下，会被当成长度，并且成为一个稀松数组</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>); <span class="comment">// [undefined * 10]</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>]; <span class="comment">// [10]</span></span><br><span class="line"></span><br><span class="line">    如果传进去一个小数，就非法：<span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10.2</span>); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="comment">// &gt;  arr[10]</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr[10] = &#x27;abc&#x27;</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;abc&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [undefined * 10, &#x27;abc&#x27;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.length</span></span><br><span class="line">    <span class="comment">// &lt;· 11</span></span><br></pre></td></tr></table></figure><h2 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h2><h3 id="一、改变原数组（在原来数组基础上去改变）"><a href="#一、改变原数组（在原来数组基础上去改变）" class="headerlink" title="一、改变原数组（在原来数组基础上去改变）"></a>一、改变原数组（在原来数组基础上去改变）</h3><p><code>1）reverse，sort，push，pop，unshift，shift</code></p><p><code>2）splice</code></p><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`push`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`push 在数组的最后一位添加数据，可以添加一个，也可以添加很多个`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.push(10)</span></span><br><span class="line">    <span class="comment">// &lt;· 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [10]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.push(11)</span></span><br><span class="line">    <span class="comment">// &lt;· 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [10,11]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.push(9)</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [10,11,9]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.push(1,2,3,4,5,6,7)</span></span><br><span class="line">    <span class="comment">// &lt;· 7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3,4,5,6,7]</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：</span><br><span class="line">    <span class="comment">// 说明能重写</span></span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;haha&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.push()</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;haha&#x27;</span></span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>：数组有三位，想在数组的最后一位添加东西</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; 如果在第四位加东西写成 arr = [<span class="number">3</span>]  <span class="comment">// length - 1 位添加东西</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="built_in">arguments</span>.length; i ++)&#123;</span><br><span class="line">            <span class="built_in">this</span>[<span class="built_in">this</span>.length] = <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.push(4,5,6)</span></span><br><span class="line">    <span class="comment">// &lt;· 6</span></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3,4,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="string">`Array.prototype.push = function()&#123;&#125;    不能写形参`</span></span><br></pre></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`pop`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`pop 是剪切方法（把最后一位数剪切出去）。在 pop() 括号里面不能传参，写了会忽略`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.pop()</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.pop()</span></span><br><span class="line">    <span class="comment">// &lt;· 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台操作：</span></span><br><span class="line">    <span class="comment">// &gt;  var num = arr.pop()</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  num</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在控制台操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.pop(2)</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2]</span></span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`unshift`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`unshift 是从第一位加东西`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.unshift(0)</span></span><br><span class="line">    <span class="comment">// &lt;· 4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [0,1,2,3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.unshift(-1,0)</span></span><br><span class="line">    <span class="comment">// &lt;· 5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [-1,0,1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`shift`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`shift 是从第一位减东西`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.shife()</span></span><br><span class="line">    <span class="comment">// &lt;· 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [2,3]</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：数组不能从 -<span class="number">1</span> 位插入东西</span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr[-1] = 0</span></span><br><span class="line">    <span class="comment">// &lt;· 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3]</span></span><br><span class="line">    <span class="comment">// 可以用两个数组拼接成一个数组的方式添加东西</span></span><br></pre></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`reverse`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`reverse 逆反`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 consolel 操作</span></span><br><span class="line">    <span class="comment">// &gt;  arr.reverse()</span></span><br><span class="line">    <span class="comment">// &lt;· [3,2,1]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.reverse()</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 把类数组转换成数组的时候经常用</span><br><span class="line"></span><br><span class="line"><span class="string">`&#x27;splice&#x27;:Array.prototype.splice`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`splice`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`splice 一种剪切，切片`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`arr.splice(从第几位开始，截取多少长度，传参在切口处添加新的数据)`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>];</span><br><span class="line">    arr.splice(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//从第 1 位开始截取 2 位，传参可以不填</span></span><br><span class="line">    <span class="comment">// 截取的是[1,2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 consolel 操作</span></span><br><span class="line">    <span class="comment">// &gt;  arr.splice(1,2)</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3,4]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.splice(0,3)</span></span><br><span class="line">    <span class="comment">// &lt;· [1,1,2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [2,3,3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.splice(1,1,0,0,0)</span></span><br><span class="line">    <span class="comment">// &lt;· [1]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 consolel 操作</span></span><br><span class="line">    <span class="comment">// &gt;  arr.splice(0.3)</span></span><br><span class="line">    <span class="comment">// &lt;· [1,0,0,0,2,2,3,3]</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：</span><br><span class="line">    arr.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//意思是从第 1 位起截取 1 位，然后加上0，0，0这三个数</span></span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>];   <span class="comment">//1是第0位，2是第1位, 3是第2位，5是第3位</span></span><br><span class="line">    arr.splice(<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">// 答案：[1,2,3,4,5];</span></span><br><span class="line"></span><br><span class="line">例<span class="number">4</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">    arr.splice(-<span class="number">1</span>,<span class="number">1</span>);   <span class="comment">// 这里的 -1 是倒数第一位，数组一般的方法都可以带负数</span></span><br><span class="line">    <span class="comment">// 答案：[1,2,3];</span></span><br><span class="line"></span><br><span class="line">例<span class="number">5</span>：下面是系统内部解决附属问题的兼容</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    splice = <span class="function"><span class="keyword">function</span> (<span class="params">pos</span>)</span>&#123;</span><br><span class="line">        pos += pos &gt; <span class="number">0</span> ? <span class="number">0</span> : <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -1 + 4 = 3</span></span><br><span class="line"></span><br><span class="line">例<span class="number">6</span>：</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="built_in">this</span>.length,</span><br><span class="line">        j = +i + (i &lt; <span class="number">0</span> ? len : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.pushStack(j &gt;= &amp;&amp; j &lt; len ? [<span class="built_in">this</span> [j] ]d : [])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// splice = function (pos)&#123;</span></span><br><span class="line">        <span class="comment">// pos += pos &gt; 0 ? 0 : this.length;</span></span><br><span class="line">        pos &gt;= <span class="number">0</span> || pos &lt;</span><br><span class="line">    <span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`sort`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`sort 给数组排序，（按照从小到大），改变原数组`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="keyword">var</span> = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 consolel 操作</span></span><br><span class="line">    <span class="comment">// &gt;  arr.sotr()</span></span><br><span class="line">    <span class="comment">// &lt;· [-1,0,1,3,4,9]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在sort后面加 reversve 就是降序</span></span><br><span class="line">    <span class="comment">// &gt;  arr.sotr().reverse()</span></span><br><span class="line">    <span class="comment">// &lt;· [9,4,3,1,0,-1]</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：下面这个按照 ASCII 码排序的</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 consolel 操作</span></span><br><span class="line">    <span class="comment">// &gt;  arr.sotr()</span></span><br><span class="line">    <span class="comment">// &lt;· [-1,10,3,4,5]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">`所以给我们留了一个接口，如下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1 必须写两形参</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2 看返回值 return</span></span><br><span class="line"><span class="string">    1）当返回值为负数时，那么前面的数放在前面，</span></span><br><span class="line"><span class="string">    2）当返回值为正数时，那么后面的数在前，</span></span><br><span class="line"><span class="string">    3）为0，不动</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">1</span>：</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;    <span class="comment">//此处的 1代表返回正的 return -1;</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>    <span class="comment">//此处的-1 代表返回负的</span></span><br><span class="line"></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">思维方式:上面就控制了升序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这个函数第一次调动时，会把数组的第一位和第二位传进来，也就是 a=1，b=3，然 后通过规则比较，当你把返回值返回为正，为负，为 0。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">传参的顺序（但是这个顺序是位置的顺序，不是按数字比），第一次是1,3，第二次 1,5,第三次1,4,第四次 1,10，第五次 3,5,第六次3,4,第七次 3,10，第八次 5,4，第九次 5,10，第十次 4,10；依次传参（符合冒号排序的算法）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">是以换位置的方式改变顺序</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>：<span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">13</span>,<span class="number">19</span>,<span class="number">4</span>];   <span class="comment">// 到 13 这一位的时候，换位置变成了[2,4,19,13]</span></span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>：下面变成了降序</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">例<span class="number">4</span>：</span><br><span class="line">    <span class="string">`升序简化版`</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">20</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a - b &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="string">`再简化版`</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">20</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="string">`升序 return a - b`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`降序 return b - a`</span></span><br><span class="line"></span><br><span class="line">例<span class="number">5</span>：直接调用 arr.sort() 比的是 ASCII 码，要在里面填函数才可以</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">20</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">4</span>,,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// return a - b; 升序</span></span><br><span class="line">        <span class="comment">// return b - a; 降序</span></span><br><span class="line">        <span class="keyword">return</span> b - a;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 从 consolel 操作</span></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [20,13,10,9,8,4,2];</span></span><br><span class="line">    <span class="comment">// &gt;  arr.sort(function()&#123;&#125;)</span></span><br><span class="line"></span><br><span class="line">例<span class="number">6</span>：给一个有序的数组，让它乱序，当我们没规律可以遵循的时候，返回时是随机的</span><br><span class="line">    <span class="keyword">var</span> arr= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Math.random() 回生成一个 0 到 1 （包括 0，但是不包括 1）的随机数</span></span><br><span class="line"></span><br><span class="line">例<span class="number">7</span>：给以下按照年龄排序</span><br><span class="line">    <span class="keyword">var</span> cheng = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;cheng&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">18</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">        <span class="attr">face</span> : <span class="string">&#x27;handsome&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> deng = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;deng&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">40</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">face</span> : <span class="string">&#x27;amazing&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> zhang = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;zhang&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">20</span>,</span><br><span class="line">        <span class="attr">sex</span> : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [cheng,deng,zhang];</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.age &gt; b.age)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 简化</span></span><br><span class="line">    <span class="keyword">var</span> arr = [cheng,deng,zhang];</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.age - b.age;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">例<span class="number">7</span>：按照字符串长度排序</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;abcde&#x27;</span>,<span class="string">&#x27;abcd&#x27;</span>,<span class="string">&#x27;abcdefg&#x27;</span>,,<span class="string">&#x27;abcdef&#x27;</span><span class="string">&#x27;abc&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.length - b.length;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">例<span class="number">8</span>：按照字节长度排序</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">retBytes</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = str.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charCode(i) &gt; <span class="number">255</span>)&#123;</span><br><span class="line">                num ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&#x27;ac&#x27;</span>,<span class="string">&#x27;alkdjf于lkajsd&#x27;</span>,<span class="string">&#x27;aksd泽jfk&#x27;</span>,<span class="string">&#x27;iuwe龙oiru&#x27;</span>,<span class="string">&#x27;dddd&#x27;</span>,<span class="string">&#x27;aaa&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> retBytes(a) - retBytes(b);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="二、不改变原数组"><a href="#二、不改变原数组" class="headerlink" title="二、不改变原数组"></a>二、不改变原数组</h3><p><code>1）forEach，filter，map，reduce，reduceRight</code></p><p><code>2）slice，concat，join ————&gt; split，toString</code></p><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`concat`</span><span class="string">`concat 连接，把后面的数组拼接到前面，并成立一个新的数组，不影响之前的两个数组，不能改变原数组`</span>;</span><br><span class="line"></span><br><span class="line">例: <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 console 操作：</span></span><br><span class="line"><span class="comment">// &gt;  var result = arr.concat(arr1)</span></span><br><span class="line"><span class="comment">// &lt;· [1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  arr</span></span><br><span class="line"><span class="comment">// &lt;· [1,2,3,4,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  arr1</span></span><br><span class="line"><span class="comment">// &lt;· [7,8,9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  result</span></span><br><span class="line"><span class="comment">// &lt;· [1,2,3,4,5,6,7,8,9,10]</span></span><br></pre></td></tr></table></figure><h4 id="toString"><a href="#toString" class="headerlink" title="toString"></a>toString</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`toString`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`toString 是把数组当作字符串展示出来`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`slice`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`slice 从该位开始截取，截取到该位，并不改变原数组，这里也可以写负数`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    <span class="comment">// slice(从改位开始截取，截取到该位)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.slice(1,2)</span></span><br><span class="line">    <span class="comment">// &lt;· [2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr</span></span><br><span class="line">    <span class="comment">// &lt;· [1,2,3,4,5,6]</span></span><br><span class="line"></span><br><span class="line">    <span class="string">`slice 并不改变原数组，slice完了以后需要有东西接受，不然没有意义`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    <span class="comment">// slice(从改位开始截取，截取到该位)</span></span><br><span class="line">    <span class="keyword">var</span> newArr = arr.slice(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  newArr</span></span><br><span class="line">    <span class="comment">// &lt;· [2,3]</span></span><br><span class="line"><span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  newArr</span></span><br><span class="line">    <span class="comment">// &lt;· [2,3]</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">slice 里面可以填 0 个参数，也可以填 1 个参数，也可以填两个参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 如果填两个参数，slice（从该位开始截取，截取到该位）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   如：arr.slice(1,2)，从第一位开始截取，截取到第二位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 如果填一个参数，从第几位开始截取，一直截取到最后。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    如：arr.slice(1)，从第 1 位开始截取，截取到最后一位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 不写参数就是整个截取数组`</span></span><br></pre></td></tr></table></figure><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`join`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`join 括号里面需要用字符串形式（标准语法规定），就会用加的东西连接起来数组`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  arr.join(&#x27;-&#x27;)</span></span><br><span class="line">    <span class="comment">// &lt;· [1-2-3-4-5-6]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.join(&#x27;!&#x27;)</span></span><br><span class="line">    <span class="comment">// &lt;· [1!2!3!4!5!6]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  arr.join(&#x27;~&#x27;)</span></span><br><span class="line">    <span class="comment">// &lt;· [1~2~3~4~5~6]</span></span><br></pre></td></tr></table></figure><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`split`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`split() 是string字符串方法 是 join() 方法的可逆方法，join方法是输入什么连接什么，split是输入什么拆分什么`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">var</span> str = arr.join(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 操作：</span></span><br><span class="line">    <span class="comment">// &gt;  str.split(&#x27;4&#x27;)</span></span><br><span class="line">    <span class="comment">// &lt;· [&#x27;1-2-3-&#x27; , &#x27;-5-6&#x27;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  str</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;1-2-3-4-5-6&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  str.split(&#x27;-&#x27;)</span></span><br><span class="line">    <span class="comment">// &lt;· [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="string">`split 按照什么拆分为数组。用什么拆，什么就没了，按 - 拆就去掉了，按 4 拆就去掉了4.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">split 可以返回数组，数组可以返回字符串`</span></span><br><span class="line"></span><br><span class="line">把下面啊字符串拼到一起</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;alibaba&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">&#x27;baidu&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="string">&#x27;tencent&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> str3 = <span class="string">&#x27;toutiao&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> str4 = <span class="string">&#x27;wangyi&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> str5 = <span class="string">&#x27;xiaowang&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> str6 = <span class="string">&#x27;nv&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这种写法不好，字符串是在栈内存里面的，先进后出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str Final = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> arr = [str,str1,str2.str3,str4];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length; i ++)&#123;</span><br><span class="line">        strFinal += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用下面这种方式更好，join 里面不传参默认用逗号连接，传空串如下图</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 散列</span></span><br><span class="line">    <span class="keyword">var</span> arr = [str,str1,str2,str3,str4,str5,str6];</span><br><span class="line">    <span class="built_in">console</span>.log(arr.join(<span class="string">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure><h4 id="forEach-–-循环遍历数组"><a href="#forEach-–-循环遍历数组" class="headerlink" title="forEach() – 循环遍历数组"></a>forEach() – 循环遍历数组</h4><p><code>forEach(function(ele,index,array)&#123;&#125;) -- 循环遍历数组</code></p><p><strong>参数：</strong></p><p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 1 个参数，什么变量都可以）</code></p><p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 2 个参数，什么变量都可以）</code></p><p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 3 个参数，什么变量都可以）</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> personArr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;王港&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/3.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;颈椎不好&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘莹&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/5.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;我是谁&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;f&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;王秀莹&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/4.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;我很好看&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;f&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘金雷&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/1.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;陌生的脸&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘飞翔&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/2.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;六六六&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">personArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index,array</span>)</span>&#123;</span><br><span class="line"><span class="comment">// ele : 循环遍历的每一个元素对象</span></span><br><span class="line"><span class="comment">// index : 相当于for循环的那个 i，代表索引，遍历第一遍：0，第二遍：1</span></span><br><span class="line"><span class="comment">// array : 相当于this，就是调用的是那个数组，一般用不到</span></span><br><span class="line">    <span class="built_in">console</span>.log(ele); <span class="comment">// 打印出循环遍历的每一位</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">forEach的源码剖析：</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.myForEach = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="built_in">this</span>.length;i ++)&#123;</span><br><span class="line">        func(<span class="built_in">this</span>[i],i,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// break不能使用，因为break在源码中不是写到for循环里面，而是写到了func函数里面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// return不能使用，因为return的话，就只是在return的那个遍历的对象不执行了，直接跳到下一个遍历对象执行</span></span><br></pre></td></tr></table></figure><h4 id="filter-–-筛选元素"><a href="#filter-–-筛选元素" class="headerlink" title="filter – 筛选元素"></a>filter – 筛选元素</h4><p><code>fliter 筛选，和 forEach 一样会遍历循环，也有三个参数，不过筛选出来的值由 return 来决定</code></p><p><code>filter 循环遍历筛选，返回判断是 true 的值，然后 return 出来，false，丢掉</code></p><p><code>filter(function(ele,index,array)&#123;&#125;) -- 循环遍历筛选数组</code></p><p><strong>参数：</strong></p><p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 1 个参数，什么变量都可以）</code></p><p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 2 个参数，什么变量都可以）</code></p><p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 3 个参数，什么变量都可以）</code></p><blockquote><p>意思是现在循环遍历的数组，如果循环遍历的返回值是true的话，就留下,如果说 返回如果循环遍历的返回值是false的话，就不要了。并且把所有返回true的数组（元素）放到到一个新的数组里面，所以说 filter 会有返回一个结果，这个结果就是 filter 筛选出来的元素组合成的一个新的数组。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> personArr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;王港&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/3.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;颈椎不好&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘莹&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/5.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;我是谁&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;f&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;王秀莹&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/4.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;我很好看&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;f&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘金雷&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/1.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;陌生的脸&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘飞翔&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/2.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;六六六&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = personArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index</span>)</span>&#123;</span><br><span class="line"><span class="comment">// ele : 循环遍历的每一个元素对象</span></span><br><span class="line"><span class="comment">// index : 相当于for循环的那个 i，代表索引，遍历第一遍：0，第二遍：1</span></span><br><span class="line"><span class="comment">// array : 相当于this，就是调用的是那个数组，一般用不到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 这个返回的可以是任何东西，只要转换完成之后不是 空 就可以。</span></span><br><span class="line">    <span class="comment">// 意思是现在循环遍历的数组，如果循环遍历的返回值是true的话，就留下</span></span><br><span class="line">    <span class="comment">// 如果说 返回如果循环遍历的返回值是false的话，就不要了。</span></span><br><span class="line">    <span class="comment">// 并且把所有返回true的数组（元素）放到到一个新的数组里面</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">// 打印筛选的元素组成的新数组</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">判断<span class="literal">false</span>和<span class="literal">true</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> personArr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;王港&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/3.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;颈椎不好&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘莹&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/5.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;我是谁&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;f&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;王秀莹&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/4.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;我很好看&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;f&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘金雷&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/1.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;陌生的脸&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘飞翔&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/2.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;六六六&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = personArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ele.sex == <span class="string">&#x27;f&#x27;</span>)&#123; <span class="comment">// 可以来判断true和false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [&#123;…&#125;, &#123;…&#125;]，两个女生</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">filter源码剖析：</span><br><span class="line"><span class="built_in">Array</span>.prototype.myfilter = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="built_in">this</span>.length;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(func(<span class="built_in">this</span>[i],i,<span class="built_in">this</span>))&#123;</span><br><span class="line">            arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map-–-循环遍历数组，返回一个新的数组"><a href="#map-–-循环遍历数组，返回一个新的数组" class="headerlink" title="map – 循环遍历数组，返回一个新的数组"></a>map – 循环遍历数组，返回一个新的数组</h4><p><code>map 就是直接返回一个新的数组，你可以在map里面判断条件，也可以不判断条件，可以用任何条件，来返回旧的数组里面的数据</code></p><p><code>map 直接由 return 返回出来的值来返回，把当前 return 返回的值放到新的数组当中</code></p><p><code>map 返回结果，和 forEach和filter 一样会遍历循环，也有三个参数，功能也一样，不过筛选出来的值由 return 返回出来的结果来决定，就是 return 每一次返回的值是什么，就返回什么每一次的结果</code></p><p><code>map(function(ele,index,array)&#123;&#125;) -- 循环遍历筛选数组</code></p><p><strong>参数：</strong></p><p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 1 个参数，什么变量都可以）</code></p><p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 2 个参数，什么变量都可以）</code></p><p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 3 个参数，什么变量都可以）</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> personArr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;王港&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/3.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;颈椎不好&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘莹&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/5.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;我是谁&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;f&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;王秀莹&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/4.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;我很好看&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;f&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘金雷&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/1.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;陌生的脸&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘飞翔&#x27;</span>, <span class="attr">src</span>:<span class="string">&#x27;./img/2.png&#x27;</span>,<span class="attr">des</span>:<span class="string">&#x27;六六六&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 给男生加上一个 girF = true，给女生加一个boyF = true;</span></span><br><span class="line"><span class="keyword">var</span> newArr = personArr.map(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ele.sex == <span class="string">&#x27;m&#x27;</span>)&#123;</span><br><span class="line">        ele.girlF = <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> ele;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ele.boyF = <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> ele;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">//(5) [&#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;]，五个对象</span></span><br><span class="line"><span class="comment">// newArr 和 personArr 的对象来自通过一个地址，你改我也改</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`map的源码剖析，浅拷贝`</span>：</span><br><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="built_in">this</span>.length;i ++)&#123;</span><br><span class="line">        arr.push(func(<span class="built_in">this</span>[i],i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`map的源码剖析，深度拷贝（配合深度克隆来解决）`</span>：</span><br><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>[i] &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">this</span>[i] == <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> newObj = &#123;&#125;;</span><br><span class="line">            deepClone(ownObj,<span class="built_in">this</span>[i]);</span><br><span class="line">            arr.push(func(newObj,i));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr.push(func(<span class="built_in">this</span>[i], i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`深度拷贝（深度克隆）`</span>：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">target, origin</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prop,</span><br><span class="line">        src,</span><br><span class="line">        copy;</span><br><span class="line">    <span class="keyword">if</span> (target !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (prop <span class="keyword">in</span> origin) &#123;</span><br><span class="line">            src = target[prop];</span><br><span class="line">            copy = origin[prop];</span><br><span class="line">            <span class="keyword">if</span> (copy &amp;&amp; <span class="keyword">typeof</span> copy == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(copy) == <span class="string">&#x27;[object Array]&#x27;</span>) &#123;</span><br><span class="line">                    src = [];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    src = &#123;&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                target[prop] = deepClone(src, copy);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                target[prop] = copy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;aimee&#x27;</span>,</span><br><span class="line">    <span class="attr">hobby</span>: &#123;</span><br><span class="line">        <span class="attr">sing</span>: <span class="string">&#x27;good&#x27;</span>,</span><br><span class="line">        <span class="attr">dance</span>: <span class="string">&#x27;well&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">deepClone(obj1, obj2);</span><br><span class="line"><span class="comment">// 这是一个深拷贝的过程，谁改变自己里面的东西，都和另一个对象没有关系</span></span><br></pre></td></tr></table></figure><h4 id="reduce-–-累加器（从左向右执行）"><a href="#reduce-–-累加器（从左向右执行）" class="headerlink" title="reduce – 累加器（从左向右执行）"></a>reduce – 累加器（从左向右执行）</h4><p><code>reduce 从左向右循环遍历数组，累加器（就是把之前遍历的数组），取出来的值只有一个。效率及其高</code></p><p><code>该方法应用一个函数是&quot;累加器&quot;，并处理列表的每个值（从左到右），以便将其减少到单个值。</code></p><p><code>reduce 返回结果，一样会遍历循环，有四个参数，它是会等全部循环遍历完成之后，然后在取那个 return 的值，意思就是取最后return出来的那个结果</code></p><p><strong>参数：</strong></p><p><strong>preValue</strong> : 代表上一次回调函数调用返回的值 <code>（第 1 个参数）</code></p><p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 2 个参数，什么变量都可以）</code></p><p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 3 个参数，什么变量都可以）</code></p><p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 4 个参数，什么变量都可以）</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue,ele,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(preValue);</span><br><span class="line">    <span class="keyword">return</span> ele;</span><br><span class="line">&#125;,<span class="number">10</span>) <span class="comment">// 实参，如果这里不给preValue值的话，preValue就会直接取数组的第一位，ele就取的第二位</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">累加器:</span><br><span class="line"><span class="comment">// 为什么说要用 reduce 做累加器呢，因为效率比for循环高</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> value = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue,ele,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + ele;</span><br><span class="line">&#125;) <span class="comment">// 实参，如果这里不给preValue值的话，preValue就会直接取数组的第一位，ele就取的第二位</span></span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">reduce 源码剖析：</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function"><span class="keyword">function</span> (<span class="params">func, init</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> previous = init,</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (init == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        previous = <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">        k = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (k; k &lt; <span class="built_in">this</span>.length; k++) &#123;</span><br><span class="line">        previous = func(previous, <span class="built_in">this</span>[k], k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> previous;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reduceRight-累加器（从右向左）"><a href="#reduceRight-累加器（从右向左）" class="headerlink" title="reduceRight 累加器（从右向左）"></a>reduceRight 累加器（从右向左）</h4><p><code>reduce 从右向左循环遍历数组，累加器（就是把之前遍历的数组），取出来的值只有一个。效率及其高</code></p><p><code>该方法应用一个函数是&quot;累加器&quot;，并处理列表的每个值（从左到右），以便将其减少到单个值。</code></p><p><code>reduceRight 返回结果，一样会遍历循环，有四个参数，它是会等全部循环遍历完成之后，然后在取那个 return 的值，意思就是取最后return出来的那个结果</code></p><p><strong>参数：</strong></p><p><strong>preValue</strong> : 代表上一次回调函数调用返回的值 <code>（第 1 个参数）</code></p><p><strong>ele</strong> : 循环遍历的每一个当前元素对象 <code>（第 2 个参数，什么变量都可以）</code></p><p><strong>index</strong> : 相当于for循环的那个 i，当前在表中操作的当前项的索引。，遍历第一遍：0，第二遍：1 <code>（第 3 个参数，什么变量都可以）</code></p><p><strong>array</strong> : 当前元素所属的数组对象。相当于this，就是调用的是那个数组，一般用不到 <code>（第 4 个参数，什么变量都可以）</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue,ele,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(preValue);</span><br><span class="line">    <span class="keyword">return</span> ele;</span><br><span class="line">&#125;,<span class="number">10</span>) <span class="comment">// 实参，如果这里不给preValue值的话，preValue就会直接取数组的第一位，ele就取的第二位</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">累加器:</span><br><span class="line"><span class="comment">// 为什么说要用 reduce 做累加器呢，因为效率比for循环高</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> value = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue,ele,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + ele;</span><br><span class="line">&#125;) <span class="comment">// 实参，如果这里不给preValue值的话，preValue就会直接取数组的第一位，ele就取的第二位</span></span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">reduce 源码剖析：</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function"><span class="keyword">function</span> (<span class="params">func, init</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> previous = init,</span><br><span class="line">        k = <span class="built_in">this</span>.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (init == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        previous = <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">        k = <span class="built_in">this</span>.length - <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (k; k &gt; <span class="built_in">this</span>.length; k --) &#123;</span><br><span class="line">        previous = func(previous, <span class="built_in">this</span>[k], k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> previous;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h2><p><code>1. 可以利用属性名模拟数组的特性</code></p><p><code>2. 可以动态的增长 length 属性</code></p><p><code>3. 如果强行让类数组调用 push 方法，则会根据 length 属性值的位置进行属性的扩充</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">这个看着像数组，但是数组有的方法，他全部都没有，所以他是类数组</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        concole.log(<span class="built_in">arguments</span>);</span><br><span class="line">        argumetns.push(<span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  [1,2,3,5,6,7]</span></span><br><span class="line">    <span class="comment">// &lt;· 报错</span></span><br><span class="line"></span><br><span class="line"><span class="string">`类数组长得很像数组，但是没有数组所拥有的方法`</span>。</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span> : <span class="string">&#x27;c&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  obj[0]</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;a&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  obj[0]</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`下面就是类数组的基本形态`</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span> : <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;length&#x27;</span> : <span class="number">3</span>,</span><br><span class="line">        <span class="string">&#x27;push&#x27;</span> : <span class="built_in">Array</span>.prototype.push</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// &gt;  obj.push(&#x27;d&#x27;)</span></span><br><span class="line">    <span class="comment">// &lt;· 4</span></span><br><span class="line">    <span class="comment">// &gt;  obj</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;0:&#x27;a&#x27;,1:&#x27;b&#x27;,2:&#x27;c&#x27;,3:&#x27;d&#x27;,length:4&#125;</span></span><br><span class="line"><span class="comment">// 分析：在控制台 push(&#x27;d&#x27;) 以后，obj的object多了一个 3 : d,长度也变成了 4</span></span><br><span class="line"></span><br><span class="line"><span class="string">`类数组：属性要为索引（数字）属性，必须要有 length 属性，最好加上 push 方法。`</span></span><br><span class="line"></span><br><span class="line">如果给一个对象加上 splice 方法，那么这个对象就长得像数组了。但是他仍探视对象，但是可以当作数组来用，需要自己添方法。</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span> : <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;length&#x27;</span> : <span class="number">3</span>,</span><br><span class="line">        <span class="string">&#x27;push&#x27;</span> : <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">        <span class="string">&#x27;splice&#x27;</span> : <span class="built_in">Array</span>.prototype.splice <span class="comment">// 可以把类数组变成数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>[<span class="built_in">this</span>.length] = target;</span><br><span class="line">        <span class="built_in">this</span>.length ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">`如果对象 obj 调用这个方法，那么 this 变成了 obj`</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        obj[obj.length] = target;</span><br><span class="line">        obj.length ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">阿里巴巴题目，问这个 obj 长什么样子？</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span> : <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;length&#x27;</span> : <span class="number">2</span>，</span><br><span class="line">        <span class="string">&#x27;push&#x27;</span> : <span class="built_in">Array</span>.prototype.push</span><br><span class="line">    &#125;</span><br><span class="line">    obj.push(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    obj.push(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="comment">// 答案：</span></span><br><span class="line">    <span class="comment">// obj</span></span><br><span class="line">    <span class="comment">// Object&#123;2:&#x27;c&#x27;,3:&#x27;d&#x27;,length:4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">`关键点在 length 上面，根据 length 改变而改变，走一下length，既：`</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">taret</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>[obj.length] = target;</span><br><span class="line">        <span class="built_in">this</span>.length ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span> : <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span> : <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;length&#x27;</span> : <span class="number">3</span>,</span><br><span class="line">        <span class="string">&#x27;push&#x27;</span> : <span class="built_in">Array</span>.prototype.push</span><br><span class="line">    &#125;</span><br><span class="line">    obj.push(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    <span class="comment">// 答案：“ 1”：“a”，“2”：“ c”，“ 3”：“b”，“ length”： 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span> : <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span> : <span class="number">123</span>,</span><br><span class="line">        <span class="attr">length</span> : <span class="number">3</span>,</span><br><span class="line">        <span class="attr">push</span> : <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">        <span class="attr">splice</span> : <span class="built_in">Array</span>.prototype.splice</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从 console 输出:</span></span><br><span class="line">    <span class="comment">// &gt;  obj</span></span><br><span class="line">    <span class="comment">// &lt;· [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span></span><br><span class="line">    <span class="comment">// &gt;  obj.name</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;abc&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  obj.age</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br><span class="line">    <span class="comment">// &gt;  obj.length</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line">    <span class="comment">// &gt;  for(var prop in obj)&#123;console.log(obj[prop])&#125;</span></span><br><span class="line">    <span class="comment">// &lt;· a</span></span><br><span class="line">    <span class="comment">// &lt;· b</span></span><br><span class="line">    <span class="comment">// &lt;· c</span></span><br><span class="line">    <span class="comment">// &lt;· abc</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br><span class="line">    <span class="comment">// &lt;· 3</span></span><br><span class="line">    <span class="comment">// &lt;· function push()&#123;[native code]&#125;</span></span><br><span class="line">    <span class="comment">// &lt;· function splice()&#123;[native code]&#125;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br></pre></td></tr></table></figure><h2 id="作业，练习"><a href="#作业，练习" class="headerlink" title="作业，练习"></a>作业，练习</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 封装 type 方法达到下面的效果</span><br><span class="line">    <span class="comment">// 封装 type</span></span><br><span class="line">    <span class="keyword">typeof</span>([]) -- array</span><br><span class="line">    <span class="keyword">typeof</span>(&#123;&#125;) -- object</span><br><span class="line">    <span class="keyword">typeof</span>(<span class="function"><span class="keyword">function</span>) -- <span class="title">object</span></span></span><br><span class="line"><span class="function">    <span class="title">typeof</span>(<span class="params"><span class="keyword">new</span> <span class="built_in">Number</span>()</span>) -- <span class="title">number</span> <span class="title">Object</span></span></span><br><span class="line"><span class="function">    <span class="title">typeof</span>(<span class="params"><span class="number">123</span></span>) -- <span class="title">number</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="title">console</span> 输出</span></span><br><span class="line"><span class="function">    // &gt;  <span class="title">Object</span>.<span class="title">prototype</span>.<span class="title">toString</span>.<span class="title">call</span>(<span class="params"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>)</span>)</span></span><br><span class="line"><span class="function">    // &lt;· &#x27;[<span class="title">object</span> <span class="title">Number</span>]&#x27;</span></span><br><span class="line"><span class="function">    // &gt;  <span class="title">Object</span>.<span class="title">prototype</span>.<span class="title">toSTring</span>.<span class="title">call</span>(<span class="params"><span class="number">123</span></span>)</span></span><br><span class="line"><span class="function">    // &lt;· &#x27;[<span class="title">object</span> <span class="title">Number</span>]&#x27;</span></span><br><span class="line"><span class="function"></span>;</span><br><span class="line"></span><br><span class="line">答案:</span><br><span class="line">    <span class="number">1.</span> 封装 type （这个方法是一个工具类方法，可以存放在库里面），区分 <span class="keyword">typeof</span> 方法</span><br><span class="line"></span><br><span class="line">        <span class="number">1</span>）先分类，原始值，引用值</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span>）区分引用值，先判断是不是 <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    数组，对象，包装类（<span class="keyword">new</span> number）会返回 object，通过 <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"> <span class="number">1.</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> template = &#123;</span><br><span class="line">            <span class="string">&#x27;[object Array]&#x27;</span> : <span class="string">&#x27;array&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;[object Object]&#x27;</span> : <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;[object Number]&#x27;</span> : <span class="string">&#x27;number - object&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;[object Boolean]&#x27;</span> : <span class="string">&#x27;boolean - object&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;[object String]&#x27;</span> : <span class="string">&#x27;string - object&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target === <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span>(target) == <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;function&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span>(target) == <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="built_in">Object</span>.prototype.toString.call(target);</span><br><span class="line">            <span class="keyword">return</span> template(str);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span>(target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`简化之后`</span></span><br><span class="line"></span><br><span class="line"> <span class="number">2.</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> template = &#123;</span><br><span class="line">        <span class="string">&#x27;[object Array]&#x27;</span> : <span class="string">&#x27;array&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Object]&#x27;</span> : <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Number]&#x27;</span> : <span class="string">&#x27;number - object&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Boolean]&#x27;</span> : <span class="string">&#x27;boolean - object&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object String]&#x27;</span> : <span class="string">&#x27;string - object&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(target === <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">typeof</span>(target))&#123;</span><br><span class="line">         <span class="keyword">var</span> str = <span class="built_in">Object</span>.prototype.toString.call(target);</span><br><span class="line">         <span class="keyword">return</span> template[str];</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">typeof</span>(target);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="string">`进一步简化`</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> ret = <span class="keyword">typeof</span>(target);</span><br><span class="line">     <span class="keyword">var</span> temp = &#123;</span><br><span class="line">        <span class="string">&#x27;[object Array]&#x27;</span> : <span class="string">&#x27;array&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Object]&#x27;</span> : <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Number]&#x27;</span> : <span class="string">&#x27;number - object&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Boolean]&#x27;</span> : <span class="string">&#x27;boolean - object&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object String]&#x27;</span> : <span class="string">&#x27;string - object&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(target === <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ret = <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">         <span class="keyword">var</span> str = <span class="built_in">Object</span>.prototype.toString.call(target);</span><br><span class="line">         <span class="keyword">return</span> temolate[str];</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> ret;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 数组去重</span><br><span class="line">    <span class="comment">// 数组去重</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">    arr.unique() --&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">`数组去重(利用对象的特性做数组去重，去重就是去掉重复)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">思路：写一个对象，把数组的每一位当做对象的属性名。利用对象的特性（同一属性名不可以出现两次），先把第一位当作属性名添加进去，属性值随便写个，在看第一二位，如果第二位在对象里面有属性名，就看下一位，如果对象没有属性名，就把这个值添加进去当属姓名，只看对象的属性名，就去重了，这个方法叫 hash</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">答案：</span><br><span class="line">    <span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = &#123;&#125;,</span><br><span class="line">            arr = [],</span><br><span class="line">            len = <span class="built_in">this</span>.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!temp[<span class="built_in">this</span>[i]])&#123;</span><br><span class="line">                temp[<span class="built_in">this</span>[i]] = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">                arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`每一圈循环都要 this.length; 写成 var len = this.length;这样直接放值能少一些运算。 [this[i]]代表数组的第几位。 “abc”可以随便填值（要求是字符串，但是不为 false）， 但是填[this[i]]= [this[i]];在数组有 0 的时候就会有 bug。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if 里面取到值什么都不敢，取到 undefined才开始操作，所以写非！，没有值，才处理 `</span></span><br></pre></td></tr></table></figure><h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><h2 id="复习包装类"><a href="#复习包装类" class="headerlink" title="复习包装类"></a>复习包装类</h2><p><code>引用值就是一种对象（泛泛的概括类对象），包括数组，函数，对象。在内存里面存储。原始值不能有属性和方法，引用之才可以有，但是经过包装类后，原始值就能有属性和方法。</code></p><p><code>通过原始值访问属性和方法，系统为了让语法好用，不报错，系统会帮我们进行一个 js 内部机制包装类</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    <span class="comment">// new String(&#x27;abc&#x27;).length</span></span><br><span class="line">    <span class="built_in">console</span>.log(str.length);</span><br><span class="line"></span><br><span class="line"><span class="string">`思路：即隐式的 new String构造出一个字符串对象，然后把字符串内容与原来保持一 致 new String (‘abc’)，因为我们进行了 str.length 操作，那么他也加上.length，变成 了隐式 new String (‘abc’).length。这里虽然写的是 console.log(str.length)，实际上执 行的是 console.log(new String (‘abc’).length)  这样隐式的执行过程就是包装类。`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    num.abc = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    <span class="comment">// new Number(num).abc = &#x27;abc&#x27;; --&gt; delete</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// new Number(num).abc;</span></span><br><span class="line">    <span class="built_in">console</span>.log(num.abc);</span><br><span class="line"></span><br><span class="line"><span class="string">`答案 undefined思路：当num.abc = “abc”时，系统会进行包装类，隐式的 new Number(num).abc = “abc”；执行完这一步以后就会delet 掉这个隐式的值，并不保 留。等下一步又遇到 num.abc 时，又隐式的 new了一个 number。但是这个和上一个 是两个 new Number，是两个彼此独立的对象。`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`new.Number(123).abc 和 var num = new Number(123); num.abc 是一样的`</span></span><br></pre></td></tr></table></figure><h2 id="复习原型"><a href="#复习原型" class="headerlink" title="复习原型"></a>复习原型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`任何函数都有原型，包括构造函数，这是一个构造函数，原型需要基于构造函数，没有原型的构造函数没有意义，任何一个函数都有 prototype`</span></span><br><span class="line">    Person.prototype.lastName = <span class="string">&#x27;deng&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Pereson</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">this</span> = &#123;</span><br><span class="line">            <span class="attr">__proto__</span> : Person.prototype</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">    <span class="built_in">console</span>.log(person.lastName);</span><br></pre></td></tr></table></figure><h2 id="复习-creat"><a href="#复习-creat" class="headerlink" title="复习 creat"></a>复习 creat</h2><p><code>Object.creat(); 是创造的对象，对象必须要有原型，Object.creat();需要指定创建对象的原型是谁，括号里面就要填谁（所以括号里面一定要估值）</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">var</span> demo = &#123;</span><br><span class="line">        <span class="attr">lastName</span> : <span class="string">&#x27;deng&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.creat(demo);</span><br><span class="line">    obj = &#123;</span><br><span class="line">        <span class="attr">__proto__</span> : demo</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`Object.creat(prototype.definedProperty)还能填第二个参数。第一个填的 prototype 表示你的原型是谁，第二个参数 definedProperty 是特性.(可读可写都是特性)`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 console 中控制：</span></span><br><span class="line">    <span class="comment">// &gt;  delete num</span></span><br><span class="line">    <span class="comment">// &lt;· false</span></span><br><span class="line">    <span class="comment">// &gt;  delete widnow.num</span></span><br><span class="line">    <span class="comment">// &lt;· false</span></span><br><span class="line"><span class="string">`这个 nun 算是 window 的苏醒。写在全局的属性，一旦经历了 var 的操作，所得出的属性 window，这种属性叫做不可配置的属性，不可配置的属性，delete不掉。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">直接增加的属性卡叫做可配置属性，delete 只能删除可配置的属性`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    obj.num;</span><br><span class="line">    <span class="comment">// 从 console 中控制：</span></span><br><span class="line">    <span class="comment">// &gt;  delete obj.num</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line">    <span class="comment">// &gt;  obj</span></span><br><span class="line">    <span class="comment">// &lt;· Object &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">直接在控制台操作对比，发现 <span class="keyword">var</span> 过的属性是不可配置的属性,<span class="keyword">delete</span>不掉</span><br><span class="line">    <span class="comment">// 从 console 中控制：</span></span><br><span class="line">    <span class="comment">// &gt;  window.num = 123</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br><span class="line">    <span class="comment">// &gt;  delete window.num</span></span><br><span class="line">    <span class="comment">// &lt;· true</span></span><br><span class="line">    <span class="comment">// &gt;  window.num</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var num = 123;</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  window.num</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br><span class="line">    <span class="comment">// &gt;  delete window.num</span></span><br><span class="line">    <span class="comment">// &lt;· false</span></span><br><span class="line">    <span class="comment">// &gt;  window.num</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="复习-this-amp-call"><a href="#复习-this-amp-call" class="headerlink" title="复习 this &amp; call"></a>复习 this &amp; call</h2><p><code>1. 预编译 this --&gt; window</code></p><p><code>2. 谁调用的，this 指向谁</code></p><p><code>3. call 和 apply 能改变 this 的指向</code></p><p><code>4. 全局 this --&gt; window</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">注释掉的是预编译的过程</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// test() --&gt; AO&#123;</span></span><br><span class="line">    <span class="comment">//     arguments : &#123;&#125;，</span></span><br><span class="line">    <span class="comment">//     this : window,</span></span><br><span class="line">    <span class="comment">//     num : undefined,</span></span><br><span class="line">    <span class="comment">//     a : function()&#123;&#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">test();完全是等于 test.call();执行，其实 test() 执行会内部转换成 test.call();执行</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    test.call();</span><br><span class="line">    <span class="comment">// Window</span></span><br><span class="line"></span><br><span class="line">如果我们在 test.call();里面传值，第一个值就会作为函数执行时的 <span class="built_in">this</span> 环境</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// test();</span></span><br><span class="line">    test.call(&#123;<span class="attr">name</span> : <span class="string">&#x27;deng&#x27;</span>&#125;); <span class="comment">// Object&#123;name : &#x27;deng&#x27;&#125;</span></span><br><span class="line">    <span class="comment">// test() --&gt; AO&#123;</span></span><br><span class="line">    <span class="comment">//         arguments : &#123;&#125;,</span></span><br><span class="line">    <span class="comment">//         this : &#123;name : &#x27;deng&#x27;&#125;,</span></span><br><span class="line">    <span class="comment">//         num : undefined,</span></span><br><span class="line">    <span class="comment">//         a : function()&#123;&#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">        <span class="attr">say</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="attr">name</span> : <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.say();</span><br><span class="line">    <span class="comment">//  obj</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">        <span class="attr">say</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="attr">name</span> : <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.say.call(<span class="built_in">window</span>);</span><br><span class="line">    <span class="comment">//  window</span></span><br><span class="line"><span class="string">`obj.say.call(window);有 call 就打破一切规则，call() 里面传的是谁，就是谁`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">naem</span> : <span class="string">&#x27;obj&#x27;</span>m</span><br><span class="line">        <span class="attr">say</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> fun = obj.say;</span><br><span class="line">    fun(); <span class="comment">//--&gt; 只能走预编译</span></span><br><span class="line"></span><br><span class="line"><span class="string">`var fun = obj.say 先当与 var fun = say : function()&#123;&#125; 里面的函数体`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`fun(); 相当于让 say : function 在这函数在全局范围内自调用，不是谁调用的，就只能走预编译，this 就是 window`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">        <span class="attr">say</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> fun = obj.say;</span><br><span class="line">    fun.call(obj);</span><br><span class="line">    <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line">想让 Person 实现 Student 的功能</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// var this = Object.creat(Student.prototype);</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age; <span class="comment">// 简化为 Person.call(this,name,age);</span></span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">&#x27;long&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="复习闭包"><a href="#复习闭包" class="headerlink" title="复习闭包"></a>复习闭包</h2><p><code>闭包表象：一个函数套着另外一个函数，你把被嵌套的函数保存到套他的函数外面（a 套着 b，你把 b 弄出 a 里面），就形成了闭包（不一定要 return）</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">下面两种都可以实现闭包</span><br><span class="line">  <span class="number">1</span>)<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    a();</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>)<span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        obj.fun = b;</span><br><span class="line">    &#125;</span><br><span class="line">    a();</span><br><span class="line">    <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="comment">// this call</span></span><br><span class="line">    go &#123;</span><br><span class="line">        <span class="attr">a</span> : <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">    ao &#123;</span><br><span class="line">        <span class="attr">a</span> : <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br></pre></td></tr></table></figure><h2 id="复习构造函数"><a href="#复习构造函数" class="headerlink" title="复习构造函数"></a>复习构造函数</h2><p><code>通过构造函数构造对象的时候用 new,我执行函数的时候就不用 new</code></p><p><code>构造对象必须是 new 加上构造函数执行（如 person();）才能构造出对象</code></p><p><code>有了 new 之后，才会发生两步隐式变化（var this = &#123;&#125;； return this）</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// var this = &#123;&#125;</span></span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.age = <span class="number">123</span>;</span><br><span class="line">        <span class="comment">// return this;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pereson = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 没有 var person = new Person(); 只 Person 会走预编译，此时 this 指向 window</span></span><br><span class="line"></span><br><span class="line">私有化属性看不到 Var money = <span class="number">100</span>; 外部看不到 <span class="keyword">var</span> money,就是闭包</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// var this = &#123;</span></span><br><span class="line">            <span class="comment">// makeMoney : function()&#123;&#125;</span></span><br><span class="line">            <span class="comment">// offer : function()&#123;&#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">var</span> money = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.makeMoney = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            money ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.offer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            money --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// return this;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">            F.prototype = Origin.prototype;</span><br><span class="line">            Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;())</span><br><span class="line">    <span class="string">`立即执行函数执行完就成下面这样了`</span></span><br><span class="line">    <span class="keyword">var</span> inherit = <span class="function"><span class="keyword">function</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">引用值也可以进行类型转换</span><br><span class="line"></span><br><span class="line"><span class="string">`数组不等于数组，因为里面的地址不一样`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出</span></span><br><span class="line">    &gt;  [] + <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &lt;· <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &gt;  [] + <span class="number">2</span></span><br><span class="line">    &lt;· <span class="string">&#x27;2&#x27;</span></span><br><span class="line">    &gt;  <span class="built_in">Number</span>([])</span><br><span class="line">    &lt;· <span class="number">0</span></span><br><span class="line">    &gt;  [] == []</span><br><span class="line">    &lt;· <span class="literal">false</span></span><br><span class="line">    &gt;  <span class="built_in">String</span>([]) + <span class="number">1</span></span><br><span class="line">    &lt;· <span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="复习克隆"><a href="#复习克隆" class="headerlink" title="复习克隆"></a>复习克隆</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">naem</span> : <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">    &#125;               <span class="comment">// 浅克隆</span></span><br><span class="line">    <span class="keyword">var</span> obj1 = &#123;    <span class="comment">// 当拷贝引用值的收就不行了</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> prop)&#123;</span><br><span class="line">        obj1[prop] = obj[prop];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">`这样浅度克隆，克隆的是地址，缺点是你改我也改`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`深度克隆解决的就是引用值`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`null 和 undefined 不能和数字进行比较，不会进行类型转换，他们不作为比较值存在`</span></span><br></pre></td></tr></table></figure><h2 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">私有化变量</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">sss</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            a ++;</span><br><span class="line">            documents.write(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.say = sss;</span><br><span class="line">    &#125;</span><br><span class="line">    bst oPrtrdon = mre Person();</span><br><span class="line">    oPerson.say();</span><br><span class="line">    oPerson.say();</span><br><span class="line">    <span class="keyword">var</span> oPerson1 = <span class="keyword">new</span> Person();</span><br><span class="line">    oPerson1.say();</span><br><span class="line">    <span class="comment">// 打印 1，2，1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> x;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 答案 1，删不掉x，该是什么是什么</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="built_in">arguments</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// 返回 object</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> h = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">23</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a());</span><br><span class="line">    <span class="comment">// error : a is not a defined</span></span><br><span class="line">    <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line">选择你熟悉的一种方式实现JavaScript 对象的继承</span><br><span class="line">    <span class="comment">// 案：声明模式</span></span><br><span class="line"></span><br><span class="line">实现 object 类型的 clone()方法</span><br><span class="line">    <span class="comment">// 答案：深度克隆</span></span><br><span class="line"></span><br><span class="line">尝试优化以下代码，让代码看起来更优雅</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getDay</span>(<span class="params">day</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(day)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                documents.wirte(<span class="string">&#x27;Monday&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                documents.wirte(<span class="string">&#x27;Tuesday&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                documents.wirte(<span class="string">&#x27;Wednesday&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                documents.wirte(<span class="string">&#x27;Thursday&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                documents.wirte(<span class="string">&#x27;Friday&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                documents.wirte(<span class="string">&#x27;Saturday&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                documents.wirte(<span class="string">&#x27;Sunday&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">default</span>:</span><br><span class="line">                documents.wirte(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 答案：</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">retDate</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>];</span><br><span class="line">            <span class="keyword">var</span> ret = arr[date - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(ret === <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`SEO 是搜索引擎优化`</span></span><br><span class="line"></span><br><span class="line">HTML布局实现：头和尾固定，中间自适应。</span><br><span class="line"><span class="comment">// 答案：三栏布局，头尾是指左右</span></span><br><span class="line"></span><br><span class="line">在页面中增加一个 div（宽度 400px，高度400px，背景颜色蓝色，边框颜色红 色），该 div要求在页面中居中显示。</span><br><span class="line">简单画图描述CSS盒模型</span><br><span class="line"></span><br><span class="line">css中的选择器有哪些？</span><br><span class="line"><span class="comment">// 答案：id 选择器是 xxx，先说类型在举例</span></span><br><span class="line"></span><br><span class="line">JavaScript 中有哪些数据类型？</span><br><span class="line"><span class="comment">// 答案：原始值里面有 XXX，引用值里面有 XXXX</span></span><br><span class="line"></span><br><span class="line">什么是 rem布局？</span><br><span class="line">html 顶部的DOCTYPE 有什么作用？有什么影响？</span><br><span class="line">Display的参数值及其含义</span><br><span class="line"></span><br><span class="line">描述一下盒模型</span><br><span class="line"><span class="comment">// 答案：需要讲两种才满分</span></span><br><span class="line"></span><br><span class="line">css3可用伪类都有那些？</span><br><span class="line">position属性有哪些值，有什么区别？</span><br><span class="line">如何创建一个 div，并添加到页面里。</span><br><span class="line">写一个正则表达式，检验字符串首尾是否含有数字</span><br><span class="line">跨域请求数据的方法都有哪些？</span><br><span class="line">编写一个类和类继承，类名为Person，含有属性 name，age，含有方法$。一个 student 类，继承自Person，自由属性 score，自有方法 study</span><br><span class="line">（类指的就是构造函数）</span><br><span class="line"></span><br><span class="line"><span class="string">`一个字符串[a - z]组成，请找出该字符串第一只出现一次的字母。`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`字符串去重`</span></span><br></pre></td></tr></table></figure><h1 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h1><p><code>防止我们报错的</code></p><p><code>try花括号&#123;里面会正常执行，但是遇到 b 报错时 b 就执行不出来，后面的代码 c 就不执行了，但是外面的代码 d 还能执行&#125;catch(e),这个 e 是可以随便写的，写 abc 都可以，也是一个形参</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="string">`报错后，不执行后续的代码，但是依然可以执行外面的d`</span></span><br></pre></td></tr></table></figure><p><code>在 try 里面发生的错误，不会执行错误后的 try 的里面的代码</code></p><p><code>catch</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="string">`如果 try里面的代码不出错，在 catch 里面的代码就不执行；`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="string">`如果 try里面的代码出错，catch 负责补抓到错误信息封装到里面（error.massage    error.name）， 错误对象只有 message 和 name。 `</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;<span class="comment">// error   error.message error.name --&gt; error</span></span><br><span class="line">        onsole.log(e.message + <span class="string">&quot; &quot;</span> + e.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// a</span></span><br><span class="line">    <span class="comment">// b is not defined ReferenceError</span></span><br><span class="line">    <span class="comment">// d</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.name + <span class="string">&#x27; : &#x27;</span> + e.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="comment">// 从控制台输出：</span></span><br><span class="line">    <span class="comment">// a</span></span><br><span class="line">    <span class="comment">// ReferenceError : b is not defined</span></span><br><span class="line">    <span class="comment">// d</span></span><br><span class="line"></span><br><span class="line"><span class="string">`try&#123;&#125;catch(e)finally&#123;&#125;`</span></span><br></pre></td></tr></table></figure><h1 id="Error-name-的六种值对应的信息"><a href="#Error-name-的六种值对应的信息" class="headerlink" title="Error.name 的六种值对应的信息"></a>Error.name 的六种值对应的信息</h1><p><code>Error.name : 前面是错误名称，后面是错误信息</code></p><p><code>1. EvalError : eval() 使用与定义不一致不一致（eval 是不允许被使用的）</code></p><p><code>2. RangeError : 数值越界</code></p><p><code>3. ReferenceError : 非法或不能识别的引用数值（未经声明就使用，未经定义就使用）</code></p><p><code>4. SyntaxError : 操作数类型错误</code></p><p><code>5. TypeError : 操作数类型错误</code></p><p><code>6. URIError : URI处理函数使用不当（引用地址错误）</code></p><blockquote><p>大部分都是 3 和 4 这种错误，</p></blockquote><p><code>伪代码也可以写，就比如 var 老于 = 123; 这就是伪代码</code></p><p><code>var str = avs ==&gt; ReferenceError</code></p><h1 id="es5-0-严格模式"><a href="#es5-0-严格模式" class="headerlink" title="es5.0 严格模式"></a>es5.0 严格模式</h1><p><code>（这一章就是讲 es3.0 和 es5.0产生冲突的部分）</code></p><p><code>浏览器是基于 es3.0 和 es5.0 的新增方法使用的。</code></p><p><code>如果两种发生了冲突，就用 es3.0。</code></p><p><code>es5.0 严格模式是指 es3.0 和 es5.0 产生冲突发部分就是用 es5.0，否则就用 es3.0</code></p><p><code>es5.0 严格模式的启动方式，在页面逻辑最顶端写 &#39;use strict&#39;</code></p><p><code>用法在整个页面的最顶端写 &#39;use strict&#39;,可以写在全局的最顶端，也可以写在 某函数（局部）的最顶端，推荐使用局部的</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">es5<span class="number">.0</span> 不能用 argument.callee,但是 es3<span class="number">.0</span> 可以用</span><br><span class="line">    <span class="comment">// es5.0 严格模式的启动</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(argumetns.callee);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// 报错：es5.0模式下不能用 callee 和 caller</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125; 里面加 <span class="string">&#x27;use strict&#x27;</span>; 是局部启动严格模式</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);</span><br><span class="line">    &#125;</span><br><span class="line">    demo();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">        &#x27;use strict&#x27;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// function demo()&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(arguments.callee)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><code>&#39;use strict&#39;</code></p><blockquote><p>不在兼容 es3.0 的一些不规则语法。使用全新的 es5.0 规范。两种用法：</p></blockquote><p><code>一、全局严格模式</code></p><p><code>局部函数内严格模式（推荐）</code></p><p><code>就是一行字符串，不会对不兼容严格模式的浏览器产生影响。</code></p><p><code>不支持 with，argumetns.callee，function.caller，变量赋值前必须声明，局部 this 必须被赋值（Perosn.call(null/unfined)) 赋值什么就是什么，拒绝重复属性和参数</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line">浏览器升级到 es5<span class="number">.0</span> 才好用</span><br><span class="line">写成 strice();就有风险</span><br><span class="line">写成 <span class="string">&#x27;use strict&#x27;</span>; 就有一个向后兼容的作用</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">es5<span class="number">.0</span> 严格模式下不能用 <span class="keyword">with</span></span><br><span class="line">    <span class="keyword">with</span> 可以改变作用域链</span><br><span class="line">    <span class="keyword">with</span>()括号里面的代码会按照正常顺序执行，但是如果在括号里面添加了对象，就会把对象当作 <span class="keyword">with</span> 要执行的代码体的作用域链的最顶端（最直接的最近的 AO）</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">下面这个 <span class="keyword">with</span> 看到的就是 <span class="keyword">var</span> obj 的 name （<span class="keyword">with</span> 改变作用域链）</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">        age = <span class="number">234</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> age = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">&#x27;spoce&#x27;</span>;</span><br><span class="line">        <span class="function"><span class="title">with</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(name);</span><br><span class="line">            <span class="built_in">console</span>.log(age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// obj,234</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">命名空间应该像下面这样用的，<span class="keyword">with</span> 可以简化代码</span><br><span class="line">    <span class="keyword">var</span> org = &#123;</span><br><span class="line">        <span class="attr">dp1</span> : &#123;</span><br><span class="line">            <span class="attr">jc</span> : &#123;</span><br><span class="line">                <span class="attr">name</span> : <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span> : <span class="number">123</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">deng</span> : &#123;</span><br><span class="line">                <span class="attr">name</span> : <span class="string">&#x27;xiaodeng&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span> : <span class="number">234</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">dp2</span> : &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">with</span>(<span class="params">org.dp1.jc</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">with</span>(<span class="params"><span class="built_in">document</span></span>)</span>&#123;</span><br><span class="line">        write(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">`这也是 with 的运用方式，用with 表示 document.write();`</span></span><br></pre></td></tr></table></figure><blockquote><p>with 过于强大，可以改变作用域链，失去效率，所以es5.0不能用</p></blockquote><p><code>argumetns.callee</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(argumetns.callee);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">// 报错 -- TypeError ：&#x27;caller&#x27;,&#x27;callee&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">arguments</span>.callee 在 es5<span class="number">.0</span> 严格模式下报错</span><br><span class="line">    <span class="string">&#x27;use strice&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(test.caller);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">    demo();</span><br><span class="line">    <span class="comment">// 报错 -- TypeError ：&#x27;caller&#x27;,&#x27;callee&#x27;</span></span><br></pre></td></tr></table></figure><p><code>es5.0 严格模式下：变量赋值前必须声明，局部 this 必须被赋值</code></p><p><code>（Person.call(null/undefined) 赋值什么就是什么），拒绝重复属性和参数（this 不在指向 window）</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = b = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">局部 <span class="built_in">this</span> 必须被赋值 (Person.call(<span class="literal">null</span>/<span class="literal">undefined</span>)赋值什么就是什么)</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br><span class="line">    <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">该对象的 <span class="title">constructor</span>是 <span class="title">Test</span></span><br><span class="line">    &#x27;<span class="title">use</span> <span class="title">strict</span>&#x27;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> Test();</span><br><span class="line">    <span class="comment">// Test&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> Test.call(&#123;&#125;);</span><br><span class="line">    <span class="comment">// Object&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> Test.call(<span class="number">123</span>);</span><br><span class="line">    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`在 es3.0 里面是不能这样的`</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Test.call(<span class="number">123</span>);</span><br><span class="line">    <span class="comment">// Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br><span class="line">    <span class="comment">// &gt;  new Number(123) 这是包装类的显示形式</span></span><br><span class="line">    <span class="comment">// &lt;· Number&#123;[[PrimitiveValue]]:123&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">在 es5<span class="number">.0</span> 中全局的 <span class="built_in">this</span> 还是指向 <span class="built_in">window</span></span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);  <span class="comment">//--全局范围</span></span><br><span class="line">    <span class="comment">// Window</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">拒绝重复属性和参数（<span class="built_in">this</span> 不在指向 <span class="built_in">window</span>）</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name,name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    test(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name,name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`在 es3.0 里面重复的参数是不报错的，但是在 es5.0 里面是会报错的`</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name,name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// SyntaxError:Duplicate  -- 报错</span></span><br><span class="line"></span><br><span class="line"><span class="string">`重复的属性名在 es5.0 也不行，但是不报错（后面会覆盖前面的）`</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span> : <span class="string">&#x27;234&#x27;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>eval 很强大，能把字符串当成代码来执行</code></p><p><code>但是约定俗成在 es3.0 中都不能使用 eval。eval是魔鬼，因为会改变作用域</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">&#x27;console.log(a)&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es3.0 都不能 eval();eval 是魔鬼</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">global</span> = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">global</span> = <span class="number">200</span>;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">&#x27;console.log(global)&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    test();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">如果改变 <span class="built_in">global</span>，他改变的是全局的</span><br><span class="line"></span><br><span class="line">当情况不同，<span class="built_in">eval</span> 改变的作用域是不同的</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> 还有自己独立的作用域</span><br><span class="line"></span><br><span class="line">理解：可以把回调函数理解为先定义好了函数，执行的时候再回头调用</span><br></pre></td></tr></table></figure><h1 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h1><ol><li><p>DOM  —&gt;    Document Object Model（文档对象模型</p></li><li><p>DOM 定义了表示和修改文档所需的方法（对象，这些对象的行为和属性以及这些对象之间的关系。）DOM 对象即为宿主对象，有浏览器厂商定义，用来操作 html 和 xml 功能的一类对象的集合。</p></li></ol><p><code>也有人称 DOM 是对 HTML 以及 XML 的标准编程接口</code></p><p><code>xml ==&gt; xhtml ==&gt; html</code></p><p><code>xml 是最早的版本，xml里面的标签是可以自己定义的，被 js 里面的 jeson 取代了，dom 不能改变 css 样式表，但是可以简介改变行间样式的 css</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">说的是改变不了 css 是指改变不了 css 的样式表，但是可以通过间接方式改变 html 的行间样式来改变</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            div.style.widht = <span class="string">&#x27;100px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            div.style.height = <span class="string">&#x27;100px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            div.style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">`1. 找到 html 的方法：如 document。getElementsByTagName(&#x27;div&#x27;)就能把所有的 div 都选出来。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果想要拿到第一个 div ，写成 document.getElementByTagName(&#x27;div&#x27;) 后面就要加一个[0];就可以实现了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. div.style 选出来代表行间样式，选出来的就是 dom 对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. js 不能写 -(号) ，只能用小驼峰方法写。如 background-color 写成 bakgroundColor</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">有 dom 操作以后就变成动态交互可以操作的了（你动一下，他给你一个反应）</span><br><span class="line">div.onclick 是一个交互效果的事件监听</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.style.widht = <span class="string">&#x27;100px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.style.height = <span class="string">&#x27;100px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.sytle.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;green&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.style.widht = <span class="string">&#x27;200px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.style.height = <span class="string">&#x27; 50px;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.style.borderRadius = <span class="string">&#x27;50%&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">实现点击一下改变一下颜色</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.style.widht = 100px;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.style.height = <span class="string">&#x27;100px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div..style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> count = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.onlick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            count ++;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span>(count % <span class="number">2</span> == <span class="number">1</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;green&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">选项卡</span><br><span class="line"><span class="string">`写个选项卡，点第一个按钮出现第一对应的信息，点第二个按钮，第一个消失，第二个显示`</span></span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="selector-class">.content</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">                <span class="attribute">display</span>:none;</span></span></span><br><span class="line"><span class="css"><span class="xml">                <span class="attribute">width</span>:<span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">                <span class="attribute">height</span>:<span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">                <span class="attribute">border</span>:<span class="number">2px</span> solid red;</span></span></span><br><span class="line"><span class="css"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="selector-class">.active</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">                <span class="attribute">background-color</span>:yellow;</span></span></span><br><span class="line"><span class="css"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>222<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>333<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:block&quot;</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> btn = <span class="built_in">document</span>.ElementsByTagName(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> div = <span class="built_in">document</span>.ElementsByClassName(<span class="string">&#x27;content&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btn.length; i ++)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    btn[i].onlick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; btn.length; j ++)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        btn[i].className = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        div[i].style.display = <span class="string">&#x27;none&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">this</span>.className = <span class="string">&#x27;active&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    div[i].style.display = <span class="string">&#x27;block&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;(i))</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">小方块应用</span><br><span class="line"><span class="string">`document.body.appendChild(div); -- 意思是在body里面放一个 div`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`setInterval(function()&#123;&#125;,100) -- 是一个定时器功能，意思是每隔 100毫秒 就执行一次`</span></span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    div.style.width = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">    div.style.height = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">    div.style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">    div.style.position = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">    div.style.left = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    div.style.top = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        div.style.left = <span class="built_in">parseInt</span>(div.style.left) + <span class="number">2</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        div.style.top = <span class="built_in">parseInt</span>(div.style.left) + <span class="number">2</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">`把上面的 setInterval(function()&#123;&#125;) 改成下面样式`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> speed = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        speed += speed / <span class="number">7</span>;</span><br><span class="line">        div.style.left = <span class="built_in">parseInt</span>(div.style.left) + speed + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        div.style.top = <span class="built_in">parseInt</span>(div.style.top) + speed + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">`把上面的 setInterval(function()&#123;&#125;) 改成以下样式，可以让定时器停止`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> speed = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        speed += speed / <span class="number">20</span>;</span><br><span class="line">        div.style.left = <span class="built_in">parseInt</span>(div.style.left) + speed + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        div.style.top = <span class="built_in">parseInt</span>(div.style.top) + speed + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">parseInt</span>(div.style.top) &gt; <span class="number">200</span> &amp;&amp; <span class="built_in">parseInt</span>(div.style.left) &gt; <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">实现键盘控制小方块</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    div.style.widht = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">    div.style.height = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">    div.style.background = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">    div.style.position = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">    div.style.left = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    div.style.top = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(e.which)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">                div.style.top = <span class="built_in">parseInt</span>(div.style.top) - <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 向下</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                div.style.top =  <span class="built_in">parseInt</span>(div.style.top) + <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 向上</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">                div.style.left = <span class="built_in">parseInt</span>(div.style.left - <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 向右</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">                div.style.left = <span class="built_in">parseInt</span>(div.style.left) + <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 向左</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">点击运动加速</span><br><span class="line"></span><br><span class="line"><span class="string">`思路：每一次按下的时候都记录一个新的时间片段，都减去上一个执行的时间 片段，如果时间片段都小于一定的毫秒数的话，我们让一个计数器去++，当连续小 于的时候，就让计数器连续++,如果++到一定数的时候，我们认为是连续按了，再按 就加速了，让每一次按的时候都判断一下,如果时间间隔过大的话，就让计数器重新 归 0`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`按住加速：就是这一次按下与下一次按下的速度间隔时间十分短暂，就认为他加速 了。`</span></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">            width: 100px;height: 50px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">            background:linear-gradient(to left,#999,#000,#432,#fcc);position: fixed;right:0;top:50%;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">            text-align: center;line-height: height;color: #fff;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">            font-size: 25px;font-family: Arial;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            加速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">document</span>.body.appendChild(div);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            div.style.width = <span class="string">&#x27;100px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            div.style.height = <span class="string">&#x27;100px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            div.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            div.style.position = <span class="string">&#x27;absolute&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            div.style.left = <span class="string">&#x27;0&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            div.style.top = <span class="string">&#x27;0&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> speed = <span class="number">5</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            btn. = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                speed++;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">switch</span> (e.which) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">case</span> <span class="number">38</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        div.style.top = <span class="built_in">parseInt</span>(div.style.top) - speed + <span class="string">&#x27;px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">case</span> <span class="number">40</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        div.style.top = <span class="built_in">parseInt</span>(div.style.top) + speed + <span class="string">&#x27;px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">case</span> <span class="number">37</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        div.style.left = <span class="built_in">parseInt</span>(div.style.left) - speed + <span class="string">&#x27;px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">case</span> <span class="number">39</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        div.style.left = <span class="built_in">parseInt</span>(div.style.left) + speed + <span class="string">&#x27;px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">划过出现颜色</span><br><span class="line"><span class="string">`box-sizing:border-box -- 启动了另外一种盒模型（IE盒模型）`</span></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            <span class="attr">margin</span>: <span class="number">0</span>;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li &#123;</span><br><span class="line">            <span class="attr">width</span>: 10px;</span><br><span class="line">            height: 10px;</span><br><span class="line">            <span class="comment">/* border: 1px solid black; */</span></span><br><span class="line">            float: left;</span><br><span class="line">            list-style-type: none;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul &#123;</span><br><span class="line">            <span class="attr">width</span>: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span> <span class="tag">&lt;<span class="name">li</span> <span class="attr">img-data</span>=<span class="string">&#x27;0&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> * 400 <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ul.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> event = e || <span class="built_in">window</span>.evnet;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> target = event.target || event.srcElement;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            target.style.backgroundColor = <span class="string">&#x27;rgb(0,255, &#x27;</span>+ target.getAttribute(<span class="string">&#x27;img-data&#x27;</span>) + <span class="string">&#x27;)&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            target.setAttribute(<span class="string">&#x27;img-data&#x27;</span>,<span class="built_in">parseInt</span>(target.getAttribute(<span class="string">&#x27;img-data&#x27;</span>)) + <span class="number">6</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="DOM-基本操作-①（大部分都是类数组）——-方法类选中操作"><a href="#DOM-基本操作-①（大部分都是类数组）——-方法类选中操作" class="headerlink" title="DOM 基本操作 ①（大部分都是类数组）—— 方法类选中操作"></a>DOM 基本操作 ①（大部分都是类数组）—— 方法类选中操作</h1><p><code>对节点的增删改查</code></p><p>() 号里面都不用写 . 或 #</p><p>查，查看元素节点</p><p>document：代表整个文档（如果给 html 标签上面再套一层标签就是 document）</p><h2 id="（Id）getElementById"><a href="#（Id）getElementById" class="headerlink" title="（Id）getElementById"></a>（Id）getElementById</h2><p><code>元素 id 在 Ie8 以下的浏览器，不区分 id 大小写，而且也返回 name 属性的元素，通过 id 标识我们来选择这个元素，一一对应</code></p><p><code>getElementById</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div name=<span class="string">&#x27;only&#x27;</span>&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementId(<span class="string">&#x27;only&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>除了 id 以外，其余选择出来的都是一组，很少用 id 选择器</p><h2 id="（标签）getElementsByTagName"><a href="#（标签）getElementsByTagName" class="headerlink" title="（标签）getElementsByTagName"></a>（标签）getElementsByTagName</h2><p><code>标签名，这是一个类数组，最主流的用法，经常用</code></p><p><code>getElementsByTagName</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">把页面里面的所有的 div 都选择出来</span><br><span class="line">&lt;div id=<span class="string">&#x27;only&#x27;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsTagName(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 从控制台输出</span></span><br><span class="line"><span class="comment">// &gt;  div</span></span><br><span class="line"><span class="comment">// &lt;· [div#only]</span></span><br><span class="line"><span class="comment">// &gt;  div.push(1)</span></span><br><span class="line"><span class="comment">// &lt;· 报错</span></span><br><span class="line">从 dom 开始，我们所学的一切系统给我们生成数组的东西，基本上都是类数组</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">加个 [<span class="number">0</span>] 就选中了第一个 div，如果不加 <span class="number">0</span> ，那个 div 表示的是一个数组，设置背景颜色就会报错</span><br><span class="line">&lt;div id=<span class="string">&#x27;only&#x27;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="（name）getElementsByName"><a href="#（name）getElementsByName" class="headerlink" title="（name）getElementsByName"></a>（name）getElementsByName</h2><p><code>IE不支持需注意，只有部分标签 name 可生效（表单，表单元素，img，iframe）不是在所有的浏览器都能用——开发一般不用</code></p><p><code>getElementsByName</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;fruit&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;frult&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">把下面所有的 div 都拿出来</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>只拿出第二个 div，加上[1],或在控制台上打 div[1]</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">选择第一个 p 的方式如下</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="（Class）getElementsByClassName"><a href="#（Class）getElementsByClassName" class="headerlink" title="（Class）getElementsByClassName"></a>（Class）getElementsByClassName</h2><p><code>类名 -&gt;缺点： ie8和ie8 以下的 ie 版本中没有，可以多个 class 一起，不是所有浏览器都能用</code></p><p><code>getElementsByClassName</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">只选择 .demo 的 p 标签 写法如下：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> p = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;demo&#x27;</span>)[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">注意哪怕整个文只有一个 demo，也要加 [<span class="number">0</span>],不然选出来的就是一个组</span><br></pre></td></tr></table></figure><h2 id="（CSS）-querySelector-lt-gt-querySelectorAll"><a href="#（CSS）-querySelector-lt-gt-querySelectorAll" class="headerlink" title="（CSS）.querySelector()   &lt;&gt;  .querySelectorAll()"></a>（CSS）.querySelector()   &lt;&gt;  .querySelectorAll()</h2><p><code>.querySelector -- css选择器，只能选择一个，在 ie7 和 ie7 以下的版本中没有</code></p><p><code>.querySelectorAll -- css选择器，全选，选一组，在 ie7 和 ie7 以下的版本中没有</code></p><p><code>.querySelectorAll()和.querySelector()选出来的元素不是实时的（是静态的），所以一般不用，其他的再怎么修改，跟原来的没有关系 id 选择器不能太依赖，一般当顶级框架使用，在 css 中一般用 class 选择器</code></p><p><code>query 是一个词条</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.querySelector()和.querySelectorAll()选出来的元素不是实时的，是静态的，是副本</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>123<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> strong = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div &gt; span strong.demo&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> strong1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div &gt; span strong.demo&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  strong</span></span><br><span class="line"><span class="comment">// &lt;· &lt;strong class=&#x27;demo&#x27;&gt;123&lt;strong&gt;</span></span><br><span class="line"><span class="comment">// &gt;  strong1</span></span><br><span class="line"><span class="comment">// &lt;· [strong.demo]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`下面的都是实时的`</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> demo = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;demo&#x27;</span>)[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">document</span>.body.appendChild(newDiv);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div</span></span><br><span class="line"><span class="comment">// &lt;· [div,div.demo,div,div]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.querySelectorAll()选中了所有的 div，但是实时操作不能实时反馈</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">        var div = document.querySelectorAll(&#x27;div&#x27;);</span></span><br><span class="line"><span class="xml">        var demo = document.getElementsByClassName(&#x27;demo&#x27;)[0];</span></span><br><span class="line"><span class="xml">        var newDiv = document.createElement(&#x27;div);</span></span><br><span class="line"><span class="xml">        document.body.appendChild(newDiv);</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="DOM基本操作-②-—-非方法类的节点操作"><a href="#DOM基本操作-②-—-非方法类的节点操作" class="headerlink" title="DOM基本操作 ② — 非方法类的节点操作"></a>DOM基本操作 ② — 非方法类的节点操作</h1><h2 id="遍历节点树"><a href="#遍历节点树" class="headerlink" title="遍历节点树"></a>遍历节点树</h2><p><code>遍历节点树：（灵活，兼容好）--- 关系类的选择</code></p><p>parentNode ——&gt; 父节点（最顶端的 parentNode 为 #document）</p><p>childNodes ——&gt; 子节点们（直接的节点数）节点包括文本节点，属性节点</p><p>firstChild ——&gt; 第一个子节点</p><p>lastChild ——&gt; 最后一个子节点</p><p>nextSibling ——&gt; 后一个兄弟节点</p><p>previousSibling ——&gt; 前一个兄弟节点</p><h3 id="parentNode-–-gt-父节点"><a href="#parentNode-–-gt-父节点" class="headerlink" title="parentNode –&gt; 父节点"></a>parentNode –&gt; 父节点</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  strong.parentNode</span></span><br><span class="line"><span class="comment">// &lt;· &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &gt;  strong.parentNode.parentNode</span></span><br><span class="line"><span class="comment">// &lt;· &lt;body&gt;&lt;/body&gt;</span></span><br><span class="line"><span class="comment">// &gt;  strong.parentNode.parentNode.parentNode</span></span><br><span class="line"><span class="comment">// &lt;· &lt;html lang=&#x27;en&#x27;&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="comment">// &gt;  strong.parentNode.parentNode.parentNode.parentNode</span></span><br><span class="line"><span class="comment">// &lt;· #document</span></span><br><span class="line"><span class="comment">// &gt;  strong.parentNode.parentNode.parentNode.parentNode.parentNode</span></span><br><span class="line"><span class="comment">// &lt;· null</span></span><br></pre></td></tr></table></figure><h3 id="childNodes-–-gt-子节点"><a href="#childNodes-–-gt-子节点" class="headerlink" title="childNodes –&gt; 子节点"></a>childNodes –&gt; 子节点</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes</span></span><br><span class="line"><span class="comment">// &lt;· [text,strong,text,span,text,em,text]</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes.length</span></span><br><span class="line"><span class="comment">// &lt;· 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释：</span></span><br><span class="line">    <span class="comment">// 为什么是7个节点？</span></span><br><span class="line">    第一个节点是 &lt;div&gt; 后面的文本节点（空格回车），第二个节点是元素节点 &lt;strong&gt;&lt;<span class="regexp">/span&gt;1&lt;/</span>span&gt;&lt;<span class="regexp">/strong&gt;,第三个节点是跟着的文本节点（空格回车），第四个节点是 &lt;span&gt;&lt;/</span>span&gt; 第五个是跟着的文本节点（空格回车）第六个是 &lt;em&gt;&lt;/em&gt;，第七个是跟着的文本节点（空格回车）</span><br></pre></td></tr></table></figure><h3 id="firstChild-amp-lastChild-–-gt-第一个子节点，最后一个子节点"><a href="#firstChild-amp-lastChild-–-gt-第一个子节点，最后一个子节点" class="headerlink" title="firstChild &amp; lastChild –&gt; 第一个子节点，最后一个子节点"></a>firstChild &amp; lastChild –&gt; 第一个子节点，最后一个子节点</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This si comment --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sctipt</span>&gt;</span></span></span><br><span class="line"><span class="xml">    var div = document.getElementsByTagName(&#x27;div&#x27;)[0];</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sctipt</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.firstChild</span></span><br><span class="line"><span class="comment">// &lt;· &quot;123&quot;</span></span><br><span class="line"><span class="comment">// &gt;  div.lastChild</span></span><br><span class="line"><span class="comment">// &lt;· #text</span></span><br></pre></td></tr></table></figure><h3 id="previousSibling-amp-nextSibling-–-gt-前一个兄弟节点，后一个兄弟节点"><a href="#previousSibling-amp-nextSibling-–-gt-前一个兄弟节点，后一个兄弟节点" class="headerlink" title="previousSibling &amp; nextSibling –&gt; 前一个兄弟节点，后一个兄弟节点"></a>previousSibling &amp; nextSibling –&gt; 前一个兄弟节点，后一个兄弟节点</h3><p><code>previousSibling   前一个兄弟节点</code></p><p><code>nextSibling  后一个兄弟节点</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> strong = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;strong&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">&lt;/sctipt&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  strong.nextSibling</span></span><br><span class="line"><span class="comment">// &lt;· #text</span></span><br><span class="line"><span class="comment">// &gt;  strong.nextSibling.nextSibling</span></span><br><span class="line"><span class="comment">// &lt;· &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">// &gt;  strong.nextSibling.nextSibling.nextSibling</span></span><br><span class="line"><span class="comment">// &lt;· #text</span></span><br><span class="line"><span class="comment">// &gt;  strong.nextSibling.nextSibling.nextSibling.nextSibling</span></span><br><span class="line"><span class="comment">// &lt;· null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  strong.previousSibling</span></span><br><span class="line"><span class="comment">// &lt;· #text</span></span><br><span class="line"><span class="comment">// &gt;  strong.previousSibling.previousSibling</span></span><br><span class="line"><span class="comment">// &lt;· comment</span></span><br><span class="line"><span class="comment">// &gt;  strong.previousSibling.previousSibling.previousSibling</span></span><br><span class="line"><span class="comment">// &lt;· #text</span></span><br></pre></td></tr></table></figure><h2 id="基于元素节点树的遍历-–-不包含文本节点"><a href="#基于元素节点树的遍历-–-不包含文本节点" class="headerlink" title="基于元素节点树的遍历 – 不包含文本节点"></a>基于元素节点树的遍历 – 不包含文本节点</h2><p>parentElement – 遍历元素父节点</p><p>children – 遍历元素子节点</p><p>childElementCount – 查看元素子节点的个数</p><p>firstElementChild – 第一个元素子节点</p><p>lastElementChild – 最后一个元素子节点</p><p>previousElementSibling – 前一个兄弟节点</p><p>nextElementSibling – 后一个兄弟节点</p><p><code>除 children 外，其余的 ie9 及以下不兼容</code></p><h3 id="parentElement-–-gt-返回当前元素的父元素节点-–-IE不兼容"><a href="#parentElement-–-gt-返回当前元素的父元素节点-–-IE不兼容" class="headerlink" title="parentElement –&gt; 返回当前元素的父元素节点 – IE不兼容"></a>parentElement –&gt; 返回当前元素的父元素节点 – IE不兼容</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;sctipt&gt;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.parentElement</span></span><br><span class="line"><span class="comment">// &lt;· &lt;body&gt;&lt;/body&gt;</span></span><br><span class="line"><span class="comment">// &gt;  div.parentElement.parentElement</span></span><br><span class="line"><span class="comment">// &lt;· &lt;html lang=&#x27;en&#x27;&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="comment">// &gt;  div.parentElement.parentElement.parentElement</span></span><br><span class="line"><span class="comment">// &lt;· null</span></span><br></pre></td></tr></table></figure><h3 id="children-–-gt-只返回当前元素的元素子节点"><a href="#children-–-gt-只返回当前元素的元素子节点" class="headerlink" title="children –&gt; 只返回当前元素的元素子节点"></a>children –&gt; 只返回当前元素的元素子节点</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.children</span></span><br><span class="line"><span class="comment">// &lt;· [strong,span]</span></span><br></pre></td></tr></table></figure><h3 id="childElementCount-–-当前元素节点的子元素节点个数"><a href="#childElementCount-–-当前元素节点的子元素节点个数" class="headerlink" title="childElementCount – 当前元素节点的子元素节点个数"></a>childElementCount – 当前元素节点的子元素节点个数</h3><p><code>childElementCount === children.length  当前元素节点的子元素节点个数（IE 不兼容）———— 基本不用，因为与 length 相等</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.childElementCount</span></span><br><span class="line"><span class="comment">// &lt;· 2</span></span><br><span class="line"><span class="comment">// &gt;  div.children.length</span></span><br><span class="line"><span class="comment">// &lt;· 2</span></span><br></pre></td></tr></table></figure><h3 id="firstElementChild-amp-lastElementChild-–-gt-第一个元素节点，最后一个元素节点"><a href="#firstElementChild-amp-lastElementChild-–-gt-第一个元素节点，最后一个元素节点" class="headerlink" title="firstElementChild &amp; lastElementChild –&gt; 第一个元素节点，最后一个元素节点"></a>firstElementChild &amp; lastElementChild –&gt; 第一个元素节点，最后一个元素节点</h3><p><code>firstElementChild --&gt; 返回的是第一个元素节点（IE不兼容）</code></p><p><code>lastElementChild --&gt; 返回的是最后一个元素节点（IE不兼容）</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.firstElementChild</span></span><br><span class="line"><span class="comment">// &lt;· &lt;strong&gt;&lt;/strong&gt;</span></span><br><span class="line"><span class="comment">// &gt;  div.lastElementChild</span></span><br><span class="line"><span class="comment">// &lt;· &lt;span&gt;&lt;/span&gt;</span></span><br></pre></td></tr></table></figure><h3 id="previousElementSibling-amp-nextElementSibling-–-gt-前一个兄弟元素节点，后一个兄弟元素"><a href="#previousElementSibling-amp-nextElementSibling-–-gt-前一个兄弟元素节点，后一个兄弟元素" class="headerlink" title="previousElementSibling &amp; nextElementSibling –&gt; 前一个兄弟元素节点，后一个兄弟元素"></a>previousElementSibling &amp; nextElementSibling –&gt; 前一个兄弟元素节点，后一个兄弟元素</h3><p><code>previousElementSibling --&gt; 前一个兄弟元素节点</code></p><p><code>nextElementSibling --&gt; 后一个兄弟元素</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This si comment --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> strong = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;strong&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  strong.nextElementSibling</span></span><br><span class="line"><span class="comment">// &lt;· &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">// &gt;  strong.nexElementSibling.nextElementSibling</span></span><br><span class="line"><span class="comment">// &lt;· &lt;em&gt;&lt;/em&gt;</span></span><br><span class="line"><span class="comment">// &gt;  strong.nextElementSibling.nextElementSibling.nextElementSibling</span></span><br><span class="line"><span class="comment">// &lt;· &lt;i&gt;&lt;/i&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  strong.previousElementSibling</span></span><br><span class="line"><span class="comment">// &lt;· null</span></span><br></pre></td></tr></table></figure><p><code>除 children 外，parentElement、node.childElementCount、firstElementChild、lastElementChild、nextElementSibling、previousElementSibling 在 ie9 及以下不兼容</code></p><p><code>真正常用的就是 children，兼容性好</code></p><h2 id="每一个节点的四个属性"><a href="#每一个节点的四个属性" class="headerlink" title="每一个节点的四个属性"></a>每一个节点的四个属性</h2><p>nodeName – 节点标签名</p><p>nodeValue – 文本注释节点</p><p>nodeType – 查看节点类型</p><p>attributes – 属性节点</p><p>hasChildNodes – 判断有没有子节点</p><h3 id="nodeName-–-节点标签名"><a href="#nodeName-–-节点标签名" class="headerlink" title="nodeName – 节点标签名"></a>nodeName – 节点标签名</h3><p><code>元素的标签名，以大写形式表示，只读，不可写</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This si comment --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  从控制器输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes[1].nodeName</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;#comment&#x27;</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes[3].nodeName = &#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">// &gt;  divchildNodes[3].nodeName</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;strong&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="nodeValue-–-文本-注释节点"><a href="#nodeValue-–-文本-注释节点" class="headerlink" title="nodeValue – 文本/注释节点"></a>nodeValue – 文本/注释节点</h3><p><code>Text 文本节点或 Comment 注释节点的文本内容，可读写</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes[0].nideValue</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;123&#x27;</span></span><br><span class="line"><span class="comment">// &gt;  div.chidlNodes[0].nodeValue = 234</span></span><br><span class="line"><span class="comment">// &lt;· 234</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes[0].nodeValue</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;234&#x27;</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes[0]</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;234&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;  div.childNodes[1].nodeValue</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;This si comment&#x27;</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes[1].nodeValue = &#x27;That si comment&#x27;</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;That si comment&#x27;</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes[1]</span></span><br><span class="line"><span class="comment">// &lt;· &gt;!-- That is comment --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="nodeType（最有用）-–-节点类型"><a href="#nodeType（最有用）-–-节点类型" class="headerlink" title="nodeType（最有用） – 节点类型"></a>nodeType（最有用） – 节点类型</h3><p><code>该节点的类型，只读返回这个 div 的所有的元素节点</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数字是调用 nodeType 返回的数字，代表着每一个节点的类型</span><br><span class="line"></span><br><span class="line">元素节点 —— <span class="number">1</span></span><br><span class="line">属性节点 —— <span class="number">2</span></span><br><span class="line">文本节点 —— <span class="number">3</span></span><br><span class="line">注释节点 —— <span class="number">8</span></span><br><span class="line"><span class="built_in">document</span> —— <span class="number">9</span></span><br><span class="line">DocumentFragment —— <span class="number">11</span></span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes[0].nodeType</span></span><br><span class="line"><span class="comment">// &lt;· 3(文本节点)</span></span><br><span class="line"><span class="comment">// &gt;  div.childNodes[3].nodeType</span></span><br><span class="line"><span class="comment">// &lt;· 1(元素节点)</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">把 div 下面所有的直接子元素节点挑出来，放在数组里面返回，不能用 children</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="number">123</span></span><br><span class="line">    &lt;!-- This is comment --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">retElementChild</span>(<span class="params">node</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// no children</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> temp = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">length</span> : <span class="number">0</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">push</span> : <span class="built_in">Array</span>.prototype.push,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">splice</span> : <span class="built_in">Array</span>.prototype.splice</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            child = node.childNodes,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            len = child.length;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len;i ++)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span>(child[i].node.length === <span class="number">1</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                temp.push(child[i]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> temp;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(retElementChild(div));</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// [strong，span，em，i，b]</span></span><br></pre></td></tr></table></figure><h3 id="attributes-–-属性节点"><a href="#attributes-–-属性节点" class="headerlink" title="attributes – 属性节点"></a>attributes – 属性节点</h3><p><code>Element 节点的属性集合</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;only&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;demo&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt;  div.attributes</span></span><br><span class="line"><span class="comment">// &lt;· NamedNodeMap&#123;0: id,1: class,length: 2&#125;</span></span><br><span class="line"><span class="comment">// &gt;  div.attributes[0]</span></span><br><span class="line"><span class="comment">// &lt;· id=&#x27;only&#x27;</span></span><br><span class="line"><span class="comment">// &gt;  div.attributes[0].nodeType</span></span><br><span class="line"><span class="comment">// &lt;· 2</span></span><br><span class="line"><span class="comment">// &gt;  div.attributes[0].value</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;only&#x27;</span></span><br><span class="line"><span class="comment">// &gt;  div.attributes[0].name</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;id&#x27;</span></span><br><span class="line"><span class="comment">// &gt;  div.attributes[0].value = &#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">// &lt;· &#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">// &gt;  div</span></span><br><span class="line"><span class="comment">// &lt;· &lt;div id=&#x27;abc&#x27; class=&#x27;demo&#x27;&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>属性名不能改，属性值可以，但是我们一般不会用这种方法</p><p>我们一般用 getAttribute 和 setAttribute 去取</p><h3 id="hasChildNodes-–-判断有没有子节点"><a href="#hasChildNodes-–-判断有没有子节点" class="headerlink" title="hasChildNodes – 判断有没有子节点"></a>hasChildNodes – 判断有没有子节点</h3><p><code>节点的一个方法 Node.hasChildNodes(); -- 他有没有子节点，返回值是 true 或 false</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;only&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line"><span class="comment">// div.hasChildNodes()</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;only&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">    &lt;!-- <span class="built_in">this</span> is comment --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line"><span class="comment">// div.hasChildNodes()</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;only&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line"><span class="comment">// div.hasChildNodes()</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">当这种情况下是 <span class="literal">false</span> （没有空格，没有回车）</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;only&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;demo&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line"><span class="comment">// div.hasChildNodes()</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">属性的节点是 div 上面的，不是 div 里面的</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/span&gt;&lt;/</span>span&gt;</span><br><span class="line">    &lt;!-- thsi is comment --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="DOM接口-结构树"><a href="#DOM接口-结构树" class="headerlink" title="DOM接口/结构树"></a>DOM接口/结构树</h1><p><code>dom 结构树代表的是一系列继承关系</code></p><p><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111120958101.png" alt="DOM结构树"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`Document 和 document的关系`</span></span><br><span class="line"></span><br><span class="line">&gt;  Document</span><br><span class="line">&lt;· <span class="function"><span class="keyword">function</span> <span class="title">Document</span>(<span class="params"></span>)</span>&#123;[native code]&#125;</span><br><span class="line"></span><br><span class="line">&gt;  Document.prototype.abc = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">&lt;· <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"></span><br><span class="line">&gt;  <span class="built_in">document</span>.abc</span><br><span class="line">&lt;· <span class="string">&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure><p><code>document --&gt; HTMLDocument.prototype --&gt; Document.prototype</code></p><p>document 继承自 HTMLDocument.prototype</p><p>HTMLDocument.prototype 继承自 Document.prototype</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">圆形是不是一个对象？</span><br><span class="line"></span><br><span class="line">HTMLDocument.prototype = &#123;</span><br><span class="line">    <span class="attr">__proto__</span> : Document.prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">    <span class="built_in">document</span> --&gt; HTMLDocument.prototype --&gt; Document.prototype</span><br><span class="line"></span><br><span class="line"><span class="comment">// console输出：</span></span><br><span class="line">    <span class="comment">// &gt;  HTMLDocument.prototype.bcd = &#x27;123&#x27;</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;123&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  document</span></span><br><span class="line">    <span class="comment">// &lt;· #document</span></span><br><span class="line">    <span class="comment">// &gt;  document..bcd</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  Document.prototype.bcd = &#x27;123&#x27;</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;123&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  HTMLDocument.prototype.bcd = &#x27;234&#x27;</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;234&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  document.bcd</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;234&#x27;</span></span><br></pre></td></tr></table></figure><p>DOM 结构树中，Node也是构造函数，comment 是注释</p><p>HTMLDocument 和 HTMLElement 实际上并列了对应的 XML，但是因为不用了 XML 就省略了，HTMLHeadElement 就是 head 标签，其余类推</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">    HTMLBodyElement.protootype.abc=<span class="string">&#x27;demo&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// console输出</span></span><br><span class="line">    <span class="comment">// &gt;  body.abc</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;demo&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  head..bcd</span></span><br><span class="line">    <span class="comment">// &lt;· undefiend</span></span><br><span class="line"></span><br><span class="line"><span class="string">`如果使用 HTMLElement.prototype.abc=&quot;demo&quot;; 定义，则body和head都可以使用`</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">看一看一层一层返回的是什么东西</span><br><span class="line"></span><br><span class="line"><span class="comment">// console输出</span></span><br><span class="line">    <span class="comment">// &gt;  document.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· HTMLDocument&#123;Symbol&#123;symbol.toStringTag&#125;:&#x27;HTMLDocument&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.__proto__.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· Document&#123;Symbol&#123;Symbol.toStringTag&#125;:&#x27;Document&#x27;,Symbol&#123;symbol.unscopables&#125;:Object&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.__proto__.__proto__.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· Node &#123;ELEMENT_NODE: 1, ATTRIBUTE_NODE: 2, TEXT_NODE: 3, CDATA_SECTION_NODE: 4, ENTITY_REFERENCE_NODE: 5, …&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.__proto__.__proto__.__proto__.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· EventTarget &#123;Symbol(Symbol.toStringTag): &quot;EventTarget&quot;, : ƒ, removeEventListener: ƒ, dispatchEvent: ƒ, constructor: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.__proto__.__proto__.__proto__.__proto__.__proto__</span></span><br><span class="line">    <span class="comment">// &lt;· Object&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.body</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;body&gt;…&lt;/body&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.body.toString()</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;[object HTMLBodyElement]&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>思路：</strong> 绘制<code>dom</code>树，符合深度优先（纵向）原则，比如先看<code>head → title → meta → body → div → strong → span</code></p><p><code>dom</code>树是节点解析，<code>dom</code>树解析完毕代表<code>dom</code>数所有的节点解析完毕，不代表加载<br>（下载完毕）完毕。如看到<code>img</code>标签就放到<code>dom</code>树上，然后同时下载。</p><p><code>dom</code>树形成完了以后，就等<code>css</code>树形成【<code>cssTree</code>也是深度优先原则。】。</p><p><code>domTree + cssTree = randerTree，randerTree</code>形成以后才，渲染引擎才会绘制页面，<br><code>domTree</code>改变，<code>randerTree</code>也会改变，会重排，影响效率,要尽量避免重排。</p><p><code>randerTree</code>触发重排<code>（reflow）</code>的情况：<code>dom</code>节点的删除，添加，<code>dom</code>节点的宽高变<br>化，位置变化，<code>display none ==&gt; block，offsetWidth，offsetLeft</code></p><p><code>repaint</code>重绘：效率也比较低，效率影响较小。触发情况：改颜色，图片</p><h1 id="DOM-基本操作-定义方法-③"><a href="#DOM-基本操作-定义方法-③" class="headerlink" title="DOM 基本操作 - 定义方法 ③"></a>DOM 基本操作 - 定义方法 ③</h1><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><p>一、<code>getElementById</code>方法定义在<code>Document.prototype</code>上，即<code>Element</code>节点上不能使</p><p>二、<code>getElementsByName</code>定义在<code>HTMLDocument.prototype</code>上，既非<code>html</code>中的<code>document</code>以外不能使用<code>（xml document,Element）</code></p><p>三、<code>getElementsByTagName</code>方法定义在<code>Document.prototype</code>和<code>Element.prototype</code>上</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:选取 div 里面的 span</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;dib&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> span = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  span</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;span&gt;1&lt;/span&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">`开发中，经常利用先选择的父级，在他父级里面再次选什么元素来定位一个元素`</span></span><br></pre></td></tr></table></figure><p><code>var div = document.getElementsByTagName(&#39;*&#39;);  选择所有</code></p><p>四、<code>HTMLDocument.prototype</code>定义了一些常用的属性，<code>body、head</code>分别指代<code>HTML</code>文档中的<code>&lt;body&gt;、&lt;head&gt;</code>标签</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">    <span class="comment">// &gt;  document.body</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;body&gt;&lt;/body&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  document.head</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;head&gt;&lt;/head&gt;</span></span><br></pre></td></tr></table></figure><p>五、<code>Document.prototype</code>定义了<code>documentElement</code>属性，指代文档的根元素，在<code>HTML</code>文档中，他总是指代<code>&lt;html&gt;</code>元素</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">    <span class="comment">// &gt;  document.documentElement</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;html lang=&#x27;en&#x27;&gt;</span></span><br><span class="line">    <span class="comment">//         &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line">    <span class="comment">//         &lt;body&gt;&lt;/body&gt;</span></span><br><span class="line">    <span class="comment">//    &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>六、<code>getElementsByClassName、querySelectorAll、querySelector</code>在<code>Document,Element</code>类中均有定义<code>div.getElementsByClassName(&#39;&#39;)</code></p><h2 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h2><h3 id="一、遍历元素节点数，要求不用-children-属性（在原型链上编程）"><a href="#一、遍历元素节点数，要求不用-children-属性（在原型链上编程）" class="headerlink" title="一、遍历元素节点数，要求不用 children 属性（在原型链上编程）"></a>一、遍历元素节点数，要求不用 children 属性（在原型链上编程）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">低级方法，给一个父节点，把子节点全部遍历出来，并打印</span><br><span class="line"></span><br><span class="line">高级方法：打印树形结构 → 分层打印出来 先看 div 再看子元素节点， 再挨个判断</span><br></pre></td></tr></table></figure><h3 id="二、封装函数，返回元素-e-的第-n-层祖先元素"><a href="#二、封装函数，返回元素-e-的第-n-层祖先元素" class="headerlink" title="二、封装函数，返回元素 e 的第 n 层祖先元素"></a>二、封装函数，返回元素 e 的第 n 层祖先元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">retParent</span>(<span class="params">elem,n</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">while</span>(elem &amp; n)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            elem = elem.parentElement;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            n--;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> elem;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> i = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;i&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出</span></span><br><span class="line">    &gt;  retParent(i,<span class="number">1</span>)</span><br><span class="line">    &lt;· &lt;span&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &gt;  retParent(i,<span class="number">2</span>)</span><br><span class="line">    &lt;· &lt;strong&gt;&lt;/strong&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、封装函数，返回元素-e-的第-n-个兄弟节点，n为证，返回后面的兄弟节点，n-为负，返回前面的，n-为-0，返回自己"><a href="#三、封装函数，返回元素-e-的第-n-个兄弟节点，n为证，返回后面的兄弟节点，n-为负，返回前面的，n-为-0，返回自己" class="headerlink" title="三、封装函数，返回元素 e 的第 n 个兄弟节点，n为证，返回后面的兄弟节点，n 为负，返回前面的，n 为 0，返回自己"></a>三、封装函数，返回元素 e 的第 n 个兄弟节点，n为证，返回后面的兄弟节点，n 为负，返回前面的，n 为 0，返回自己</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    &lt;!-- <span class="built_in">this</span> is comment --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">address</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">retSibling</span>(<span class="params">e,n</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">while</span>(e &amp;&amp; n)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            e = e.nextElementSibling;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            n--;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            e = e.previousElementSibling;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            n++;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> e;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> strong = <span class="built_in">document</span>.getElmentsByTagName(<span class="string">&#x27;strong&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,1)</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;i&gt;​&lt;/i&gt;​</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,2)</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;address&gt;​&lt;/address&gt;​</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,3)</span></span><br><span class="line">    <span class="comment">// &lt;· null</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,1000)</span></span><br><span class="line">    <span class="comment">// &lt;· null</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,-1)</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;p&gt;​&lt;/p&gt;​</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,-2)</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;span&gt;​&lt;/span&gt;​</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,-3)</span></span><br><span class="line">    <span class="comment">// &lt;· null</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,-300)</span></span><br><span class="line">    <span class="comment">// &lt;· null</span></span><br><span class="line">    <span class="comment">// &gt;  retSibling(strong,0)</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;strong&gt;​&lt;/strong&gt;​</span></span><br></pre></td></tr></table></figure><p>上面的 ie9 不兼容，考虑到兼容性，可以按照下面思路写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retSibling</span>(<span class="params">e,n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(e &amp;&amp; n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(e.nextElementSibling)&#123;</span><br><span class="line">                e = e.nextElementSibling;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(e = e.nextSibling; e &amp;&amp; e.nodeType !== <span class="number">1</span>; e = e.nextSibling);</span><br><span class="line">            &#125;</span><br><span class="line">            n --;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.previousElementSibling) &#123;</span><br><span class="line">                e = e.previousElementSibling;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (e = e.previousSibling; e &amp;&amp; e.nodeType !== <span class="number">1</span>;e = e.previousSibling);</span><br><span class="line">            &#125;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`如果 for 循环执行体是空的，那么可以不写&#123;&#125;`</span></span><br></pre></td></tr></table></figure><h3 id="四、编辑函数，封装-children功能，解决以前部分浏览器的兼容问题"><a href="#四、编辑函数，封装-children功能，解决以前部分浏览器的兼容问题" class="headerlink" title="四、编辑函数，封装 children功能，解决以前部分浏览器的兼容问题"></a>四、编辑函数，封装 children功能，解决以前部分浏览器的兼容问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">      abc</span><br><span class="line">      &lt;!-- <span class="built_in">this</span> is comment --&gt;</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Element.prototype.myChildren = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> child = <span class="built_in">this</span>.childNodes;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> len = child.length;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> arr = [];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len;i ++)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span>(child[i].nodeType == <span class="number">1</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            arr.push(child[i]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> arr;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="五、自己封装-hasChildren-方法，不可以用children属性"><a href="#五、自己封装-hasChildren-方法，不可以用children属性" class="headerlink" title="五、自己封装 hasChildren()方法，不可以用children属性"></a>五、自己封装 hasChildren()方法，不可以用children属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;i&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    Element.prototype.myHasChildNodes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> child = <span class="built_in">this</span>.childNodes;</span><br><span class="line">        <span class="keyword">var</span> len = child.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(child[i].nodeType == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flase;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="DOM-基本操作-增-插-删-替④"><a href="#DOM-基本操作-增-插-删-替④" class="headerlink" title="DOM 基本操作 - 增|插|删|替④"></a>DOM 基本操作 - 增|插|删|替④</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h3 id="document-createElement-—-增加或创建元素节点（标签）-–-常用"><a href="#document-createElement-—-增加或创建元素节点（标签）-–-常用" class="headerlink" title="document.createElement(); — 增加或创建元素节点（标签） – 常用"></a>document.createElement(); — 增加或创建元素节点（标签） – 常用</h3><h3 id="document-createTextNode-—-创建文本节点"><a href="#document-createTextNode-—-创建文本节点" class="headerlink" title="document.createTextNode(); — 创建文本节点"></a>document.createTextNode(); — 创建文本节点</h3><h3 id="document-createComment-—-创建注释节点"><a href="#document-createComment-—-创建注释节点" class="headerlink" title="document.createComment(); — 创建注释节点"></a>document.createComment(); — 创建注释节点</h3><h3 id="document-createDocumentFragment-—-创建文档碎片节点"><a href="#document-createDocumentFragment-—-创建文档碎片节点" class="headerlink" title="document.createDocumentFragment(); — 创建文档碎片节点"></a>document.createDocumentFragment(); — 创建文档碎片节点</h3><h2 id="插-—-剪切操作"><a href="#插-—-剪切操作" class="headerlink" title="插 — 剪切操作"></a>插 — 剪切操作</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.appendChild()可以理解为.push</span><br><span class="line"></span><br><span class="line">insertBefore(a,b)一定是先insert a，before b，就是拿 a 插入到 b 的前面</span><br><span class="line"></span><br><span class="line">insertAfter(a,b)就是拿 a 插入到 b 的后面</span><br></pre></td></tr></table></figure><h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild()"></a>appendChild()</h3><p><code>.appendChild()</code>可以理解为<code>.push</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：把 span 插入到 div 里面</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> span = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.appendChild(span);  <span class="comment">// -- 把 span 插入到 div 里面</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">把目标节点内部的节点上顺序逆序</span><br><span class="line">    Element.prototype.invertedChild = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> child = <span class="built_in">this</span>.children,</span><br><span class="line">            len = child.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = len - <span class="number">2</span>;i &gt;= <span class="number">0</span>;i --)&#123;</span><br><span class="line">          <span class="built_in">this</span>.appendChild(child[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    div.invertedChild();</span><br></pre></td></tr></table></figure><h3 id="insertBefore-a-b"><a href="#insertBefore-a-b" class="headerlink" title="insertBefore(a,b)"></a>insertBefore(a,b)</h3><p><code>insertBefore(a,b)</code>一定是先<code>insert a，before b</code>，就是拿 a 插入到 b 的前面</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：把 strong 插入到 span 的前面</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> span = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> strong = <span class="built_in">document</span>.createElement(<span class="string">&#x27;strong&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.insertBefore(strong,span);  <span class="comment">// -- 把 strong 插入到 span 前面</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="insertAfter-a-b"><a href="#insertAfter-a-b" class="headerlink" title="insertAfter(a,b)"></a>insertAfter(a,b)</h3><p><code>insertAfter(a,b)</code>一定是先<code>insert a，before b</code>，就是拿 a 插到 b 的后面</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`insertAfter 系统没有定义，所以是自己利用 insertBefore 来写的一个相反的方法`</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Element.prototype.insertAfter(targetNode,afterNode)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> beforeNode = afterNode.nextElementSibling;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span>(beforeNode == <span class="literal">null</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.appendChild(targetNode);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.insertBefore(targetNode,beforeNode);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> b = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;b&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> span = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><h3 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild()"></a>removeChild()</h3><p>就是被剪切出来了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> span = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> strong = <span class="built_in">document</span>.createElement(<span class="string">&#x27;strong&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> i = <span class="built_in">document</span>.create(<span class="string">&#x27;i&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.insertBefore(strong,span);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.insertBefore(i,strong);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line">    <span class="comment">// &gt;  div.removeChild(i);</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;i&gt;&lt;/i&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  var ii = div.removeChild(i);</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  ii</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;i&gt;&lt;/i&gt;</span></span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> span = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> strong = <span class="built_in">document</span>.createElement(<span class="string">&#x27;strong&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> i = <span class="built_in">document</span>.create(<span class="string">&#x27;i&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.insertBefore(strong,span);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.insertBefore(i,strong);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line">    <span class="comment">// &gt;  i.remove()</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  strong.remove();</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  span.remove()</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br></pre></td></tr></table></figure><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><h3 id="replaceChild-new-origin"><a href="#replaceChild-new-origin" class="headerlink" title="replaceChild(new,origin)"></a>replaceChild(new,origin)</h3><p><code>replaceChild(new,origin); 用新的 new 去置换旧的 origin</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> span = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> strong = <span class="built_in">document</span>.createElement(<span class="string">&#x27;strong&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> i = <span class="built_in">document</span>.create(<span class="string">&#x27;i&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.insertBefore(strong,span);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.insertBefore(i,strong);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;div&gt;</span></span><br><span class="line">    <span class="comment">//       &lt;i&gt;&lt;/i&gt;</span></span><br><span class="line">    <span class="comment">//       &lt;strong&gt;&lt;/strong&gt;</span></span><br><span class="line">    <span class="comment">//       &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line">    <span class="comment">//    &lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div.replaceChild(p,strong)</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;strong&gt;&lt;/strong&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;div&gt;</span></span><br><span class="line">    <span class="comment">//       &lt;i&gt;&lt;/i&gt;</span></span><br><span class="line">    <span class="comment">//       &lt;p&gt;&lt;/p&gt;</span></span><br><span class="line">    <span class="comment">//       &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line">    <span class="comment">//    &lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h1 id="DOM-基础操作-Element节点的方法-属性⑤"><a href="#DOM-基础操作-Element节点的方法-属性⑤" class="headerlink" title="DOM 基础操作 - Element节点的方法|属性⑤"></a>DOM 基础操作 - Element节点的方法|属性⑤</h1><h2 id="Element-节点的一些属性"><a href="#Element-节点的一些属性" class="headerlink" title="Element 节点的一些属性"></a>Element 节点的一些属性</h2><h3 id="innerHTML-innerText"><a href="#innerHTML-innerText" class="headerlink" title="innerHTML \ innerText"></a>innerHTML \ innerText</h3><p><code>innerHTML</code>  –&gt; 给 HTML文档赋值  –  可取，可写，可赋值，赋值之后覆盖原来的内容</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">取：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>234<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line">    <span class="comment">// &gt;  div.innerHTML</span></span><br><span class="line">    <span class="comment">// &lt;· &quot;</span></span><br><span class="line">    <span class="comment">//         &lt;span&gt;123&lt;/span&gt;</span></span><br><span class="line">    <span class="comment">//         &lt;strong&gt;234&lt;/strong&gt;</span></span><br><span class="line">    <span class="comment">//     &quot;</span></span><br><span class="line"></span><br><span class="line">写：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>234<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line">    <span class="comment">// &gt;  div.innerHTML = &#x27;123&#x27;</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;123&#x27;</span></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;123&#x27; -- 覆盖</span></span><br></pre></td></tr></table></figure><p><code>innerText</code>  –&gt; 给HTML文档添加文本  –  可取，可赋值（老版本火狐不兼容）/ textContent（火狐使用这个，老版本 IE 不好使）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>234<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;div&gt;&lt;span&gt;234&lt;/span&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div.innerText = 123</span></span><br><span class="line">    <span class="comment">// &lt;· 123</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;div&gt;123&lt;/div&gt;  --  赋值要谨慎，因为赋值会把原来的文本覆盖</span></span><br></pre></td></tr></table></figure><h2 id="Element-节点的一些方法"><a href="#Element-节点的一些方法" class="headerlink" title="Element 节点的一些方法"></a>Element 节点的一些方法</h2><h3 id="setAttribute-getAttribute"><a href="#setAttribute-getAttribute" class="headerlink" title="setAttribute \ getAttribute"></a>setAttribute \ getAttribute</h3><p><code>setAttribute</code> 设置，往元素里面写值（class，id）等等,比如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">demo.setAttribute(<span class="string">&#x27;属性名&#x27;</span>,<span class="string">&#x27;属性值&#x27;</span>); <span class="comment">// 我们可以自己添加属性和属性值</span></span><br></pre></td></tr></table></figure><p><code>getAttribute</code> 取元素的值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>234<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出</span></span><br><span class="line">    <span class="comment">// &gt;  div.setAttribute(&#x27;class&#x27;,&#x27;demo&#x27;);  --  添加 类.class</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;div class=&#x27;demo&#x27;&gt;…&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div.setAttribute(&#x27;id&#x27;,&#x27;only&#x27;);  --  添加 id</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  div</span></span><br><span class="line">    <span class="comment">// &lt;· &lt;div class=&#x27;demo&#x27; id=&#x27;only&#x27;&gt;…&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;  div.getAttribute(&#x27;id&#x27;,&#x27;only&#x27;);  --  取 id 值</span></span><br><span class="line">    <span class="comment">// &lt;· undefined</span></span><br><span class="line">    <span class="comment">// &gt;  div.getAttribute(&#x27;id&#x27;);</span></span><br><span class="line">    <span class="comment">// &lt;· &#x27;only&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">通过 div.setAttribute(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;only&#x27;</span>)动态的去改div的值</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-id">#only</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">color</span>:fff;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">background-color</span>: orange;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>234<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.setAttribute(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;only&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="data-log"><a href="#data-log" class="headerlink" title="data-log"></a>data-log</h3><p>当满足一定条件时，if就可以动态操作了，配合事件连成整体操作 这个行间属性可以设置系统没有的。<code>data-log</code>是打点，点击率，这是人工设置的行间 属性，不是系统定义的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">如何去取这个 data-log？</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">data-log</span>=<span class="string">&#x27;0&#x27;</span>&gt;</span>hehe<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;a&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;data-log&#x27;</span>));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">给三个标签，让他们行间有一个属性 <span class="built_in">this</span>-name，比如第一个 div，第二个span</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> all = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;*&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; all.length; i++)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            all[i]setAttribute(<span class="string">&#x27;this-item&#x27;</span>,all[i].nodeName);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="日期对象-Date-—-就是一种对象，是系统提供好的"><a href="#日期对象-Date-—-就是一种对象，是系统提供好的" class="headerlink" title="日期对象 Date()   —   就是一种对象，是系统提供好的"></a>日期对象 Date()   —   就是一种对象，是系统提供好的</h1><p><code>var date = new Date()</code>大写的<code>Date</code>是系统提供的一个构造函数，通过<code>new Date</code>的方法会给我们返回一个对象，这个对象就是一个日期对象。日期对象有很多属性和方法。小的<code>date</code>代表此时此刻的时间。用小的<code>date</code>调用方法，如<code>date.getDate()</code></p><h2 id="Date-对象属性（不够标准）"><a href="#Date-对象属性（不够标准）" class="headerlink" title="Date 对象属性（不够标准）"></a>Date 对象属性（不够标准）</h2><ul><li><p>属性           : 描述</p></li><li><p><code>constructor    : 返回对创建对象的 </code>Date`函数的引用。原型上的属性</p></li><li><p><code>prototype      : 使您有能力向对象添加属性和方法。</code>prototype`是构造函数的属性</p></li></ul><h2 id="Date-对象方法"><a href="#Date-对象方法" class="headerlink" title="Date 对象方法"></a>Date 对象方法</h2><ul><li><p>`方法                 ：描述</p></li><li><p><code>Date()</code>———：返回当日的日期和时间</p></li><li><p><code>getDate()</code>———：制作出对象，从 <code>Date</code> 对象返回一个月中的某一天<code>（1 ~ 31）</code></p></li><li><p><code>getDay()</code>——：今天是一周的第几天，如果是 2 是星期二，但是是指第三天（第一天是周日，也就是 0）。从 <code>Date</code> 对象返回一周中的某一天（1 ~ 6）</p></li><li><p><code>getMonth()</code>——：一月份返回值是 0，从 <code>Date</code> 对象返回月份（0 ~ 11）</p></li><li><p><code>getFullYear()</code>——：从 <code>Date</code> 对象以四位数字返回年份</p></li><li><p><code>getYear()</code>——：已废弃。请使用 getFullYear()` 方法代替</p></li><li><p><code>getHours()</code>——：返回 <code>Date</code> 对象的小时（0 ~ 23）</p></li><li><p><code>getMinutes()</code>——：返回 <code>Date</code> 对象的分钟（0 ~ 59）</p></li><li><p><code>getSeconds()</code>——：返回 <code>Date</code> 对象的秒钟（0 ~ 59）</p></li><li><p><code>getMilliseconds()</code>——：返回 <code>Date</code> 对象的毫秒（0 ~ 999）</p></li><li><p><code>getTime()</code>——：返回 1970 年 1 月 1 日（纪元时刻）至今的毫秒数。经常用于项目的计算时间。获取<code>时间戳</code></p></li><li><p><code>setDate()</code>——：设置 <code>Date</code> 对象中月的某一天（1 ~ 31）</p></li><li><p><code>setMonth()</code>——：设置 <code>Date</code> 对象中月份（0 ~ 11）</p></li><li><p><code>setFullYear()</code>——：设置 <code>Date</code> 对象中的年份（四位数字）</p></li><li><p><code>setYear()</code>——：已废弃，请使用 setFullYea()方法代替</p></li><li><p><code>setHours()</code>——：设置 <code>Date</code> 对象中的小时（0 ~ 23）</p></li><li><p><code>setMinutes()</code>——：设置 <code>Date</code> 对象中的分钟（0 ~ 59）</p></li><li><p><code>setSeconds()</code>——：设置 <code>Date</code> 对象中的秒钟（0 ~ 59）</p></li><li><p><code>setMilliseconds()</code>——：设置 <code>Date</code> 对象中的毫秒（0 ~ 999）</p></li><li><p><code>setTime()</code>———：以毫秒设置 <code>Date</code> 对象。机械之间交换时间</p></li><li><p><code>toSource()</code>——：返回该对象的源代码</p></li><li><p><code>toString()</code>——：把 <code>Date</code> 对象转换为字符串</p></li><li><p><code>toTimeString()</code>——：把 <code>Date</code> 对象的时间部分转换为字符串</p></li><li><p><code>to</code>Date<code>String()</code>——：把 <code>Date</code> 对象的日期部分转换为字符换</p></li></ul><p><code>getUTC</code> 一类，<code>parse()</code> 的没用，不放表格里面，可以在 w3school date 中查看全部</p><p>在控制台调用 <code>date.getSeconds</code> 就是 <code>date</code> 创建时间的毫秒数，是静止的，不是动态的。这个 <code>date</code> 对象记录的是出生的那一刻的时间，不是实时的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：利用 getTime() 计算程序计算的毫秒数</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">1000000</span>;i ++)&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> lastTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="built_in">console</span>.log(lastTime - firstTime);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：setDate()</span><br><span class="line"></span><br><span class="line">&gt;  date.setDate(<span class="number">26</span>)</span><br><span class="line">&lt;· <span class="number">1580021359911</span></span><br><span class="line">&gt;  date</span><br><span class="line">&lt;· Sun Jan <span class="number">26</span> <span class="number">2020</span> <span class="number">14</span>:<span class="number">49</span>:<span class="number">19</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：循环执行用 <span class="built_in">setInterval</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date.setMinutes(<span class="number">54</span>);</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">Date</span>.getTime() - date.getTime() &gt; <span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;什么什么什么！！！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：setTime()</span><br><span class="line"></span><br><span class="line">&gt;  date.setTime(<span class="number">12345678900</span>)</span><br><span class="line">&lt;· <span class="number">12345678900</span></span><br><span class="line">&gt;  date</span><br><span class="line">&lt;· Sun May <span class="number">24</span> <span class="number">1970</span> <span class="number">05</span>:<span class="number">21</span>:<span class="number">18</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：toString() 和 toTimeString() 和 toDateString()</span><br><span class="line"></span><br><span class="line">&gt;  date.toString</span><br><span class="line">&lt;· <span class="string">&quot;Sun May 24 1970 05:21:18 GMT+0800 (中国标准时间)&quot;</span></span><br><span class="line">&gt;  date.toTimeString()</span><br><span class="line">&lt;· <span class="string">&quot;05:21:18 GMT+0800 (中国标准时间)&quot;</span></span><br><span class="line">&gt;  date.toDateString()</span><br><span class="line">&lt;· <span class="string">&quot;Sun May 24 1970&quot;</span></span><br></pre></td></tr></table></figure><p>作业：封装函数，打印当前是何年何月何日何时，几分几秒</p><h2 id="js-定时器"><a href="#js-定时器" class="headerlink" title="js 定时器"></a>js 定时器</h2><h3 id="一、setInterval-—-定时循环器"><a href="#一、setInterval-—-定时循环器" class="headerlink" title="一、setInterval() —- 定时循环器"></a>一、setInterval() —- 定时循环器</h3><p><code>注意：setInterval(&quot;func()&quot;,1000);定时循环器</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：<span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);定时器，意思是 <span class="number">1000</span> 毫秒执行一次这个函数</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> time = <span class="number">1000</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;,time)</span><br><span class="line"><span class="keyword">var</span> time = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">`time = 2000 不能改变函数里面的时间，只能执行写在 time 的时间数`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`如果先定义 1000 毫秒，在后面改成 2000 毫秒，程序仍按 1000 毫秒执行，因为他只识别一次，不能通过改变 time 改变 setInterval 的快慢 `</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：查数</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>；</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    i ++;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：判断定时器准确不准确？</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lastTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="built_in">console</span>.log(lastTime - firstTime);</span><br><span class="line">    firstTime = lastTime;</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">`setInterval() 计算时间非常不准确`</span></span><br><span class="line"></span><br><span class="line">注意：<span class="string">`setInterval(); 是 window 的方法，在全局上就算不写 window.setInterval(); 他也会上全局的 GO 里面查找，所以不写 window 也行`</span></span><br><span class="line"></span><br><span class="line">·每一个 <span class="built_in">setInterval</span>(); 都会返回一个一个数字，作为唯一的标识，有唯一标识就可以把他清除掉（利用 <span class="built_in">clearInterval</span>() 清除）<span class="string">`</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：每一个 <span class="built_in">setInterval</span> 都有着返回值，timer 是逐一罗列放下排序</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> timer2 = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 console.log 输出：</span></span><br><span class="line"><span class="comment">// &gt;  timer</span></span><br><span class="line"><span class="comment">// &lt;· 1</span></span><br><span class="line"><span class="comment">// &gt;  timer2</span></span><br><span class="line"><span class="comment">// &lt;· 2</span></span><br></pre></td></tr></table></figure><h3 id="二、clearInterval-—-停止定时循环器（setInterval-）"><a href="#二、clearInterval-—-停止定时循环器（setInterval-）" class="headerlink" title="二、clearInterval() —- 停止定时循环器（setInterval()）"></a>二、clearInterval() —- 停止定时循环器（setInterval()）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：一般写了 <span class="built_in">setInterval</span>() 就要写 <span class="built_in">clearInterval</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// clearInterval();</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i ++);</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="三、setTimeout-—-真正的定时器-隔了一段时间后再执行（起推迟作用），并且-只执行一次"><a href="#三、setTimeout-—-真正的定时器-隔了一段时间后再执行（起推迟作用），并且-只执行一次" class="headerlink" title="三、setTimeout() —- 真正的定时器,隔了一段时间后再执行（起推迟作用），并且 只执行一次"></a>三、setTimeout() —- 真正的定时器,隔了一段时间后再执行（起推迟作用），并且 只执行一次</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：隔了 <span class="number">1000</span> 毫秒才执行，并且只执行一次</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">`常应用于电影试看 5 分钟`</span></span><br></pre></td></tr></table></figure><h3 id="四、clearTimeout-—-清除-setTimeout-让他停止执行"><a href="#四、clearTimeout-—-清除-setTimeout-让他停止执行" class="headerlink" title="四、clearTimeout() —- 清除 setTimeout(); 让他停止执行"></a>四、clearTimeout() —- 清除 setTimeout(); 让他停止执行</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：这种写法，<span class="built_in">setTimeout</span>();还没执行就被清除了，就执行不了了</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">clearTimeout</span>(timer);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：这个 timer = <span class="built_in">setTimeout</span>();返回的唯一标识和 <span class="built_in">setInterval</span> 返回的唯一标识是不会重叠的，他们两个是依次的</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer2 = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">clearTimeout</span>(timer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 console 输出</span></span><br><span class="line">&gt;  timer</span><br><span class="line">&lt;· <span class="number">1</span></span><br><span class="line">&gt;  timer2</span><br><span class="line">&lt;· <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>setInterval(); setTimeout(); clearInterval(); clearTimeout();</code>这四个都是全局对象，都是<code>window</code>上的方法，内部函数<code>function</code>里面的<code>this</code>指向 <code>window</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：<span class="built_in">setInterval</span>(<span class="string">&quot;function()&quot;</span>,<span class="number">1000</span>) 和 <span class="built_in">setTimeout</span>(); 都有另一种形式展现，里面可以写成字符串，例如<span class="string">&quot;console.log(&#x27;a&#x27;);&quot;</span>。但是一般用 <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);  ---  标准形式</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&quot;console.log(&#x27;a&#x27;);&quot;</span>,<span class="number">1000</span>);  ---  特殊形式，一般不这样写，意思是 <span class="number">1000</span> 毫秒执行一次<span class="built_in">console</span>.log</span><br></pre></td></tr></table></figure><h3 id="计时器作业"><a href="#计时器作业" class="headerlink" title="计时器作业"></a>计时器作业</h3><p><code>计时器，到三分钟停止</code></p><p><code>定时器要计数，计完数以后要填到结构里面，下面的起的两个变量 minutes 和 seconds 用于计数，计完数以后要填到 dom 结构里面（元素标签最正确的说法是 dom结构， 因为他可以被 dom操作）</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">    <span class="attr">border</span>: 1px solid black;</span><br><span class="line">    text-align: right;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">minutes</span>:&lt;input type=&quot;text&quot; value=&#x27;0&#x27;&gt;</span><br><span class="line">seconds:&lt;input type=&#x27;text&#x27; value=&#x27;0&#x27;&gt;</span><br><span class="line"></span><br><span class="line">var minutesNode = document.getElementsTagName = (&#x27;input&#x27;)[0];</span><br><span class="line">var secondsNode = document.getElementsTagName = (&#x27;input&#x27;)[1];</span><br><span class="line"></span><br><span class="line">var minutes = 0,</span><br><span class="line">    seconds = 0;</span><br><span class="line"></span><br><span class="line">var timer = seInterval(function()&#123;</span><br><span class="line">    var seconds = 0;</span><br><span class="line">    if(seconds == 60)&#123;</span><br><span class="line">        minutes ++;</span><br><span class="line">        seconds = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    minutesNode.value = minutes;</span><br><span class="line">    secondsNode.value = seconds;</span><br><span class="line">    if(minutes = 3)&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,10)</span><br></pre></td></tr></table></figure><h1 id="DOM-BOM-基本操作"><a href="#DOM-BOM-基本操作" class="headerlink" title="DOM / BOM 基本操作"></a>DOM / BOM 基本操作</h1><h2 id="一、查看滚动条的滚动距离"><a href="#一、查看滚动条的滚动距离" class="headerlink" title="一、查看滚动条的滚动距离"></a>一、查看滚动条的滚动距离</h2><ol><li><p><strong><code>window.pageXOffset</code>（横向）/ <code>pageYOffset</code>（纵向）</strong></p><p> IE8及IE8以下不兼容（IE9部分不兼容）IE9以上能用</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：滚动条往下滚动了 400px，求浏览器最顶端到滚动条滚动的位置的像素</span><br><span class="line"></span><br><span class="line">答：400px + 首屏像素（此时这个屏幕的底端距离整个网页的最顶端也是这样算的）</span><br></pre></td></tr></table></figure></li><li><p><strong>IE8及IE8以下的使用兼容方法</strong></p><p> 1)<code>document.body.scrollLeft / scrollTop</code> —- document.body.横向 / 纵向</p><p> 2)<code>document.documentElement.scrollLeft / scrollTop</code> —- document.documentEle2ment.横向 / 纵向</p><p> <code>上面两个兼容性比较混乱，其中一个有值，另外一个的值一定是 0，这两个最好的用法是取两个值相加，因为不可能存在两个同时有值</code></p><p> <code>例如：document.body.scrollLeft + document.documentElementscrollLeft</code></p></li><li><p><strong>封装兼容方法（那个浏览器都好用），求滚动轮滚动距离 getScrollOffset()</strong></p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollOffset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.pageXOffset)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">x</span> : <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">            <span class="attr">y</span> : <span class="built_in">window</span>.pageYOffset</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">x</span> : <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">            <span class="attr">y</span> : <span class="built_in">document</span>.bodu.scrollTop + <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、查看视口的尺寸"><a href="#二、查看视口的尺寸" class="headerlink" title="二、查看视口的尺寸"></a>二、查看视口的尺寸</h2><p><code>可视区窗口就是编写的 html 文档可以看到的部分，不含菜单栏、地址栏、控制台</code></p><p>注意渲染模式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 渲染模式 : &lt;! DOCTYPE html&gt; 是 html5 的（在 emmet 插件下 html:<span class="number">5</span> 就出来了）</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 怪异/混杂模式 : 试图去兼容之前的语法，去掉&lt;!DOCTYPE html&gt;这一行即可开启（向后兼容）</span><br><span class="line"></span><br><span class="line">例：<span class="built_in">document</span>.compatMode是判断是怪异模式还是标准模式</span><br><span class="line"></span><br><span class="line">    CSS1Compat -- 标准模式</span><br><span class="line"></span><br><span class="line">    BackCompat -- 怪异模式向后兼容</span><br></pre></td></tr></table></figure><ol><li><p><strong><code>window.innerWidth</code> / <code>innerHeight</code> 可视区域的宽高（加上 滚动条的宽度 / 高度）</strong></p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">IE8 及 IE8 以下不兼容</span><br><span class="line"></span><br><span class="line">如果窗口放大页面了，页面的尺寸也会拉伸了，尺寸就会变小</span><br></pre></td></tr></table></figure></li><li><p><strong><code>document.documentElement.clientWidth</code> / <code>clientHeight</code></strong></p><p><code>标准模式下，任意浏览器都兼容</code></p></li><li><p><strong><code>document.body.clientWidth</code> / <code>clientHeight</code></strong></p><p> <code>适用于怪异渲染模式的浏览器</code></p></li><li><p><strong>封装兼容性方法，返回浏览器视口尺寸 <code>getViewportOffset()</code></strong></p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`例：document.compatMode`</span>是判断是怪异模式还是标准模式</span><br><span class="line"></span><br><span class="line">CSS1Compat -- 标准模式</span><br><span class="line"></span><br><span class="line">BackCompat -- 怪异模式向后兼容</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewportOffset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.innerWidth)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">w</span> : <span class="built_in">window</span>.innerWidth,</span><br><span class="line">            <span class="attr">h</span> : <span class="built_in">window</span>.innerHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode == <span class="string">&#x27;CSS1Compat&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">w</span> : <span class="built_in">document</span>.documentElement.clienWidth,</span><br><span class="line">                <span class="attr">h</span> : <span class="built_in">document</span>.documentElement.clienHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">w</span> : <span class="built_in">document</span>.body.clienWidth,</span><br><span class="line">                <span class="attr">h</span> : <span class="built_in">document</span>.body.clienHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="三、查看元素的几何尺寸"><a href="#三、查看元素的几何尺寸" class="headerlink" title="三、查看元素的几何尺寸"></a>三、查看元素的几何尺寸</h2><ol><li><p><strong>domEle.getBoundingClientRect() – 查看元素的几何尺寸</strong></p><ol><li><p><code>domEle.getBoundingClientRect()</code> 这是 es5.0 的方法，但只用了解</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">    &gt;  div.getBoundingClientRect();</span><br><span class="line">    &lt;· ClientRect</span><br><span class="line">        <span class="attr">bottom</span> : <span class="number">200</span></span><br><span class="line">        <span class="attr">height</span> : <span class="number">100</span></span><br><span class="line">        <span class="attr">left</span> : <span class="number">100</span></span><br><span class="line">        <span class="attr">right</span> : <span class="number">200</span></span><br><span class="line">        <span class="attr">top</span> : <span class="number">100</span></span><br><span class="line">        <span class="attr">widht</span> : <span class="number">100</span></span><br><span class="line">        &gt; __proto__ : ClientRect</span><br></pre></td></tr></table></figure><p> <code>求的是四个边和窗口之间的像素距离，right 是右边离 document 的边有 200px，也可以理解成求的是左上点和右下点的位置</code></p></li><li><p>兼容性很好</p></li><li><p>该方法返回一个对象，对象里面有<code>left,top,right,bottom</code>等属性。<code>left</code>和<code>top</code>代表该元素左上角的<code>X</code>和<code>Y</code>坐标，<code>right</code>和<code>bottom</code>代表元素右下角的<code>X</code>和<code>Y</code>坐标</p></li><li><p><code>height</code> 和 <code>width</code> 属性老版本<code>IE</code>并未实现</p></li><li><p>在老版本的IE里面，利用右侧边<code>right</code>减左侧面<code>left</code>解决</p></li><li><p>返回的结果并不是实时的</p></li></ol></li><li><p><strong>dom.offsetWidth , dom.offsetHeight – 查看元素的宽/高</strong></p><ol><li><p><code>dom.offsetWidth</code> 元素的宽</p></li><li><p><code>dom.offsetHeight</code> 元素的高</p></li></ol><p><code>求的值是包括 padding 的</code></p><p><code>dom.offsetWidth</code>和<code>domEle.getBoundingClientRect()</code>出现的值是一样的，求的值是一样的，求的值都是<code>padding + content</code>（视觉尺寸），可以被代替。</p></li></ol><h2 id="四、查看元素的位置"><a href="#四、查看元素的位置" class="headerlink" title="四、查看元素的位置"></a>四、查看元素的位置</h2><ol><li><p><strong>dom.offsetLeft，dom.offsetTop – 查看元素的 x , y 轴位置</strong></p><ol><li><p><code>dom.offsetLeft</code> 元素的 x 轴位置</p></li><li><p><code>dom.offsetTop</code> 元素的 y 轴位置</p></li></ol><p><code>对于无定位父级的元素，返回的是相对于文档的坐标</code></p><p><code>对于有定位父级的元素，返回相对于最近的有定位的父级的坐标（无论是 left 还是 margin-left 等都是距离）</code></p></li><li><p><strong>dom.offsetParent – 返回最近的有定位的父级</strong></p><p> <code>返回最近的有定位的父级，如无，返回body，body.offsetParent 返回 null</code></p><p> 这个方法能求有定位的父级</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：求元素相对于文档的坐标，以<span class="string">`getElementPosition()`</span>命名</span><br><span class="line"></span><br><span class="line">思路：先看有没有有定位的父级，如果有，先求他与有定位父级的距离，然后把视角换到他有定位的父级上，这他这个有定位的父级上还有没有有定位的父级，一段一段的加，一直加到最后，是一个循环递归的过程</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求元素相对于文档的坐标</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementPosition</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!elem || !elem.offsetLeft)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> actualLeft = elem.offsetLeft,</span><br><span class="line">        actualTop = elem.offsetTop,</span><br><span class="line">        current = elem.offsetParent; <span class="comment">// 取得元素的 offsetParent</span></span><br><span class="line">    <span class="keyword">while</span>(current !== <span class="literal">null</span>)&#123;</span><br><span class="line">        actualLeft += current.offsetLeft;</span><br><span class="line">        actualTOp += current.offestTop;</span><br><span class="line">        current = current.offsetParent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">left</span> : actualLeft,</span><br><span class="line">        <span class="attr">top</span> : actualTop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相对于父级的位置坐标</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementPosition</span>(<span class="params">ele</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ele.offsetParent.nodeName = <span class="string">&#x27;BODY&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">left</span> : ele.offsetLeft,</span><br><span class="line">            <span class="attr">top</span> : ele.offsetTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">left</span> : ele.offsetLeft + getElementPosition(ele.offsetParent).left,</span><br><span class="line">            <span class="attr">top</span> : ele.offsetTop + getElementPosition(ele.offsetParent).top</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="让滚动条滚动"><a href="#让滚动条滚动" class="headerlink" title="让滚动条滚动"></a>让滚动条滚动</h2><ol><li><p><strong>window 上有三个方法 scroll(),scrollTo(),两个功能一样，scrollBy();累加滚动距离</strong></p><p> <code>window.scroll(x,y),scrollTo(x,y)</code>功能是一样的，里面能填两个参数</p><p> <code>window.sroll</code>(x 轴滚动的距离，y 轴滚动的距离)，里面的 xy 可以填负数</p><p> <code>window.scrollBy(x,y)</code>是累加滚动距离，填负数就往上滚动</p></li><li><p><strong>三个方法功能类似，用法都是将 <code>x,y</code> 坐标传入。即实现让滚动轮滚动到当前的位置</strong></p></li><li><p><strong>区别 : <code>scrollBy()</code> 会在之前的数据基础之上做累加</strong></p><p> eg : <code>可以利用scrollBy()做快速阅读的功能</code></p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">start = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">stop = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> key = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">start.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key)&#123;</span><br><span class="line">        timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.scrollBy(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">        &#125;,<span class="number">100</span>)</span><br><span class="line">        key = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">stop.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    clearsetInterval(timer);</span><br><span class="line">    key = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="脚本化-CSS"><a href="#脚本化-CSS" class="headerlink" title="脚本化 CSS"></a>脚本化 CSS</h1><p><code>dom</code>不能操作<code>css</code>,是间接操作<code>css</code>,这一部分需要记下</p><h2 id="一、读写元素-css-属性（间接控制）-–-dom-style-prop"><a href="#一、读写元素-css-属性（间接控制）-–-dom-style-prop" class="headerlink" title="一、读写元素 css 属性（间接控制） – dom.style.prop"></a>一、读写元素 css 属性（间接控制） – dom.style.prop</h2><p><strong>dom.style.prop;</strong></p><p><code>只有这个是可读可写的，其他属性都是只能读</code></p><p>1）<strong>可读写行间样式，没有兼容性问题，碰到<code>float</code>这样的关键字属性，前面应该加<code>css</code>（行间样式意外没有用）</strong></p><p><strong>eg:flaot  ————&gt;  cssFloat</strong>,因为<code>float</code>属性在<code>js</code>里面是<code>保留字</code>，所以一般如果想要用<code>float</code>的话就用<code>cssFloat</code></p><p>2）<strong>复合属性必须拆解（建议），组合单词变成小驼峰写法</strong></p><p>3）<strong>写入的值必须是字符串格式</strong></p><p>4）<strong>dom.style.prop 只能操作 css 行间样式</strong></p><p>5）<strong>dom.style 属性。能拿，能写（通过写间接改变了 css 属性）</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">    &gt;  div.style</span><br><span class="line">    &lt;· CSSStyleDeclaration &#123;<span class="attr">alignContent</span>: <span class="string">&quot;&quot;</span>, <span class="attr">alignItems</span>: <span class="string">&quot;&quot;</span>,<span class="attr">alignSelf</span>: <span class="string">&quot;&quot;</span>, <span class="attr">alignmentBaseline</span>: <span class="string">&quot;&quot;</span>, <span class="attr">all</span>: <span class="string">&quot;&quot;</span>, …&#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">`CSSstyleDeclaration`</span>是<span class="string">`css`</span>样式表声明（类数组，有索引类的属性），把你能够用的所有的<span class="string">`css`</span>都展示出来，里面不填写就是没有值是空串。</span><br><span class="line"></span><br><span class="line">    可以用<span class="string">`div.style[&#x27;width&#x27;]`</span>拿出属性，也可以用<span class="string">`div.style.width`</span>,效果一样。</span><br><span class="line"></span><br><span class="line">    在<span class="string">`js`</span>访问属性的时候没有<span class="string">`-杠`</span>的形式，不能写<span class="string">`background-color`</span>，要写小驼峰。</span><br><span class="line"></span><br><span class="line">    不在<span class="string">`html`</span>文件里面写的值也可以利用js调用，如<span class="string">`div.style.borderRadius=&quot;50&quot;`</span></span><br></pre></td></tr></table></figure><h2 id="二、查询计算样式-–-window-getComputedStyle-ele-null"><a href="#二、查询计算样式-–-window-getComputedStyle-ele-null" class="headerlink" title="二、查询计算样式 – window.getComputedStyle(ele,null)"></a>二、查询计算样式 – window.getComputedStyle(ele,null)</h2><p><strong>window.getComputedStyle(ele,null);</strong></p><p><strong>可以选取伪元素，并获取:</strong><code>window.getComputedStyle(ele,null);括号里面要填两个东西，第一个ele是填的你要获取谁，第二个先填写null（null解决的就是伪元素的问题，它可以填写伪元素，填null只是用于平常元素，在null的地方写入伪元素，就可以选择获取伪元素，用它可以获取伪元素的样式表）</code></p><p>1）<strong>window.getComputedStyle(ele,null);</strong>  <code>原生底层方法，展示权重最高的</code></p><p>2）<strong>计算样式只读，不可以写入</strong></p><p>3）<strong>返回的样式都是经过计算的，并且都是绝对值，没有相对单位，相对值会转换成绝对值显示</strong></p><p>4）**<em>IE8及IE8以下不兼容</em>**</p><p>5）<strong>dom.style.prop 是取行间样式的值，取一个元素显示样式的值，window.getComputedStyle()更准</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">在控制台操作就能有一个 css 样式表（类数组）</span><br><span class="line"></span><br><span class="line">&gt;  <span class="built_in">window</span>.getComputedStyle(div,<span class="literal">null</span>)</span><br><span class="line">&lt;· CSSStyleDeclaration &#123;<span class="number">0</span>: <span class="string">&quot;animation-delay&quot;</span>, <span class="number">1</span>: <span class="string">&quot;animation-direction&quot;</span>,<span class="number">2</span>: <span class="string">&quot;animation-duration&quot;</span>, <span class="number">3</span>: <span class="string">&quot;animation-fill-mode&quot;</span>, <span class="number">4</span>: <span class="string">&quot;animation-iteration-count&quot;</span>, <span class="number">5</span>: <span class="string">&quot;animation-name&quot;</span>, <span class="number">6</span>: <span class="string">&quot;animation-play-state&quot;</span>……</span><br></pre></td></tr></table></figure><p><code>window.getComputedStyle 不管填不填值都有值，这里的值都是默认的，这回获取的是这个当前元素所展现出的 css 属性的显示值都是页面中展现的最终效果的值</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">        div&#123;</span></span><br><span class="line"><span class="xml">            font-size:10em; // 1em = 16px</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#x27;float:left;height:100px;background-color:red&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从console输出：</span></span><br><span class="line">&gt;  <span class="built_in">window</span>.getComputedStyle(div,<span class="literal">null</span>).width</span><br><span class="line">&lt;· 160px; <span class="comment">// 10em = 160px</span></span><br><span class="line"></span><br><span class="line">&gt;  <span class="built_in">window</span>.getComputedStyle(div,<span class="literal">null</span>).backgroundColor</span><br><span class="line">&lt;· <span class="string">&quot;rgb(255,0,0))&quot;</span> <span class="comment">// red = rgb(255,0,0)</span></span><br></pre></td></tr></table></figure><p><code>返回的样式都是经过计算的，并且都是绝对值，没有相对单位，相对值会转换成绝对值显示</code></p><h2 id="三、查询样式-–-ele-currentStyle"><a href="#三、查询样式-–-ele-currentStyle" class="headerlink" title="三、查询样式 – ele.currentStyle"></a>三、查询样式 – ele.currentStyle</h2><p><strong>ele.currentStyle;</strong></p><p>1）<strong>ele.currentStyle</strong>  <code>展示权重最高的</code></p><p>2）<strong>计算样式只读，不可以写入</strong></p><p>3）<strong>返回的计算样式的值不是经过转换的值，是原封不动的值</strong></p><p>4）**<em>IE独有的属性，只能用于IE</em>**</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：[<span class="string">&#x27;width&#x27;</span>]写成<span class="string">`.width`</span>也可以，推荐写<span class="string">`点 .`</span></span><br><span class="line"></span><br><span class="line">div.currentStyle[<span class="string">&#x27;width&#x27;</span>] == div.currentStyle.width</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="封装兼容性查询计算css样式方法-getStyle"><a href="#封装兼容性查询计算css样式方法-getStyle" class="headerlink" title="封装兼容性查询计算css样式方法 getStyle()"></a>封装兼容性查询计算css样式方法 getStyle()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem,prop</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>)[prop];<span class="comment">// 必须填写中括号</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem.currentStyle(prop); <span class="comment">// 必须填写中括号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`function getStyle`</span>(elem,prop)&#123;&#125;</span><br><span class="line"><span class="comment">// elem 是指获取谁的（dom 元素），prop 是获取的是什么属性</span></span><br></pre></td></tr></table></figure><h3 id="详细介绍获取伪元素方法，改变伪元素"><a href="#详细介绍获取伪元素方法，改变伪元素" class="headerlink" title="详细介绍获取伪元素方法，改变伪元素"></a>详细介绍获取伪元素方法，改变伪元素</h3><p>例：<em>理解 window.getComputedStyle(ele,null);第二个值是 null</em></p><p><strong>获取伪元素的方法</strong>：<code>window.getComputedStyle(ele,null);</code>括号里面要填两个东西，第一 个<code>ele</code>是填的是你要获取谁，第二个先填写<code>null</code>（<code>null</code>解决的就是伪元素的问题，用它可以获取伪元素的样式表）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">width</span>:<span class="number">50px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>:<span class="number">50px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">background-color</span>:green;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">display</span>:inline-block;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:left;height:100px;width:100px;background-color:red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">window</span>.getComputedStyle(div,<span class="string">&quot;after&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.getComputedStyle(div,“after”);就获取了伪元素的样式表，在控制台操作</span><br><span class="line">&gt;  <span class="built_in">window</span>.getComputedStyle(div,<span class="string">&#x27;after&#x27;</span>).width</span><br><span class="line">&lt;· <span class="string">&#x27;50px&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>怎么改变伪元素;</strong></p><p><em>改变伪元素并不一定要改变样式，可以改变 class</em>;</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.green</span><span class="selector-pseudo">::after</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">width</span>:<span class="number">50px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>:<span class="number">50px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">background-color</span>:green;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">display</span>:inline-block;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.yellow</span><span class="selector-pseudo">::after</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">width</span>:<span class="number">50px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>:<span class="number">50px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">background-color</span>:yelllow;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">display</span>:inline-block;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float:left;height:100px;width:100px;background-color:red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> count = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            count ++;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span>(count % <span class="number">2</span> == <span class="number">1</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                div.className = <span class="string">&#x27;yellow&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                div.className = <span class="string">&#x27;green&#x27;</span>;   <span class="comment">// class 是保留字，所以用className</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如上</span></span><br><span class="line"><span class="string">`虽然我们通常用style改变css样式，但我们也可以通过改变class改变css样式`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`通过改变 class 来实现改变，改变状态位的操作`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`class 是保留字，所以要避开，用className`</span></span><br></pre></td></tr></table></figure><h3 id="小练习，让方块运动"><a href="#小练习，让方块运动" class="headerlink" title="小练习，让方块运动"></a>小练习，让方块运动</h3><p><strong>小方块持续运动;</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem,prop</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>)[prop];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem.currentStyle[prop];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="keyword">var</span> <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div.style.left = <span class="built_in">parseInt</span>(getStyle(div,<span class="string">&#x27;left&#x27;</span>)) + <span class="number">10</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><strong>加速运动,设置到一个时候就停止了;</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem,prop</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>)[prop];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem.currentStyle[prop];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> speed = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    div.style.left = parentInt(getStyle(div,<span class="string">&#x27;left&#x27;</span>)) + speed + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(parentInt(div.style.left) &gt; <span class="number">500</span>)&#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a>什么是事件</h2><p>1）document.styleSheets</p><p>2）该属性存储了一个 html 文档里面的所有 css 样式表的集合事件（所有事件都是用的小写）</p><p><code>交互是你对页面动一下，页面给你一个反馈</code></p><ol><li><p>何为事件？ – 就是一个动作，没有效果也是事件</p></li><li><p>重要吗？ – 交互体验的核心功能</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">演示 demo -- 点击事件</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;width: 100px;height: 100px;background-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 点击之后控制台出现 a</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="绑定事件方法"><a href="#绑定事件方法" class="headerlink" title="绑定事件方法"></a>绑定事件方法</h2><h3 id="一、句柄绑定方式：’on’-type（事件类型）"><a href="#一、句柄绑定方式：’on’-type（事件类型）" class="headerlink" title="一、句柄绑定方式：’on’  + type（事件类型）"></a>一、句柄绑定方式：’on’  + type（事件类型）</h3><p><strong>句柄绑定方式：elem.’on’ + 事件类型 = function(event){};</strong></p><p><code>只可以用function来绑定事件，若绑定匿名函数，则无法解除</code></p><p><code>打个比方：click 点击事件</code></p><p><code>例：div.&#39;on&#39; + click = function()&#123;&#125;  == div.onclick = function()&#123;&#125;</code></p><ol><li><p><strong>兼容性很好，但是一个元素只能绑定一个事件处理程序:</strong></p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`例：div.onclick = function()&#123;&#125;`</span></span><br><span class="line"></span><br><span class="line">div.onclick 就叫做可以被点击的事件（绑定事件类型），<span class="string">`function()&#123;&#125;`</span>是反馈，一旦事件被触发，就要执行<span class="string">`function`</span>里面的函数（绑定的是一个事件处理函数）</span><br><span class="line"></span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;<span class="comment">// b 覆盖了 a，这是赋值的原因</span></span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>基本等同于写在 HTML 行间上，如下:</strong></p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> &lt;div onclick=<span class="string">&quot;console.log(&#x27;a&#x27;)&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> 和 <span class="number">2</span> 的效果是一样的，只是书写方式不一样</span><br></pre></td></tr></table></figure></li></ol><p><code>onclick=&#39;console.log(&quot;a&quot;)&#39; 是句柄的绑定方式，写在行间不用写function()&#123;&#125;</code></p><h3 id="二、常用写法："><a href="#二、常用写法：" class="headerlink" title="二、常用写法：()"></a>二、常用写法：()</h3><p><strong>elem.addEventListener(type,function(){},false);</strong></p><p><code>IE9 以下不兼容，可以为一个事件绑定多个处理程序</code></p><p><code>dom.addEventListener(&#39;事件类型&#39;,处理函数,false);</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">&lt;div style=<span class="string">&quot;widht:100px;height:100px;background-color:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;,<span class="literal">false</span>)</span><br><span class="line">&lt;/sript&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.addEventListener(<span class="string">&#x27;click&#x27;</span>,test,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; 是函数引用，和外面定义一个 <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; 直接写 test 是一样的</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">&lt;div style=<span class="string">&quot;widht:100px;height:100px;background-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.addEventListener(<span class="string">&#x27;click&#x27;</span>,test,<span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>时间有一个事件监听机制:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：一个事件绑定了两个处理函数</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;widht:100px;height:100px;background:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,<span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="string">`console.log 打印出来是两个函数结果，这是两个处理函数，是两个地址，所以可以输出两个结果`</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：下面只执行一个函数，这种写法是一个地址，一个人</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;widht:100px;height:100px;background:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.addEventListener(<span class="string">&#x27;click&#x27;</span>,test,<span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.addEventListener(<span class="string">&#x27;click&#x27;</span>,test,<span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="string">`elem.addEventListener 不能给同一个函数绑定多次，重复的绑定一个函数就不可以用了,只能输出一个结果`</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="三、IE专用：attachEvent"><a href="#三、IE专用：attachEvent" class="headerlink" title="三、IE专用：attachEvent()"></a>三、IE专用：attachEvent()</h3><p>div.attachEvent(‘on’ + click’ + function(){});</p><p><code>IE 独有，一个事件可以绑定多个处理程序，同一个函数绑定多次都可以</code></p><p><code>div.attachEvent(&#39;on&#39; + 事件类型，处理函数);</code></p><p><em><code>div.attachEvent(&#39;onclick&#39;,function()&#123;&#125;)</code></em></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line"> <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    div.attachEvent(<span class="string">&#x27;onclick&#x27;</span>,test,<span class="literal">false</span>);</span><br><span class="line">    div.attachEvent(<span class="string">&#x27;onclick&#x27;</span>,test,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：想给三个 li 都绑定这个事件</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> liCol = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        len = li.length;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len; i++)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           liCol[i].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(i);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;(i))</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="事件处理程序的运行环境"><a href="#事件处理程序的运行环境" class="headerlink" title="事件处理程序的运行环境"></a>事件处理程序的运行环境</h3><ol><li><p>elem.onclick = function(){}</p><ol><li>程序<code>this</code>指向是<code>dom</code>元素本身（指向自己）</li></ol></li><li><p>elem.addEventListener(type,fn,false)</p><ol><li>程序<code>this</code>指向是<code>dom</code>元素本身（指向自己）</li></ol></li><li><p>elem.attachEvent(‘on’ + type,fn)</p><ol><li>程序<code>this</code>指向<code>window</code></li><li>可以通过<code>call</code>来指向自己</li></ol></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.attachEvent(<span class="string">&#x27;onclick&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    handle.call(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装绑定事件函数"><a href="#封装绑定事件函数" class="headerlink" title="封装绑定事件函数"></a>封装绑定事件函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">elem, type, handle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elem.addEventListener) &#123;</span><br><span class="line">        elem.addEventListener(type, handle, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem.attachEvent) &#123;</span><br><span class="line">        elem[<span class="string">&#x27;on&#x27;</span> + type] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            handle.call(elem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        elem[<span class="string">&quot;on&quot;</span> + type] = handle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解除事件绑定方法"><a href="#解除事件绑定方法" class="headerlink" title="解除事件绑定方法"></a>解除事件绑定方法</h2><h3 id="一、句柄方式解除绑定：elem-’on’-type（事件类型）-false-null"><a href="#一、句柄方式解除绑定：elem-’on’-type（事件类型）-false-null" class="headerlink" title="一、句柄方式解除绑定：elem.’on’ + type（事件类型） = false/null"></a>一、句柄方式解除绑定：elem.’on’ + type（事件类型） = false/null</h3><p><code>elem.&#39;on&#39; + type = false/null;     ==&gt;     就是解除 elem.&#39;on&#39; + type = function(e))&#123;&#125;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：用 div.onclick = <span class="literal">null</span>; 解除事件</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;width:100px;height:100px;background-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="string">`直接解除事件，不可以再执行`</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.onclick = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="string">`只能执行一次的事件的写法`</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.onclick = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="二、常用方式解除绑定：elem-removeEventListener-type-fn-false"><a href="#二、常用方式解除绑定：elem-removeEventListener-type-fn-false" class="headerlink" title="二、常用方式解除绑定：elem.removeEventListener(type,fn,false)"></a>二、常用方式解除绑定：elem.removeEventListener(type,fn,false)</h3><p><strong>elem.removeEventListener(type,function(){},false);</strong></p><p><code>div.removeEventListener(&#39;事件类型&#39;,处理函数,false);</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：elem.removeEventListener(type,fn,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">div.addEventListener(<span class="string">&#x27;click&#x27;</span>,test,<span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.removeEventListener(<span class="string">&#x27;click&#x27;</span>,test,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`test`</span>如果填别的<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,就找不到他了，就没有办法清除，所以函数体一般要写在外面</span><br></pre></td></tr></table></figure><h3 id="三、IE专用方式解除：elem-detachEvent-‘on’-type-fn"><a href="#三、IE专用方式解除：elem-detachEvent-‘on’-type-fn" class="headerlink" title="三、IE专用方式解除：elem.detachEvent(‘on’ + type,fn)"></a>三、IE专用方式解除：elem.detachEvent(‘on’ + type,fn)</h3><p><strong>elem.detachEvent(‘on’ + click’ + function(){});</strong></p><p><code>elem.detachEvent(&#39;on&#39; + 事件类型，处理函数);</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：div.detachEvent(<span class="string">&#x27;onclick&#x27;</span>,test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    div.attachEvent(<span class="string">&#x27;onclick&#x27;</span>,test,<span class="literal">false</span>);</span><br><span class="line">    div.attachEvent(<span class="string">&#x27;onclick&#x27;</span>,test,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.detachEvent(<span class="string">&#x27;onclick&#x27;</span>,test,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="封装解除绑定函数"><a href="#封装解除绑定函数" class="headerlink" title="封装解除绑定函数"></a>封装解除绑定函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span>(<span class="params">elem, type, handle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elem.removeEventListener) &#123;</span><br><span class="line">        elem.removeEventListener(type, handle, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        elem.detachEvent(<span class="string">&#x27;on&#x27;</span> + type, handle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件处理模型-–-事件冒泡、捕获"><a href="#事件处理模型-–-事件冒泡、捕获" class="headerlink" title="事件处理模型 – 事件冒泡、捕获"></a>事件处理模型 – 事件冒泡、捕获</h2><p>事件处理的两个模型：事件冒泡、捕获（不能同时存在）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.wrapper</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">width</span>:<span class="number">300px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>:<span class="number">300px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">background-color</span>:red;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.content</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">width</span>:<span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>:<span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            bakground-<span class="attribute">color</span>:green;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.box</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">width</span>:<span class="number">100px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>:<span class="number">100px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">background-color</span>:orange;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dvi</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> wrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;wrapper&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> content = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;content&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        wrapper.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;wrapper&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        content.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        box.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt; box</span></span><br><span class="line"><span class="comment">//   content</span></span><br><span class="line"><span class="comment">//   wrapper</span></span><br><span class="line"><span class="string">`只是点了黄色区域，但是出现了 box，content，wrapper 三个结果，往下漏了，这就是事件冒泡`</span></span><br></pre></td></tr></table></figure><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p><strong>结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，及同一事件，自子元素冒泡向父元素（自底向上）;</strong></p><p><code>结构上存在父子关系的元素，如果点击到子元素，会一级一级向父元素传递这个事件（从代码的角度是自底向上一层一层冒泡的）</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：加了 margin，只点黄色方块，还是出现了 box，content，wrapper。所以与视觉无关</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dvi</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;wrapper&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> content = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;content&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">wrapper.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;wrapper&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">content.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">box.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt; box</span></span><br><span class="line"><span class="comment">//   content</span></span><br><span class="line"><span class="comment">//   wrapper</span></span><br><span class="line"><span class="string">`加了 margin，只点黄色区域，还是出现了 box，content，wrapper 三种结果，所以与视觉无关`</span></span><br></pre></td></tr></table></figure><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p><strong>1）结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，及同一事件，自父元素捕获至子元素（事件源元素）（自顶向下）;</strong></p><p><strong>2）IE 没有捕获事件;</strong></p><p><code>一个对象的一个事件类型，只能存在一个事件处理模型（冒泡或捕获）</code></p><p><code>elem.addEventListener(type,fn,true);第三个参数就是事件捕获，把false改为true</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：把 <span class="literal">false</span>改成 <span class="literal">true</span>，就变成了事件捕获，只把 <span class="literal">false</span> 改成 <span class="literal">true</span> 就变成事件捕获了</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dvi</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;wrapper&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> content = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;content&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">wrapper.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;wrapper&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line">content.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line">box.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt; wrapper</span></span><br><span class="line"><span class="comment">//   content</span></span><br><span class="line"><span class="comment">//   box</span></span><br></pre></td></tr></table></figure><p><code>结果和事件冒泡结果反了过来，先红色区域捕获事件并且执行，再绿色区域捕获事件并且实行，最后只执行事件黄色区域。</code>_捕获是把结构的最外面先抓住_。<strong>最外面先捕获，再一层层向里面捕获，最里面的是按常规执行</strong></p><p><strong>思考</strong>：同一个对象的同一个事件类型，上面绑定了两个事件处理函数，一个符合冒泡，一个符合捕获，点一个元素后，是先捕获，还是先冒泡？</p><p><strong>3）触发顺序，先捕获，后冒泡;</strong></p><p><code>同一个对象的一个事件处理类型，上面绑定了两个事件处理，分别执行事件冒泡和时间执行</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 沿用上面代码</span></span><br><span class="line">wrapper.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;wrapper&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line">content.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line">box.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">wrapper.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;wrapper&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">content.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">box.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出</span></span><br><span class="line"><span class="comment">// wrapper</span></span><br><span class="line"><span class="comment">// content</span></span><br><span class="line"><span class="comment">// box</span></span><br><span class="line"><span class="comment">// boxBubble</span></span><br><span class="line"><span class="comment">// contentBubble</span></span><br><span class="line"><span class="comment">// wrapperBubble</span></span><br><span class="line"></span><br><span class="line"><span class="string">`先捕获，后冒泡`</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 改变一下冒泡，捕获的顺序</span></span><br><span class="line">wrapper.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;wrapper&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">content.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">box.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">wrapper.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;wrapper&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line">content.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line">box.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出</span></span><br><span class="line"><span class="comment">// wrapper</span></span><br><span class="line"><span class="comment">// content</span></span><br><span class="line"><span class="comment">// boxBubble</span></span><br><span class="line"><span class="comment">// box</span></span><br><span class="line"><span class="comment">// contentBubble</span></span><br><span class="line"><span class="comment">// wrapperBubble</span></span><br></pre></td></tr></table></figure><p><code>顺序是先捕获红色，在捕获绿色，boxBubble黄色区域执行，box黄色区域执行，冒泡到绿色，冒泡到红色（谁先绑定，谁先执行，boxBubble 先绑定，所以先执行）</code></p><p><strong>4）focus，blur，change，submit，reset，select 等事件不冒泡;</strong></p><h2 id="取消冒泡和阻止默认事件"><a href="#取消冒泡和阻止默认事件" class="headerlink" title="取消冒泡和阻止默认事件"></a>取消冒泡和阻止默认事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：给 div 绑定一个事件，也给<span class="built_in">document</span>绑定一个事件（点击div，也冒泡到<span class="built_in">document</span>）</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;你闲的啊！&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>在每一个事件处理函数中【div.onclick = function()&#123;&#125;】,我们可以写一个形参（如e），系统可以传递</code> <strong>事件对象（记载了数据发生时的状态和信息）</strong> <code>到这个参数里面去</code></p><h3 id="一、取消冒泡"><a href="#一、取消冒泡" class="headerlink" title="一、取消冒泡"></a>一、取消冒泡</h3><h4 id="1）W3C标准：event-stopPropagation"><a href="#1）W3C标准：event-stopPropagation" class="headerlink" title="1）W3C标准：event.stopPropagation()"></a>1）W3C标准：event.stopPropagation()</h4><blockquote><p>event.stopPropagation(); – 但不支持 ie9  以下版本</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：事件对象上有一个 event.stopPropagation() 取消冒泡事件</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;你闲的啊啊&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">    <span class="built_in">this</span>.tyle.background=<span class="string">&#x27;green&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）IE专用：event-cancelBubble-true"><a href="#2）IE专用：event-cancelBubble-true" class="headerlink" title="2）IE专用：event.cancelBubble = true"></a>2）IE专用：event.cancelBubble = true</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：ie 里面事件对象上有一个 event.cancelBubble = <span class="literal">true</span>;能取消冒泡事件</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;你闲的啊啊&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e || <span class="built_in">window</span>.event; <span class="comment">// 解决 ie 兼容问题</span></span><br><span class="line">    e.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">this</span>.style.background=<span class="string">&#x27;green&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装取消冒泡函数-stopBubble-event"><a href="#封装取消冒泡函数-stopBubble-event" class="headerlink" title="封装取消冒泡函数 stopBubble(event)"></a>封装取消冒泡函数 stopBubble(event)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">if</span>(event.stopPropagation)&#123;</span><br><span class="line">        event.stopPropagation();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、阻止默认事件"><a href="#二、阻止默认事件" class="headerlink" title="二、阻止默认事件"></a>二、阻止默认事件</h3><h4 id="什么是默认事件-–-表单提交，a-标签跳转，右键菜单等"><a href="#什么是默认事件-–-表单提交，a-标签跳转，右键菜单等" class="headerlink" title="什么是默认事件 – 表单提交，a 标签跳转，右键菜单等"></a>什么是默认事件 – 表单提交，a 标签跳转，右键菜单等</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：浏览器点击右键出菜单，是一个事件（默认事件）</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 在网页中鼠标右键控制台打印 &#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1）句柄阻止默认事件方式：return-false"><a href="#1）句柄阻止默认事件方式：return-false" class="headerlink" title="1）句柄阻止默认事件方式：return false"></a>1）句柄阻止默认事件方式：return false</h4><p><em><code>兼容性非常好，以对象属性的方式注册的事件才生效（这是句柄的方式阻止默认事件，只有句柄的方式绑定事件才好使）;</code></em></p><blockquote><p>return false 是只有句柄绑定方式才可以用的阻止默认事件方式</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 在网页右键点击的时候不会出现菜单了，但还在控制台打印 &#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）W3C标准：event-preventDefault"><a href="#2）W3C标准：event-preventDefault" class="headerlink" title="2）W3C标准：event.preventDefault()"></a>2）W3C标准：event.preventDefault()</h4><blockquote><p>event.preventDefault();  W3C标注，IE9以下不兼容</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）兼容IE：event-returnValue-false"><a href="#3）兼容IE：event-returnValue-false" class="headerlink" title="3）兼容IE：event.returnValue = false"></a>3）兼容IE：event.returnValue = false</h4><blockquote><p>event.returnValue = false  —  兼容IE</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event; <span class="comment">// 兼容IE</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    e.returnValue = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装阻止默认事件的函数-cancelHandler-event"><a href="#封装阻止默认事件的函数-cancelHandler-event" class="headerlink" title="封装阻止默认事件的函数 cancelHandler(event)"></a>封装阻止默认事件的函数 cancelHandler(event)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelHandler</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event &amp;&amp; event.preventDefault)&#123;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        widnow.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：a 标签有一个跳转的默认事件</span><br><span class="line"></span><br><span class="line">a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 句柄阻止方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.addEventListener(e)&#123;</span><br><span class="line">    e.preventDefault();  <span class="comment">// w3c 标准阻止方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.addEventListener(e)&#123;</span><br><span class="line">    <span class="built_in">window</span>.e.returnValue = <span class="literal">false</span>; <span class="comment">// IE阻止方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">&#x27;javascript:void(false)&#x27;</span>&gt;&lt;<span class="regexp">/a&gt; /</span><span class="regexp">/ 直接在 a 标签加入也可以</span></span><br></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p><code>非 ie 浏览器会把事件对象（记载了数据发生时的状态和信息）打包传到参数里面去</code></p><p><code>ie 浏览器在 window.evnet 里面储存事件对象</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;widht:100px;height:100px;background-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e); <span class="comment">// 非 ie 浏览器会记录事件对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一、event-window-event-用于IE兼容"><a href="#一、event-window-event-用于IE兼容" class="headerlink" title="一、event || window.event 用于IE兼容"></a>一、event || window.event 用于IE兼容</h3><p><strong><code>window.event 用于IE，event 只能用于非 ie 浏览器</code></strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：这是储存事件对象的兼容性写法</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// MouseEvent &#123;isTrusted: true, screenX: 966, screenY: 174, clientX: 86, clientY: 36, …&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// clientX : 76</span></span><br><span class="line"><span class="comment">// clientY : 77</span></span><br><span class="line"><span class="comment">// 鼠标坐标点，可以用这个来记录鼠标坐标点</span></span><br></pre></td></tr></table></figure><blockquote><p>事件对象上有个专门的信息是存储事件源的。就是 srcElement 属性，可以查看事件源</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;wrapper&quot;</span> style=<span class="string">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:50px;height:50px;background-color:green;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;wrapper&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">wrapper.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>点红色会执行，点绿色会冒泡执行。点红色是点击到他自己来执行;点绿色身上，触发事件的点在绿色身上，是绿色传递的，我们把</code> <strong>触发事件的地方叫做事件源。</strong></p><h3 id="事件源对象（找事件源对象的方法）"><a href="#事件源对象（找事件源对象的方法）" class="headerlink" title="事件源对象（找事件源对象的方法）"></a>事件源对象（找事件源对象的方法）</h3><p><strong>event.target</strong>  –  <em>火狐独有的;</em></p><p><strong>event.srcElement</strong>  –  <em>IE独有的;</em></p><p><strong>这俩 chrome 都有;</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：时间源对象的兼容性写法</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;wrapper&quot;</span> style=<span class="string">&quot;width:100px;height:100px;background-color:red;&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:50px;height:50px;background-color:green;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;wrapper&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">wrapper.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：我们给每个 li 绑定事件，要求点那个 li 就输出那个内容，这不涉及闭包问题</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> len = li.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len;i ++)&#123;</span><br><span class="line">    li[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.innerText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的写法不是很好（如果是三千亿个li就没有效率了）不能动态，要用事件源和事件冒泡解决</span></span><br></pre></td></tr></table></figure><p><strong>事件委托：利用事件冒泡，和事件源对象进行处理;</strong></p><p><strong>优点：</strong></p><ol><li><p><em><code>性能 不需要循环所有的子元素一个一个绑定事件</code></em></p></li><li><p><em><code>灵活 当有新的子元素不需要重新绑定事件</code></em></p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：给每个 li 绑定事件，再增加 li 也能使用</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">ul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">    <span class="built_in">console</span>.log(target.innerText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>面试问题：</strong></p><p><em><strong>什么是事件捕获，一个是冒泡，一个是捕获，第二种捕获不是事件处理模型，而是一种真实的事件获取的过程，用于解决拖拽出方块的问题</strong></em></p><p><em><code>第二种捕获仅在 IE 好使，利用 div.setCapture(); 会捕获页面上发生的所有事情，都获取到自己身上。对应的用 div.releaseCapture();释放。但是方法比较老旧，一般不用。</code></em></p><h2 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><blockquote><p>不需要小驼峰和大驼峰</p></blockquote><p><strong>W3C 标准规定：click 事件只能监听左键，只能通过 mousedown 和 mouseup 来判断鼠标键;</strong></p><p><strong>如何解决 mousedown 和 click 的冲突;</strong></p><p><strong>移动端 onmousedown 不能用，只能用 touchstart，touchmove，touchend;</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onclick       | 鼠标点击事件</span><br><span class="line"></span><br><span class="line">onmousedown   | 鼠标按键被按下时执行函数</span><br><span class="line"></span><br><span class="line">onmouseup     | 鼠标按键被松开时执行函数</span><br><span class="line"></span><br><span class="line">onmousemove   | 鼠标移动到指定元素上移动时执行函数</span><br><span class="line"></span><br><span class="line">contextmenu   | 右键取消菜单事件</span><br><span class="line"></span><br><span class="line">onmouseover   | 鼠标指针移动到元素上执行函数 -- 支持冒泡</span><br><span class="line"></span><br><span class="line">onmouseout    | 鼠标在移出指针时执行函数 -- 支持冒泡</span><br><span class="line"></span><br><span class="line">onmouseenter  | 鼠标指针移动到元素上执行函数 - 不支持冒泡 - html5</span><br><span class="line"></span><br><span class="line">onmouseleave  | 鼠标在移出指针时执行函数 - 不支持冒泡 - html5</span><br><span class="line"></span><br><span class="line">ondblclick    | 当用户双击某个对象时触发</span><br></pre></td></tr></table></figure><p><strong>click = mousedown + mousemove;</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：click = mousedown + mousemove</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;mousedown&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;mouseup&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mousedown</span></span><br><span class="line"><span class="comment">// mouseup</span></span><br><span class="line"><span class="comment">// click</span></span><br><span class="line"></span><br><span class="line"><span class="string">`触发顺序是：mousedown、mouseup、click`</span></span><br></pre></td></tr></table></figure><p><strong>用 button 来区分鼠标的按键;</strong></p><p>只有 <code>mouseup、mousedown</code>两个事件可以区分鼠标左右键</p><p><em><code>button返回值：右键：2，左键：0，滚轮：1</code></em></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.button == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;2,right&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.button == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;0,left&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.button == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;1,middle&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><blockquote><p>触发顺序是 keydown &gt; keypress &gt; keyup</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onkeydown    | 事件会在用户按下一个键盘按键时发生</span><br><span class="line"></span><br><span class="line">onkeyup      | 事件会在键盘按键被松开时发生</span><br><span class="line"></span><br><span class="line">onkeypress   | 事件会在键盘按键被按下并释放一个键时发生</span><br></pre></td></tr></table></figure><p><strong>1）keydown 和 keypress 的区别:</strong></p><p><strong>i ：keydown 可以响应任意键盘按键，keypress 只可以响应字符类键盘按键;</strong></p><p>检测字符不准确，<code>keypress</code> 检测字符很准确。但是 <code>keydown</code> 能监控所有，包括上下左右都能监控，但是 <code>keypress</code> 只能监控字符。</p><p><code>用法：如果你想监控字符类按键，并想区分大小写，就用 keypress，如果是操作类按键的话，就用 keydown 上的 which 属性来区分按键（which：39 是给按键牌号 39，不是 ascii 码）</code></p><p><strong>ii ：keypress 返回的 ASCII 码，可以转换为相应字符;</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：连续按键盘的时候就是连续触发 keydown 和 keypress，松开触发 keyup</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;keypress&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;keydown&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;keyup&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// keydown</span></span><br><span class="line"><span class="comment">// keypress</span></span><br><span class="line"><span class="comment">// keyup</span></span><br><span class="line"></span><br><span class="line">注意：游戏触发设置在 keydown 上，机械键盘抬起速度快反馈力量大，对游戏没用</span><br></pre></td></tr></table></figure><p><strong>charCode：获取按下的键盘按键 Unicode 编码值;</strong></p><p><strong>静态 String.fromCharCode() 方法返回由指定的 Unicode 编码转换为输入的键;</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：利用下面，把 Unicode 编码转成对应值</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(e.charCode));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">oninput    | 在用户输入时触发（有变化（增删改）都会触发 input 事件）</span><br><span class="line"></span><br><span class="line">onchange   | 事件会在输入的内容改变时触发（点击别的物体时触发）</span><br><span class="line"></span><br><span class="line">onfocus    | 事件在对象获得焦点时发生</span><br><span class="line"></span><br><span class="line">onblur     | 事件会在对象失去焦点时发生</span><br><span class="line"></span><br><span class="line">onreset    | 表单重置时触发</span><br><span class="line"></span><br><span class="line">onsearch   | 用户向搜索域输入文本时触发 (&lt;input=&quot;search&quot;&gt;)</span><br><span class="line"></span><br><span class="line">onselect   | 用户选取文本时触发 (&lt;input&gt; 和 &lt;textarea&gt;)</span><br><span class="line"></span><br><span class="line">onsubmit   | 表单提交时触发</span><br><span class="line"></span><br><span class="line">onfocusin  | 元素即将获取焦点时触发</span><br><span class="line"></span><br><span class="line">onfocusout | 元素即将失去焦点时触发</span><br></pre></td></tr></table></figure><p><strong>input:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例如：input 框里面所以有变化（增删改）都会触发 input 事件</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">input.oninput = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>change:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：change 对比鼠标聚焦，或失去焦点时，两个状态是否发生改变，如果两个状态没有改变就不触发，如果发生改变就触发</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">input.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>focus，blur:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text/css&quot;</span> value=<span class="string">&quot;请输入用户名&quot;</span> style=<span class="string">&quot;color:#999&quot;</span> onfocus=<span class="string">&quot;if(this.value == &#x27;请输入用户名&#x27;)&#123;this.value = &#x27;&#x27;;this.style.color=&#x27;#424242&#x27;&#125;&quot;</span> onblur=<span class="string">&quot;if(this.value == &#x27;&#x27;)&#123;this.value = &#x27;请输入用户名&#x27;;this.style.color=&#x27;#999&#x27;&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="鼠标键盘事件对象属性"><a href="#鼠标键盘事件对象属性" class="headerlink" title="鼠标键盘事件对象属性"></a>鼠标键盘事件对象属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">altKey          | 返回当事件被触发时，<span class="string">&quot;ALT&quot;</span> 是否被按下。</span><br><span class="line"></span><br><span class="line">button          | 返回当事件被触发时，哪个鼠标按钮被点击。</span><br><span class="line"></span><br><span class="line">clientX         | 返回当事件被触发时，鼠标指针的水平坐标。</span><br><span class="line"></span><br><span class="line">clientY         | 返回当事件被触发时，鼠标指针的垂直坐标。</span><br><span class="line"></span><br><span class="line">ctrlKey         | 返回当事件被触发时，<span class="string">&quot;CTRL&quot;</span> 键是否被按下。</span><br><span class="line"></span><br><span class="line">Location        | 返回按键在设备上的位置</span><br><span class="line"></span><br><span class="line">charCode        | 返回onkeypress事件触发键值的字母代码。</span><br><span class="line"></span><br><span class="line">key             | 在按下按键时返回按键的标识符。</span><br><span class="line"></span><br><span class="line">keyCode         | 返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。</span><br><span class="line"></span><br><span class="line">which           | 返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。</span><br><span class="line"></span><br><span class="line">metaKey         | 返回当事件被触发时，<span class="string">&quot;meta&quot;</span> 键是否被按下。</span><br><span class="line"></span><br><span class="line">relatedTarget   | 返回与事件的目标节点相关的节点。</span><br><span class="line"></span><br><span class="line">screenX         | 返回当某个事件被触发时，鼠标指针的水平坐标。</span><br><span class="line"></span><br><span class="line">screenY         | 返回当某个事件被触发时，鼠标指针的垂直坐标。</span><br><span class="line"></span><br><span class="line">shiftKey        | 返回当事件被触发时，<span class="string">&quot;SHIFT&quot;</span> 键是否被按下。</span><br></pre></td></tr></table></figure><h3 id="窗体操作类（window-上的事件）onscroll，onload"><a href="#窗体操作类（window-上的事件）onscroll，onload" class="headerlink" title="窗体操作类（window 上的事件）onscroll，onload"></a>窗体操作类（window 上的事件）onscroll，onload</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onload    |  事件会在页面或图像加载完成后立即发生（所有页面加载完毕，才能执行）</span><br><span class="line"></span><br><span class="line">onscroll  |  事件在元素滚动条在滚动时触发</span><br></pre></td></tr></table></figure><p><strong>onscroll:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：scroll 当滚动条一滚动，scroll 事件就触发了</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.pageXOffset + <span class="string">&quot; &quot;</span> + <span class="built_in">window</span>.pageYOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ie6</code>没有fixed定位，就用<code>position</code>的<code>top = 原来的 top + 滚动条的位置</code>来写。<code>absolute</code>定位相对于文档定位，就用<code>absolute</code>定位模拟<code>fixed</code>定位，挪动距离加载<code>absolute</code>的<code>top</code>上读到<code>js</code>的时候就阻断页面，所以必须把<code>js</code>写在下面才能把上面的东西读出来</p><p><strong>onload:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：load重要但是不用。<span class="built_in">window</span>.onload 发生在什么时候</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(div);</span><br><span class="line">    div.style.width = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">    div.style.height = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">    div.style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用了 onload 就能操作写在下面的 div 了，但是我们不能这样用</p><blockquote><p>理由：html 和 css 是一起解析的，在解析的时候会有 html 有 domTree，css 有 cssTree 生成（树形图的顶底是 document，然后是html，然后是 head，body） ，两个树拼在 一起是 renderTree</p></blockquote><p><code>什么时候把节点放在树里？dom节点解析，如确定是 img 标签就把他放到树里。（先 解析完 img，同时开启一个线程异步的去下载里面的内容，后下载完）</code></p><p><code>我们把 js 的 script 标签写在最下面的好处是，这些刚刚解析完 js 就能操作页面了， 就更快了。而 window.onload 要等整个页面解析完，下载完才能操作 js，才能触发事 件（效率很差） onload 能提醒我们什么时候整个页面解析完毕。在设计广告时，就 要用 onload，等整个页面下载完了才开始用，但是onload 绝对用于主程序里面</code></p><h2 id="练习总结"><a href="#练习总结" class="headerlink" title="练习总结"></a>练习总结</h2><h3 id="一、封装拖拽元素函数（不兼容）"><a href="#一、封装拖拽元素函数（不兼容）" class="headerlink" title="一、封装拖拽元素函数（不兼容）"></a>一、封装拖拽元素函数（不兼容）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">    elem.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> diX = e.clientX - elem.offsetLeft;</span><br><span class="line">        <span class="keyword">var</span> diY = e.clientY - elem.offsetTop;</span><br><span class="line">        elem.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, mouseMove, <span class="literal">false</span>);</span><br><span class="line">        elem.addEventListener(<span class="string">&#x27;mouseup&#x27;</span>, mouseUp, <span class="literal">false</span>);</span><br><span class="line">    &#125;,<span class="literal">false</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mouseMove</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = e || widow.event;</span><br><span class="line">        <span class="keyword">var</span> left = e.clientX - diX;</span><br><span class="line">        <span class="keyword">var</span> top = e.clientY - diY;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            left = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; <span class="built_in">window</span>.innerWidth - elem.offsetWidth) &#123;</span><br><span class="line">            left = <span class="built_in">window</span>.innerWidth - elem.offsetWidth;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (top &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            top = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (top &gt; <span class="built_in">window</span>.innerHeight - elem.offsetHeight) &#123;</span><br><span class="line">            top = <span class="built_in">window</span>.innerHeight - elem.offsetHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        elem.style.left = left + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        elem.style.top = top + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mouseUp</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        elem.removeEventListener(<span class="string">&#x27;click&#x27;</span>, mouseMove, <span class="literal">false</span>);</span><br><span class="line">        elem.removeEventListener(<span class="string">&#x27;click&#x27;</span>, mouseUp, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、输入框功能完善"><a href="#二、输入框功能完善" class="headerlink" title="二、输入框功能完善"></a>二、输入框功能完善</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;请输入用户名&quot;</span> style=<span class="string">&quot;color:#999&quot;</span></span><br><span class="line">onfocus=<span class="string">&quot;if(this.value == &#x27;请输入用户名&#x27;)&#123;this.value = &#x27;&#x27;;this.style.color = &#x27;#424242&#x27;&#125;&quot;</span></span><br><span class="line">onblur=<span class="string">&quot;if(this.value == &#x27;&#x27;)&#123;this.value = &#x27;请输入用户名&#x27;;this.style.color = &#x27;#999&#x27;&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="三、提取密码框的密码"><a href="#三、提取密码框的密码" class="headerlink" title="三、提取密码框的密码"></a>三、提取密码框的密码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">input.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="built_in">String</span>.fromCharCode(e.charCode);</span><br><span class="line">    <span class="built_in">console</span>.log(test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、轮播图"><a href="#四、轮播图" class="headerlink" title="四、轮播图"></a>四、轮播图</h3><h3 id="五、贪吃蛇游戏"><a href="#五、贪吃蛇游戏" class="headerlink" title="五、贪吃蛇游戏"></a>五、贪吃蛇游戏</h3><h3 id="六、扫雷游戏"><a href="#六、扫雷游戏" class="headerlink" title="六、扫雷游戏"></a>六、扫雷游戏</h3><h1 id="JSON和异步加载js"><a href="#JSON和异步加载js" class="headerlink" title="JSON和异步加载js"></a>JSON和异步加载js</h1><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><strong>JSON是一种传输数据的格式（以对象为样板，本质上就是对象，但用途有区别，对象就是本地用的，json是用来传输的）</strong></p><ol><li><p><code>JSON.parse();    JSON ————&gt; String</code></p></li><li><p><code>JSON.stringify();   String ————&gt; JSON</code></p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例如：json的属性名必须加双引号（传的是二进制文本）</span><br><span class="line"></span><br><span class="line"><span class="string">`json 格式`</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;deng&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON.string(obj)</span></span><br><span class="line"><span class="comment">// &quot;&#123;&quot;name&quot;:&quot;abc&quot;,&quot;age&quot;:&quot;123&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// str</span></span><br><span class="line"><span class="comment">// &quot;&#123;&quot;name&quot;:&quot;abc&quot;,&quot;age&quot;:&quot;123&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON.parse(str)</span></span><br><span class="line"><span class="comment">// Object &#123;name: &quot;abc&quot;, age: 123&#125;</span></span><br></pre></td></tr></table></figure><h2 id="异步加载Js"><a href="#异步加载Js" class="headerlink" title="异步加载Js"></a>异步加载Js</h2><blockquote><p>js是单线程的，会阻断 HTML，css 加载（因为js会修改 html 和 css 一起加载会乱），所以是同步加载 js。先下载 js，在下载 HTML 和 css。<strong>常规来说 js 是同步加载的，所以我们讲讲 js 异步加载的情况;</strong></p></blockquote><p><strong>js加载的缺点：加载工具方法没必要阻塞文档，过的 js 加载会影响页面效率，一旦网速不好，那么整个网站将等待 js 加载而不进行后续渲染等工作;</strong></p><p><strong>有些工具方法需要按需加载，用到再加载，不用不加载;</strong></p><p>javascript 异步加载的三种方案</p><h3 id="一、IE专用-defer"><a href="#一、IE专用-defer" class="headerlink" title="一、IE专用 defer"></a>一、IE专用 defer</h3><p><code>defer</code><strong>异步加载，但要等到 dom 文档全部解析完成（dom 树生成完）才会被执行。只有 IE 能用</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> scr=<span class="string">&quot;xxx&quot;</span> defer=<span class="string">&quot;defer&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">scr</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="string">`两种方法,可以在内部用，也可以再外部用`</span></span><br></pre></td></tr></table></figure><h3 id="二、w3c标准-async"><a href="#二、w3c标准-async" class="headerlink" title="二、w3c标准 async"></a>二、w3c标准 async</h3><p><code>async</code> <strong>异步加载，加载完就执行，async 只能加载外部脚本，不能把 js 写在 script 标签里，ie9 以上可以用，w3c 标准</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> scr=<span class="string">&quot;xxx&quot;</span> <span class="keyword">async</span>=<span class="string">&quot;async&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">`只有一种方法,只能加载外部脚本`</span></span><br></pre></td></tr></table></figure><h3 id="三、创建-script"><a href="#三、创建-script" class="headerlink" title="三、创建 script"></a>三、创建 script</h3><p>创建<code>script</code>，插入到 DOM 中，加载完毕后<code>callBack</code>（按需加载，方便） –&gt;  常用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.type = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">script.src = <span class="string">&#x27;tools.js&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script); <span class="comment">// 如果不写这一段，就是只加载，不执行，像这样写了执行以后才执行</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    test(); <span class="comment">// 这个test函数是 tools.js 里面的函数，执行的是tools.js的函数</span></span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><blockquote><p>为什么要用 setTimeout（定时器）呢？因为还没有下载完成，因为程序执行时非常快的，当程序读到 document.head 读到 test(); 时，上面的 script.type 和 script.src 还没有下载完，所以执行不了。所以，能不能有一个东西提示我们，他下载完了我们再用?</p></blockquote><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p><code>用 onload 方法</code></p><p>非 <code>ie</code> 方法，<code>script.onload = function()&#123;&#125;</code>,触发 <code>script.onload</code> 事件就代表他下载完了，当他们下载完了再执行 <code>test</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.type = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">script.src = <span class="string">&#x27;tools.js&#x27;</span>;</span><br><span class="line">script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    test(); <span class="comment">// test 函数是 tools.js 的函数，执行的也是 tools.js 的函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script);</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p><code>ie 上有一个状态码，script.readyState，功能与 script.onlaod 相似。</code></p><p><strong>script.readyState = ‘loading’; 最开始的值;</strong></p><p><strong>script.readyState = ‘complete’ 或 ‘loaded’ 表示加载完成;</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">我们封装一个函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    script.type = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(script.readyState)&#123;</span><br><span class="line">        script.onreadystatechenge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(script.readyState == <span class="string">&#x27;complete&#x27;</span> || script.readyState == <span class="string">&#x27;loaded&#x27;</span>)&#123;</span><br><span class="line">                callback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = url;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间里面有一个绑定的事件处理函数，当满足一定执行条件才执行的函数叫做回调函数，回调函数叫 callback</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url,callback</span>)</span>&#123;…&#125;</span><br><span class="line"></span><br><span class="line">loadScript(<span class="string">&#x27;tools.js&#x27;</span>,test); <span class="comment">// test 是 tools.js 里面的函数，调用的是 tools.js 的函数</span></span><br><span class="line"><span class="comment">// 从控制台输出：报错</span></span><br><span class="line"></span><br><span class="line">执行顺序：先 <span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params"></span>)</span>&#123;&#125;【不会看里面的代码是什么】</span><br><span class="line">再 loadScript() 【这一步的时候不知道 test 是什么】</span><br><span class="line">然后执行<span class="string">`function`</span>里面的内容，为了解决上面的问题，如下例：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url,callback</span>)</span>&#123;…&#125;</span><br><span class="line"></span><br><span class="line">loadScript(<span class="string">&#x27;tools.js&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    test();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">这样，用一个<span class="string">`function`</span>来做第二个参数，而<span class="string">`function`</span>里面则执行函数，这样也没有问题</span><br></pre></td></tr></table></figure><h1 id="js时间线"><a href="#js时间线" class="headerlink" title="js时间线"></a>js时间线</h1><p><code>js加载时间线：依据 js 出生的那一刻起，记录了一系列浏览器按照顺序做的事情（就是一个执行顺序）</code></p><p><strong>时间线步骤（创建 document 对象 ==&gt; 文档解析完 ==&gt; 文档解析完加载完执行完）:</strong></p><ol><li><p>创建<code>Document</code>对象，开始解析<code>web</code>页面。解析<code>HTML</code>元素和他们的文本内容后添加<code>Element</code>对象和<code>Text</code>节点到文档中。这个阶段<code>document.readyState = &#39;loading&#39;</code>。</p></li><li><p>遇到<code>link</code>外部<code>css</code>创建线程，进行异步加载，并继续解析文档。</p></li><li><p>遇到<code>script</code>外部<code>js</code>,并且没有设置<code>async</code>、<code>defer</code>,浏览器同步加载，并阻塞，等待 js 加载完成并执行该脚本，然后继续解析文档。</p></li><li><p>遇到<code>script</code>外部 <code>js</code>，并且设置有<code>async、defer</code>，浏览器创建线程异步加载，并继续解析文档。对于<code>async</code>属性的脚本，脚本加载完成后立即执行。（异步禁止使用 document.write()<code>，</code>因为当你整个文档解析到差不多，再调用<code>document.write()</code>会把之前所有的文档流都清空，用里面的文档代替）</p></li><li><p>遇到<code>img</code>等（带有<code>src</code>），先正常解析 dom 结构，然后浏览器异步加载<code>src</code>，并继续解析文档。看到标签直接生产<code>dom</code>树，不用等着<code>img</code>加载完<code>src</code>。</p></li><li><p>当文档解析完成（<code>domTree</code>建立完毕，不是加载完毕），<code>document.readyState = &#39;interactive&#39;</code>。</p></li><li><p>文档解析完成后，所有设置有 defer 的脚本会按照顺序执行。（注意与<code>async</code>的不同，但同样禁止使用<code>document.write()</code>）;</p></li><li><p><code>document</code>对象触发<code>DOMContentLoaded</code>事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。</p></li><li><p>当所有<code>async</code>的脚本加载完成并执行后、<code>img</code>等加载完成后（页面所有的都执行加载完之后），<code>document.readyState = &#39;complete&#39;，&#39;window&#39;</code>对象触发<code>load</code> 事件。</p></li><li><p>从此，以异步响应方式处理用户输入、网络事件等。</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：异步加载禁止使用 <span class="built_in">document</span>.write()</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;width:100px;height:100px;bakground-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">// 用window.onload 会等整个页面执行加载完才执行，消除文档流（把自己都给删了）</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">document</span>.write(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：执行到 <span class="built_in">document</span>.readyState 时，整个 dom 树还没有解析完成，所以不会是 interactive</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;width:100px;height:100px;bakground-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.readyState);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.readyState);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt; loading</span></span><br><span class="line"><span class="comment">// &gt; loading</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：我们就利用 <span class="built_in">window</span>.onload 事件，看到的是 complete,代表执行加载完</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;width:100px;height:100px;bakground-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">// 用window.onload 会等整个页面执行加载完才执行，消除文档流（把自己都给删了）</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.readyState);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.readyState);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt; loading</span></span><br><span class="line"><span class="comment">// &gt; complete</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：如果想要看到 interactive，就用 onreadystatechenge 事件。</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;width:100px;height:100px;bakground-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.readyState);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">document</span>.onreadystatechenge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 所有事件都是用小写</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.readayState);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt; loading</span></span><br><span class="line"><span class="comment">// &gt; interactive</span></span><br><span class="line"><span class="comment">// &gt; complete</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：DOMContentloadend 事件只能用在 addEventListener 事件绑定上面</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;width:100px;height:100px;bakground-color:red&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.readyState);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">document</span>.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.readyState);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentloaded&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,<span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从控制台输出：</span></span><br><span class="line"><span class="comment">// &gt; loading</span></span><br><span class="line"><span class="comment">// &gt; interactive</span></span><br><span class="line"><span class="comment">// &gt; a</span></span><br><span class="line"><span class="comment">// &gt; complete</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">通用写法是把 JS 的 script 写在最下面，为什么我们要把他写在最下面？</span><br><span class="line"></span><br><span class="line">写在最下面意味着上面的 dom 已经处理完毕了。<span class="built_in">window</span>.onload 是整个页面加载完才执行，慢等 dom 解析完毕等执行完就执行，比较快。如下</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload <span class="comment">// : 区别：慢，只要有一个图片没有加载完，window.onload 就不能用，所以效率非常低下</span></span><br><span class="line"></span><br><span class="line">script 标签写在上面。既能操作 div，又能 dom 解析完就处理，效率很高。但是最好还是写在最下面</span><br><span class="line">&lt;script type=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoad&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">console</span>.log(div);</span><br><span class="line">    &#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h1 id="RegExp-正则表达式"><a href="#RegExp-正则表达式" class="headerlink" title="RegExp 正则表达式"></a>RegExp 正则表达式</h1><p><strong>正则表达式的作用</strong>：匹配特殊字符或有特殊搭配原则的字符的最佳选择</p><p><code>RegExp</code>对象表示正则表达式，它是对字符串执行模式匹配的强大工具（判断字符串满不满要求）。正则表达式其他语言也有，规则是一样的，在这个基础上，<code>js</code>增加了自己独特的方法</p><h2 id="创建正则表达式的方法"><a href="#创建正则表达式的方法" class="headerlink" title="创建正则表达式的方法"></a>创建正则表达式的方法</h2><h3 id="第一种方法：正则表达式字面量"><a href="#第一种方法：正则表达式字面量" class="headerlink" title="第一种方法：正则表达式字面量 //"></a>第一种方法：正则表达式字面量 //</h3><p><strong>正则表达式字面量：</strong><code>var 变量 = /表达式/;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abc/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">// &gt; true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：意思是正则表达式测验一下字符串含不含有我规定的片段</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abc/</span>; <span class="comment">// 我规定的片段</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcd&#x27;</span>; <span class="comment">// 声明一个变量</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">// 我测验一下 str 里面有没有我规定片段的片段，如果有返回 true，如果没有 false</span></span><br><span class="line"><span class="comment">// &gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abce/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">// &gt; false,顺序不对或者没有挨着，都是不算的</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：像下面这种，虽然都有 abce，但是没挨着，或者排序不对，都不算</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abce/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcde&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">// false, 顺序不对</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abababab&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&#x27;ab&#x27;], match 是 str 的方法，可以查看 str 匹配 reg 的内容</span></span><br></pre></td></tr></table></figure><h3 id="第二种方法：new-RegExp"><a href="#第二种方法：new-RegExp" class="headerlink" title="第二种方法：new RegExp()"></a>第二种方法：new RegExp()</h3><p><strong>new RegExp方法：</strong><code>var reg = new RegExp(&#39;pattern&#39;)</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：括号里面写的规则</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">// &gt; true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">下面是给正则表达式增加属性的方法</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;m&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="正则表达式-3种-属性（修饰符）"><a href="#正则表达式-3种-属性（修饰符）" class="headerlink" title="正则表达式 3种 属性（修饰符）"></a>正则表达式 3种 属性（修饰符）</h2><ul><li><p><code>i</code> 忽视大小写的意思</p></li><li><p><code>g</code> 全局匹配</p></li><li><p><code>m</code> 执行多行匹配</p></li></ul><p><strong><code>i</code></strong> <em>是 ignoreCase的缩写，是</em><strong>忽视大小写的意思</strong>，例如:<code>var reg = /abce/i;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abce/i</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;ABCEd&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong><code>g</code></strong> <strong>是全局匹配的意思，</strong><em>选择全部的东西，例如：</em><code>var reg = /abce/g;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;ababababab&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&#x27;ab&#x27;]</span></span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;ababababab&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(str));</span><br><span class="line"><span class="comment">// [&#x27;ab&#x27;,&#x27;ab&#x27;,&#x27;ab&#x27;,&#x27;ab&#x27;,&#x27;ab&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong><code>m</code> 是执行多行匹配</strong><em>，例如：</em><code>var reg = /abce/m;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：^a 的意思是必须是 a 开头的</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a/gm</span>; <span class="comment">// g是全局匹配，选择全部的东西</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcde\na&#x27;</span>; <span class="comment">// \n 是换行的意思，转义字符,就是实际上已经是两行了</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;,&#x27;a&#x27;];</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式的表达式"><a href="#正则表达式的表达式" class="headerlink" title="正则表达式的表达式"></a>正则表达式的表达式</h2><ul><li><p><code>reg.test()</code><strong>只能判断这个字符有没有符合要求的判断，返回的结果只有</strong><code>true</code><strong>和</strong><code>false</code></p></li><li><p><code>str.match()</code><strong>可以把所有的东西匹配出来，返回给你，比上一种方法更直观，还能告诉你返回了多少个</strong></p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：想把一、二、三位都是数字都匹配出来，不同，可变化的数字，可以用 [] 来写，</span><br><span class="line">一个 [] 可以代表一个数，[] 里面放的是范围，是一个区间，如 [<span class="number">1234567890</span>] ，</span><br><span class="line">如下图：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[1234567890][1234567890][1234567890]/g</span>;</span><br><span class="line"><span class="comment">// 里面放了3个[],就代表可以匹配3个数字</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123adsf654as8df56d4f&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&#x27;123&#x27;,&#x27;654&#x27;];</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[ab][cd][d]/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&#x27;bcd&#x27;]，指的是和 ab、cd、d匹配的数字</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：<span class="number">0</span>-<span class="number">9</span> 是指 <span class="number">0</span> 到 <span class="number">9</span>，A-Z 是指大 A 到 Z，a-z 是指小 a - z</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[0-9A-Za-z][cd][d]/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"><span class="comment">// 就相当于字符和数字全部匹配了，也可以 A-z,直接从大A到小z</span></span><br><span class="line"><span class="comment">// 这是按 ASCII 码排序的，从大写到小可以写成 A-z</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[0-9A-z][cd][d]/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;ab1cd&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [1cd]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：^ 在正则表达式里面和外面的意思不一样，在正则表达式里面是 非 的意思</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^a][^b]/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;ab1cd&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&#x27;b1&#x27;,&#x27;cd&#x27;]，就是打印出不是 a 开头的和 b 开头的东西</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：| 在正则表达式种是 或 的意思</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(abc|bcd)/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&#x27;abc&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(abc|bcd)[0-9]/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;bcd2&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&#x27;bcd2&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式的元字符"><a href="#正则表达式的元字符" class="headerlink" title="正则表达式的元字符"></a>正则表达式的元字符</h2><p><strong>正则表达式的元字符和表达式是要给东西;</strong></p><p><strong>元字符（Metacharacter）是拥有特殊含义的字符;</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">字符             | 描述</span><br><span class="line"></span><br><span class="line">\               | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符</span><br><span class="line"></span><br><span class="line">()              | 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)</span><br><span class="line"></span><br><span class="line">[]              | 标记一个中括号表达式的开始。要匹配 [，请使用 \[</span><br><span class="line"></span><br><span class="line">&#123;&#125;              | 标记限定符表达式的开始。要匹配 &#123;，请使用 \&#123;</span><br><span class="line"></span><br><span class="line">^               | 以什么什么开头，匹配输入字符串的开始位置。如果设置了 <span class="built_in">RegExp</span> 对象的 Multiline 属性，^ 也匹配 <span class="string">&#x27;\n&#x27;</span> 或 <span class="string">&#x27;\r&#x27;</span> 之后的位置。</span><br><span class="line"></span><br><span class="line">n$              | 以什么什么结尾，匹配任何结尾为 n 的字符串。 匹配输入字符串的结束位置。如果设置了<span class="built_in">RegExp</span> 对象的 Multiline 属性，$ 也匹配 <span class="string">&#x27;\n&#x27;</span> 或 <span class="string">&#x27;\r&#x27;</span> 之前的位置。</span><br><span class="line"></span><br><span class="line">$n              | 代表第几个子表达式的内容，比如：$<span class="number">1</span> 代表第一个子表达式的内容</span><br><span class="line"></span><br><span class="line">n*              | 匹配任何包含零个或多个 n 的字符串。这个变量可以出现 <span class="number">0</span> 到无数次。 匹配前面的子表达式零次或多次。例如，zo* 能匹配 <span class="string">&quot;z&quot;</span> 以及 <span class="string">&quot;zoo&quot;</span>。* 等价于&#123;<span class="number">0</span>,&#125;</span><br><span class="line"></span><br><span class="line">n+              | 匹配任何包含至少一个 n 的字符串。这个变量可以出现 <span class="number">1</span> 到无数次。 匹配前面的子表达式一次或多次。例如，<span class="string">&#x27;zo+&#x27;</span> 能匹配 <span class="string">&quot;zo&quot;</span> 以及 <span class="string">&quot;zoo&quot;</span>，但不能匹配 <span class="string">&quot;z&quot;</span>。+ 等价于 &#123;<span class="number">1</span>,&#125;</span><br><span class="line"></span><br><span class="line">n?              | 匹配任何包含零个或一个 n 的字符串。这个变量 <span class="number">0</span>或 <span class="number">1</span> 个一匹配。匹配前面的子表达式零次或一次。例如，<span class="string">&quot;do(es)?&quot;</span> 可以匹配 <span class="string">&quot;do&quot;</span> 或 <span class="string">&quot;does&quot;</span> 中的<span class="string">&quot;do&quot;</span> 。? 等价于 &#123;<span class="number">0</span>,<span class="number">1</span>&#125;。</span><br><span class="line"></span><br><span class="line">n&#123;X&#125;            | 匹配包含 X 个 n 的序列的字符串。n 是一个非负整数。匹配确定的 n 次。例如，<span class="string">&#x27;o&#123;2&#125;&#x27;</span> 不能匹配 <span class="string">&quot;Bob&quot;</span> 中的 <span class="string">&#x27;o&#x27;</span>，但是能匹配 <span class="string">&quot;food&quot;</span> 中的两个 o。</span><br><span class="line"></span><br><span class="line">n&#123;X,&#125;           | 匹配包含至少 X 个 n 的序列的字符串。n 是一个非负整数。至少匹配n 次。例如，<span class="string">&#x27;o&#123;2,&#125;&#x27;</span> 不能匹配 <span class="string">&quot;Bob&quot;</span> 中的 <span class="string">&#x27;o&#x27;</span>，但能匹配 <span class="string">&quot;foooood&quot;</span> 中的所有 o。<span class="string">&#x27;o&#123;1,&#125;&#x27;</span> 等价于 <span class="string">&#x27;o+&#x27;</span>。<span class="string">&#x27;o&#123;0,&#125;&#x27;</span> 则等价于 <span class="string">&#x27;o*&#x27;</span>。</span><br><span class="line"></span><br><span class="line">n&#123;X,Y&#125;          | 匹配包含 X 至 Y 个 n 的序列的字符串。m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，<span class="string">&quot;o&#123;1,3&#125;&quot;</span> 将匹配 <span class="string">&quot;fooooood&quot;</span> 中的前三个 o。<span class="string">&#x27;o&#123;0,1&#125;&#x27;</span> 等价于 <span class="string">&#x27;o?&#x27;</span>。请注意在逗号和两个数之间不能有空格。</span><br><span class="line"></span><br><span class="line">n?              | 匹配任何包含零个或一个 n 的字符串。这个变量 <span class="number">0</span> 或 <span class="number">1</span> 个一匹配。 当该字符紧跟在任何一个其他限制符 (*, +, ?, &#123;n&#125;, &#123;n,&#125;, &#123;n,m&#125;) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 <span class="string">&quot;oooo&quot;</span>，<span class="string">&#x27;o+?&#x27;</span> 将匹配单个 <span class="string">&quot;o&quot;</span>，而 <span class="string">&#x27;o+&#x27;</span> 将匹配所有 <span class="string">&#x27;o&#x27;</span>。</span><br><span class="line"></span><br><span class="line">.               | 查找单个字符，除了换行和行结束符。匹配除 <span class="string">&quot;\n&quot;</span> 和 <span class="string">&quot;\r&quot;</span> 之外的任何单个字符。要匹配包括 <span class="string">&#x27;\n&#x27;</span> 和 <span class="string">&quot;\r&quot;</span> 在内的任何字符，请使用象 <span class="string">&#x27;[.\n\r]&#x27;</span> 的模式。</span><br><span class="line"></span><br><span class="line">(?:pattern)     | 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 <span class="string">&quot;或&quot;</span> 字符 (|) 来组合一个模式的各个部分是很有用。例如， <span class="string">&#x27;industr(?:y|ies)&#x27;</span> 就是一个比 <span class="string">&#x27;industry|industries&#x27;</span> 更简略的表达式。</span><br><span class="line"></span><br><span class="line">(?=n)           | 匹配任何其后紧接指定字符串 n 的字符串。正向预查，在任何匹配 n 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，<span class="string">&#x27;Windows (?=95|98|NT|2000)&#x27;</span> 能匹配 <span class="string">&quot;Windows 2000&quot;</span> 中的 <span class="string">&quot;Windows&quot;</span> ，但不能匹配 <span class="string">&quot;Windows 3.1&quot;</span> 中的 <span class="string">&quot;Windows&quot;</span>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</span><br><span class="line"></span><br><span class="line">(?!n)           | 匹配任何其后没有紧接指定字符串 n 的字符串。后面不跟着 n 负向预查，在任何不匹配 n 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如<span class="string">&#x27;Windows (?!95|98|NT|2000)&#x27;</span> 能匹配 <span class="string">&quot;Windows 3.1&quot;</span> 中的 <span class="string">&quot;Windows&quot;</span>，但不能匹配 <span class="string">&quot;Windows 2000&quot;</span> 中的 <span class="string">&quot;Windows&quot;</span>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</span><br><span class="line"></span><br><span class="line">x|y             | 形容或。匹配 x 或 y。例如，<span class="string">&#x27;z|food&#x27;</span> 能匹配 <span class="string">&quot;z&quot;</span> 或 <span class="string">&quot;food&quot;</span>。<span class="string">&#x27;(z|f)ood&#x27;</span> 则匹配 <span class="string">&quot;zood&quot;</span> 或 <span class="string">&quot;food&quot;</span>。</span><br><span class="line"></span><br><span class="line">[^a-z]          | 形容非，负值字符范围。匹配任何不在指定范围内的任意字符。例如，<span class="string">&#x27;[^a-z]&#x27;</span> 就是匹配任何不在 <span class="string">&#x27;a&#x27;</span> 到 <span class="string">&#x27;z&#x27;</span> 范围内的任意字符。</span><br><span class="line"></span><br><span class="line">\cx             | 匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 <span class="string">&#x27;c&#x27;</span> 字符。</span><br><span class="line"></span><br><span class="line">\b              | 匹配一个单词边界，也就是指单词和空格间的位置。例如， <span class="string">&#x27;er\b&#x27;</span> 可以匹配<span class="string">&quot;never&quot;</span> 中的 <span class="string">&#x27;er&#x27;</span>，但不能匹配 <span class="string">&quot;verb&quot;</span> 中的 <span class="string">&#x27;er&#x27;</span>。</span><br><span class="line"></span><br><span class="line">\B              | 匹配非单词边界。<span class="string">&#x27;er\B&#x27;</span> 能匹配 <span class="string">&quot;verb&quot;</span> 中的 <span class="string">&#x27;er&#x27;</span>，但不能匹配 <span class="string">&quot;never&quot;</span> 中的 <span class="string">&#x27;er&#x27;</span>。</span><br><span class="line"></span><br><span class="line">\s              | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</span><br><span class="line"></span><br><span class="line">    \n              | 匹配一个换行符。等价于 \x0a 和 \cJ。</span><br><span class="line">    \f              | 匹配一个换页符。等价于 \x0c 和 \cL。</span><br><span class="line">    \v              | 匹配一个垂直制表符。等价于 \x0b 和 \cK。</span><br><span class="line">    \r              | 匹配一个回车符。等价于 \x0d 和 \cM。</span><br><span class="line">    \t              | 匹配一个制表符。等价于 \x09 和 \cI</span><br><span class="line"></span><br><span class="line">\S              | 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]</span><br><span class="line"></span><br><span class="line">\d              | 匹配一个数字字符。等价于 [<span class="number">0</span>-<span class="number">9</span>]。</span><br><span class="line"></span><br><span class="line">\D              | 匹配一个非数字字符。等价于 [^<span class="number">0</span>-<span class="number">9</span>]。</span><br><span class="line"></span><br><span class="line">\w              | 匹配包括下划线的任何单词字符。就是于<span class="string">&#x27;[A-Za-z0-9_]&#x27;</span></span><br><span class="line"></span><br><span class="line">    [a-z]           | 字符范围。匹配指定范围内的任意字符。例如，<span class="string">&#x27;[a-z]&#x27;</span> 可以匹配 <span class="string">&#x27;a&#x27;</span> 到 <span class="string">&#x27;z&#x27;</span> 范围内的任意小写字母字符。</span><br><span class="line"></span><br><span class="line">    [A-Z]           | 字符范围。匹配指定范围内的任意字符。例如，<span class="string">&#x27;[A-A]&#x27;</span> 可以匹配 <span class="string">&#x27;A&#x27;</span> 到 <span class="string">&#x27;Z&#x27;</span> 范围内的任意小写字母字符。</span><br><span class="line"></span><br><span class="line">    [<span class="number">0</span>-<span class="number">9</span>]           | 字符范围。匹配指定范围内的任意字符。例如，<span class="string">&#x27;[0-9]&#x27;</span> 可以匹配 <span class="string">&#x27;0&#x27;</span> 到 <span class="string">&#x27;9&#x27;</span> 范围内的任意小写字母字符。</span><br><span class="line"></span><br><span class="line">\W              | 匹配任何非单词字符。等价于 <span class="string">&#x27;[^A-Za-z0-9_]&#x27;</span>。</span><br><span class="line"></span><br><span class="line">\n              | 标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (<span class="number">0</span>-<span class="number">7</span>)，则 n 为一个八进制转义值。</span><br><span class="line"></span><br><span class="line">\uxxxx          | 查找以十六进制数 xxxx 规定的 Unicode 字符。 匹配 xxxx，其中 xxxx 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)</span><br><span class="line"></span><br><span class="line">贪婪匹配         | 贪婪匹配。变成贪婪匹配（能少就不多），在量词后面加个<span class="string">&#x27;？&#x27;</span>号。例如：<span class="keyword">var</span> reg = <span class="regexp">/a+?/g</span>;</span><br><span class="line"></span><br><span class="line">懒惰性           | 懒惰性则是正则在成功捕获一次后不管后边的字符串有没有符合条件的都不再捕获。如果想捕获目标中所有符合条件的字符串的话，我们可以用标识符g来标明是全局捕获</span><br></pre></td></tr></table></figure><p><strong>运算符的优先级：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`从左到右进行运算,不同优先级的运算先高后低:`</span></span><br><span class="line"></span><br><span class="line">运算符                      | 描述</span><br><span class="line"></span><br><span class="line">\                          | 转义符</span><br><span class="line"></span><br><span class="line">(), (?:), (?=), []          | 圆括号和方括号</span><br><span class="line"></span><br><span class="line">*, +, ?, &#123;n&#125;, &#123;n,&#125;, &#123;n,m&#125;   | 限定符</span><br><span class="line"></span><br><span class="line">^, $, \任何元字符、任何字符    | 定位点和序列（即：位置和顺序）</span><br><span class="line"></span><br><span class="line">|                           | 替换，<span class="string">&quot;或&quot;</span>操作字符具有高于替换运算符的优先级，使得<span class="string">&quot;m|food&quot;</span>匹配<span class="string">&quot;m&quot;</span>或<span class="string">&quot;food&quot;</span>。若要匹配<span class="string">&quot;mood&quot;</span>或<span class="string">&quot;food&quot;</span>，请使用括号创建子表达式，从而产生<span class="string">&quot;(m|f)ood&quot;</span>。</span><br></pre></td></tr></table></figure><h2 id="RegExp-对象方法、属性"><a href="#RegExp-对象方法、属性" class="headerlink" title="RegExp 对象方法、属性"></a>RegExp 对象方法、属性</h2><p><strong>RegExp 对象方法属性（FF是火狐浏览器，IE 的 ie 浏览器，从哪个版本开始兼容）;</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">属性        | 描述</span><br><span class="line"></span><br><span class="line"><span class="built_in">global</span>      | <span class="built_in">RegExp</span> 对象是否具有标志 g，进行全局匹配</span><br><span class="line"></span><br><span class="line">ignoreCase  | <span class="built_in">RegExp</span> 对象是否具有标志 i，不区分大小写</span><br><span class="line"></span><br><span class="line">input       | 被匹配的串</span><br><span class="line"></span><br><span class="line">lastIndex   | 一个整数，标示开始下一次匹配的字符位置</span><br><span class="line"></span><br><span class="line">lastParen   | 被最后一个括号括起来的子串</span><br><span class="line"></span><br><span class="line">lastContent | 最近一次匹配以左的子串</span><br><span class="line"></span><br><span class="line">multiline   | <span class="built_in">RegExp</span> 对象是否具有标志 m，进行多行匹配</span><br><span class="line"></span><br><span class="line">source      | 正则表达式的源文本</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">方法        | 描述</span><br><span class="line"></span><br><span class="line">compile     | 编译正则表达式</span><br><span class="line"></span><br><span class="line">exec        | 检索字符串中指定的值。返回找到的值，并确定位置</span><br><span class="line"></span><br><span class="line">test        | 检索字符串中指定的值，返回<span class="built_in">Boolean</span>值（<span class="literal">true</span> &amp; <span class="literal">false</span>）</span><br><span class="line"></span><br><span class="line">match       | 找到一个或多个正则表达式的匹配</span><br><span class="line"></span><br><span class="line">search      | 检索与正则表达式相匹配的值，返回的不是 -<span class="number">1</span> 都匹配成功了，返回的是匹配这个东西的位置</span><br><span class="line"></span><br><span class="line">split       | 把字符串分割为字符串数组</span><br><span class="line"></span><br><span class="line">replace     | 替换和正则表达式匹配的字符串，replace 的精华是正则表达式</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>*？意思是能取 0，就不取多</p></li><li><p>想匹配空格，直接写，就可以了</p></li><li><p>想把选中的字符替换成$，直接写$是不行的，需要加上转义字符$</p><p> 由于在替换文本里面$有了特殊的含义（$代表反向引用），如果想要是替换 $ 这个字符的话，需要写成 $$，充当转义字符</p></li><li><p>正则表达式要匹配一个反向引用的东西，写\</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aa\\aaaa&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\\/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&#x27;\&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>在正则表达式里面要匹配问号？写? 其余*+-()星号加号减号都类似</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aa?aaaa&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\?/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&#x27;?&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：下面是想去重，变成 abc，先匹配一串，再取一</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aaaaaaaaaaaabbbbbbbbbccccccccc&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1*/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg,$<span class="number">1</span>));</span><br><span class="line"><span class="comment">// abc</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">百度招聘 <span class="number">14</span> 年最后一题:</span><br><span class="line">给 <span class="keyword">var</span> str = <span class="string">&#x27;100000000000&#x27;</span>; 这个数字科学计数法，每隔三位打点</span><br><span class="line">思路：找规律，从后往前查，每三位打个点，换个空进去【什么样的空？后面的数 一定是 <span class="number">3</span> 的倍数，(\d&#123;<span class="number">3</span>&#125;)+是 <span class="number">3</span> 的倍数位个数字，这里面的东西一到多个，第一个/ 后面的空后面加上正向预查，后面是<span class="number">3</span> 的倍数位个数字，$以什么结尾】空的后面跟 着 <span class="number">3</span> 的倍数位个数字并且以这个结尾。\B 非单词边界</span><br><span class="line"></span><br><span class="line">答案：</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;1000000000000&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?=(\B)(\d&#123;3&#125;))+$/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg,<span class="string">&#x27;.&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h2><blockquote><ol><li> 正则表达式实现aabb的形式变成bbaa</li><li> 给10000000000三位打点 变成 10.000.000.000</li><li> 字符串去重 aaaaaaaaaaaaaaaaaaaaaabbbbbbbbcccccccccc变成abc</li><li> 把the-first-name转换成小驼峰式theFirstName</li><li> 匹配结尾的数字</li><li> 统一空格数</li><li> 判断字符串是不是由数字构成</li><li> 删除字符串中的空格</li><li> 身份证号匹配</li><li> 将字符串”select student.*,result.* from student inner join result on student.id = result.studentid” 和字符串”select * from student “中的student替换成key值</li></ol></blockquote><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p><strong><code>BOM</code></strong> 是 <strong><code>brower object model</code></strong> 的缩写，简称浏览器对象模型，主要处理浏览器窗口和框架，描述了与浏览器进行交互的方法和接口，可以对浏览器窗口进行访问和操作，譬如可以弹出新的窗口，回退历史记录，获取url……。</p><h2 id="一、BOM-与-DOM（Document-Object-Model）的关系"><a href="#一、BOM-与-DOM（Document-Object-Model）的关系" class="headerlink" title="一、BOM 与 DOM（Document Object Model）的关系"></a>一、BOM 与 DOM（Document Object Model）的关系</h2><p><code>javascript</code>是通过访问<code>BOM</code>对象来访问、控制、修改浏览器</p><p><code>window</code>是BOM的属性，也就是说<code>BOM</code>的<code>window</code>包含了<code>document</code>，因此通过<code>window</code>对象的<code>document</code>属性就可以访问、检索、修改文档内容与结构</p><p><code>document</code>对象又是<code>DOM</code>模型的根节点。因此，<code>BOM</code>包含了<code>DOM</code>，浏览器提供出来给予访问的是<code>BOM</code>对象，从BOM对象再访问到<code>DOM</code>对象，从而js可以操作浏览器以及浏览器读取到的文档</p><p><code>DOM</code>的大部分内容都是<code>W3c</code>标准规范，所以兼容性很好，不需要太多的兼容性代码，而<code>BOM</code>则不一样，<code>BOM</code>没有<code>W3c</code>规范，每个浏览器厂家的规范也就不一样了。</p><h2 id="二、BOM对象包含的对象"><a href="#二、BOM对象包含的对象" class="headerlink" title="二、BOM对象包含的对象"></a>二、BOM对象包含的对象</h2><p><strong>不是说BOM下面只包含了一个window对象吗？其实BOM对象下面只有一个window对象，但是因为了解清除，所以其他四个也是比较重要的对象了;</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Window      | Javascript 层级中的顶层对象，表示浏览器窗口</span><br><span class="line"></span><br><span class="line">Navigator   | 包含客户端浏览器的信息。（比如浏览器的版本号）</span><br><span class="line"></span><br><span class="line">History     | 包含了浏览器窗口访问过的URL（比如历史记录，前进、后退）</span><br><span class="line"></span><br><span class="line">Location    | 包含了当前URL的信息（地址栏中的信息）</span><br><span class="line"></span><br><span class="line">Screen      | 包含了客户端显示屏的信息（返回一些屏幕信息，基本上用不到）</span><br></pre></td></tr></table></figure><h3 id="Window-对象"><a href="#Window-对象" class="headerlink" title="Window 对象"></a>Window 对象</h3><p><strong><code>Window</code>对象表示一个浏览器窗口或一个框架，在客户端JavaScript中，<code>Window</code>对象是全局对象，所有的表达式都在当前的环境中计算，也就是说，要引用当前窗口根本不需要特殊的语法，可以把那个窗口的属性作为全局变量来使用。例如，可以只写<code>document</code>，而不必写<code>window.document</code>；</strong></p><h4 id="window-对象属性"><a href="#window-对象属性" class="headerlink" title="window 对象属性"></a>window 对象属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`closed`</span>        | 返回窗口是否已被关闭，例：<span class="built_in">window</span>.closed;</span><br><span class="line"></span><br><span class="line">defaultStatus   | 设置或返回窗口状态栏中的默认文本。（仅Opera支持）</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>        | 对 Document 对象的只读引用，请参阅 Document 对象</span><br><span class="line"></span><br><span class="line"><span class="string">`history`</span>       | 对 History 对象的只读引用。请参数 History 对象</span><br><span class="line"></span><br><span class="line"><span class="string">`innerHeight`</span>   | 返回窗口的文档显示区的高度</span><br><span class="line"></span><br><span class="line"><span class="string">`innerWidth`</span>    | 返回窗口的文档显示区的宽度</span><br><span class="line"></span><br><span class="line">length          | 设置或返回窗口中的框架数量</span><br><span class="line"></span><br><span class="line"><span class="string">`location`</span>      | 用于窗口或框架的 Location 对象，请参阅 Location 对象</span><br><span class="line"></span><br><span class="line">name            | 设置或返回窗口的名称</span><br><span class="line"></span><br><span class="line"><span class="string">`Navigator`</span>     | 对 Navigator 对象的只读引用，请参阅 Navigator 对象</span><br><span class="line"></span><br><span class="line">opener          | 返回对创建此窗口的窗口的引用</span><br><span class="line"></span><br><span class="line">outerheight     | 返回窗口的外部高度</span><br><span class="line"></span><br><span class="line">outerwidth      | 返回窗口的外部宽度</span><br><span class="line"></span><br><span class="line"><span class="string">`pageXoffset`</span>   | 设置或返回当前页面相对于窗口显示区左上角的 X 位置</span><br><span class="line"></span><br><span class="line"><span class="string">`pageYoffset`</span>   | 设置或返回当前页面相对于窗口显示区左上角的 Y 位置</span><br><span class="line"></span><br><span class="line">parent          | 返回父窗口</span><br><span class="line"></span><br><span class="line"><span class="string">`Screen`</span>        | 对 Screen 对象的只读引用，请参数 Screen 对象</span><br><span class="line"></span><br><span class="line">self            | 返回对当前窗口的引用，等价于 Window 属性</span><br><span class="line"></span><br><span class="line">status          | 设置窗口状态栏的文本（默认只支持 Opera）</span><br><span class="line"></span><br><span class="line">top             | 返回最顶层的先辈窗口</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>          | <span class="built_in">window</span> 属性等价于 self 属性，它包含了对窗口自身的引用</span><br><span class="line"></span><br><span class="line"><span class="string">`screenLeft`</span>    | 返回窗口相对于屏幕的 X 坐标。</span><br><span class="line"></span><br><span class="line"><span class="string">`screenTop`</span>     | 返回窗口相对于屏幕的 Y 坐标。</span><br><span class="line"></span><br><span class="line"><span class="string">`screenX`</span>       | 返回窗口相对于屏幕的 X 坐标。</span><br><span class="line"></span><br><span class="line"><span class="string">`screenY`</span>       | 返回窗口相对于屏幕的 Y 坐标。</span><br></pre></td></tr></table></figure><h4 id="window-对象方法"><a href="#window-对象方法" class="headerlink" title="window 对象方法"></a>window 对象方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`alert()`</span>           | 显示或弹出带有一段消息和一个确认按钮的警告框</span><br><span class="line"></span><br><span class="line">blur()              | 把键盘焦点从顶层窗口移开</span><br><span class="line"></span><br><span class="line">focus()             | 把键盘焦点给予一个窗口</span><br><span class="line"></span><br><span class="line"><span class="string">`setInterval()`</span>     | 按照指定的周期（以毫秒来调用函数或计算表达式），定时器</span><br><span class="line"></span><br><span class="line"><span class="string">`setTimerout()`</span>     | 在指定的毫秒数后调用函数或计算表达式，定时器，只执行一次</span><br><span class="line"></span><br><span class="line"><span class="string">`clearInterval()`</span>   | 取消由<span class="built_in">setInterval</span>设置的定时器tiemout</span><br><span class="line"></span><br><span class="line"><span class="string">`clearTimeout()`</span>    | 取消由<span class="built_in">setTimeout</span>设置的定时器tiemout</span><br><span class="line"></span><br><span class="line"><span class="string">`close(`</span>)           | 关闭浏览器窗口</span><br><span class="line"></span><br><span class="line"><span class="string">`confirm()`</span>         | 显示或弹出带有一段消息以及确认按钮和取消按钮的对话框，确认返回<span class="literal">true</span>，取消返回<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">createPopup()       | 创建一个弹出窗口，只有ie支持（不包括ie11）</span><br><span class="line"></span><br><span class="line">moveBy(x,y)         | 可相对窗口的当前坐标把它移动指定的像素，moveBy(<span class="number">100</span>,<span class="number">100</span>)中的<span class="number">100</span>就代表<span class="number">100</span>像素，可以配合 open()来时使用</span><br><span class="line"></span><br><span class="line">moveTO()            | 把窗口的左上角移动到要给指定的坐标</span><br><span class="line"></span><br><span class="line"><span class="string">`open()`</span>            | 打开一个新的浏览器窗口或查找一个已命名的窗口，<span class="built_in">window</span>.open(URL,name（窗口的名称）,features,replace),例如：open(<span class="string">&#x27;url&#x27;</span>,<span class="string">&#x27;name（窗口的名称）&#x27;</span>,<span class="string">&#x27;属性&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print()             | 打印（就是打印当前页面）当前窗口内容</span><br><span class="line"></span><br><span class="line"><span class="string">`prompt()`</span>          | 显示可提示用户输入的对话框</span><br><span class="line"></span><br><span class="line"><span class="string">`resizeBy()`</span>        | 按照指定的像素调整窗口的大小</span><br><span class="line"></span><br><span class="line"><span class="string">`resizeTo()`</span>        | 把窗口的大小调整到指定宽度和高度</span><br><span class="line"></span><br><span class="line"><span class="string">`scrollBy()`</span>        | 按照指定的像素值来滚动内容</span><br><span class="line"></span><br><span class="line"><span class="string">`scrollTo()`</span>        | 把内容滚动到指定的坐标</span><br></pre></td></tr></table></figure><h3 id="Navigator-对象"><a href="#Navigator-对象" class="headerlink" title="Navigator 对象"></a>Navigator 对象</h3><p><strong><code>Navigator</code>对象包含的属性描述了正在使用的浏览器。可以使用这些属性进行平台专用的配置。虽然这个对象的名称显而易见的是<code>Netscape</code>的<code>Navigator</code>浏览器，但其他实现了<code>JavaScript</code>的浏览器也支持这个对象</strong></p><h4 id="Navigator-对象属性"><a href="#Navigator-对象属性" class="headerlink" title="Navigator 对象属性"></a>Navigator 对象属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">appCodeName      | 返回浏览器的代码名。以 Netscape 代码为基础的浏览器中，它的值是<span class="string">&quot;Mozila&quot;</span>。为兼容Microsoft也是</span><br><span class="line"></span><br><span class="line">appMinorVersion  | 返回浏览器的次级版本。（IE4、Opera支持）</span><br><span class="line"></span><br><span class="line">appName          | 返回浏览器的名称</span><br><span class="line"></span><br><span class="line">appVersion       | 返回浏览器的平台和版本信息</span><br><span class="line"></span><br><span class="line">browserLanguage  | 返回当前浏览器的语言（IE 和 Opera 支持）</span><br><span class="line"></span><br><span class="line"><span class="string">`cookieEnabled`</span>  | 返回指明浏览器中是否启用 cookie 的布尔值</span><br><span class="line"></span><br><span class="line">cpuClass         | 返回浏览器系统的 CPU 等级（IE支持）</span><br><span class="line"></span><br><span class="line"><span class="string">`onLina`</span>         | 返回执行系统是否处于脱机模式的布尔值（连没连网）</span><br><span class="line"></span><br><span class="line">platform         | 返回运行浏览器的操作系统平台</span><br><span class="line"></span><br><span class="line">systemLanguage   | 返回当前系统的默认语言。（IE支持）</span><br><span class="line"></span><br><span class="line"><span class="string">`userAgent`</span>      | 返回有客户机发送服务器的 user-agent 头部的值。</span><br><span class="line"></span><br><span class="line">userLanguage     | 返回操作系统设定的自然语言。（IE 和 Opera 支持）</span><br><span class="line"></span><br><span class="line">plugins          | 返回包含客户端安装的所欲插件的数组</span><br></pre></td></tr></table></figure><h4 id="Navigator-对象方法"><a href="#Navigator-对象方法" class="headerlink" title="Navigator 对象方法"></a>Navigator 对象方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javaEnabled()     | 规定浏览器是否支持并启用了 Java</span><br><span class="line"></span><br><span class="line">taintEnabled()    | 规定浏览器是否启用数据污点（data tainting）</span><br></pre></td></tr></table></figure><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><p><strong>History 对象包含用户（在浏览器窗口中）访问过的URL;</strong></p><h4 id="History-对象属性"><a href="#History-对象属性" class="headerlink" title="History 对象属性"></a>History 对象属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">length      | 返回浏览器历史列表中的 URL 数量</span><br></pre></td></tr></table></figure><h4 id="History-对象方法"><a href="#History-对象方法" class="headerlink" title="History 对象方法"></a>History 对象方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">back()      | 加载 history 列表中的前一个 URL</span><br><span class="line"></span><br><span class="line">forward()   | 加载 history 列表中的下一个 URL</span><br><span class="line"></span><br><span class="line">go()        | 加载 history 列表中的某个具体页面,例如 history.go(-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Location-对象"><a href="#Location-对象" class="headerlink" title="Location 对象"></a>Location 对象</h3><p><strong>Location 对象包含有关当前 URL 的信息;</strong></p><h4 id="Location-对象属性"><a href="#Location-对象属性" class="headerlink" title="Location 对象属性"></a>Location 对象属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`hash`</span>        | 设置或返回从井号（#）开始的 URL（锚）。</span><br><span class="line"></span><br><span class="line"><span class="string">`host`</span>        | 加载 history 列表中的下一个 URL</span><br><span class="line"></span><br><span class="line">hostname      | 加载 history 列表中的某个具体页面,例如 history.go(-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">`href`</span>        | 设置或返回完整的 URL</span><br><span class="line"></span><br><span class="line"><span class="string">`pathname`</span>    | 设置或返回当前 URL 的路径部分</span><br><span class="line"></span><br><span class="line">port          | 设置或返回当前 URL 的端口号</span><br><span class="line"></span><br><span class="line"><span class="string">`protocol`</span>    | 设置或返回当前 URL 的协议</span><br><span class="line"></span><br><span class="line"><span class="string">`search`</span>      | 设置或返回从问号（？）开始的 URL(查询部分)</span><br></pre></td></tr></table></figure><h4 id="Location-对象方法"><a href="#Location-对象方法" class="headerlink" title="Location 对象方法"></a>Location 对象方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`assign()`</span>          | 加载新的文档</span><br><span class="line"></span><br><span class="line"><span class="string">`reload(&#x27;force&#x27;)`</span>   | 重新加载当前文档，参数可选，不填或填 <span class="literal">false</span> 则取浏览器缓存的文档</span><br><span class="line"></span><br><span class="line"><span class="string">`replace()`</span>         | 用新的文档替换当前文档</span><br></pre></td></tr></table></figure><h3 id="Screen-对象"><a href="#Screen-对象" class="headerlink" title="Screen 对象"></a>Screen 对象</h3><blockquote><p><code>Screen</code>对象包含有关客户端显示屏幕的信息。每个<code>Window</code>对象的<code>screen</code>属性都引用一个<code>Screen</code>对象。<code>Screen</code>对象中存放着有关显示浏览器屏幕的信息。<code>Javascript</code>程序将利用这些信息来优化它们的输出，以达到用户的显示要求。例如，一个程序可以根据显示器的尺寸选择使用大图像还是使用小图像，它还可以根据显示器的颜色深度选择使用<code>16</code>位色还是使用<code>8</code>位色的图形。另外，<code>JavaScript</code>程序还能根据有关屏幕尺寸的信息将新的浏览器窗口定位在屏幕中间</p></blockquote><h4 id="Screen-对象属性"><a href="#Screen-对象属性" class="headerlink" title="Screen 对象属性"></a>Screen 对象属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">availHeight            | 返回显示屏的高度（除 Windows 任务栏之外）</span><br><span class="line"></span><br><span class="line">availWidth             | 返回显示屏的宽度（除 Windows 任务栏之外）</span><br><span class="line"></span><br><span class="line">bufferDepth            | 设置或返回调色板的比特深度（仅 IE 支持）</span><br><span class="line"></span><br><span class="line">colorDepth             | 返回目标设备或缓冲器上的调色板的比特深度</span><br><span class="line"></span><br><span class="line">deviceXDPI             | 返回显示屏幕的每英寸水平点数（仅 IE 支持）</span><br><span class="line"></span><br><span class="line">deviceYDPI             | 返回显示屏幕的每英寸垂直点数（仅 IE 支持）</span><br><span class="line"></span><br><span class="line">fontSmoothingEnabled   | 返回用户是否在显示控制面板中启用了字体平滑（仅 IE 支持）</span><br><span class="line"></span><br><span class="line">height                 | 返回显示屏幕的高度</span><br><span class="line"></span><br><span class="line">logicaIXDPI            | 返回显示屏幕每英寸的水平方向的常规点数（仅 IE 支持）</span><br><span class="line"></span><br><span class="line">logicaIYDPI            | 返回显示屏幕每英寸的垂直方向的常规点数（仅 IE 支持）</span><br><span class="line"></span><br><span class="line">pixelDepth             | 返回显示器的颜色分辨率（比特每像素）</span><br></pre></td></tr></table></figure><h1 id="Js运动"><a href="#Js运动" class="headerlink" title="Js运动"></a>Js运动</h1><h2 id="加速运动"><a href="#加速运动" class="headerlink" title="加速运动"></a>加速运动</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oWrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;wrapper&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line">oWrapper.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    startMove(<span class="built_in">this</span>, <span class="number">300</span>); <span class="comment">// this就是obj对象，300就是运动距离</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj,target</span>) </span>&#123; <span class="comment">// obj 是DOM对象,target是距离</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    <span class="keyword">var</span> iSpeed; <span class="comment">// 速度</span></span><br><span class="line">    <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        iSpeed = (target - obj.offsetLeft) / <span class="number">8</span>; <span class="comment">// 速度-DOM对象的offsetLeft，查看还有多少距离，当距离达到300就停止，除8 是因为数字太大</span></span><br><span class="line">        iSpeed = iSpeed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed); <span class="comment">// 当 iSpeed 大于0时，使用ceil向上取整，否则floor向下取整</span></span><br><span class="line">        <span class="keyword">if</span>(obj.offsetLeft == target) &#123; <span class="comment">// 停止条件</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">            obj.offsetLeft = target;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不等于300时执行下面程序</span></span><br><span class="line">            obj.style.left = obj.offsetLeft + iSpeed + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="悬浮拉伸"><a href="#悬浮拉伸" class="headerlink" title="悬浮拉伸"></a>悬浮拉伸</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oWrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;wrapper&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// oWrapper 是一个父元素，可以添加一个子元素，延伸到外面，使用冒泡触发</span></span><br><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line">oWrapper.onmouseenter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    startMove(<span class="built_in">this</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">oWrapper.onmouseleave = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    startMove(<span class="built_in">this</span>, -<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj, target</span>) </span>&#123; <span class="comment">// this就是对象，300就是运动距离</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(timer); <span class="comment">// 如果不停止，它会累加每次的速度</span></span><br><span class="line">    <span class="keyword">var</span> iSpeed; <span class="comment">// 速度</span></span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        iSpeed = (target - obj.offsetLeft) / <span class="number">8</span>; 速度-DOM对象的offsetLeft，查看还有多少距离</span><br><span class="line">        iSpeed = iSpeed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed);</span><br><span class="line">        <span class="keyword">if</span> (obj.offsetLeft === target) &#123;<span class="comment">// 停止条件</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 不等于300时执行下面程序</span></span><br><span class="line">            obj.style.left = obj.offsetLeft + iSpeed + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链式运动框架"><a href="#链式运动框架" class="headerlink" title="链式运动框架"></a>链式运动框架</h2><h3 id="透明运动函数"><a href="#透明运动函数" class="headerlink" title="透明运动函数"></a>透明运动函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oWrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;wrapper&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line">oWrapper.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        startMove(<span class="built_in">this</span>, <span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, prop</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.currentStyle) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[prop];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(obj, <span class="literal">null</span>)[prop];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj, target</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    <span class="keyword">var</span> iSpeed, iCur;</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        iCur = <span class="built_in">parseFloat</span>(getStyle(obj,<span class="string">&#x27;opacity&#x27;</span>)) * <span class="number">100</span>;</span><br><span class="line">        iSpeed = (target - iCur) / <span class="number">7</span>;</span><br><span class="line">        iSpeed += iSpeed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed);</span><br><span class="line">        <span class="keyword">if</span>(iCur == target)&#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj.style.opacity = (iCur + iSpeed) / <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式运动框架-1"><a href="#链式运动框架-1" class="headerlink" title="链式运动框架"></a>链式运动框架</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj,json,callback</span>) </span>&#123; <span class="comment">// obj是DOM对象，json是参数对象，callback是回调函数（可以重复调动）</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">    <span class="keyword">var</span> iSpeed,iCur; <span class="comment">// iSpeed 为速度，iCur 是DOM元素的原参数</span></span><br><span class="line">    obj.timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bStop = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json) &#123;</span><br><span class="line">            <span class="keyword">if</span>(attr == <span class="string">&#x27;opacity&#x27;</span>) &#123;</span><br><span class="line">                iCur = <span class="built_in">parseFloat</span>(getStyle(obj,attr)) * <span class="number">100</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                iCur = <span class="built_in">parseInt</span>(getStyle(obj,attr));</span><br><span class="line">            &#125;</span><br><span class="line">            iSpeed = (json[attr] - iCur) / <span class="number">7</span>; <span class="comment">// 传进去的参数 - 原来的参数，查看还有多少，越来越小就代表越来越接近传进来的参数设置，就会停止，/7是因为数字太大，可以除任何一个数字</span></span><br><span class="line">            iSpeed += iSpeed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed); <span class="comment">//当 iSpeed 大于0时，使用ceil向上取整，否则floor向下取整，为了让iSpeed最后可以完美接近传进来的参数</span></span><br><span class="line">            <span class="keyword">if</span>(attr == <span class="string">&#x27;opacity&#x27;</span>) &#123;</span><br><span class="line">                obj.style.opacity = (iCur + iSpeed) / <span class="number">100</span>; <span class="comment">// iCur 是原来提取的样式，iSpeed是速度，不断向传进来的参数靠近，越来越小，最终停止</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                obj.style[attr] = (iCur + iSpeed) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(iCur != json[attr]) &#123;</span><br><span class="line">            bStop = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bStop) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">            <span class="keyword">typeof</span> callback == <span class="string">&#x27;function&#x27;</span> ? callback() : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="弹性运动"><a href="#弹性运动" class="headerlink" title="弹性运动"></a>弹性运动</h2><h3 id="初级弹性运动"><a href="#初级弹性运动" class="headerlink" title="初级弹性运动"></a>初级弹性运动</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oNav = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">oDiv.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    startMove(<span class="built_in">this</span>,<span class="number">300</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj,target</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">    <span class="keyword">var</span> iSpeed = <span class="number">40</span>,a,u = <span class="number">0.8</span>;</span><br><span class="line">    obj.timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a = (target - obj.offsetLeft) / <span class="number">8</span>;</span><br><span class="line">        iSpeed += a;</span><br><span class="line">        iSpeed *= u;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(iSpeed) &lt; <span class="number">1</span> &amp;&amp; <span class="built_in">Math</span>.abs(<span class="number">300</span> - obj.offsetLeft) &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj.style.left = obj.offsetLeft + iSpeed + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="横向弹性导航"><a href="#横向弹性导航" class="headerlink" title="横向弹性导航"></a>横向弹性导航</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> LiArr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;nav&#x27;</span>),<span class="number">0</span>); <span class="comment">// 把ul下的li选中变成数组，好用forEach方法</span></span><br><span class="line"><span class="keyword">var</span> oBg = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;bg&#x27;</span>)[<span class="number">0</span>]; <span class="comment">// 选中ul下面的第一个li，让它独立出来，不给位置，作为背景色 // 自己悬浮</span></span><br><span class="line">LiArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index</span>) </span>&#123;</span><br><span class="line">    ele.onmouseenter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 自己悬浮</span></span><br><span class="line">            <span class="keyword">var</span> newLeft = <span class="built_in">this</span>.offsetLeft; <span class="comment">// 自己的offstLeft属性</span></span><br><span class="line">            startMove(oBg,newLeft);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj, target</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">    <span class="keyword">var</span> iSpeed = <span class="number">40</span>, <span class="comment">// 初速度</span></span><br><span class="line">        a, u = <span class="number">0.75</span>; <span class="comment">// a为接近速度，u为摩擦力</span></span><br><span class="line">    obj.timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        a = (target - obj.offsetLeft) / <span class="number">7</span>;</span><br><span class="line">        iSpeed += a;</span><br><span class="line">        iSpeed *= u;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(iSpeed) &lt;= <span class="number">1</span> &amp;&amp; <span class="built_in">Math</span>.abs(target - obj.offsetLeft) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">            obj.style.left = target + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj.style.left = obj.offsetLeft + iSpeed + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扔球的函数"><a href="#扔球的函数" class="headerlink" title="扔球的函数"></a>扔球的函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throwBall</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    obj.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event, <span class="comment">// 兼容IE</span></span><br><span class="line">            timer, <span class="comment">//定时器</span></span><br><span class="line">            disX, <span class="comment">//鼠标X、Y轴位置</span></span><br><span class="line">            disY,</span><br><span class="line">            lastX = obj.offsetLeft,</span><br><span class="line">            lastY = obj.offsetTop,</span><br><span class="line">            iSpeedX = <span class="number">0</span>, <span class="comment">// 鼠标向X、y轴施的力</span></span><br><span class="line">            iSpeedY = <span class="number">0</span>,</span><br><span class="line">            that = <span class="built_in">this</span>; <span class="comment">// 代表this一直为obj</span></span><br><span class="line">        disX = e.clientX - <span class="built_in">this</span>.offsetLeft; <span class="comment">// 现在的鼠标X，Y轴位置</span></span><br><span class="line">        disY = e.clientY - <span class="built_in">this</span>.offsetTop;</span><br><span class="line">        <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">            <span class="keyword">var</span> newLeft = e.clientX - disX; <span class="comment">// 移动时的位置</span></span><br><span class="line">            <span class="keyword">var</span> newTop = e.clientY - disY;</span><br><span class="line">            <span class="built_in">clearInterval</span>(that.timer); <span class="comment">// 每次移动都要停止之前的定时器，要不然会不受控</span></span><br><span class="line">            iSpeedX = newLeft - lastX; <span class="comment">// 更新X，Y轴施力</span></span><br><span class="line">            iSpeedY = newTop - lastY;</span><br><span class="line">            lastX = newLeft; <span class="comment">// 更新X，Y轴位置</span></span><br><span class="line">            lastY = newTop;</span><br><span class="line">            that.style.left = newLeft + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            that.style.top = newTop + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line">            startMoveTwo(that, iSpeedX, iSpeedY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMoveTwo</span>(<span class="params">obj,iSpeedX,iSpeedY</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 每次开始前就清空以前的计时器</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">    <span class="comment">// g为初始力</span></span><br><span class="line">        <span class="keyword">var</span> g = <span class="number">6</span>;</span><br><span class="line">        obj.timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            iSpeedY += g;</span><br><span class="line">            newLeft = obj.offsetLeft + iSpeedX;</span><br><span class="line">            newTop = obj.offsetTop + iSpeedY;</span><br><span class="line">            <span class="keyword">if</span> (newTop &gt;= <span class="built_in">document</span>.documentElement.clientHeight - obj.offsetHeight) &#123;</span><br><span class="line">                <span class="comment">// 当弹到左右两边的时候 *-1 反转弹回来</span></span><br><span class="line">                iSpeedY *= -<span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 每次 *0.8 是摩擦力，让它可以停下来</span></span><br><span class="line">                iSpeedX *= <span class="number">0.8</span>;</span><br><span class="line">                iSpeedY *= <span class="number">0.8</span>;</span><br><span class="line">                newTop = <span class="built_in">document</span>.documentElement.clientHeight - obj.offsetHeight;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (newTop &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                iSpeedY *= -<span class="number">1</span>;</span><br><span class="line">                iSpeedX *= <span class="number">0.8</span>;</span><br><span class="line">                iSpeedY *= <span class="number">0.8</span>;</span><br><span class="line">                newTop = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (newLeft &gt;= <span class="built_in">document</span>.documentElement.clientWidth - obj.offsetWidth) &#123;</span><br><span class="line">                iSpeedX *= -<span class="number">1</span>;</span><br><span class="line">                iSpeedX *= <span class="number">0.8</span>;</span><br><span class="line">                iSpeedY *= <span class="number">0.8</span>;</span><br><span class="line">                newLeft = <span class="built_in">document</span>.documentElement.clientWidth - obj.offsetHeight;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (newLeft &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                iSpeedX *= -<span class="number">1</span>;</span><br><span class="line">                iSpeedX *= <span class="number">0.8</span>;</span><br><span class="line">                iSpeedY *= <span class="number">0.8</span>;</span><br><span class="line">                newLeft = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 结束条件</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(iSpeedX) &lt;= <span class="number">1</span> &amp;&amp; <span class="built_in">Math</span>.abs(iSpeedY) &lt;= <span class="number">1</span> &amp;&amp; newTop == <span class="built_in">document</span>.documentElement</span><br><span class="line">                .clientHeight - obj.clientHeight) &#123;</span><br><span class="line">                iSpeedX = <span class="number">0</span>;</span><br><span class="line">                iSpeedY = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;over&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            obj.style.left = newLeft + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            obj.style.top = newTop + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;, <span class="number">30</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tab菜单切换-手风琴菜单"><a href="#tab菜单切换-手风琴菜单" class="headerlink" title="tab菜单切换 \ 手风琴菜单"></a>tab菜单切换 \ 手风琴菜单</h2><h3 id="tab菜单"><a href="#tab菜单" class="headerlink" title="tab菜单"></a>tab菜单</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tabs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;tab&#x27;</span>); <span class="comment">// 标题</span></span><br><span class="line"><span class="keyword">var</span> goods = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;good&#x27;</span>); <span class="comment">// 内容</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tabs.length; i++) &#123;</span><br><span class="line">    tabs[i].index = i;</span><br><span class="line">    tabs[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; goods.length; j++) &#123;</span><br><span class="line">            goods[j].style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        goods[<span class="built_in">this</span>.index].style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手风琴菜单"><a href="#手风琴菜单" class="headerlink" title="手风琴菜单"></a>手风琴菜单</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oInfos = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;info-con&#x27;</span>); <span class="comment">// li，包裹着图片的，用js加载图片，要先写好样式   // 包裹li外面的ul标签给css样式是</span></span><br><span class="line"><span class="keyword">var</span> len = oInfos.length <span class="comment">// li数量，也是图片的数量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    oInfos[i].style.backgroundImage = <span class="string">&quot;url(images/&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&#x27;.png)&#x27;</span>; <span class="comment">// 加载图片，用字符串串联起来</span></span><br><span class="line">    oInfos[i].onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            startMove(oInfos[j], &#123;</span><br><span class="line">                    <span class="attr">width</span>: <span class="number">100</span></span><br><span class="line">                &#125;) <span class="comment">// 鼠标悬浮的时候其他的图片宽度都改为100</span></span><br><span class="line">        &#125;</span><br><span class="line">        startMove(<span class="built_in">this</span>, &#123;</span><br><span class="line">                <span class="attr">width</span>: <span class="number">900</span></span><br><span class="line">            &#125;) <span class="comment">// 鼠标悬浮时选中的图片宽度为900，看具体图片宽度多少</span></span><br><span class="line">    &#125;</span><br><span class="line">    oInfos[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            startMove(oInfos[i], &#123;</span><br><span class="line">                <span class="attr">width</span>: <span class="number">240</span></span><br><span class="line">            &#125;); <span class="comment">// 鼠标离开的时候全部回归正常宽度，看你css给li多少宽度，240是我给的，看具体情况</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-必会知识点（琐碎、相互独立）"><a href="#JavaScript-必会知识点（琐碎、相互独立）" class="headerlink" title="JavaScript 必会知识点（琐碎、相互独立）"></a>JavaScript 必会知识点（琐碎、相互独立）</h1><ol><li><p><strong>属性映射 HTML属性，映射到Element;</strong></p></li><li><p><strong>cdn（缓存服务器）;</strong></p></li><li><p><strong>断点调试（debugger;）;</strong></p></li><li><p><strong>typeof(new Array).<strong>proto</strong>.constructor();;</strong></p></li></ol><h2 id="渲染模式"><a href="#渲染模式" class="headerlink" title="渲染模式"></a>渲染模式</h2><blockquote><p>在多年以前（IE6诞生以前），各大浏览器都处于各自比较封闭的发展中（基本没有兼容性可谈）。随着web的发展，兼容性问题的解决越来越显得迫切，随即，各浏览器厂商发布了按照标准模式（遵循各厂商制定的统一标准）工作的浏览器，比如IE6就是其中之一。但是考虑到以前建设的网站并不支持标准模式，所以各大浏览器在加入标准模式的同时也保留了混杂模式（即以前那种未按照统一标准工作的模式，也叫怪异模式）</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">DOCTYPE <span class="comment">// 三种标准模式的写法</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> &lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> &lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> &lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span></span><br><span class="line"><span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">如果当&lt;!DOCTYPE html&gt;不写，或者写错了，都会进入到怪异渲染模式中</span><br></pre></td></tr></table></figure><ol><li><p><strong>渲染模式 : &lt;! DOCTYPE html&gt; 是 html5 的，写三种的任何一种都是可以的，都是正常渲染模式</strong></p></li><li><p><strong>怪异/混杂模式 : 试图去兼容之前的语法，去掉<!DOCTYPE html>这一行即可开启（向后兼容）</strong></p></li></ol><p><strong>document.compatMode</strong>是判断是怪异模式还是标准模式</p><p><strong>CSS1Compat – 标准模式;</strong></p><p><strong>BackCompat – 怪异模式向后兼容;</strong></p><p><code>怪异模式不是说对所有的浏览器都管用，主要是针对IE6及以下的浏览器版本的。</code></p><p><code>怪异模式下盒模型会变成IE盒模型，行盒也会可以改变宽高</code></p><p><strong>IE盒模型：box-sizing:border-box;</strong></p><p><strong>属性</strong>：<em>content-box;</em></p><p>元素的宽高 = 边框 + 内边距 + 内容宽高</p><p><strong>属性</strong>：<em>border-box;</em></p><p>元素的宽高 = width/height的宽高</p><p><strong>W3c标准盒模型：</strong></p><p>宽度 = 左外边距 + 左边框 + 左内边距 + width + 右内边距 + 右边框 + 右外边距</p><p>高度 = 上外边距 + 上边框 + 上内边距 + height + 下内边距 + 下边框 + 下外边距</p><h2 id="img图片预加载-图片懒加载"><a href="#img图片预加载-图片懒加载" class="headerlink" title="img图片预加载 \ 图片懒加载"></a>img图片预加载 \ 图片懒加载</h2><p><strong>图片预加载:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片预加载，就是在全部内容加载完之后再加载图片</span></span><br><span class="line"><span class="keyword">var</span> OImg = <span class="keyword">new</span> Image();</span><br><span class="line">OImg.src = <span class="string">&#x27;图片地址&#x27;</span>;</span><br><span class="line">OImg.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(OImg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图片懒加载:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片懒加载，我需要你的时候在加载，不需要你的时候就不要加载</span></span><br><span class="line">&lt;button&gt; getTime &lt;/button&gt;</span><br><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">OBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> OImg = <span class="keyword">new</span> Image();</span><br><span class="line">    OImg.src = <span class="string">&#x27;图片地址&#x27;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(OImg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档碎片"><a href="#文档碎片" class="headerlink" title="文档碎片"></a>文档碎片</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Oul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;ul&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> Oli = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    Oli.innerHTML = i;</span><br><span class="line">    Oul.appendChild(Oli);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是， 如果当我们要向document中添加大量数据时(比如1w条)， 如果像上面的代码一样， 逐条添加节点， 这个过程就可能会十分缓慢。<br>当然, 你也可以建个新的节点, 比如说div, 先将oP添加到div上, 然后再将div添加到body中.但这样要在body中多添加一个 &lt; div &gt; &lt; /div&gt;.但文档碎片不会产生这种节点.</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> OUl = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;ul&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> ODiv = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> OLi = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    OLi.innerHTML = i;</span><br><span class="line">    ODiv.appendChild(OLi);</span><br><span class="line">&#125;</span><br><span class="line">OUl.appendChild(ODiv);</span><br></pre></td></tr></table></figure><blockquote><p>为了解决这个问题， 我们可以引入createDocumentFragment() 方法， 它的作用是创建一个文档碎片， 把要插入的新节点先附加在它上面， 然后再一次性添加到document中。 代码如下：</p></blockquote><p>代码如下:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line"><span class="comment">//先创建文档碎片</span></span><br><span class="line"><span class="keyword">var</span> oFragmeng = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"><span class="keyword">var</span> OUl = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;ul&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> OLi = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    OLi.innerHTML = i;</span><br><span class="line">    <span class="comment">//先附加在文档碎片中</span></span><br><span class="line">    oFragmeng.appendChild(OLi);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后一次性添加到document中</span></span><br><span class="line">OUl.appendChild(oFragmeng);</span><br><span class="line"><span class="comment">//这就是文档碎片</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当然，还有一种方法:用字符串拼接也可以</span></span><br><span class="line">&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line"><span class="keyword">var</span> OUl = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 声明一个空字符串</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">1000</span>;i ++)&#123;</span><br><span class="line">    str += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + i + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>; <span class="comment">// 让标签用字符串＋起来</span></span><br><span class="line">&#125;</span><br><span class="line">OUl.innerHTML = str; <span class="comment">// 最后用innerHTML插入到ul里面</span></span><br></pre></td></tr></table></figure><h2 id="byClassName（封装函数，兼容性vrey-Good-）"><a href="#byClassName（封装函数，兼容性vrey-Good-）" class="headerlink" title="byClassName（封装函数，兼容性vrey Good!）"></a>byClassName（封装函数，兼容性vrey Good!）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.prototype.getByClassName = <span class="function"><span class="keyword">function</span>(<span class="params">classname</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> allDomArr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;8&#x27;</span>),<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> filterArr = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dealClass</span>(<span class="params">dom</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reg = <span class="regexp">/\s+/g</span>;</span><br><span class="line">        <span class="keyword">var</span> arrClassName = dom.className.replace(reg,<span class="string">&#x27; &#x27;</span>).trim();</span><br><span class="line">        <span class="keyword">return</span> arrClassName;</span><br><span class="line">    &#125;</span><br><span class="line">    allDomArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> itemClassArr = dealClass(ele).split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; itemClassArr.length;i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(itemClassArr[i] == className)&#123;</span><br><span class="line">                filterArr.push(ele);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> filterArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h2><ul><li><p><code>Math.abs(num)</code> : 返回<code>num</code>的绝对值</p></li><li><p><code>Math.acos(num)</code> : 返回<code>num</code>的反余弦值</p></li><li><p><code>Math.asin(num)</code> : 返回<code>num</code>的反正弦值</p></li><li><p><code>Math.atan(num)</code> : 返回<code>num</code>的反正切值</p></li><li><p><code>Math.atan2(y,x)</code> : 返回<code>y</code>除以<code>x</code>的商的反正切值</p></li><li><p><code>Math.ceil(num)</code> : 返回大于<code>num</code>的最小整数</p></li><li><p><code>Math.cos(num)</code> : 返回<code>num</code>的余弦值</p></li><li><p><code>Math.exp(x)</code> : 返回以自然数为底,x次幂的数</p></li><li><p><code>Math.floor(num)</code> : 返回小于<code>num</code>的最大整数</p></li><li><p><code>Math.log(num)</code> : 返回<code>num</code>的自然对数</p></li><li><p><code>Math.max(num1,num2)</code> : 返回<code>num1</code>和<code>num2</code>中较大的一个</p></li><li><p><code>Math.min(num1,num2)</code> : 返回<code>num1</code>和<code>num2</code>中较小的一个</p></li><li><p><code>Math.pow(x,y)</code> : 返回<code>x</code>的<code>y</code>次方的值</p></li><li><p><code>Math.random()</code> : 返回<code>0</code>到<code>1</code>之间的一个随机数</p></li><li><p><code>Math.round(num)</code> : 返回<code>num</code>四舍五入后的值</p></li><li><p><code>Math.sin(num)</code> : 返回<code>num</code>的正弦值</p></li><li><p><code>Math.sqrt(num)</code> : 返回<code>num</code>的平方根</p></li><li><p><code>Math.tan(num)</code> : 返回<code>num</code>的正切值</p></li><li><p><code>Math.E</code> : 自然数(<code>2.718281828459045</code>)</p></li><li><p><code>Math.LN2</code> : <code>2</code>的自然对数(<code>0.6931471805599453</code>)</p></li><li><p><code>Math.LN10</code> : <code>10</code>的自然对数(<code>2.302585092994046</code>)</p></li><li><p><code>Math.LOG2E</code> : <code>log 2</code> 为底的自然数(<code>1.4426950408889634</code>)</p></li><li><p><code>Math.LOG10E</code> : <code>log 10</code> 为底的自然数(<code>0.4342944819032518</code>)</p></li><li><p><code>Math.PI</code> : <code>π(3.141592653589793)</code></p></li><li><p><code>Math.SQRT1_2</code> : <code>1/2</code>的平方根(<code>0.7071067811865476</code>)</p></li><li><p><code>Math.SQRT2</code> : <code>2</code>的平方根(<code>1.4142135623730951</code>)</p></li></ul><h3 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h3><p><em><strong>生成一个随机数，生成一个 0 ~ 1 之间的一个随机数。</strong></em></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i ++)&#123;</span><br><span class="line">    str = arr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">// 可以取一个数组中任意三个字母</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i ++)&#123;</span><br><span class="line">    str = arr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span> + <span class="number">2</span>)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">// 可以取数组中2 ~ 5中的任意三个字母;</span></span><br><span class="line">就比如：我想让随机数在 <span class="number">2</span> ~ <span class="number">5</span> 之间取一个随机数，就例如：</span><br><span class="line"><span class="built_in">Math</span>.random() * <span class="number">3</span> + <span class="number">2</span> <span class="comment">// 3是2到5之间的一个数字，2就是5-3=2；</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例：抽奖</span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Math</span>.random() * <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(num &lt; <span class="number">0.001</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;一等奖&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num &lt; <span class="number">0.01</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;二等奖&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num &lt; <span class="number">0.1</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;三等奖&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;特等奖&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h2><h3 id="String-对象属性"><a href="#String-对象属性" class="headerlink" title="String 对象属性"></a><code>String</code> 对象属性</h3><ul><li><p><code>constructor</code> 对创建该对象的函数的引用</p></li><li><p><code>length</code>字符串的长度</p></li><li><p><code>prototype</code>允许您向对象添加属性和方法</p></li></ul><h3 id="String-对象方法"><a href="#String-对象方法" class="headerlink" title="String 对象方法"></a><code>String</code> 对象方法</h3><ul><li><p><code>charAt(n)</code> ：返回在指定位置的字符，字符串的索引，第n位</p></li><li><p><code>charCodeAt()</code> ：返回在指定的位置的字符的<code>Unicode</code>编码。这个返回值是<code>0 - 65535</code>之间的整数。(当返回值是<code>&lt;=255</code>时为英文，当返回值<code>&gt;255</code>时为中文)</p></li><li><p><code>concat()</code> ：连接两个或更多字符串，并返回新的字符串。</p></li><li><p><code>fromCharCode()</code> ：将 Unicode 编码转为字符。</p></li><li><p><code>indexOf()</code> ：返回某个指定的字符串值在字符串中首次出现的位置，如果没有找到匹配的字符串则返回 -1。</p></li><li><p><code>includes()</code> ：查找字符串中是否包含指定的子字符串。</p></li><li><p><code>lastIndexOf()</code> ：从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现* 的位置。</p></li><li><p><code>match()</code> ：查找找到一个或多个正则表达式的匹配。</p></li><li><p><code>repeat()</code> ：复制字符串指定次数，并将它们连接在一起返回。</p></li><li><p><code>replace()</code> ：在字符串中查找匹配的子串， 并替换与正则表达式匹配的子l串。</p></li><li><p><code>search()</code> ：查找与正则表达式相匹配的值。</p></li><li><p><code>slice(a,b)</code> ：提取字符串的片断，并在新的字符串中返回被提取的部分，剪切，从<code>a</code>剪切到<code>b</code>。</p></li><li><p><code>split()</code> ：把字符串分割为字符串数组。</p></li><li><p><code>startsWith()</code> ：查看字符串是否以指定的子字符串开头。</p></li><li><p><code>substr()</code> ：从起始索引号提取字符串中指定数目的字符。</p></li><li><p><code>substring()</code> ：提取字符串中两个指定的索引号之间的字符。</p></li><li><p><code>toLowerCase()</code> ：把字符串转换为小写。</p></li><li><p><code>toUpperCase()</code> ：把字符串转换为大写。</p></li><li><p><code>trim()</code> ：去除字符串两边的空白</p></li><li><p><code>toLocaleLowerCase()</code> ：根据本地主机的语言环境把字符串转换为小写。</p></li><li><p><code>toLocaleUpperCase()</code> ：根据本地主机的语言环境把字符串转换为大写。</p></li><li><p><code>valueOf()</code> ：返回某个字符串对象的原始值。</p></li><li><p><code>toString()</code> ：返回一个字符串。</p></li><li><p><code>String HTML</code>：包装方法</p></li><li><p><code>HTML</code> ：返回包含在相对应的 HTML 标签中的内容。</p></li></ul><p><strong>以下方法并非标准方法，所以可能在某些浏览器下不支持。</strong></p><ul><li><p><code>anchor()</code>：创建 HTML 锚。</p></li><li><p><code>big()</code>：用大号字体显示字符串。</p></li><li><p><code>blink()</code>：显示闪动字符串。</p></li><li><p><code>bold()</code>：使用粗体显示字符串。</p></li><li><p><code>fixed()</code>：以打字机文本显示字符串。</p></li><li><p><code>fontcolor()</code>：使用指定的颜色来显示字符串。</p></li><li><p><code>fontsize()</code>：使用指定的尺寸来显示字符串。</p></li><li><p><code>italics()</code>：使用斜体显示字符串。</p></li><li><p><code>link()</code>：将字符串显示为链接。</p></li><li><p><code>small()</code>：使用小字号来显示字符串。</p></li><li><p><code>strike()</code>：用于显示加删除线的字符串。</p></li><li><p><code>sub()</code>：把字符串显示为下标。</p></li><li><p><code>sup()</code>：把字符串显示为上标。</p></li></ul><h1 id="javaScript书写规范："><a href="#javaScript书写规范：" class="headerlink" title="javaScript书写规范："></a>javaScript书写规范：</h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">常量名</span><br><span class="line">    全部大写并单词间用下划线分隔</span><br><span class="line">    如：CSS_BTN_CLOSE、TXT_LOADING</span><br><span class="line">对象的属性或方法名</span><br><span class="line">    小驼峰式（little camel-<span class="keyword">case</span>）</span><br><span class="line">    如：init、bindEvent、updatePosition</span><br><span class="line">    示例：Dialog.prototype = &#123;</span><br><span class="line">                <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">                <span class="attr">bindEvent</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">                <span class="attr">updatePosition</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">                …</span><br><span class="line">                &#125;;</span><br><span class="line">类名（构造器）</span><br><span class="line">    --&gt;小驼峰式但首字母大写</span><br><span class="line">    --&gt;如：Current、DefaultConfig</span><br><span class="line">函数名</span><br><span class="line">    --&gt;小驼峰式</span><br><span class="line">    --&gt;如：current()、defaultConfig()</span><br><span class="line">变量名</span><br><span class="line">    --&gt;小驼峰式</span><br><span class="line">    --&gt;如：current、defaultConfig</span><br><span class="line">私有变量名</span><br><span class="line">    --&gt;小驼峰式但需要用_开头</span><br><span class="line">    --&gt;如：_current、_defaultConfig</span><br><span class="line">变量名的前缀</span><br><span class="line">    --&gt;续</span><br></pre></td></tr></table></figure><p>代码格式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;()&quot;</span>前后需要跟空格</span><br><span class="line"><span class="string">&quot;=&quot;</span>前后需要跟空格</span><br><span class="line"><span class="string">&quot;,&quot;</span>后面需要跟空格</span><br><span class="line"><span class="built_in">JSON</span>对象需格式化对象参数</span><br><span class="line"><span class="keyword">if</span>、<span class="keyword">while</span>、<span class="keyword">for</span>、<span class="keyword">do</span>语句的执行体用<span class="string">&quot;&#123;&#125;&quot;</span>括起来</span><br></pre></td></tr></table></figure><p>“{}”格式如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a==<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>避免额外的逗号</p><p><code>var arr = [1,2,3,];</code></p><blockquote><p>for-in循环体中必须用hasOwnProperty方法检查成员是否为自身成员，避免来自原型链上的污染。 长语句可考虑断行</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">TEMPL_SONGLIST.replace(<span class="string">&#x27;&#123;TABLE&#125;&#x27;</span>, da[<span class="string">&#x27;results&#x27;</span>])</span><br><span class="line">    .replace(<span class="string">&#x27;&#123;PREV_NUM&#125;&#x27;</span>, prev)</span><br><span class="line">    .replace(<span class="string">&#x27;&#123;NEXT_NUM&#125;&#x27;</span>, next)</span><br><span class="line">    .replace(<span class="string">&#x27;&#123;CURRENT_NUM&#125;&#x27;</span>, current)</span><br><span class="line">    .replace(<span class="string">&#x27;&#123;TOTAL_NUM&#125;&#x27;</span>, da.page_total);</span><br></pre></td></tr></table></figure><p>为了避免和JSLint的检验机制冲突，“.”或“+”这类操作符放在行尾</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">TEMPL_SONGLIST.replace(<span class="string">&#x27;&#123;TABLE&#125;&#x27;</span>, da[<span class="string">&#x27;results&#x27;</span>]).</span><br><span class="line">  replace(<span class="string">&#x27;&#123;PREV_NUM&#125;&#x27;</span>, prev).</span><br><span class="line">  replace(<span class="string">&#x27;&#123;NEXT_NUM&#125;&#x27;</span>, next).</span><br><span class="line">  replace(<span class="string">&#x27;&#123;CURRENT_NUM&#125;&#x27;</span>, current).</span><br><span class="line">  replace(<span class="string">&#x27;&#123;TOTAL_NUM&#125;&#x27;</span>, da.page_total);</span><br></pre></td></tr></table></figure><p>如果模块代码中，使用其它全局变量想跳过JSLint的检查，可以在该文件中加入/global/声明。</p><p><code>/*global alert: true, console: true, top: true, setTimeout: true */</code></p><p>使用严格的条件判断符。用===代替==，用!==代替!=，避免掉入==造成的陷阱,在条件判断时，这样的一些值表示<code>false</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="literal">undefined</span>与<span class="literal">null</span>相等</span><br><span class="line">字符串<span class="string">&#x27;&#x27;</span></span><br><span class="line">数字<span class="number">0</span></span><br><span class="line"><span class="literal">NaN</span></span><br></pre></td></tr></table></figure><p>在==时，则会有一些让人难以理解的陷阱</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="literal">undefined</span> == <span class="literal">null</span>; <span class="comment">// true</span></span><br><span class="line">    <span class="number">1</span> == <span class="literal">true</span>; <span class="comment">//true</span></span><br><span class="line">    <span class="number">2</span> == <span class="literal">true</span>; <span class="comment">// false</span></span><br><span class="line">    <span class="number">0</span> == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line">    <span class="number">0</span> == <span class="string">&#x27;&#x27;</span>; <span class="comment">// true</span></span><br><span class="line">    <span class="literal">NaN</span> == <span class="literal">NaN</span>;<span class="comment">// false</span></span><br><span class="line">    [] == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line">    [] == ![]; <span class="comment">// true</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>对于不同类型的 == 判断，有这样一些规则，顺序自上而下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span>与<span class="literal">null</span>相等</span><br><span class="line">一个是number一个是string时，会尝试将string转换为number</span><br><span class="line">尝试将boolean转换为number</span><br><span class="line"><span class="number">0</span>或<span class="number">1</span></span><br><span class="line">尝试将<span class="built_in">Object</span>转换成number或string</span><br></pre></td></tr></table></figure><p>而这些取决于另外一个对比量，即值的类型，所以对于0、空字符串的判断，建议使用=== ===会先判断两边的值类型，类型不匹配时为false。 下面类型的对象不建议用new构造</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Boolean</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Object</span> <span class="comment">//用&#123;&#125;代替</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span> <span class="comment">//用[]代替</span></span><br></pre></td></tr></table></figure><p>引用对象成员用obj.prop代替obj[“prop”]，除非属性名是变量。 从number到string的转换。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 推荐写法*/</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">typeof</span>(a); <span class="comment">//&quot;number&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> aa=a+<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">typeof</span>(aa); <span class="comment">//&quot;string&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(aa); <span class="comment">//&#x27;1&#x27;</span></span><br><span class="line"><span class="comment">/** 不推荐写法*/</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(a)或a.toString()</span><br></pre></td></tr></table></figure><p>从string到number的转换，使用parseInt，必须显式指定第二个参数的进制。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 推荐写法*/</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> aa = <span class="built_in">parseInt</span>(a,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">typeof</span>(a); <span class="comment">//&quot;string&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span>(aa); <span class="comment">//&quot;number&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(aa); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>从float到integer的转换</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 推荐写法*/</span></span><br><span class="line"><span class="built_in">Math</span>.floor/<span class="built_in">Math</span>.round/<span class="built_in">Math</span>.ceil</span><br><span class="line"><span class="comment">/** 不推荐写法*/</span></span><br><span class="line"><span class="built_in">parseInt</span></span><br></pre></td></tr></table></figure><p>字符串拼接应使用数组保存字符串片段，使用时调用join方法。避免使用+或+=的方式拼接较长的字符串，每个字符串都会使用一个小的内存片段，过多的内存片段会影响性能。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**推荐的拼接方式array的push、join*/</span></span><br><span class="line"><span class="keyword">var</span> str=[],</span><br><span class="line">    list=[<span class="string">&#x27;测试A&#x27;</span>,<span class="string">&#x27;测试B&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span> , len=list.length; i &lt; len; i++) &#123;</span><br><span class="line">    str.push( <span class="string">&#x27;&lt;div&gt;&#x27;</span>+ list[i] + <span class="string">&#x27;&lt;/div&gt;&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(str.join(<span class="string">&#x27;&#x27;</span>)); <span class="comment">//&lt;div&gt;测试A&lt;/div&gt;&lt;div&gt;测试B&lt;/div&gt;</span></span><br><span class="line"><span class="comment">/** 不推荐的拼接方式+=*/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    list=[<span class="string">&#x27;测试A&#x27;</span>,<span class="string">&#x27;测试B&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = list.length; i&lt; len; i++) &#123;</span><br><span class="line">    str+=<span class="string">&#x27;&lt;div&gt;&#x27;</span> + list[i] + <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//&lt;div&gt;测试A&lt;/div&gt;&lt;div&gt;测试B&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>尽量避免使用存在兼容性及消耗资源的方法或属性</p><p><code>不要使用with，void，evil，eval_r，innerText</code></p><p>注重HTML分离, 减小reflow, 注重性能</p><h2 id="图片规范"><a href="#图片规范" class="headerlink" title="图片规范"></a>图片规范</h2><p>命名应用小写英文、数字、_组合，便于团队其他成员理解</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">header_btn.gif</span><br><span class="line">header_btn2.gif</span><br></pre></td></tr></table></figure><ul><li>页面元素类图片均放入img文件夹,</li><li>测试用图片放于img/testimg文件夹，psd源图放入img/psdimg文件夹。</li><li>图片格式仅限于gif、png、jpg等。</li><li>用png图片做图片时,要求图片格式为png-8格式,若png-8实在影响图片质量或其中有半透明效果,请为ie-6单独定义背景，并尽量避免使用半透明的png图片。</li><li>背景图片请尽可能使用sprite技术, 减小http请求</li></ul><h2 id="注释规范："><a href="#注释规范：" class="headerlink" title="注释规范："></a>注释规范：</h2><blockquote><p>JAVASCRIPT、CSS文件注释需要标明作者、文件版本、创建/修改时间、重大版本修改记录、函数描述、文件版本、创建或者修改时间、功能、作者等信息。</p></blockquote><p><code>/* * 注释块 */</code></p><p>中间可添加如下信息</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@file 文件名</span><br><span class="line">@addon 把一个函数标记为另一个函数的扩张，另一个函数的定义不在源文件中</span><br><span class="line">@argument 用大括号中的自变量类型描述一个自变量</span><br><span class="line">@author 函数/类作者的姓名</span><br><span class="line">@base 如果类是继承得来，定义提供的类名称</span><br><span class="line"><span class="string">`@class`</span>用来给一个类提供描述，不能用于构造器的文档中</span><br><span class="line">@<span class="title">constructor</span> 描述一个类的构造器</span><br><span class="line">@<span class="title">deprecated</span> 表示函数/类已被忽略</span><br><span class="line">@<span class="title">exception</span> 描述函数/类产生的一个错误</span><br><span class="line">@<span class="title">exec</span> @<span class="title">extends</span> 表示派生出当前类的另一个类</span><br><span class="line">@<span class="title">fileoverview</span> 表示文档块将用于描述当前文件，这个标签应该放在其它任何标签之前</span><br><span class="line">@<span class="title">final</span> 指出函数/类</span><br><span class="line">@<span class="title">ignore</span> 让<span class="title">jsdoc</span>忽视随后的代码</span><br><span class="line">@<span class="title">link</span> 类似于@<span class="title">link</span>标签，用于连接许多其它页面</span><br><span class="line">@<span class="title">member</span> 定义随后的函数为提供的类名称的一个成员</span><br><span class="line">@<span class="title">param</span> 用大括号中的参数类型描述一个参数</span><br><span class="line">@<span class="title">private</span> 表示函数/类为私有，不应包含在生成的文档中</span><br><span class="line">@<span class="title">requires</span> 表示需要另一个函数/类</span><br><span class="line">@<span class="title">return</span> 描述一个函数的返回值</span><br><span class="line">@<span class="title">see</span> 连接到另一个函数/类</span><br><span class="line">@<span class="title">throws</span> 描述函数/类可能产生的错误</span><br><span class="line">@<span class="title">type</span> 指定函数/成员的返回类型</span><br><span class="line">@<span class="title">version</span> 函数/类的版本号</span><br></pre></td></tr></table></figure><h1 id="你不知道的js"><a href="#你不知道的js" class="headerlink" title="你不知道的js"></a>你不知道的js</h1><h2 id="原理篇"><a href="#原理篇" class="headerlink" title="原理篇"></a>原理篇</h2><ul><li><p><code>js</code>引擎线程（解释执行<code>js</code>代码、用户输入、网络请求）</p></li><li><p><code>GUI</code>线程（绘制用户界面、与<code>js</code>主线程是互斥的）</p><ul><li><p><code>JS 可以操作DOM元素，进而会影响到GUI的渲染结果，因此JS引擎线程与GUI渲染线程是互斥的。也就是说当JS引擎线程处于运行状态时，GUI渲染线程将处于冻结状态</code></p></li><li><p><code>js单线程-同一时间只能做一件事</code></p></li><li><p><code>js设计出来就是为了与用户交互，处理DOM，假如js是多线程，同一时间一个线程想要修改DOM，另一个线程想要删除DOM，问题就变得复杂多了，浏览器不知道听谁的，如果引入“锁”的机制，这不就又回到了被其他语言尴尬的困境了吗</code></p></li><li><p><code>单线程计算能力有限，大量数据需要计算渲染的话，我们可以配合后端进行操作，比如我们后期进阶班的VUE与node.js配合，也就是传说中的SSR技术</code></p></li></ul></li><li><p><code>http</code>网络请求线程（处理用户的<code>get、post</code>等请求，等返回结果后将回调函数推入任务队列）</p></li><li><p>定时触发器线程（<code>setTimeout、setInterval</code>等待时间结束后把执行函数推入任务队列中）</p></li><li><p>浏览器事件处理线程（将<code>click、mouse</code>等交互事件发生后将这些事件放入事件队列中）</p></li></ul><h3 id="js运行机制"><a href="#js运行机制" class="headerlink" title="js运行机制"></a>js运行机制</h3><p><code>JavaScript是基于单线程运行的，同时又可以异步执行的，一般来说这种即是单线程又是异步的语言都是基于事件来驱动的，恰好浏览器就给JavaScript提供了这么一个环境</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">                        任务进行执行栈</span><br><span class="line">                             ｜</span><br><span class="line">                             ｜</span><br><span class="line">                             ｜</span><br><span class="line">          ------------同步任务还是异步任务-----------</span><br><span class="line">         ｜                                      ｜</span><br><span class="line">         同步                                    异步</span><br><span class="line">         ｜                                      ｜</span><br><span class="line">         ｜                                      ｜</span><br><span class="line">       主线程                                Event Table</span><br><span class="line">         ｜                                      ｜</span><br><span class="line">         ｜                                      ｜</span><br><span class="line">         ｜                                  注册回调函数</span><br><span class="line">    任务全部执行完毕                                ｜</span><br><span class="line">         ｜                                       ｜</span><br><span class="line">         |                                   Event Queue</span><br><span class="line">         |                                        |</span><br><span class="line">         |                                        |</span><br><span class="line">         |     ___________________________________|</span><br><span class="line">         |     |</span><br><span class="line">读取任务队列中的结果，进入主线程执行</span><br></pre></td></tr></table></figure><p>上面要表示的内容用文字来表述的话：</p><ol><li><p>同步和异步的任务分别进入不同的执行“场所”，同步的进入主线程，异步的进入<code>Event Table</code>并注册函数</p></li><li><p>当指定的事情完成时，<code>Event Table</code>会将这个函数移入<code>Event Queue</code></p></li><li><p>主线程内的任务执行完毕为空，回去<code>Event Queue</code>读取对应的函数，进入主线程执行。</p></li></ol><p>上述过程会不断的重复，也就是常说的<code>Event Loop</code>（事件循环）</p><h3 id="call、apply的模拟实现"><a href="#call、apply的模拟实现" class="headerlink" title="call、apply的模拟实现"></a>call、apply的模拟实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">call的封装函数实现</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototupe.newCall = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = <span class="built_in">arguments</span>[<span class="number">0</span>] || <span class="built_in">window</span>;</span><br><span class="line">    ctx.fn = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; <span class="built_in">arguments</span>.length;i ++) &#123;</span><br><span class="line">        args.push(<span class="string">&#x27;arguments[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;ctx.fn(&#x27;</span> + args.join(<span class="string">&#x27;,&#x27;</span>) + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    <span class="keyword">delete</span> ctx.fn;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">apply的封装函数实现</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.newApply = <span class="function"><span class="keyword">function</span>(<span class="params">ctx,arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = ctx || <span class="built_in">window</span>;</span><br><span class="line">    ctx.fn = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span>(!arr) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = ctx.fn();</span><br><span class="line">        <span class="keyword">delete</span> ctx.fn;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> args = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; arr.length;i ++)&#123;</span><br><span class="line">            args.push(<span class="string">&#x27;arguments[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;ctx.fn(&#x27;</span> + args.join(<span class="string">&#x27;,&#x27;</span>) + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="keyword">delete</span> ctx.fn;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JavaScript-历史及历程&quot;&gt;&lt;a href=&quot;#JavaScript-历史及历程&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 历史及历程&quot;&gt;&lt;/a&gt;JavaScript 历史及历程&lt;/h1&gt;&lt;h2 id=&quot;web-发展史&quot;&gt;&lt;a href=&quot;#web-发展史&quot; class=&quot;headerlink&quot; title=&quot;web 发展史&quot;&gt;&lt;/a&gt;web 发展史&lt;/h2&gt;&lt;p&gt;Mosaic,是互上第一个获普遍使用和能够显示图片的网页浏览器。于 1993 年问世。&lt;/p&gt;
&lt;p&gt;1994 年 4 月，马克.安德森和 Silicon Graphics（简称为 SGI，中译为“视算科技”或“硅图”）公司的创始人吉姆·克拉克（Jim Clark）在美国加州设立了“Mosaic CommunicationCorporation”。&lt;/p&gt;
&lt;p&gt;Mosaic 公司成立后，由于伊利诺伊大学拥有 Mosaic 的商标权，且伊利诺伊大学已将技术转让给 Spy Glass 公司，开发团队必须彻底重新撰写浏览器程式码，且浏览器名称更改为 NetscapeNavigator，公司名字于 1994 年 11 月改名为“NetscapeCommunication Corporation”，此后沿用至今，中译为“网景”。&lt;/p&gt;
&lt;p&gt;微软的 Internet Explorer 及 Mozilla Firefox 等，其早期版本皆以 Mosaic 为基础而开发。微软随后买下 Spy Glass 公司的技术开发出 Internet Explorer 浏览器，而 Mozilla Firefox则是网景通讯家开放源代码后所衍生出的版本。&lt;/p&gt;
&lt;h2 id=&quot;JS-历史&quot;&gt;&lt;a href=&quot;#JS-历史&quot; class=&quot;headerlink&quot; title=&quot;JS 历史&quot;&gt;&lt;/a&gt;JS 历史&lt;/h2&gt;&lt;p&gt;JavaScript 作为 Netscape Navigator 浏览器的一部分首次出现在 1996 年。它最初的设计目标是改善网页的用户体验。&lt;/p&gt;
&lt;p&gt;作者：Brendan Eich&lt;/p&gt;
&lt;p&gt;期初 JavaScript 被命名为 LiveScript，后因和 Sun 公司合作，因市场宣传需要改名,JavaScript。后来 Sun 公司被 Oracle 收购，JavaScript 版权归 Oracle 所有。&lt;/p&gt;
&lt;h2 id=&quot;浏览器组成&quot;&gt;&lt;a href=&quot;#浏览器组成&quot; class=&quot;headerlink&quot; title=&quot;浏览器组成&quot;&gt;&lt;/a&gt;浏览器组成&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;shell 部分——用户能操作部分(壳)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内核部分——用户看不到的部分&lt;/p&gt;
&lt;p&gt;1 ) 渲染引擎（语法规则和渲染）&lt;/p&gt;
&lt;p&gt;2 ) JS 引擎&lt;/p&gt;
&lt;p&gt;3 ) 其他模块（如异步)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://github.com/haodex/haodex.github.io.git/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://github.com/haodex/haodex.github.io.git/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap</title>
    <link href="https://github.com/haodex/haodex.github.io.git/2021/11/07/Bootstrap/"/>
    <id>https://github.com/haodex/haodex.github.io.git/2021/11/07/Bootstrap/</id>
    <published>2021-11-07T07:35:53.000Z</published>
    <updated>2021-11-11T09:59:09.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-bootstrap简介"><a href="#一、-bootstrap简介" class="headerlink" title="一、 bootstrap简介"></a>一、 <code>bootstrap</code>简介</h3><hr><ul><li><p><code>Bootstrap</code>，来自 <code>Twitter</code>（全国最大的微博），是目前最受欢迎的前端框架。</p></li><li><p><code>bootstrap</code>下载及演示 <a href="http://v3.bootcss.com/">http://v3.bootcss.com</a></p></li><li><p>什么是<strong>bootstrap</strong>？</p><ul><li><code>Bootstrap</code>，来自<code>Twitter</code>，是目前最受欢迎的前端框架。<code>Bootstrap</code>是基于<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>的，他简介灵活，使得<code>Web</code>开发更加快捷。它由<code>Twitter</code>的设计师<code>Mark Otto</code>和<code>Jacob Thornton</code>合作开发，是一个<code>CSS/HTML</code>框架。<code>Bootstrap</code>提供了优雅的<code>HTML</code>和<code>CSS</code>规范，它既是由动态<code>CSS</code>语言<code>Less</code>写成。<code>Bootstrap</code>一经推出后颇受欢迎，一直是<code>GitHub</code>上的热门开源项目，包括<code>NASA</code>的<code>MASNBC</code>（微软全国广播公司）的<code>BreakingNews</code>都使用了该项目。国内一些移动开发者较为熟悉的框架，如<code>WeX5</code>前端开源框架等，也是基于<code>Bootstrap</code>源码进行性能优化而来</li><li><code>Bootstrap </code>是基于 <code>HTML</code>、<code>CSS</code>、<code>JAVASCRIPT</code> 的开源框架，它简洁、直观、强悍、灵活，使得 <code>Web </code>开发更加快捷，</li><li>用于开发响应式布局、移动设备优先的 <code>WEB </code>项目。</li></ul></li></ul><span id="more"></span><ul><li><p><strong>Bootstrap</strong>特色</p><ul><li>适应各种技术水平<code>Bootstrap</code>适应不同技术水平的从业者，无论是设计师，还是程序设计人员，不管是骨灰级别的大牛，还是刚入门槛的菜鸟。使用<code>Bootstrap</code>既能开发简单的小东西，也能构造更为复杂的应用</li><li>跨设备、跨浏览器，最初设想的<code>Bootstrap</code>支持现代浏览器，不过新版本已经能支持所有主流浏览器，甚至包括<code>IE7</code>.从<code>Bootstrap2</code>开始，提供对平板和手机的支持</li><li>支持响应式设计从<code>Bootstrap2</code>开始，提供完整的响应式特性。所有的组件都能根据分辨率和设备灵活缩放，从而提供一致性的用户体验</li><li>选用<code>Less</code>构建动态样式当传统的枯燥<code>CSS</code>写法止步不前时，<code>Less</code>技术横空出世。<code>Less</code>使用变量、嵌套、操作、混合编码，帮助用户花费很小的时间成本，编写更快，更灵活的<code>CSS</code>。当然还有很多优势。</li></ul></li><li><p>为什么使用 <strong>Bootstrap</strong>？</p><ul><li>跨设备</li><li>跨浏览器（<code>chrome</code>，<code>IE9</code>以上，<code>Firefox</code>，<code>Safari</code>，<code>Opera</code>…）</li><li>响应式布局</li><li>具有实用性强的组件</li><li>内置<code>jquery</code>插件</li></ul></li><li><p><strong>bootstrap</strong>的结构</p><ul><li>主要分为三大核心模块：<code>css</code>、<code>js</code>、<code>font</code></li></ul></li><li><p>尝试使用<strong>Bootstrap</strong></p><ul><li>前端工程建设的第一项任务就是根据项目特征进行技术选型。<ul><li>基本上现在没有人完全从0开始做网站，哪怕是政府项目用个<code>jquery</code>都很正常吧，<code>React/Angularjs</code>等框架横空出世，解放了不少生产力，合理的技术选型可以为项目节省许多工程量这点毋庸置疑。</li></ul></li><li>简单构建<ul><li>优化选型之后基本上就可以开始敲码了，不过光解决开发效率还不够，必须要兼顾运行性能。前端工程进行到第二阶段会选型一种前端自动化构建工具，对代码进行压缩，校验，之后再以页面为单位进行简单的资源合并。</li></ul></li><li><strong>JS/CSS</strong>模块化<ul><li>开发分而治之是软件工程中的重要思想，是复杂系统开发和维护的基石，这点放在前端开发中同样适用。在解决了基本开发效率运行效率问题之后，前端团队开始思考维护效率，模块化是目前前端最流行的分治手段。</li></ul></li><li>组件化开发<ul><li>分治的确是非常重要的工程优化手段。在我看来，前端作为一种<code>GUI</code>软件，光有<code>JS/CSS</code>模块化还不够，对于<code>UI</code>组件的分治也有同样迫切的需求</li><li>页面上么一个独立的、可视/可交互区域都是一个组件</li><li>每个组件都对应一个目录，组件所需的各种资源（<code>img</code>字体等<code>js css html</code>）都在这个目录下</li><li>组件具有独立性，互不影响可以自由组合</li><li>页面只不过是组件的容器而已，负责组合组件形成功能完整的界面</li><li>我们可以想象成，我们要组装一辆车，所以零件（组件）都准备完毕，只需要我们利用这些零件进行拼装就好，某一个零件（组件）的损耗不会影响其他零件（组件）</li><li>经过这样的工程理念，我们很容易将系统以独立的组件为单元进行分工划分：<ul><li>由于系统功能被分治到独立的模块或组件中，粒度比较精细，组织形式松散，开发者之间不会产生开发时序的依赖，大幅提升并行的开发效率，理论上允许随时加入新成员认领组件开发或维护工作，也更容易支持多个团队共同维护一个大型站点的开发</li></ul></li></ul></li></ul></li></ul><h3 id="二、排版"><a href="#二、排版" class="headerlink" title="二、排版"></a>二、排版</h3><hr><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><ul><li>从 <code>h1</code> 到 <code>h6</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> //36px</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> //30px</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> //24px</span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">h4</span>&gt;</span> //18px</span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">h5</span>&gt;</span> //14px</span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">h6</span>&gt;</span> //12px</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>bootstrap课程<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;lead&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内联文本元素"><a href="#内联文本元素" class="headerlink" title="内联文本元素"></a>内联文本元素</h4><ul><li>添加标记，<code>&lt;mark&gt;</code>元素或<code>.mark</code> 类</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Bootstrap<span class="tag">&lt;<span class="name">mark</span>&gt;</span>排版<span class="tag">&lt;/<span class="name">mark</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--各种加线条的文本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">del</span>&gt;</span>  //删除的文本</span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">s</span>&gt;</span>  //无用的文本</span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">ins</span>&gt;</span>  //插入的文本</span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">u</span>&gt;</span>  //效果同上，下划线文本</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--各种强调的文本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">small</span>&gt;</span>  //标准字号的 85%</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>    //加粗 700</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">em</span>&gt;</span>    //倾斜</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-left&quot;</span>&gt;</span>向左对齐文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>居中对齐文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-right&quot;</span>&gt;</span>向右对齐文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-justify&quot;</span>&gt;</span>对齐文本。该段落会根据屏幕的大小对超出屏幕的文字进行换行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-nowrap&quot;</span>&gt;</span>该段落不会根据屏幕的大小对超出屏幕的文字进行换行。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-lowercase&quot;</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">p</span>&gt;</span> // 英文字母小写</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-uppercase&quot;</span>&gt;</span>BOOTSTROP<span class="tag">&lt;/<span class="name">p</span>&gt;</span> // 英文字母大写</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-capitalize&quot;</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">p</span>&gt;</span> //单词首字母大写</span><br></pre></td></tr></table></figure><h4 id="缩略语"><a href="#缩略语" class="headerlink" title="缩略语"></a>缩略语</h4><ul><li><code>HTML </code>元素提供了用于缩写的标记，比如 <code>WWW</code> 或 <code>HTTP</code>。<code>Bootstrap</code> 定义 <code>&lt;abbr&gt;</code> 元素的样式为显示在文本底部的一条虚线边框</li><li>当鼠标悬停在上面时会显示完整的文本（只要您为 <code>&lt;abbr&gt;</code> title 属性添加了文本）。为了得到一个更小字体的文本，</li><li>请添加 <code>.initialism</code> 到 <code>&lt;abbr&gt;</code></li></ul> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;World Wide Web&quot;</span>&gt;</span>WWW<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;Real Simple Syndication&quot;</span> <span class="attr">class</span>=<span class="string">&quot;initialism&quot;</span>&gt;</span>RSS<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h4><ul><li><code>address</code>默认为 <code>display:block</code>;，需要使用标签来为封闭的地址文本添加换行</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Twitter, Inc.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  795 Folsom Ave, Suite 600<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  San Francisco, CA 94107<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;Phone&quot;</span>&gt;</span>P:<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span> (123) 456-7890</span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Full Name<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:#&quot;</span>&gt;</span>first.last@example.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><ul><li>默认样式引用，增加了左边线，设定了字体大小和内外边距<br><code>&lt;blockquote&gt; Bootstrap 框架 &lt;/blockquote&gt;</code></li><li>反向<br><code>&lt;blockquote class=&quot;blockquote-reverse &quot;&gt; Bootstrap 框架 &lt;/blockquote&gt;</code></li><li>多种引用样式</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;text-right&quot;</span>&gt;</span>Someone famous in <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">&quot;Source Title&quot;</span>&gt;</span>Source Title<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li>有序列表、无序列表、自定义列表<ul><li><code>.list-unstyled</code>  去除小圆点</li><li><code>.list-inline</code>     将<code>li</code>变为行级块元素</li><li><code>.dl-horizontal </code>  应用于<code>&lt;dl&gt; </code>元素和<code> &lt;dt&gt;</code>元素中</li></ul></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul><li><code>.pre-scrollable</code>  使 <code>&lt;pre&gt;</code> 元素可滚动 <code>scrollable</code></li><li>内联代码   <code>&lt;code&gt;&lt;section&gt;&lt;/code&gt;</code></li><li>用户输入   <code>press &lt;kbd&gt;ctrl + ,&lt;/kbd&gt;</code></li><li>标记变量   <code>&lt;var&gt;y&lt;/var&gt; = &lt;var&gt;m&lt;/var&gt;&lt;var&gt;x&lt;/var&gt; + &lt;var&gt;b&lt;/var&gt;</code></li><li>程序输出   <code>&lt;samp&gt;This text is meant to be treated as sample output from a computer program.&lt;/samp&gt;</code></li><li>代码块     <code>&lt;pre&gt;&lt;article&gt;Please input...&lt;/article&gt;&lt;/pre&gt;</code></li></ul><h3 id="三、表格、按钮、图片"><a href="#三、表格、按钮、图片" class="headerlink" title="三、表格、按钮、图片"></a>三、表格、按钮、图片</h3><hr><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><ul><li>基本表格 <code>&lt;table class=&quot;table&quot;&gt;</code></li><li>条纹表格 <code>&lt;table class=&quot;table table-striped&quot;&gt;</code></li><li>边框表格  <code>&lt;table class=&quot;table table-bordered&quot;&gt;</code></li><li>悬停表格<code>&lt;table class=&quot;table table-hover&quot;&gt;</code></li><li> 精简表格<code>&lt;table class=&quot;table table-condensed&quot;&gt;</code></li><li>状态表格<code>active</code>、<code>success</code>、<code>info</code>、<code>warning</code>、<code>danger</code></li><li>隐藏某一行<code>&lt;tr class=&quot;sr-only&quot;&gt;</code></li><li>响应式表格<ul><li>表格父元素设置响应式，小于 <code>768px</code> 出现边框<br><code>&lt;div class=&quot;table-responsive&quot;&gt;</code></li></ul></li></ul><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><ul><li>按钮标签<ul><li>转化成普通按钮</li><li><code>&lt;a href=&quot;###&quot; class=&quot;btn btn-default&quot;&gt;Link&lt;/a&gt;</code></li><li><code>&lt;button class=&quot;btn btn-default&quot;&gt;Button&lt;/button&gt;</code></li><li><code>&lt;input type=&quot;button&quot; class=&quot;btn btn-default&quot; value=&quot;input&quot;&gt;</code></li><li>注意：为了跨浏览器展现，尽量使用<code>button</code></li></ul></li><li>按钮大小<ul><li><code>.btn-lg</code>    这会让按钮看起来比较大。</li><li><code>.btn-sm</code>    这会让按钮看起来比较小。</li><li><code>.btn-xs</code>    这会让按钮看起来特别小。</li></ul></li><li>预定义样式<ul><li><code>.btn-default</code>    默认/标准按钮</li><li><code>.btn-primary</code>    首选项样式</li><li><code>.btn-success</code>    成功样式</li><li><code>.btn-info    </code>一般信息样式</li><li><code>.btn-warning</code>    警告样式</li><li><code>.btn-danger</code>    危险样式</li><li><code>.btn-link</code>    链接样式</li></ul></li><li>块级按钮<ul><li><code>.btn-block</code>    块级按钮(拉伸至父元素100%的宽度)</li></ul></li><li>激活状态<ul><li><code>&lt;button class=&quot;btn active&quot;&gt;Button&lt;/button&gt;</code></li></ul></li><li>禁用状态<ul><li><code>&lt;button class=&quot;btn active disabled&quot;&gt;Button&lt;/button&gt;</code></li></ul></li></ul><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><ul><li><code>.img-rounded </code>   圆角 (<code>IE8</code> 不支持)</li><li><code>.img-circle</code> 圆形 (<code>IE8</code> 不支持)</li><li><code>.img-thumbnail</code>  缩略图功能</li><li><code>.img-responsive</code>    图片响应式 (将很好地扩展到父元素)</li></ul><h3 id="四、辅助类、响应式工具、菜单、图标"><a href="#四、辅助类、响应式工具、菜单、图标" class="headerlink" title="四、辅助类、响应式工具、菜单、图标"></a>四、辅助类、响应式工具、菜单、图标</h3><hr><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>本行内容是减弱的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-primary&quot;</span>&gt;</span>本行内容带有一个 primary class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-success&quot;</span>&gt;</span>本行内容带有一个 success class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-info&quot;</span>&gt;</span>本行内容带有一个 info class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-warning&quot;</span>&gt;</span>本行内容带有一个 warning class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-danger&quot;</span>&gt;</span>本行内容带有一个 danger class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-primary&quot;</span>&gt;</span>bootstrap课程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-success&quot;</span>&gt;</span>bootstrap课程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-info&quot;</span>&gt;</span>bootstrap课程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-warning&quot;</span>&gt;</span>bootstrap课程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-danger&quot;</span>&gt;</span>bootstrap课程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h4><ul><li>关闭按钮   <code>close</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>下拉式菜单  <code>caret</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>浮动 <code>pull-left</code>   <code>pull-right</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-left&quot;</span>&gt;</span>向左快速浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span>向右快速浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>清除浮动   <code>clearfix</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;background: #D8D8D8;border: 1px solid #000;padding: 10px;&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-left&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background:#58D3F7;&quot;</span>&gt;</span>向左快速浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background: #DA81F5;&quot;</span>&gt;</span>向右快速浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>块级内容居中 <code>center-block</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center-block&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:200px;background-color:#ccc;&quot;</span>&gt;</span></span><br><span class="line">这是 center-block</span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>显示、隐藏  <code>show</code> <code>hide</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 91px 100px 19px 50px;&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:300px;background-color:#ccc;&quot;</span>&gt;</span></span><br><span class="line">这是 show class</span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:200px;background-color:#ccc;&quot;</span>&gt;</span></span><br><span class="line">这是 hide class</span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>屏幕阅读器和键盘导航  <code>.sr-only</code> 来把元素对所有设备隐藏，除了屏幕阅读器    <code>.sr-only-focusable</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 91px 100px 19px 50px;&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>Email 地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter email&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">for</span>=<span class="string">&quot;pass&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;sr-only sr-only-focusable&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#content&quot;</span>&gt;</span>Skip to main content<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五、栅格系统、表单"><a href="#五、栅格系统、表单" class="headerlink" title="五、栅格系统、表单"></a>五、栅格系统、表单</h3><hr><h4 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h4><ul><li><p>响应式网格系统随着屏幕或视口（<code>viewport</code>）尺寸的增加，系统会自动分为最多<code>12</code>列。</p></li><li><p>工作原理</p><ul><li>行必须放置在<code>.container</code>(固定宽度)或者<code>.container-fluid(100%宽度)</code>  <code>class</code>内，获得适当的对齐<code>(alignment)</code>和内边距<code>(padding)</code></li><li>内容放置在列中，唯有列可以是行的直接子元素</li><li>预定义的网格类，比如 <code>.row</code> 和 <code>.col-lg-4</code>，可用于快速创建网格布局</li><li>列通过内边距<code>（padding）</code>来创建列内容之间的间隙</li></ul></li><li><p>媒体查询</p><ul><li>超小设备（手机，小于 <code>768px</code>） </li><li>没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 <code>Bootstrap</code> 是移动设备优先的吗？）</li><li>小型设备（平板电脑，大于等于<code>768px</code>）<code>@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) &#123; ... &#125;</code></li><li>中型设备（台式电脑，大于等于<code>992px</code>）<code>@media (min-width: @screen-md-min) and (max-width: @screen-md-max) &#123; ... &#125;</code></li><li>大型设备（大台式电脑，大于等于<code>1200px</code>）<code>@media (min-width: @screen-lg-min) &#123; ... &#125;</code></li></ul></li><li><p>栅格参数</p><ul><li>超小屏幕 手机 (<code>&lt;768px</code>)    </li></ul></li><li><p>小屏幕 平板 (<code>≥768px</code>)    </p></li><li><p>中等屏幕 桌面显示器 (<code>≥992px</code>)    </p></li><li><p>大屏幕 大桌面显示器 (<code>≥1200px</code>)</p><ul><li>栅格系统行为     </li><li>总是水平排列    </li><li>开始是堆叠在一起的，当大于这些阈值时将变为水平排列C</li><li><code>.container </code> 最大宽度    <code>None </code>（自动）<code>750px</code>  <code>970px</code>  <code>1170px</code></li><li>类前缀 <code>.col-xs-     </code>  <code>.col-sm-</code>     <code>.col-md-</code>      <code>.col-lg-</code></li><li>列（<code>column</code>）数    <code>12</code></li><li>最大列（<code>column</code>）宽    自动 <code>~62px</code> <code>~81px</code>    <code>~97px</code></li><li>间隙宽度     <code>30px</code> （每列左右均有 <code>15px</code>）</li></ul></li><li><p>四种屏幕分类全部激活</p></li></ul> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12 a&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12 a&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-md-4 col-sm-6 col-xs-12 a&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         ....</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>可以设置列偏移，让中间保持空隙</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span>1-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-md-offset-1&quot;</span>&gt;</span>10-12<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>可以嵌套，嵌满也是 12 列</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span>1-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>9-12<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span> 10-12 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>可以把两个列交换位置，<code>push</code> 向右移动（推），<code>pull</code> 向左移动（拉）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-md-push-4&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 col-md-pull-8&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><ul><li>垂直或基本表单</li><li>内联表单<ul><li>让表单左对齐浮动，并表现为 <code>inline-block </code>内联块结构<code>&lt;form class=&quot;form-inline&quot;&gt;</code><br>注：当小于 <code>768px</code>，会恢复独占样式</li></ul></li><li>水平表单<ul><li>让表单内的元素保持水平排列</li></ul></li><li>表单组合<ul><li>前后增加片段</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>￥<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>.00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>输入框、文本域</p><ul><li>原生的<code>HTML5</code>的<code>input</code>类型的支持</li><li>包括：<ul><li><code>text</code></li><li><code>password</code></li><li><code>datetime</code></li><li><code>datetime-local</code></li><li><code>date</code></li><li><code>month</code></li><li><code>time</code></li><li><code>week</code></li><li><code>number</code></li><li><code>email</code></li><li><code>url</code></li><li><code>search</code></li><li><code>tel </code></li><li><code>color</code></li></ul></li><li><code>&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;文本输入&quot;&gt;</code></li><li><code>&lt;textarea class=&quot;form-control&quot; rows=&quot;3&quot;&gt;&lt;/textarea&gt;</code></li><li>复选框（<code>Checkbox</code>）和单选框（<code>Radio</code>）<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>选项 1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;optionsRadios&quot;</span> <span class="attr">id</span>=<span class="string">&quot;optionsRadios1&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span> <span class="attr">checked</span>&gt;</span> 选项 1</span><br><span class="line"> <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>内联的复选框和单选框</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-inline&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inlineCheckbox1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span>&gt;</span> 选项 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;radio-inline&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;optionsRadiosinline&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span>&gt;</span> 选项 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>选择框    <code>multiple </code>多行显示</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>静态控件   <code>.form-control-static</code></p></li><li><p>表单控件状态</p><ul><li>输入框焦点</li><li>当输入框 <code>input</code> 接收到<code> :focus</code> 时，输入框的轮廓会被移除，同时应用 <code>box-shadow</code>。</li><li>禁用的输入框 <code>input</code></li><li>如果您想要禁用一个输入框 <code>input</code>，只需要简单地添加 <code>disabled</code> 属性，这不仅会禁用输入框，还会改变输入框的样式以及当鼠标的指针悬停在元素上时鼠标指针的样式。</li><li>禁用的字段集 <code>fieldset</code></li><li>对 <code>&lt;fieldset&gt;</code> 添加 <code>disabled</code> 属性来禁用<code> &lt;fieldset&gt;</code> 内的所有控件。</li><li>校验状态<ul><li><code>.has-warning</code>、<code>.has-error</code> 或 <code>.has-success</code> 类到这些控件的父元素即可。</li></ul></li><li>任何包含在此元素之内的 <code>.control-label</code>、<code>.form-control</code> 和 <code>.help-block</code> 元素都将接受这些校验状态的样式。</li></ul></li><li><p>表单帮助文本</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;help-block&quot;</span>&gt;</span>一个较长的帮助文本块，超过一行，需要扩展到下一行。本实例中的帮助文本总共有两行。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>控件尺寸</p><ul><li><code>.input-lg</code>和<code>col-lg-*</code>来设置表单的高度和宽度<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control input-lg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;input-lg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-2&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;col-lg-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;col-lg-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-4&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;col-lg-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="响应式工具"><a href="#响应式工具" class="headerlink" title="响应式工具"></a>响应式工具</h4><ul><li><code>visible-xs</code> <code>visible-sm</code>  <code>visible-md</code>  <code>visible-lg</code></li><li><code>hidden-xs</code>   <code>hidden-sm</code>   <code>hidden-md</code>   <code>hidden-lg</code></li><li>以超小屏幕（<code>xs</code>）为例，可用的 <code>.visible-*-*</code> 类是：<code>visible-xs-block</code>、<code>visible-xs-inline</code> 和 <code>visible-xs-inline-block</code></li><li><code>visible-print-block</code>    <code>visible-print-inline</code>    <code>visible-print-inline-block</code>  浏览器隐藏   打印机可见<pre><code>`hidden-print`  浏览器可见   打印机隐藏 `visible-print`</code></pre></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 40px;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6 col-sm-3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #dedef8;border:1px solid #000;&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hidden-xs&quot;</span>&gt;</span>特别小型<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visible-xs&quot;</span>&gt;</span>✔ 在特别小型设备上可见<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6 col-sm-3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #dedef8;border:1px solid #000;&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hidden-sm&quot;</span>&gt;</span>小型<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visible-sm&quot;</span>&gt;</span>✔ 在小型设备上可见<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6 col-sm-3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #dedef8;border:1px solid #000;&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hidden-md&quot;</span>&gt;</span>中型<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visible-md&quot;</span>&gt;</span>✔ 在中型设备上可见<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6 col-sm-3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #dedef8;border:1px solid #000;&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hidden-lg&quot;</span>&gt;</span>大型<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;visible-lg&quot;</span>&gt;</span>✔ 在大型设备上可见<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h4><ul><li>用法：<code>&lt;span class=&quot;glyphicon glyphicon-search&quot;&gt;&lt;/span&gt;</code></li></ul><h4 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h4><ul><li>基本的下拉菜单</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>html5+css3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>对齐 <code>dropdown-menu-right</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-header&quot;</span>&gt;</span>Dropdown header<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>分隔线</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>禁用的菜单项</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;dropdownMenu4&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Regular link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Disabled link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>让菜单默认显示 <code>&lt;div class=&quot;dropdown open&quot;&gt;</code></li></ul><h3 id="六、按钮、输入框组件"><a href="#六、按钮、输入框组件" class="headerlink" title="六、按钮、输入框组件"></a>六、按钮、输入框组件</h3><hr><h4 id="按钮组件"><a href="#按钮组件" class="headerlink" title="按钮组件"></a>按钮组件</h4><ul><li><strong>基本的按钮组</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>按钮工具栏</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-toolbar&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>按钮的大小</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group btn-group-lg&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group btn-group-sm&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group btn-group-xs&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>嵌套</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>按钮 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>垂直的按钮组</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group-vertical&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>按钮 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>两端对齐排列的按钮组</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group btn-group-justified&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group btn-group-justified&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;div class=&quot;btn-group&quot;&gt;--&gt;</span>    为了浏览器兼容问题使用btn-group包裹</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;div class=&quot;btn-group&quot;&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;div class=&quot;btn-group&quot;&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>按钮式下拉菜单</strong></li><li>单按钮下拉菜单   <code>btn-default</code>  <code>btn-success</code>  <code>btn-primary</code>   <code>btn-info</code>   <code>btn-danger</code>   <code>btn-warning</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>Default <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>分裂式按钮下拉菜单</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>按钮下拉菜单的大小   <code>btn-lg</code>   <code>btn-sm</code>   <code>btn-xs</code></strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-lg dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>Default <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>向上弹出式菜单    <code>dropup</code></strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group dropup&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-lg dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>Default <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h4><ul><li><strong>基本的输入框组</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>$<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>输入框组的大小</strong>    <code>input-group-lg</code>  <code>input-group-xs</code>  <code>input-group-sm</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group input-group-lg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>复选框和单选框插件</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-addon&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>按钮插件   <code>input-group-btn</code></strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-btn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>按钮式下拉菜单</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-btn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>dropdown<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>分裂式按钮下拉菜单</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-btn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>dropdown<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="七、导航、导航条、面包屑导航组件"><a href="#七、导航、导航条、面包屑导航组件" class="headerlink" title="七、导航、导航条、面包屑导航组件"></a>七、导航、导航条、面包屑导航组件</h3><hr><p><strong>导航（标签） <code>nav</code></strong></p><ul><li>标签页   <code>nav-tabs</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>胶囊式标签页 <code>nav-pills</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-pills&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>垂直的胶囊式标签页  <code>nav-stacked</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-pills nav-stacked&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>两端对齐的标签页 <code>nav-justified</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-pills nav-justified&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>禁用链接  <code> disabled</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>带有下拉菜单的标签</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>Message <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>通讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>带下拉菜单的胶囊式标签</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-pills&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>Message <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>通讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>导航条 <code>navbar</code>    <code>&lt;nav&gt;</code>标签中添加 <code>class</code> <code>.navbar</code>、<code>.navbar-default</code></strong></p><ul><li>默认的导航栏</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-default&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>poetries blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>Message <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>通讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>响应式的导航栏</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-default&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#navbar-collapse&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>教育<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;navbar-collapse&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>Message <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>通讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>导航栏中的表单</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-form navbar-right&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>导航栏中的按钮   <code> navbar-btn</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default navbar-btn&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>导航栏中的文本    <code>navbar-text</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;navbar-text&quot;</span>&gt;</span>Signed in as Thomas<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>固定到顶部、底部   <code>navbar-fixed-top</code>    <code>navbar-fixed-bottom</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-default navbar-fixed-top&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>教育<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span>Message <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>通讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>静态的顶部 <code>navbar-static-top</code></p></li><li><p>倒置的导航栏  带有黑色背景白色文本的倒置的导航栏    <code>navbar-inverse</code></p></li><li><p>面包屑导航</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;breadcrumb&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="八、分页、标签、徽章、巨幕、页头、缩略图、警告框组件"><a href="#八、分页、标签、徽章、巨幕、页头、缩略图、警告框组件" class="headerlink" title="八、分页、标签、徽章、巨幕、页头、缩略图、警告框组件"></a>八、分页、标签、徽章、巨幕、页头、缩略图、警告框组件</h3><hr><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><ul><li>默认的分页</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>«<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>»<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>禁用和激活状态</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>«<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>»<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>分页的尺寸  <code>pagination-lg</code>    <code>pagination-sm</code></p></li><li><p>翻页（<code>Pager</code>）</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pager&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>next<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>对齐的链接</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pager&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;previous&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>← previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>next →<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可选的禁用状态</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pager&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;previous disabled&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>← previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>next →<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label label-default&quot;</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label label-primary&quot;</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label label-success&quot;</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label label-info&quot;</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label label-warning&quot;</span>&gt;</span>Warning<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label label-danger&quot;</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="徽章badge"><a href="#徽章badge" class="headerlink" title="徽章badge"></a>徽章<code>badge</code></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Messages <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Messages <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="巨幕-jumbotron"><a href="#巨幕-jumbotron" class="headerlink" title="巨幕 jumbotron"></a>巨幕 <code>jumbotron</code></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured</span><br><span class="line">            content or information.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Learn more<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="页头-page-header"><a href="#页头-page-header" class="headerlink" title="页头 page-header"></a>页头 <code>page-header</code></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Example page header</span><br><span class="line">  <span class="tag">&lt;<span class="name">small</span>&gt;</span>Subtext for header<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="缩略图"><a href="#缩略图" class="headerlink" title="缩略图"></a>缩略图</h4><ul><li>默认样式</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-sm-6&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/kittens.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>自定义内容</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-sm-6&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/kittens.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span>  <span class="comment">&lt;!--text-center--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>缩略图标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>一些示例文本。一些示例文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>按钮 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="警告框"><a href="#警告框" class="headerlink" title="警告框"></a>警告框</h4><ul><li>基本默认样式</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-success&quot;</span>&gt;</span>成功！很好地完成了提交。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-info&quot;</span>&gt;</span>信息！请注意这个信息。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-warning&quot;</span>&gt;</span>警告！请不要提交。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-danger&quot;</span>&gt;</span>错误！请进行一些更改。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>可关闭的警告框<code> &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;×&lt;/button&gt;</code></p></li><li><p>警告中的链接</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-success&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;alert-link&quot;</span>&gt;</span>成功！很好地完成了提交。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="九、进度条、媒体对象、列表组、面板、响应式插入组件"><a href="#九、进度条、媒体对象、列表组、面板、响应式插入组件" class="headerlink" title="九、进度条、媒体对象、列表组、面板、响应式插入组件"></a>九、进度条、媒体对象、列表组、面板、响应式插入组件</h3><hr><h4 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h4><ul><li>默认的进度条</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:45%;&quot;</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>情景变化的进度条</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-info&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:60%;&quot;</span>&gt;</span>60%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-success&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:25%;&quot;</span>&gt;</span>25%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:45%;&quot;</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-warning&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:45%;&quot;</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>条纹的进度条 <code>progress-striped</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress progress-striped&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:45%;&quot;</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>动画的进度条<code>active</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress progress-striped active&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:45%;&quot;</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>堆叠的进度条</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-warning&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:45%;&quot;</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-success&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:25%;&quot;</span>&gt;</span>25%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="媒体对象"><a href="#媒体对象" class="headerlink" title="媒体对象"></a>媒体对象</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;media&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pull-left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;media-object&quot;</span> <span class="attr">src</span>=<span class="string">&quot;images/kittens.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;95&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;media-body&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;media-heading&quot;</span>&gt;</span>媒体标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">   这是一些示例文本。这是一些示例文本。</span><br><span class="line">   这是一些示例文本。这是一些示例文本。</span><br><span class="line">   这是一些示例文本。这是一些示例文本。</span><br><span class="line">   这是一些示例文本。这是一些示例文本。</span><br><span class="line">   这是一些示例文本。这是一些示例文本。</span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表组"><a href="#列表组" class="headerlink" title="列表组"></a>列表组</h4><ul><li>向列表组添加国徽</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>免费域名注册 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge pull-right&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>免费 Window 空间托管<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>每年更新成本<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>向列表组添加链接</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item active&quot;</span>&gt;</span>免费域名注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>免费 Window 空间托管<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>每年更新成本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>向列表组添加自定义内容</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>Cras justo odio<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>Dapibus ac facilisis in<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>Morbi leo risus<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>Porta ac consectetur ac<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>Vestibulum at eros<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h4><ul><li>面板标题</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>面板脚注</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-footer text-right&quot;</span>&gt;</span>by zichen<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>面板主题</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-success&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-info&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-warning&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-danger&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>带表格的面板</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span>Panel heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>带列表组的面板</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-danger&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span>面板内容显示区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>免费域名注册<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>免费 Window 空间托管<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>图像的数量<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>24*7 支持<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>每年更新成本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-footer text-right&quot;</span>&gt;</span>by zichen<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="响应式嵌入组件"><a href="#响应式嵌入组件" class="headerlink" title="响应式嵌入组件"></a>响应式嵌入组件</h4><ul><li>根据被嵌入内容的外部容器的宽度，自动创建一个固定的比例，从而让浏览器自动确定 内容的尺寸，能够在各种设备上缩放<br> 这些规则可以直接用于<code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;video&gt;</code>和<code>&lt;object&gt;</code>元素。</li><li><code>16:9</code> 响应式</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;embed-responsive embed-responsive-16by9&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">embed</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.youtube.com/embed/zpOULjyy-n8?rel=0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>4:3</code> 响应式</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;embed-responsive embed-responsive-4by3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.youtube.com/embed/zpOULjyy-n8?rel=0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;embed-responsive embed-responsive-16by9&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">class</span>=<span class="string">&quot;embed-responsive-item&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.youtube.com/embed/zpOULjyy-n8?rel=0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;embed-responsive embed-responsive-4by3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">class</span>=<span class="string">&quot;embed-responsive-item&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.youtube.com/embed/zpOULjyy-n8?rel=0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>well</code></strong></p><ul><li>基本的<code>well</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span>&gt;</span>您好，我在大的 Well 中！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>尺寸大小 <code>well-lg</code>   <code>well-sm</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well well-lg&quot;</span>&gt;</span>您好，我在大的 Well 中！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well well-sm&quot;</span>&gt;</span>您好，我在小的 Well 中！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="十、弹出框、警告框、标签页和工具提示插件插件"><a href="#十、弹出框、警告框、标签页和工具提示插件插件" class="headerlink" title="十、弹出框、警告框、标签页和工具提示插件插件"></a>十、弹出框、警告框、标签页和工具提示插件插件</h3><hr><h4 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h4><ul><li>弹出框点击一个元素，弹出一个包含标题和内容的容器</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本用法</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-danger&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">title</span>=<span class="string">&quot;弹出框&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;这是一个弹出框插件&quot;</span>&gt;</span></span><br><span class="line">点击弹出/隐藏弹出框</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>JavaScript</code> 初始化  <code>$(&#39;button&#39;).popover();</code></p></li><li><p><code>Popover</code> 插件中的属性：</p><ul><li><code>data-animation</code>   默认 <code>true</code>，在 <code>popover</code> 上应用一个 <code>CSS</code> <code>fade</code> 动画。 如果设置 <code>false</code>，则不应用。</li><li><code>data-html</code>        默认 <code>false</code>，不允许提示内容格式为 <code>html</code>。如果设置 为 <code>true</code>，则可以设置 <code>html</code> 格式的提示内容</li><li><code>data-placement</code>   默认值 <code>top</code>，还有 <code>bottom</code>、<code>left</code>、<code>right</code> 和 <code>auto</code>。 如果<code>auto</code>会自行调整合适的位置，如果是<code>auto</code> <code>left</code> 则会尽量在左边显示，但左边不行就靠右边。</li><li><code>data-selector </code>   默认 <code>false</code>，可以选择绑定指定的选择器。</li><li><code>data-original-title</code> 默认空字符串，弹出框的标题。优先级比 <code>title</code> 低</li><li><code>title  </code>          默认字空符串，弹出框的标题。</li><li><code>data-trigger</code>     默认值 <code>click</code>，表示怎么触发 <code>popover</code>，其他值为： <code>hover</code>、<code>focus</code>、<code>manual</code>。多个值用空格隔开，manual 手动不能和其他同时设置。</li><li><code>data-delay</code>       默认值 <code>0</code>，延迟触发 <code>popover(毫秒)</code>，如果传数字则， 表示 <code>show</code>/<code>hide</code> 的毫秒数，如果传对象，结构为： {show:500,hide:100}</li><li><code>data-container</code>   默认值 <code>false</code>，将 <code>popover</code> 附加到特定的元素上。比 如组合按钮组提示，容器不够，可以附加 <code>body</code> 上。<code> container : &#39;body&#39;</code></li><li><code>data-template </code>   更改提示框的 <code>HTML</code> 提示语的模版，默认值为：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;popover&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;popover-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;popover-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>data-content</code>    默认值为空，弹出框的内容。</li><li><code>data-viewport</code>    设置外围容器的边际，具体代码看示例。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> $(<span class="string">&#x27;button&#x27;</span>).popover(&#123;</span><br><span class="line"><span class="attr">trigger</span>:<span class="string">&quot;click&quot;</span>,</span><br><span class="line"><span class="attr">placement</span>:<span class="string">&quot;right&quot;</span>,</span><br><span class="line"><span class="attr">viewport</span> : &#123;</span><br><span class="line"><span class="attr">selector</span> : <span class="string">&#x27;#view&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><ul><li><p><code>Popover</code> 插件中的方法：</p><ul><li>显示 <code>$(&#39;button&#39;).popover(&#39;show&#39;);</code></li><li>隐藏 <code>$(&#39;button&#39;).popover(&#39;hide&#39;);</code></li><li>反转显示和隐藏 <code>$(&#39;button&#39;).popover(&#39;toggle&#39;);</code></li><li>隐藏并销毁 <code>$(&#39;button&#39;).popover(&#39;destroy&#39;);</code></li></ul></li><li><p><code>Popover</code> 插件中的事件：</p><ul><li><code>show.bs.popover</code> 在调用 <code>show</code> 方法时触发</li><li><code>shown.bs.popover</code> 在显示整个弹窗时时触发</li><li><code>hide.bs.popover</code> 在调用 <code>hide</code> 方法时触发</li><li><code>hidden.bs.popover</code> 在完全关闭整个弹出时触发</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).on(<span class="string">&#x27;show.bs.tab&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;调用 show 方法时触发！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="警告框-1"><a href="#警告框-1" class="headerlink" title="警告框"></a>警告框</h4><ul><li>警告框即为点击小时的信息框</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本实例</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-warning&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;alert&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>警告：您的浏览器不支持！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>添加淡入淡出效果   <code>&lt;div class=&quot;alert alert-warning fade in&quot;&gt;</code></p></li><li><p>如果用 <code>JavaScript</code>，可以代替 <code>data-dismiss=&quot;alert&quot;</code></p></li><li><p><code>Alert</code> 插件中的方法：</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.close&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     $(<span class="string">&#x27;#alert&#x27;</span>).alert(<span class="string">&#x27;close&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>Alert</code> 插件中的事件：<ul><li><code>close.bs.alert</code>   当 <code>close</code> 方法被调用后立即触发</li><li><code>closed.bs.alert</code>  当警告框被完全关闭后立即触发</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#alert&#x27;</span>).on(<span class="string">&#x27;close.bs.alert&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;当 close 方法被触发时调用！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h4><ul><li>标签页也就是通常所说的选项卡功能</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本用法</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#html5&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bootstrap&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#jquery&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#extjs&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>ExtJS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 10px;&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;html5&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bootstrap&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jquery&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;extjs&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以设置淡入淡出效果 fade，而 in 表示首选的内容默认显示</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane fade in active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;html5&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>也可以换成胶囊式</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-pills&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>data-target</code>    使用 <code>data-target</code> 绑定或不绑定效果都是一样的</p></li><li><p><code>Tab</code> 插件中的方法：</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#nav a&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">     e.preventDefault();</span><br><span class="line">     $(<span class="built_in">this</span>).tab(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>Tab</code> 插件中的事件：<ul><li><code>show.bs.tab</code>      在调用 <code>tab</code> 方法时触发</li><li><code>shown.bs.tab</code>     在显示整个标签时触发</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#nav a&#x27;</span>).on(<span class="string">&#x27;show.bs.tab&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;调用 tab 时触发！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="工具提示"><a href="#工具提示" class="headerlink" title="工具提示"></a>工具提示</h4><ul><li>工具提示就是通过鼠标移动选定在特定的元素上时，显示相关的提示语</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本实例</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">title</span>=<span class="string">&quot;超文本标识符&quot;</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>JavaScript</code> 初始化 <code> $(&#39;#section&#39;).tooltip();</code></p></li><li><p><code>data-animation</code>   默认 <code>true</code>，在 <code>tooltip</code> 上应用一个 <code>CSS fade</code> 动画。 如果设置 <code>false</code>，则不应用。</p></li><li><p><code>data-html </code>       默认 <code>false</code>，不允许提示内容格式为 <code>html</code>。如果设置 为 <code>true</code>，则可以设置 <code>html</code> 格式的提示内容。</p></li><li><p><code>data-placement</code>   默认值 <code>top</code>，还有 <code>bottom</code>、<code>left</code>、<code>right</code> 和 <code>auto</code>。 如果<code>auto</code>会自行调整合适的位置，如果是<code>auto</code> <code>left</code> 则会尽量在左边显示，但左边不行就靠右边。</p></li><li><p><code>data-selector</code>    默认 <code>false</code>，可以选择绑定指定的选择器。 <code>rel=&quot;tooltip&quot;</code></p></li><li><p><code>data-original-title</code> 默认空字符串，提示语的内容。优先级比 title 低</p></li><li><p><code>title </code>           默认字空符串，提示语的内容。</p></li><li><p><code>data-trigger</code>     默认值 <code>hover</code> <code>foucs</code>，表示怎么触发 <code>tooltip</code>，其 他值为：<code>click</code>、<code>manual</code>。多个值用空格隔开，<code>manual</code> 手动不能和其他同时设置。</p></li><li><p><code>data-delay</code>       默认值 <code>0</code>，延迟触发 <code>tooltip(毫秒)</code>，如果传数字则， 表示 <code>show</code>/<code>hide</code> 的毫秒数，如果传对象，结构为：<code>&#123;   show:500,hide:100   &#125;</code></p></li><li><p><code>data-containe</code>r   默认值 <code>false</code>，将<code> tooltip</code> 附加到特定的元素上。比 如组合按钮组提示，容器不够，可以附加 <code>body</code> 上。<code> container : &#39;body&#39;</code></p></li><li><p><code>data-template</code>    更改提示框的 <code>HTML</code> 提示语的模版，默认值为：</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;tooltip&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;tooltip-arrow&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;tooltip-inner&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;tooltip&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">title</span>=<span class="string">&quot;超文本标识符&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-animation</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-html</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-placement</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-selector</span>=<span class="string">&quot;a[rel=tooltip]&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-trigger</span>=<span class="string">&quot;click&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-delay</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-template</span>=<span class="string">&quot;&lt;b&gt;123&lt;/b&gt;&quot;</span> &gt;</span>HTML5</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#selector a&#x27;</span>).tooltip(&#123;</span><br><span class="line"><span class="attr">delay</span> : &#123;</span><br><span class="line"><span class="attr">show</span> : <span class="number">500</span>,</span><br><span class="line"><span class="attr">hide</span> : <span class="number">100</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><code>Tooltip</code>插件中的方法：</p><ul><li>显示   <code>$(&#39;#section a&#39;).tooltip(&#39;show&#39;);</code></li><li>隐藏              <code>$(&#39;#section a&#39;).tooltip(&#39;hide&#39;);</code></li><li>反转显示和隐藏    <code>$(&#39;#section a&#39;).tooltip(&#39;toggle&#39;);</code></li><li>隐藏并销毁        <code>$(&#39;#section a&#39;).tooltip(&#39;destroy&#39;);</code></li></ul></li><li><p><code>Tooltip</code>插件中的事件：</p><ul><li><code>show.bs.tooltip</code>  在 <code>show</code> 方法调用时立即触发</li><li><code>shown.bs.tooltip</code> 在提示框完全显示给用户之后触发</li><li><code>hide.bs.tooltip</code>  在 <code>hide</code> 方法调用时立即触发</li><li><code>hidden.bs.tooltip</code> 在提示框完全隐藏之后触发</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#select a&#x27;</span>).on(<span class="string">&#x27;show.bs.tooltip&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;调用 show 时触发！&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//data-selector</span></span><br><span class="line">$(<span class="string">&quot;#selector&quot;</span>).tooltip(&#123;</span><br><span class="line">     <span class="attr">selector</span>:<span class="string">&quot;a[rel=&#x27;tooltip&#x27;]&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>data-container</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">title</span>=<span class="string">&quot;超文本标记符&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">title</span>=<span class="string">&quot;超文本标记符&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">title</span>=<span class="string">&quot;超文本标记符&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).tooltip(&#123;</span><br><span class="line">    <span class="attr">delay</span>:&#123;</span><br><span class="line">        <span class="attr">show</span>:<span class="number">500</span>,</span><br><span class="line">        <span class="attr">hide</span>:<span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">container</span>:<span class="string">&quot;body&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="十一、下拉菜单、滚动监听、按钮和折叠插件"><a href="#十一、下拉菜单、滚动监听、按钮和折叠插件" class="headerlink" title="十一、下拉菜单、滚动监听、按钮和折叠插件"></a>十一、下拉菜单、滚动监听、按钮和折叠插件</h3><hr><h4 id="下拉菜单插件"><a href="#下拉菜单插件" class="headerlink" title="下拉菜单插件"></a>下拉菜单插件</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span> 下拉菜单 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果按钮在容器外部，可以通过 <code>data-target</code> 进行绑定</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#dropdown&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>Dropdown</code>插件的方法：，但仍然需要 <code>data-*</code></p><ul><li><code>$(&#39;#btn&#39;).dropdown();</code></li><li><code>$(&#39;#btn&#39;).dropdown(&#39;toggle&#39;);</code></li></ul></li><li><p><code>Dropdown</code>插件的事件：</p><ul><li><code>show.bs.dropdown </code>    在 <code>show</code> 方法调用时立即触发。</li><li><code>shown.bs.dropdown </code>   在下拉菜单完全显示出来，并且等 <code>CSS</code> 动画完成之后 触发。</li><li><code>hide.bs.dropdown</code>     在 <code>hide</code> 方法调用时，但还未关闭隐藏时触发。</li><li><code>hidden.bs.dropdown</code>   在下拉菜单完全隐藏之后，并且等 <code>CSS</code> 动画完成之后 触发。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#dropdown&#x27;</span>).on(<span class="string">&#x27;show.bs.dropdown&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;在调用 show 方法时立即触发！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="滚动监听插件"><a href="#滚动监听插件" class="headerlink" title="滚动监听插件"></a>滚动监听插件</h4><ul><li><p><code>data-offset</code>  默认值为 <code>10</code>，固定弄内容距滚动容器 <code>10</code> 像素以内， 就高亮显示所对应的菜单</p></li><li><p><code>data-spy </code>    设置 <code>scroll</code>，将设置滚动容器监听</p></li><li><p><code>data-target</code>  设置<code>#nav</code>，绑定指定监听的菜单</p></li><li><p><code>scroll</code>插件的方法：</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#scroll&quot;</span>).scrollspy(&#123;</span><br><span class="line">     <span class="comment">//offset: 0,</span></span><br><span class="line">     <span class="attr">target</span>: <span class="string">&quot;#nav&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>activate.bs.scrollspy</code>    每当一个新条目被激活后都将由滚动监听插件触 发此事件。</li><li>事件绑定在导航上</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#nav&#x27;</span>).on(<span class="string">&#x27;activate.bs.scrollspy&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">&#x27;新条目被激活后触发此事件！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>滚动监听还有一个更新容器 <code>DOM</code> 的方法<ul><li><code>refresh</code>  更新容器 <code>DOM</code> 的方法</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeSec</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    $(e).parents(<span class="string">&#x27;.sec&#x27;</span>).remove();</span><br><span class="line">    $(<span class="string">&#x27;#content&#x27;</span>).scrollspy(<span class="string">&#x27;refresh&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按钮插件"><a href="#按钮插件" class="headerlink" title="按钮插件"></a>按钮插件</h4><ul><li>单个切换</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;button&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span>单个切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>注：在 <code>Firefox</code> 多次页面加载时，按钮可能保持表单的禁用或选择状态。解决方案是： 添加<code> autocomplete=&quot;off&quot;。</code></p></li><li><p>单选按钮</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary active&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">checked</span>&gt;</span> 男</span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span> 女</span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>复选按钮</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary active&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fa&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">checked</span>&gt;</span> 音乐</span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fa&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span> 体育</span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fa&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span> 美术</span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fa&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span> 电脑</span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>加载状态</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;myButton&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-loading-text</span>=<span class="string">&quot;Loading...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span> 加载状态 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#myButton&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> btn = $(<span class="built_in">this</span>).button(<span class="string">&#x27;loading&#x27;</span>);</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         btn.button(<span class="string">&#x27;reset&#x27;</span>);</span><br><span class="line">     &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>Button</code> 插件中的 <code>button</code> 方法中有三个参数：<code>toggle</code>、<code>reset</code>、<code>string</code>(比如 <code>loading</code>、 <code>complete</code>)。</li><li>可代替    <code>data-toggle=&quot;button&quot;</code></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     $(<span class="built_in">this</span>).button(<span class="string">&#x27;toggle&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="折叠插件"><a href="#折叠插件" class="headerlink" title="折叠插件"></a>折叠插件</h4><ul><li>基本实例</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#content&quot;</span>&gt;</span> Bootstrap <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span>&gt;</span></span><br><span class="line">         Bootstrap 是 Twitter 推出的一个用于前端开发的开源工具包。它由 Twitter 的设计师 Mark Otto 和 Jacob Thornton 合作开发,是一个 CSS/HTML 框架。目 前,Bootstrap 最新版本为 3.0 。</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Collapse</code>插件的方法：<code>hide</code>、<code>show</code>、<code>toggle</code></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     $(<span class="string">&#x27;#collapseOne&#x27;</span>).collapse(<span class="string">&#x27;toggle&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>Collapse</code>插件的事件：<ul><li><code>show.bs.collapse</code>     在 <code>show</code> 方法调用时立即触发</li><li><code>shown.bs.collapse </code>   折叠区完全显示出来是触发</li><li><code>hide.bs.collapse </code>    在 <code>hide</code> 方法调用时触发</li><li><code>hidden.bs.collapse</code>   该事件在折叠区域完全隐藏之后触发</li></ul></li></ul><h3 id="十二、模态框、轮播插件"><a href="#十二、模态框、轮播插件" class="headerlink" title="十二、模态框、轮播插件"></a>十二、模态框、轮播插件</h3><hr><h4 id="模态框插件"><a href="#模态框插件" class="headerlink" title="模态框插件"></a>模态框插件</h4><ul><li>模态框的弹窗组件需要三层 <code>div</code> 容器元素，分别为 <code>modal</code>(模态声明层)、 <code>dialog</code>(窗口声明层)、<code>content</code>(内容层)</li><li>在内容层里面，还有三层，分别为 <code>header</code>(头部)、<code>body</code>(主体)、<code>footer</code>(注脚)</li><li>模态框去掉 <code>show</code>，增加一个 <code>id</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 点击触发模态框显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myModal&quot;</span>&gt;</span> 点击弹窗 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 弹窗的大小有三种，默认情况下是正常，还有 lg(大)和 sm(小) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-lg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog sm-lg&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可设置淡入淡出效果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>所有的插件，都是基于 <code>JavaScript</code>/<code>jQuery</code> 的。</p></li><li><p>四个要素：用法、参数、方法和事件。</p></li><li><p><strong>用法</strong></p><ul><li>可以通过 <code>data</code> 属性 <code>data-toggle</code>  <code>data-toggle=&quot;modal&quot;</code>  <code>data-target=&quot;#myModal&quot;</code></li><li><code>data-toggle</code> 表示触发类型</li><li><code>data-target</code> 表示触发的节点</li><li>如果不是使用<code>&lt;button&gt;</code>，而是<code>&lt;a&gt;</code>，其中 <code>data-target</code> 也可以使用 <code>href=&quot;#myModal&quot;</code>取代</li><li>建议使用 <code>data-target</code>。除了 <code>data-toggle</code> 和 <code>data-target</code> 两个声明 属性外，还有一些可以用选项</li></ul></li><li><p><strong>参数</strong></p><ul><li><code>data-backdrop</code>    布尔值或 <code>&#39;static&#39;</code>   默认值 <code>true</code>，表示背景存在黑灰透明 遮罩，且单击空白背景可关闭弹窗；</li><li>如果为 <code>false</code>，表示背景不存在黑灰 透明遮罩，且点击空白背景不可关闭 弹窗；</li><li>如果是字符串<code>&#39;static&#39;</code>，表示背景存 在黑灰透明遮罩，且点击空白不可关 闭弹窗。</li><li><code>data-keyboard</code>   布尔值 <code>true</code>   如果是 <code>true</code>，按 <code>esc</code> 键会关闭窗口； 如果是 <code>false</code>，按 <code>esc</code> 键会不会关闭。</li><li><code>data-show</code>   布尔值 <code>true</code>   如果是 <code>true</code>，初始化时，默认显示； 如果是 <code>false</code>，初始化时，默认隐藏。</li><li><code>remote</code>   <code>url</code> 路径 空值   如果值不是以<code>#</code>号开头，则表示一个 <code>url</code> 地址，加载 <code>url</code> 内容到 <code>modal-content</code> 容器里，并只加载一 次。</li><li>如果是<code>#</code>号，就是取代 <code>data-target</code> 的方法。</li><li>在 <code>JavaScript</code> 直接设置</li><li>通过 <code>jQuery</code> 方式声明</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#myModal&#x27;</span>).modal(&#123;</span><br><span class="line">     <span class="attr">show</span> : <span class="literal">true</span>,</span><br><span class="line">     <span class="attr">backdrop</span> : <span class="literal">false</span>,</span><br><span class="line">     <span class="attr">keyboard</span> : <span class="literal">false</span>,</span><br><span class="line">     <span class="attr">remote</span> : <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>方法</strong><ul><li><code>toggle .modal(&#39;toggle&#39;)</code>; 触发时，反转切换弹窗状态</li><li><code>show .modal(&#39;show&#39;)</code>; 触发时，显示弹窗</li><li><code>hide .modal(&#39;hide&#39;)</code>; 触发时，关闭弹窗</li><li>点击显示弹窗<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btn&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">&#x27;#myModal&#x27;</span>).modal(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&#x27;#myModal&#x27;</span>).modal(&#123;</span><br><span class="line">   <span class="attr">show</span> : <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>事件</strong></p><ul><li><code>show.bs.modal</code>    在<code>show</code> 方法调用时立即触发。</li><li><code>shown.bs.modal</code>  在模态框完全显示出来，并且等 <code>CSS</code> 动画完成之后触 发。</li><li><code>hide.bs.modal</code>    在 <code>hide</code> 方法调用时，但还未关闭隐藏时触发。</li><li><code>hidden.bs.modal</code>  在模态框完全隐藏之后，并且等 <code>CSS</code> 动画完成之后触 发</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#myModal&#x27;</span>).on(<span class="string">&#x27;show.bs.modal&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;在 show 方法调用时立即触发！&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&#x27;#myModal&#x27;</span>).on(<span class="string">&#x27;loaded.bs.modal&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;远程数据加载完毕后触发！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="轮播图插件"><a href="#轮播图插件" class="headerlink" title="轮播图插件"></a>轮播图插件</h4><ul><li><code>data</code> 属性解释：<ul><li><code>data-slide</code> 接受关键字 <code>prev</code> 或 <code>next</code>，用来改变幻灯片相对于当前位置的位置；</li><li><code>data-slide-to</code> 来向轮播底部创建一个原始滑动索引，<code>data-slide-to=&quot;2&quot;</code>将把滑 动块移动到一个特定的索引，索引从 0 开始计数。</li><li><code>data-ride=&quot;carousel&quot;</code>属性用户标记轮播在页面加载时开始动画播放。</li><li><code>data-interval </code>   默认值 <code>5000</code>，幻灯片的等待时间(毫秒)。如果为 <code>false</code>，轮播将不会自动开始循环。</li><li><code>data-pause</code>       默认鼠标停留在幻灯片区域(<code>hover</code>)即暂停轮播，鼠 标离开即启动轮播。</li><li><code>data-wrap</code>        默认值 <code>true</code>，轮播是否持续循环。</li><li>如果在 <code>JavaScript</code> 调用就直接使用键值对方法，并去掉 <code>data-</code>；</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#myCarousel&#x27;</span>).carousel(&#123;  <span class="comment">//设置自定义属性</span></span><br><span class="line">     <span class="attr">interval</span> : <span class="number">2000</span>,<span class="comment">//设置自动播放`/2` 秒</span></span><br><span class="line">     <span class="attr">pause</span> : <span class="string">&#x27;hover&#x27;</span>,<span class="comment">//设置暂停按钮的事件</span></span><br><span class="line">     <span class="attr">wrap</span> : <span class="literal">false</span>,   <span class="comment">//只播一次</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>方法：</strong><ul><li><code>cycle</code> 循环各帧(默认从左到右)</li><li><code>pause</code> 停止轮播</li><li><code>number</code> 轮播到指定的图片上(小标从 <code>0</code> 开始，类似数组)</li><li><code>prev</code> 循环轮播到上一个项目</li><li><code>next</code> 循环轮播到下一个项目</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//点击按钮执行</span></span><br><span class="line">     $(<span class="string">&#x27;#myCarousel&#x27;</span>).carousel(<span class="string">&#x27;cycle&#x27;</span>); <span class="comment">//点击后，自动播放</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>事件</strong></p></li><li><p><code>slide.bs.carousel</code> 当调用 <code>slide</code> 实例方式时立即触发该事件。</p></li><li><p><code>slid.bs.carousel</code> 当轮播完成一个幻灯片触发该事件</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#myCarousel&#x27;</span>).on(<span class="string">&#x27;slide.bs.carousel&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;当调用 slide 实例方式时立即触发&#x27;</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">$(<span class="string">&#x27;#myCarousel&#x27;</span>).on(<span class="string">&#x27;slid.bs.carousel&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;当轮播完成一个幻灯片触发&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>bootstrap笔记总结【复制到浏览器打开放大】<br><img src="https://cdn.jsdelivr.net/gh/haodex/noteImage@master/202111111758712.png" alt="bootstrap笔记总结"></li></ul><h3 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><hr><ul><li><a href="http://v3.bootcss.com/">bootstrap中文教程</a></li><li><a href="https://hackerthemes.com/bootstrap-cheatsheet/">bootstrap很方便的速查表-推荐</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一、-bootstrap简介&quot;&gt;&lt;a href=&quot;#一、-bootstrap简介&quot; class=&quot;headerlink&quot; title=&quot;一、 bootstrap简介&quot;&gt;&lt;/a&gt;一、 &lt;code&gt;bootstrap&lt;/code&gt;简介&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Bootstrap&lt;/code&gt;，来自 &lt;code&gt;Twitter&lt;/code&gt;（全国最大的微博），是目前最受欢迎的前端框架。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;bootstrap&lt;/code&gt;下载及演示 &lt;a href=&quot;http://v3.bootcss.com/&quot;&gt;http://v3.bootcss.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么是&lt;strong&gt;bootstrap&lt;/strong&gt;？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Bootstrap&lt;/code&gt;，来自&lt;code&gt;Twitter&lt;/code&gt;，是目前最受欢迎的前端框架。&lt;code&gt;Bootstrap&lt;/code&gt;是基于&lt;code&gt;HTML&lt;/code&gt;、&lt;code&gt;CSS&lt;/code&gt;、&lt;code&gt;JavaScript&lt;/code&gt;的，他简介灵活，使得&lt;code&gt;Web&lt;/code&gt;开发更加快捷。它由&lt;code&gt;Twitter&lt;/code&gt;的设计师&lt;code&gt;Mark Otto&lt;/code&gt;和&lt;code&gt;Jacob Thornton&lt;/code&gt;合作开发，是一个&lt;code&gt;CSS/HTML&lt;/code&gt;框架。&lt;code&gt;Bootstrap&lt;/code&gt;提供了优雅的&lt;code&gt;HTML&lt;/code&gt;和&lt;code&gt;CSS&lt;/code&gt;规范，它既是由动态&lt;code&gt;CSS&lt;/code&gt;语言&lt;code&gt;Less&lt;/code&gt;写成。&lt;code&gt;Bootstrap&lt;/code&gt;一经推出后颇受欢迎，一直是&lt;code&gt;GitHub&lt;/code&gt;上的热门开源项目，包括&lt;code&gt;NASA&lt;/code&gt;的&lt;code&gt;MASNBC&lt;/code&gt;（微软全国广播公司）的&lt;code&gt;BreakingNews&lt;/code&gt;都使用了该项目。国内一些移动开发者较为熟悉的框架，如&lt;code&gt;WeX5&lt;/code&gt;前端开源框架等，也是基于&lt;code&gt;Bootstrap&lt;/code&gt;源码进行性能优化而来&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bootstrap &lt;/code&gt;是基于 &lt;code&gt;HTML&lt;/code&gt;、&lt;code&gt;CSS&lt;/code&gt;、&lt;code&gt;JAVASCRIPT&lt;/code&gt; 的开源框架，它简洁、直观、强悍、灵活，使得 &lt;code&gt;Web &lt;/code&gt;开发更加快捷，&lt;/li&gt;
&lt;li&gt;用于开发响应式布局、移动设备优先的 &lt;code&gt;WEB &lt;/code&gt;项目。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="css框架" scheme="https://github.com/haodex/haodex.github.io.git/categories/css%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="bootstrap" scheme="https://github.com/haodex/haodex.github.io.git/tags/bootstrap/"/>
    
  </entry>
  
</feed>
